name: 'Create PR Checklist'
on:
  pull_request_target:
    types: [opened, synchronize, reopened]

permissions:
  pull-requests: write
  statuses: write
  issues: write  # needed to add labels
  contents: read # needed to get collaborators

# Security guidelines
# Do not checkout code from the PR
# Do not run scripts or commands from the PR

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Check if PR author has admin access
        id: check_team_member
        uses: actions/github-script@v6
        with:
          script: |
            const prUser = context.payload.pull_request.user.login;
            console.log(`PR author: ${prUser}`);

            let isTeamMember = false;

            try {
              // Check the user's permission level on the repository
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: prUser,
              });
              
              console.log(`${prUser} has permission: ${permission.permission}`);
              
              // Team members typically have write, maintain, or admin access
              // Community contributors have read or no access
              if (['admin'].includes(permission.permission)) {
                console.log(`${prUser} has write access or higher - treating as team member`);
                isTeamMember = true;
              } else {
                console.log(`${prUser} has ${permission.permission} access - treating as community contributor`);
                isTeamMember = false;
              }
            } catch (error) {
              console.log(`Error checking permissions: ${error.message}`);
              // If we can't determine permissions, treat as community contributor (safer default)
              isTeamMember = false;
            }
            
            core.setOutput("is_team_member", isTeamMember);
            console.log(`Final result - is_team_member: ${isTeamMember}`);
            
            
      - name: Add community label
        if: steps.check_team_member.outputs.is_team_member == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['community']
            });
            
      - name: Create pending statuses for community PRs
        if: steps.check_team_member.outputs.is_team_member == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const checklist = [
              { key: "internal-ticket", context: "Create an internal ticket" },
              { key: "view-testing", context: "Complete view testing" },
            ];
            for (const item of checklist) {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'pending',
                context: item.context,
                description: 'Awaiting manual approval via checklist',
              });
            }
            
      - name: Auto-approve statuses for team member PRs
        if: steps.check_team_member.outputs.is_team_member == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const checklist = [
              { key: "internal-ticket", context: "Create an internal ticket" },
              { key: "view-testing", context: "Complete view testing" },
            ];
            for (const item of checklist) {
              await github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.payload.pull_request.head.sha,
                state: 'success',
                context: item.context,
                description: 'Auto-approved for team member',
              });
            }
            
      - name: Create PR checklist comment for community PRs
        if: steps.check_team_member.outputs.is_team_member == 'false'
        uses: wadackel/checkbox-workflow-action@v1
        with:
          id: pr-checklist
          number: ${{ github.event.pull_request.number }}
          config: |
            [
              {"internal-ticket": "Create an internal ticket"},
              {"view-testing": "Complete view testing"}
            ]
          message: |
            ## PR Checklist
            {{body}}