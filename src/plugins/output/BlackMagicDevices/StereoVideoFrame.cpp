/* -LICENSE-START-
** Copyright (c) 2024 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation (the
** "Software") to use, reproduce, display, distribute, sub-license, execute,
** and transmit the Software, and to prepare derivative works of the Software,
** and to permit third-parties to whom the Software is furnished to do so, in
** accordance with:
**
** (1) if the Software is obtained from Blackmagic Design, the End User License
** Agreement for the Software Development Kit ("EULA") available at
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
**
** (2) if the Software is obtained from any third party, such licensing terms
** as notified by that third party,
**
** and all subject to the following:
**
** (3) the copyright notices in the Software and this entire statement,
** including the above license grant, this restriction and the following
** disclaimer, must be included in all copies of the Software, in whole or in
** part, and all derivative works of the Software, unless such copies or
** derivative works are solely in the form of machine-executable object code
** generated by a source language processor.
**
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
**
** A copy of the Software is available free of charge at
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
**
** -LICENSE-END-
*/
//
//  StereoVideoFrame.cpp
//  Signal Generator
//

#include <BlackMagicDevices/StereoVideoFrame.h>
#include <stdexcept>
#include <cstring>

#define CompareREFIID(iid1, iid2) (memcmp(&iid1, &iid2, sizeof(REFIID)) == 0)

StereoVideoFrame::Provider::Provider(IDeckLinkMutableVideoFrame* parent,
                                     IDeckLinkMutableVideoFrame* right)
    : m_parentFrame(parent)
    , m_rightFrame(right)
    , m_refCount(1)
{
    if (m_parentFrame == nullptr)
    {
        throw std::invalid_argument(
            "At least a parent frame should be defined");
    }
    m_parentFrame->AddRef();
    if (m_rightFrame != nullptr)
    {
        m_rightFrame->AddRef();
    }
}

HRESULT StereoVideoFrame::Provider::QueryInterface(REFIID iid, LPVOID* ppv)
{
    if (ppv == nullptr)
    {
        return E_POINTER;
    }

    *ppv = nullptr;

#ifdef PLATFORM_DARWIN
    CFUUIDBytes iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
#else
    REFIID iunknown = IID_IUnknown;
#endif

    if (CompareREFIID(iid, iunknown))
    {
        *ppv = static_cast<IUnknown*>(this);
        AddRef();
        return S_OK;
    }

    if (CompareREFIID(iid, IID_IDeckLinkVideoFrame3DExtensions))
    {
        std::unique_ptr<StereoVideoFrame> stereoFrame(
            new StereoVideoFrame(m_parentFrame, m_rightFrame));
        *ppv = static_cast<IDeckLinkVideoFrame3DExtensions*>(
            stereoFrame.release());

        return S_OK;
    }

    return m_parentFrame->QueryInterface(iid, ppv);
}

ULONG StereoVideoFrame::Provider::AddRef()
{
#ifdef PLATFORM_WINDOWS
    return _InterlockedIncrement((volatile long*)&m_refCount);
#else
    return ++m_refCount;
#endif
}

ULONG StereoVideoFrame::Provider::Release()
{
#ifdef PLATFORM_WINDOWS
    ULONG newRefValue = _InterlockedDecrement((volatile long*)&m_refCount);
    if (!newRefValue)
        delete this;
    return newRefValue;
#else
    ULONG refCount = --m_refCount;
    if (refCount == 0)
    {
        delete this;
    }
    return refCount;
#endif
}

StereoVideoFrame::StereoVideoFrame(IDeckLinkMutableVideoFrame* parent,
                                   IDeckLinkMutableVideoFrame* right)
    : m_frameLeft(parent)
    , m_frameRight(right)
    , m_refCount(1)
{
}

HRESULT StereoVideoFrame::QueryInterface(REFIID iid, LPVOID* ppv)
{
#ifdef PLATFORM_DARWIN
    CFUUIDBytes iunknown = CFUUIDGetUUIDBytes(IUnknownUUID);
#else
    REFIID iunknown = IID_IUnknown;
#endif

    if (CompareREFIID(iid, iunknown)
        || CompareREFIID(iid, IID_IDeckLinkVideoFrame3DExtensions))
    {
        *ppv = static_cast<IDeckLinkVideoFrame3DExtensions*>(this);
    }
    else
    {
        *ppv = nullptr;
        return E_NOINTERFACE;
    }

    AddRef();
    return S_OK;
}

ULONG StereoVideoFrame::AddRef()
{
#ifdef PLATFORM_WINDOWS
    return _InterlockedIncrement((volatile long*)&m_refCount);
#else
    return ++m_refCount;
#endif
}

ULONG StereoVideoFrame::Release()
{
#ifdef PLATFORM_WINDOWS
    ULONG newRefValue = _InterlockedDecrement((volatile long*)&m_refCount);
    if (!newRefValue)
        delete this;
    return newRefValue;
#else
    ULONG refCount = --m_refCount;
    if (refCount == 0)
    {
        delete this;
    }
    return refCount;
#endif
}

BMDVideo3DPackingFormat StereoVideoFrame::Get3DPackingFormat()
{
    return bmdVideo3DPackingLeftOnly;
}

HRESULT
StereoVideoFrame::GetFrameForRightEye(IDeckLinkVideoFrame** rightEyeFrame)
{
    if (m_frameRight != nullptr)
    {
        return m_frameRight->QueryInterface(
            IID_IDeckLinkVideoFrame, reinterpret_cast<void**>(rightEyeFrame));
    }
    return S_FALSE;
}
