/* -LICENSE-START-
** Copyright (c) 2024 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation (the
** "Software") to use, reproduce, display, distribute, sub-license, execute,
** and transmit the Software, and to prepare derivative works of the Software,
** and to permit third-parties to whom the Software is furnished to do so, in
** accordance with:
**
** (1) if the Software is obtained from Blackmagic Design, the End User License
** Agreement for the Software Development Kit ("EULA") available at
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
**
** (2) if the Software is obtained from any third party, such licensing terms
** as notified by that third party,
**
** and all subject to the following:
**
** (3) the copyright notices in the Software and this entire statement,
** including the above license grant, this restriction and the following
** disclaimer, must be included in all copies of the Software, in whole or in
** part, and all derivative works of the Software, unless such copies or
** derivative works are solely in the form of machine-executable object code
** generated by a source language processor.
**
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
**
** A copy of the Software is available free of charge at
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
**
** -LICENSE-END-
*/
//
//  StereoVideoFrame.h
//  Signal Generator
//

#pragma once

#include <DeckLinkAPI.h>

#ifdef PLATFORM_WINDOWS
typedef __int32 int32_t;
#endif

#include <boost/thread.hpp>
#include <atomic>

/*
 * An example class which may be used to output a frame or pair of frames to
 * a 3D capable output.
 *
 * This class implements the IDeckLinkVideoFrame3DExtensions interface which can
 * be used to operate on the left frame following the BMD provider pattern
 *
 * The Provider class manages the relationship between the video frame and
 * the 3D extensions, and is associated with the video frame using
 * SetInterfaceProvider().
 *
 * Access to the right frame through the IDeckLinkVideoFrame3DExtensions
 * interface:
 *
 * IDeckLinkVideoFrame3DExtensions *threeDimensionalFrame;
 * result = leftEyeFrame->QueryInterface(IID_IDeckLinkVideoFrame3DExtensions,
 * reinterpret_cast<void**>(&threeDimensionalFrame);
 * result = threeDimensionalFrame->GetFrameForRightEye(&rightEyeFrame);
 *
 * After which IDeckLinkVideoFrame operations are performed directly
 * on the rightEyeFrame object.
 */

class StereoVideoFrame : public IDeckLinkVideoFrame3DExtensions
{
public:
    using ScopedLock = boost::mutex::scoped_lock;
    using Mutex = boost::mutex;
    using Condition = boost::condition_variable;

    virtual ~StereoVideoFrame();

    StereoVideoFrame(const StereoVideoFrame&) = delete;
    StereoVideoFrame& operator=(const StereoVideoFrame&) = delete;
    StereoVideoFrame(StereoVideoFrame&&) = delete;
    StereoVideoFrame& operator=(StereoVideoFrame&&) = delete;

    // IUnknown methods
    HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID* ppv) override;
    ULONG STDMETHODCALLTYPE AddRef() override;
    ULONG STDMETHODCALLTYPE Release() override;

    // IDeckLinkVideoFrame3DExtensions methods
    BMDVideo3DPackingFormat STDMETHODCALLTYPE Get3DPackingFormat() override;
    HRESULT STDMETHODCALLTYPE
    GetFrameForRightEye(/* out */ IDeckLinkVideoFrame** rightEyeFrame) override;

    class Provider : public IUnknown
    {
    public:
        Provider(IDeckLinkMutableVideoFrame* parent,
                 IDeckLinkMutableVideoFrame* right);
        virtual ~Provider();

        Provider(const Provider&) = delete;
        Provider& operator=(const Provider&) = delete;
        Provider(Provider&&) = delete;
        Provider& operator=(Provider&&) = delete;

        // IUnknown methods
        HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid,
                                                 LPVOID* ppv) override;
        ULONG STDMETHODCALLTYPE AddRef() override;
        ULONG STDMETHODCALLTYPE Release() override;

        IDeckLinkVideoFrame* GetLeftFrame() const { return m_parentFrame; }

    private:
        IDeckLinkMutableVideoFrame* m_parentFrame;
        IDeckLinkMutableVideoFrame* m_rightFrame;
        std::atomic<ULONG> m_refCount;
    };

private:
    friend class Provider;

    StereoVideoFrame(IDeckLinkMutableVideoFrame* owner,
                     IDeckLinkMutableVideoFrame* right);

    IDeckLinkMutableVideoFrame* m_frameLeft;
    IDeckLinkMutableVideoFrame* m_frameRight;
    std::atomic<ULONG> m_refCount;
};
