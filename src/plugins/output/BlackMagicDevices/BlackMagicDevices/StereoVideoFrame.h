/* -LICENSE-START-
** Copyright (c) 2024 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit ("EULA") available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/
//
//  StereoVideoFrame.h
//  Signal Generator
//

#pragma once

#include <DeckLinkAPI.h>

#ifdef PLATFORM_WINDOWS
typedef __int32 int32_t;
#endif

#include <boost/thread.hpp>

/*
 * An example class which may be used to output a frame or pair of frames to
 * a 3D capable output.
 *
 * This class implements the IDeckLinkVideoFrame interface which can
 * be used to operate on the left frame.
 *
 * Access to the right frame through the IDeckLinkVideoFrame3DExtensions
 * interface:
 *
 * 	IDeckLinkVideoFrame *rightEyeFrame;
 * 	hr = threeDimensionalFrame->GetFrameForRightEye(&rightEyeFrame);
 *
 * After which IDeckLinkVideoFrame operations are performed directly
 * on the rightEyeFrame object.
 */

class StereoVideoFrame : public IDeckLinkVideoFrame,
                         public IDeckLinkVideoFrame3DExtensions
{
 public:
  typedef boost::mutex::scoped_lock ScopedLock;
  typedef boost::mutex Mutex;
  typedef boost::condition_variable Condition;

  // IUnknown methods
  virtual HRESULT STDMETHODCALLTYPE QueryInterface( REFIID iid, LPVOID* ppv );
  virtual ULONG STDMETHODCALLTYPE AddRef( void );
  virtual ULONG STDMETHODCALLTYPE Release( void );

  // IDeckLinkVideoFrame methods
  virtual long STDMETHODCALLTYPE GetWidth( void );
  virtual long STDMETHODCALLTYPE GetHeight( void );
  virtual long STDMETHODCALLTYPE GetRowBytes( void );
  virtual BMDPixelFormat STDMETHODCALLTYPE GetPixelFormat( void );
  virtual BMDFrameFlags STDMETHODCALLTYPE GetFlags( void );
  virtual HRESULT STDMETHODCALLTYPE GetBytes( /* out */ void** buffer );

  virtual HRESULT STDMETHODCALLTYPE
  GetTimecode( /* in */ BMDTimecodeFormat format,
               /* out */ IDeckLinkTimecode** timecode );
  virtual HRESULT STDMETHODCALLTYPE
  GetAncillaryData( /* out */ IDeckLinkVideoFrameAncillary** ancillary );

  // IDeckLinkVideoFrame3DExtensions methods
  virtual BMDVideo3DPackingFormat STDMETHODCALLTYPE Get3DPackingFormat( void );
  virtual HRESULT STDMETHODCALLTYPE
  GetFrameForRightEye( /* out */ IDeckLinkVideoFrame** rightEyeFrame );

  StereoVideoFrame( IDeckLinkMutableVideoFrame* left,
                    IDeckLinkMutableVideoFrame* right = 0 );
  virtual ~StereoVideoFrame();

 protected:
  IDeckLinkMutableVideoFrame* m_frameLeft;
  IDeckLinkMutableVideoFrame* m_frameRight;
  int32_t m_refCount;
  Mutex m_refMutex;
};
