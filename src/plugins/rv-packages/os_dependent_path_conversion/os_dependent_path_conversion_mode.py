#
# Copyright (C) 2023  Autodesk, Inc. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
from rv import rvtypes
import platform
import re


class OSDependentPathConversionModeMinorMode(rvtypes.MinorMode):
    def fixpath(self, event):
        #
        #  The contents of the "incoming-source-path" looks like
        #  "filename;;tag".
        #

        def choosePath(prefix, re1, re2, path):
            m1 = re1.match(path)
            m2 = re2.match(path)
            try:
                remainder = m1.group(2) if m1 and m1.group(1) != "" else m2.group(2)
                final = prefix + remainder
            except Exception:
                final = path
            return final

        event.reject()

        previous = event.returnContents()
        parts = event.contents().split(";;")
        inpath = previous if (previous != "") else parts[0]
        os = platform.system()

        outpath = inpath

        #
        #  Restrict this conversion to paths contained in .rv session
        #  files only.  The "tag" is parts[1] and could be just about
        #  anything (you can pass in arbitrary tags when you load
        #  files). The one to watch out for is "explicit" which is
        #  generated by the code that shows the file browser and
        #  means we shouldn't touch it.
        #

        if len(parts) > 1 and parts[1] == "session":
            if os == "Darwin":
                outpath = choosePath(self._macPrefix, self._windowsRE, self._linuxRE, inpath)
            elif os == "Linux":
                outpath = choosePath(self._linuxPrefix, self._windowsRE, self._macRE, inpath)
            elif os == "Windows":
                outpath = choosePath(self._windowsPrefix, self._linuxRE, self._macRE, inpath)

        event.setReturnContent(outpath)

    def __init__(self):
        rvtypes.MinorMode.__init__(self)

        #
        #  NOTE: RV converts all windows back-slash style names
        #  to forward slash. So C:\foo\bar will come across as
        #  C:/foo/bar. Also UNC paths \\foo\bar become //foo/bar.
        #  Modify the None values below to set the prefixes appropriate
        #  for your environment.
        #

        self._linuxPrefix = None  # i.e. "/mnt/"     - end it with "/"
        self._windowsPrefix = None  # i.e. "//"        - the beginning of a UNC path
        self._macPrefix = None  # i.e. "/Network/" - end it with "/"

        #
        #  Don't touch these. They use the above to create regular
        #  expressions.
        #

        self._linuxRE = re.compile("(%s)(.*)" % self._linuxPrefix)
        self._windowsRE = re.compile("(%s)(.*)" % self._windowsPrefix)
        self._macRE = re.compile("(%s)(.*)" % self._macPrefix)

        initBindings = [("incoming-source-path", self.fixpath, "Change path for this platform")]

        #
        #  NOTE: All prefix values must be set for any translation
        #  to occur.
        #

        if self._linuxPrefix is None or self._windowsPrefix is None or self._macPrefix is None:
            initBindings = None

        self.init("os-dependent-path-conversion", initBindings, None, None)


def createMode():
    return OSDependentPathConversionModeMinorMode()
