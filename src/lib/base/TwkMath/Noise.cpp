//******************************************************************************
// Copyright (c) 2001-2002 Tweak Inc. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//******************************************************************************

#include <TwkMath/Noise.h>
#include <TwkMath/Math.h>
#include <TwkMath/Function.h>

namespace TwkMath
{

    // Unnamed namespaces are handy
    // because they can't be referred
    // to easily, so you can make sure
    // you never create a naming conflict
    // by using them for internal, local
    // stuff.
    namespace
    {

        //******************************************************************************
        // This permutation table is copied directly
        // from the source code distributed with the
        // "Texturing and Modelling: A Procedural
        // Approach" book, as is the basic structure of
        // the noise functions, though the code has been
        // optimized here.  The permutation tables are
        // designed by Darwin Peachy and the noise is
        // courtesy of Ken Perlin
        static const int TABSIZE = 256;
        static unsigned char perm[TABSIZE] = {
            225, 155, 210, 108, 175, 199, 221, 144, 203, 116, 70,  213, 69,
            158, 33,  252, 5,   82,  173, 133, 222, 139, 174, 27,  9,   71,
            90,  246, 75,  130, 91,  191, 169, 138, 2,   151, 194, 235, 81,
            7,   25,  113, 228, 159, 205, 253, 134, 142, 248, 65,  224, 217,
            22,  121, 229, 63,  89,  103, 96,  104, 156, 17,  201, 129, 36,
            8,   165, 110, 237, 117, 231, 56,  132, 211, 152, 20,  181, 111,
            239, 218, 170, 163, 51,  172, 157, 47,  80,  212, 176, 250, 87,
            49,  99,  242, 136, 189, 162, 115, 44,  43,  124, 94,  150, 16,
            141, 247, 32,  10,  198, 223, 255, 72,  53,  131, 84,  57,  220,
            197, 58,  50,  208, 11,  241, 28,  3,   192, 62,  202, 18,  215,
            153, 24,  76,  41,  15,  179, 39,  46,  55,  6,   128, 167, 23,
            188, 106, 34,  187, 140, 164, 73,  112, 182, 244, 195, 227, 13,
            35,  77,  196, 185, 26,  200, 226, 119, 31,  123, 168, 125, 249,
            68,  183, 230, 177, 135, 160, 180, 12,  1,   243, 148, 102, 166,
            38,  238, 251, 37,  240, 126, 64,  74,  161, 40,  184, 149, 171,
            178, 101, 66,  29,  59,  146, 61,  254, 107, 42,  86,  154, 4,
            236, 232, 120, 21,  233, 209, 45,  98,  193, 114, 78,  19,  206,
            14,  118, 127, 48,  79,  147, 85,  30,  207, 219, 54,  88,  234,
            190, 122, 95,  67,  143, 109, 137, 214, 145, 93,  92,  100, 245,
            0,   216, 186, 60,  83,  105, 97,  204, 52};

        //******************************************************************************
        // These gradients are generated by a simple routine
        // elsewhere.
        // They are uniformly distributed about a unit
        // sphere. Actually, the sphere is slightly bigger
        // than 1.
        //--------------------------------------------
        // This fakeVec3f struct is simply so we can initialize
        // the grads table below as we do.
        struct fakeVec3f
        {
            float x;
            float y;
            float z;
        };

        //******************************************************************************
        static fakeVec3f grads[TABSIZE] = {{0.859298f, 0.179306f, 0.662915f},
                                           {0.480033f, -0.327775f, 0.933880f},
                                           {0.928138f, -0.204316f, -0.553909f},
                                           {0.730083f, -0.752873f, -0.331905f},
                                           {0.678433f, 0.845707f, 0.185763f},
                                           {0.502868f, -0.972883f, -0.103063f},
                                           {-1.052650f, 0.122058f, -0.295008f},
                                           {-0.787631f, -0.524972f, -0.560395f},
                                           {-0.247246f, -0.841252f, -0.664202f},
                                           {0.518092f, -0.710398f, 0.660996f},
                                           {-0.209539f, 0.353224f, 1.020454f},
                                           {0.013433f, 1.041069f, -0.354959f},
                                           {0.635161f, 0.449000f, 0.777798f},
                                           {-0.103997f, 0.376028f, -1.028488f},
                                           {0.740876f, 0.791786f, 0.184876f},
                                           {-0.155784f, -0.307328f, 1.044644f},
                                           {0.542905f, -0.442297f, 0.848309f},
                                           {-0.366636f, 0.622927f, -0.829180f},
                                           {0.292078f, -1.048521f, 0.159043f},
                                           {-0.196912f, -0.844293f, 0.677049f},
                                           {0.670610f, -0.263256f, -0.831251f},
                                           {0.395852f, 1.001053f, 0.226262f},
                                           {0.402959f, 0.419997f, 0.933395f},
                                           {0.226668f, -0.176561f, 1.061813f},
                                           {0.904058f, -0.088135f, -0.620412f},
                                           {-0.869191f, -0.054814f, 0.671940f},
                                           {-0.029848f, 0.853262f, -0.693580f},
                                           {-1.023171f, -0.370178f, -0.161521f},
                                           {0.199586f, -0.995721f, 0.422734f},
                                           {0.259522f, -0.784454f, 0.726141f},
                                           {0.362647f, -0.650292f, -0.809696f},
                                           {-0.721095f, -0.457606f, -0.693267f},
                                           {0.322140f, -0.371345f, -0.984037f},
                                           {-0.099442f, 0.757454f, -0.791438f},
                                           {0.570821f, -0.061063f, -0.938315f},
                                           {0.309679f, -0.596465f, -0.870821f},
                                           {-0.297199f, 0.141197f, -1.049636f},
                                           {-0.398475f, 0.406791f, 0.941137f},
                                           {-0.256188f, 1.056297f, 0.169130f},
                                           {0.761169f, -0.037311f, -0.793240f},
                                           {-0.168758f, -0.842746f, -0.686513f},
                                           {0.318258f, 0.726523f, 0.762153f},
                                           {-0.182808f, 0.638568f, -0.876819f},
                                           {0.670448f, -0.488587f, 0.722345f},
                                           {0.214736f, -0.994230f, 0.418803f},
                                           {1.070219f, 0.176589f, 0.182885f},
                                           {-0.084455f, -0.900260f, -0.626418f},
                                           {-0.521794f, 0.563620f, 0.787441f},
                                           {-0.031061f, 0.256519f, -1.069221f},
                                           {-0.924272f, 0.538459f, 0.256483f},
                                           {0.868164f, -0.156176f, -0.657191f},
                                           {-0.752902f, 0.444139f, -0.667742f},
                                           {-0.712572f, -0.837704f, -0.022218f},
                                           {-0.718417f, -0.166916f, -0.816098f},
                                           {-0.628817f, 0.466111f, 0.772871f},
                                           {0.638454f, -0.248994f, 0.860453f},
                                           {-0.520484f, -0.645500f, 0.722791f},
                                           {0.086573f, 1.021894f, 0.397790f},
                                           {0.450761f, 0.836363f, 0.554356f},
                                           {-0.945699f, 0.457785f, 0.325709f},
                                           {0.288675f, -0.318142f, -1.012646f},
                                           {-0.957682f, -0.537433f, -0.063340f},
                                           {0.012158f, -0.689238f, -0.857207f},
                                           {0.386407f, 0.945754f, 0.407724f},
                                           {0.195375f, -1.027202f, 0.341592f},
                                           {-0.901919f, 0.627879f, -0.048061f},
                                           {0.510631f, -0.915053f, 0.334565f},
                                           {-0.306001f, 0.621007f, 0.854818f},
                                           {0.540314f, -0.609857f, 0.739009f},
                                           {-0.725922f, -0.769389f, 0.301790f},
                                           {0.865872f, 0.400035f, 0.547940f},
                                           {-0.958986f, 0.181930f, -0.507197f},
                                           {-0.477170f, -0.850355f, 0.509121f},
                                           {-0.975703f, 0.465704f, -0.202789f},
                                           {-0.452970f, 0.986815f, -0.176111f},
                                           {0.496094f, 0.172097f, -0.966578f},
                                           {-0.778614f, -0.633790f, 0.449523f},
                                           {-0.359491f, -0.277803f, -1.001794f},
                                           {0.699455f, -0.842321f, 0.106102f},
                                           {-0.658220f, 0.202656f, -0.857716f},
                                           {1.058842f, -0.107838f, 0.277892f},
                                           {-0.008584f, -0.987743f, -0.484034f},
                                           {-0.456916f, -0.375852f, -0.927342f},
                                           {1.093646f, 0.091832f, -0.074197f},
                                           {0.660124f, 0.027694f, 0.879471f},
                                           {-0.725437f, -0.247819f, -0.788877f},
                                           {-1.005794f, 0.160954f, 0.415297f},
                                           {0.894698f, 0.590329f, 0.247036f},
                                           {0.470628f, 0.711476f, -0.694487f},
                                           {-0.691838f, -0.312709f, 0.795973f},
                                           {-0.435396f, 0.017547f, -1.010011f},
                                           {-0.806850f, -0.178604f, 0.726012f},
                                           {-0.910269f, 0.080349f, -0.612335f},
                                           {0.293504f, 0.698201f, -0.797729f},
                                           {-0.022555f, 1.011990f, -0.430542f},
                                           {-0.349719f, -0.993263f, -0.318002f},
                                           {-1.013520f, 0.104948f, -0.414444f},
                                           {-0.719476f, -0.816210f, -0.161726f},
                                           {0.517810f, 0.970455f, -0.009454f},
                                           {-0.058976f, 1.005110f, -0.443030f},
                                           {-0.165494f, 1.021395f, -0.373316f},
                                           {0.788307f, -0.526827f, 0.557696f},
                                           {1.013358f, -0.424470f, -0.054143f},
                                           {0.165535f, -0.179076f, 1.072628f},
                                           {-0.984399f, -0.177879f, -0.457514f},
                                           {0.878405f, -0.643770f, 0.154805f},
                                           {-1.070591f, -0.216369f, -0.130458f},
                                           {0.463243f, -0.612124f, 0.787851f},
                                           {-1.031843f, 0.380129f, 0.028319f},
                                           {-0.001009f, -1.025975f, 0.396703f},
                                           {-0.306658f, -0.988292f, -0.373149f},
                                           {-0.231340f, -0.719607f, -0.799154f},
                                           {-0.592453f, -0.878036f, 0.296738f},
                                           {1.083403f, -0.101281f, 0.161180f},
                                           {0.846274f, -0.666324f, -0.223233f},
                                           {0.207179f, 0.802684f, 0.723032f},
                                           {-0.647105f, 0.492695f, 0.740613f},
                                           {-0.606366f, -0.671808f, -0.625295f},
                                           {0.069383f, 0.122623f, -1.090940f},
                                           {-0.195916f, -0.001389f, -1.082412f},
                                           {0.041421f, -1.010451f, 0.432752f},
                                           {-0.478516f, 0.976669f, 0.164744f},
                                           {-0.546624f, -0.039597f, -0.953748f},
                                           {0.043615f, -0.291998f, -1.059639f},
                                           {0.771597f, -0.064491f, 0.781332f},
                                           {0.796926f, 0.755744f, -0.061319f},
                                           {-0.200482f, 0.998107f, -0.416641f},
                                           {0.568374f, -0.940927f, -0.040075f},
                                           {-0.990094f, -0.294484f, -0.378144f},
                                           {0.867586f, -0.257010f, 0.625493f},
                                           {0.170388f, -0.319467f, 1.038705f},
                                           {-0.945082f, 0.057095f, -0.559965f},
                                           {-0.278142f, -0.290543f, -1.023827f},
                                           {0.742377f, 0.683396f, 0.438001f},
                                           {-0.808822f, 0.557603f, -0.494860f},
                                           {0.271815f, 0.232328f, 1.040260f},
                                           {0.327887f, -0.537372f, 0.902066f},
                                           {-1.080753f, -0.204545f, 0.011547f},
                                           {0.056224f, -0.195488f, -1.081029f},
                                           {-0.865708f, 0.650803f, -0.192368f},
                                           {0.176933f, 0.830058f, 0.699784f},
                                           {-0.192757f, 0.543515f, -0.936716f},
                                           {-0.489542f, 0.969479f, 0.174524f},
                                           {-0.379265f, -0.965635f, -0.365660f},
                                           {0.547658f, -0.432923f, 0.850087f},
                                           {0.256832f, -1.065080f, -0.098192f},
                                           {0.678599f, -0.164710f, -0.849926f},
                                           {-0.576901f, -0.483603f, -0.802068f},
                                           {0.466530f, -0.465150f, -0.880900f},
                                           {0.834266f, 0.501173f, 0.512666f},
                                           {-0.671983f, -0.721167f, 0.488218f},
                                           {-0.499609f, -0.354103f, 0.913784f},
                                           {0.782758f, 0.154216f, -0.757302f},
                                           {-0.955342f, 0.543014f, 0.049568f},
                                           {0.825553f, -0.091860f, -0.721127f},
                                           {-0.997435f, 0.349653f, 0.304740f},
                                           {0.084068f, -0.918239f, -0.599808f},
                                           {0.183556f, -0.817181f, -0.713108f},
                                           {0.932095f, 0.316415f, 0.491000f},
                                           {-0.777322f, 0.752986f, -0.196933f},
                                           {0.681489f, -0.187433f, -0.842877f},
                                           {-0.807346f, -0.417149f, 0.619821f},
                                           {-0.374720f, 0.857549f, -0.578095f},
                                           {0.279504f, -0.913939f, 0.544604f},
                                           {-0.925950f, 0.437411f, -0.401607f},
                                           {-0.055502f, 0.067944f, 1.096496f},
                                           {-0.452424f, -0.884233f, 0.472699f},
                                           {-0.243916f, 1.071726f, 0.043693f},
                                           {-1.073690f, 0.028464f, -0.237446f},
                                           {1.091167f, 0.072363f, -0.118817f},
                                           {-0.416309f, 1.005642f, -0.159282f},
                                           {-0.140958f, -0.434947f, -1.000476f},
                                           {-0.868693f, -0.652302f, 0.172842f},
                                           {-0.024896f, 0.988521f, -0.481878f},
                                           {0.758011f, 0.579874f, 0.546960f},
                                           {0.772543f, 0.386680f, 0.680923f},
                                           {0.737411f, 0.570765f, 0.583482f},
                                           {-0.789130f, -0.680047f, -0.353286f},
                                           {0.513318f, 0.495219f, 0.837414f},
                                           {-1.010534f, -0.398668f, 0.172873f},
                                           {0.301035f, 1.014163f, -0.301415f},
                                           {0.168468f, -0.302811f, 1.043994f},
                                           {-0.616163f, -0.633378f, 0.655114f},
                                           {-0.757558f, 0.535747f, 0.590830f},
                                           {-0.561631f, -0.753888f, -0.571159f},
                                           {-0.100817f, -0.428587f, 1.008042f},
                                           {-0.617078f, 0.630618f, 0.656914f},
                                           {-0.353608f, -0.383449f, -0.968467f},
                                           {-0.983470f, 0.439481f, 0.222810f},
                                           {0.766459f, -0.614089f, -0.495415f},
                                           {-0.234283f, -0.498727f, -0.952041f},
                                           {-0.995888f, 0.381807f, 0.269128f},
                                           {-1.020157f, -0.152018f, 0.382323f},
                                           {-0.007972f, -0.168075f, 1.087054f},
                                           {0.033023f, 0.029507f, -1.099108f},
                                           {-0.180049f, 0.232784f, 1.059903f},
                                           {0.525126f, -0.956052f, 0.142151f},
                                           {-0.636063f, 0.802320f, -0.402127f},
                                           {0.217912f, 0.891581f, -0.606298f},
                                           {-0.887544f, -0.601997f, 0.244673f},
                                           {-0.774550f, -0.200707f, -0.754844f},
                                           {0.766518f, -0.716035f, 0.331274f},
                                           {-1.040256f, -0.091828f, -0.345593f},
                                           {-0.679576f, 0.251751f, 0.827525f},
                                           {0.521050f, 0.719723f, -0.648464f},
                                           {-0.823012f, -0.386019f, 0.619388f},
                                           {-0.599275f, 0.873110f, 0.297573f},
                                           {0.365902f, -0.776719f, -0.687621f},
                                           {-0.190812f, -0.667503f, 0.853247f},
                                           {-0.293043f, -1.057379f, 0.077943f},
                                           {0.674591f, 0.118490f, 0.860748f},
                                           {-1.091228f, -0.108326f, -0.086523f},
                                           {-0.610026f, 0.806075f, -0.433719f},
                                           {0.368749f, 0.311928f, 0.988294f},
                                           {0.359902f, 0.042251f, 1.038598f},
                                           {1.069738f, 0.244734f, 0.075932f},
                                           {-0.077991f, -0.381875f, -1.028635f},
                                           {-0.037985f, -1.069292f, -0.255290f},
                                           {-0.258040f, 0.325441f, -1.018579f},
                                           {-0.695158f, 0.551840f, -0.649791f},
                                           {0.011849f, 1.040895f, 0.355523f},
                                           {0.508406f, -0.908863f, 0.354248f},
                                           {0.993983f, -0.456718f, 0.115783f},
                                           {-0.323685f, -1.032245f, -0.199242f},
                                           {0.001564f, 0.680855f, 0.863964f},
                                           {-0.171694f, -0.057440f, 1.084999f},
                                           {0.220824f, 0.131701f, -1.069529f},
                                           {0.181027f, -0.460430f, 0.982463f},
                                           {0.026664f, 0.405213f, 1.022297f},
                                           {0.773620f, 0.234439f, -0.746023f},
                                           {0.123414f, -1.088256f, -0.102313f},
                                           {-0.041461f, -0.325142f, 1.050030f},
                                           {0.882629f, -0.429251f, -0.496700f},
                                           {0.098843f, 1.024311f, 0.388610f},
                                           {-0.346013f, -0.536049f, 0.896062f},
                                           {-0.780932f, -0.080897f, -0.770455f},
                                           {0.181167f, 0.577588f, -0.918461f},
                                           {0.767796f, -0.571295f, 0.542320f},
                                           {-0.207467f, 0.237110f, 1.053915f},
                                           {1.007841f, -0.061945f, -0.436371f},
                                           {-0.083953f, 0.925178f, -0.589065f},
                                           {1.060442f, 0.247173f, -0.156100f},
                                           {0.394222f, -0.018028f, 1.026774f},
                                           {0.189764f, 0.750934f, 0.781082f},
                                           {-0.572760f, 0.312508f, 0.885599f},
                                           {-0.639103f, -0.370150f, 0.815191f},
                                           {0.606706f, -0.679379f, 0.616728f},
                                           {-0.630823f, -0.803866f, 0.407262f},
                                           {0.221223f, -0.337384f, -1.023344f},
                                           {0.093836f, -0.969358f, -0.511409f},
                                           {1.084668f, -0.171704f, -0.063348f},
                                           {-0.821510f, -0.254773f, 0.685721f},
                                           {0.716948f, -0.628869f, 0.548188f},
                                           {-0.716838f, -0.542706f, -0.633730f},
                                           {0.403930f, -0.668498f, -0.774565f},
                                           {0.942518f, -0.563293f, -0.066042f}};

        //******************************************************************************
        static inline int getIndex(int x)
        {
            return (int)perm[betterMod(x, 256)];
        }

        //******************************************************************************
        static inline int getIndex(int x, int y)
        {
            return getIndex(getIndex(x) + y);
        }

        //******************************************************************************
        static inline int getIndex(int x, int y, int z)
        {
            return getIndex(getIndex(getIndex(x) + y) + z);
        }

        //******************************************************************************
        static inline int getIndex(int x, int y, int z, int w)
        {
            return getIndex(getIndex(getIndex(getIndex(x) + y) + z) + w);
        }

        //******************************************************************************
        static inline float cubic(float t)
        {
            //     return ( 3.0f - 2.0f * t ) * t * t;

            return ((((6 * t) - 15) * t) + 10) * t * t * t;
        }

        //******************************************************************************
        static inline float cubicGrad(float t)
        {
            //     return ( 6.0f - 6.0f * t ) * t;

            return (((30 * t - 60) * t) + 30) * t * t;
        }

    } // End unnamed namespace

    //******************************************************************************
    float noise(float x)
    {
        // Get cell coordinates
        int ix = (int)floorf(x);
        float fx = x - (float)ix;

        // Get corner gradients
        Vec3f& grad0 = ((Vec3f*)grads)[getIndex(ix)];
        Vec3f& grad1 = ((Vec3f*)grads)[getIndex(ix + 1)];

        // Projections, and their gradients
        float g0 = grad0.x * fx;
        float g1 = grad1.x * (fx - 1.0f);

        // X interpolations
        return g0 + cubic(fx) * (g1 - g0);
    }

    //******************************************************************************
    float noiseAndGrad(float x, float& gradX)
    {
        // Get cell coordinates
        int ix = (int)floorf(x);
        float fx = x - (float)ix;

        // Get corner gradients
        Vec3f& grad0 = ((Vec3f*)grads)[getIndex(ix)];
        Vec3f& grad1 = ((Vec3f*)grads)[getIndex(ix + 1)];

        // Projections, and their gradients
        float g0 = grad0.x * fx;
        float dg0dx = grad0.x;
        float g1 = grad1.x * (fx - 1.0f);
        float dg1dx = grad1.x;

        // X interpolations
        float cx = cubic(fx);
        gradX = dg0dx + cx * (dg1dx - dg0dx) + cubicGrad(fx) * (g1 - g0);
        return g0 + cx * (g1 - g0);
    }

    //******************************************************************************
    float noise(const Vec2f& v)
    {
        // Get cell coordinates
        int ix = (int)floorf(v.x);
        float fx = v.x - (float)ix;
        int iy = (int)floorf(v.y);
        float fy = v.y - (float)iy;

        // Get corner gradients
        Vec3f& grad0 = ((Vec3f*)grads)[getIndex(ix, iy)];
        Vec3f& grad1 = ((Vec3f*)grads)[getIndex(ix + 1, iy)];
        Vec3f& grad2 = ((Vec3f*)grads)[getIndex(ix, iy + 1)];
        Vec3f& grad3 = ((Vec3f*)grads)[getIndex(ix + 1, iy + 1)];

        // Projections, and their gradients
        float g0 = grad0.x * fx + grad0.y * fy;
        float g1 = grad1.x * (fx - 1.0f) + grad1.y * fy;
        float g2 = grad2.x * fx + grad2.y * (fy - 1.0f);
        float g3 = grad3.x * (fx - 1.0f) + grad3.y * (fy - 1.0f);

        // X interpolations
        float cx = cubic(fx);
        float g0x = g0 + cx * (g1 - g0);
        float g1x = g2 + cx * (g3 - g2);

        // Y interpolations
        return g0x + cubic(fy) * (g1x - g0x);
    }

    //******************************************************************************
    float noiseAndGrad(const Vec2f& v, Vec2f& grad)
    {
        // Get cell coordinates
        int ix = (int)floorf(v.x);
        float fx = v.x - (float)ix;
        int iy = (int)floorf(v.y);
        float fy = v.y - (float)iy;

        // Get corner gradients
        Vec3f& grad0 = ((Vec3f*)grads)[getIndex(ix, iy)];
        Vec3f& grad1 = ((Vec3f*)grads)[getIndex(ix + 1, iy)];
        Vec3f& grad2 = ((Vec3f*)grads)[getIndex(ix, iy + 1)];
        Vec3f& grad3 = ((Vec3f*)grads)[getIndex(ix + 1, iy + 1)];

        // Projections, and their gradients
        float g0 = grad0.x * fx + grad0.y * fy;
        float dg0dx = grad0.x;
        float dg0dy = grad0.y;
        float g1 = grad1.x * (fx - 1.0f) + grad1.y * fy;
        float dg1dx = grad1.x;
        float dg1dy = grad1.y;
        float g2 = grad2.x * fx + grad2.y * (fy - 1.0f);
        float dg2dx = grad2.x;
        float dg2dy = grad2.y;
        float g3 = grad3.x * (fx - 1.0f) + grad3.y * (fy - 1.0f);
        float dg3dx = grad3.x;
        float dg3dy = grad3.y;

        // X interpolations
        float cx = cubic(fx);
        float cgx = cubicGrad(fx);
        float g0x = g0 + cx * (g1 - g0);
        float dg0xdx = dg0dx + cx * (dg1dx - dg0dx) + cgx * (g1 - g0);
        float dg0xdy = dg0dy + cx * (dg1dy - dg0dy);
        float g1x = g2 + cx * (g3 - g2);
        float dg1xdx = dg2dx + cx * (dg3dx - dg2dx) + cgx * (g3 - g2);
        float dg1xdy = dg2dy + cx * (dg3dy - dg2dy);

        // Y interpolations
        float cy = cubic(fy);
        float cgy = cubicGrad(fy);
        grad.x = dg0xdx + cy * (dg1xdx - dg0xdx);
        grad.y = dg0xdy + cy * (dg1xdy - dg0xdy) + cgy * (g1x - g0x);
        return g0x + cy * (g1x - g0x);
    }

    //******************************************************************************
    float noise(const Vec3f& v)
    {
        // Get cell coordinates
        int ix = (int)floorf(v.x);
        float fx = v.x - (float)ix;
        int iy = (int)floorf(v.y);
        float fy = v.y - (float)iy;
        int iz = (int)floorf(v.z);
        float fz = v.z - (float)iz;

        // Get corner gradients
        Vec3f& grad0 = ((Vec3f*)grads)[getIndex(ix, iy, iz)];
        Vec3f& grad1 = ((Vec3f*)grads)[getIndex(ix + 1, iy, iz)];
        Vec3f& grad2 = ((Vec3f*)grads)[getIndex(ix, iy + 1, iz)];
        Vec3f& grad3 = ((Vec3f*)grads)[getIndex(ix + 1, iy + 1, iz)];
        Vec3f& grad4 = ((Vec3f*)grads)[getIndex(ix, iy, iz + 1)];
        Vec3f& grad5 = ((Vec3f*)grads)[getIndex(ix + 1, iy, iz + 1)];
        Vec3f& grad6 = ((Vec3f*)grads)[getIndex(ix, iy + 1, iz + 1)];
        Vec3f& grad7 = ((Vec3f*)grads)[getIndex(ix + 1, iy + 1, iz + 1)];

        // Projections, and their gradients
        float g0 = grad0.x * fx + grad0.y * fy + grad0.z * fz;
        float g1 = grad1.x * (fx - 1.0f) + grad1.y * fy + grad1.z * fz;
        float g2 = grad2.x * fx + grad2.y * (fy - 1.0f) + grad2.z * fz;
        float g3 = grad3.x * (fx - 1.0f) + grad3.y * (fy - 1.0f) + grad3.z * fz;

        float g4 = grad4.x * fx + grad4.y * fy + grad4.z * (fz - 1.0f);
        float g5 = grad5.x * (fx - 1.0f) + grad5.y * fy + grad5.z * (fz - 1.0f);

        float g6 = grad6.x * fx + grad6.y * (fy - 1.0f) + grad6.z * (fz - 1.0f);

        float g7 = grad7.x * (fx - 1.0f) + grad7.y * (fy - 1.0f)
                   + grad7.z * (fz - 1.0f);

        // X interpolations
        float cx = cubic(fx);
        float g0x = g0 + cx * (g1 - g0);
        float g1x = g2 + cx * (g3 - g2);
        float g2x = g4 + cx * (g5 - g4);
        float g3x = g6 + cx * (g7 - g6);

        // Y interpolations
        float cy = cubic(fy);
        float g0y = g0x + cy * (g1x - g0x);
        float g1y = g2x + cy * (g3x - g2x);

        // Z interpolations
        return g0y + cubic(fz) * (g1y - g0y);
    }

    //******************************************************************************
    float noiseAndGrad(const Vec3f& v, Vec3f& grad)
    {
        // Get cell coordinates
        int ix = (int)floorf(v.x);
        float fx = v.x - (float)ix;
        int iy = (int)floorf(v.y);
        float fy = v.y - (float)iy;
        int iz = (int)floorf(v.z);
        float fz = v.z - (float)iz;

        // Get corner gradients
        Vec3f& grad0 = ((Vec3f*)grads)[getIndex(ix, iy, iz)];
        Vec3f& grad1 = ((Vec3f*)grads)[getIndex(ix + 1, iy, iz)];
        Vec3f& grad2 = ((Vec3f*)grads)[getIndex(ix, iy + 1, iz)];
        Vec3f& grad3 = ((Vec3f*)grads)[getIndex(ix + 1, iy + 1, iz)];
        Vec3f& grad4 = ((Vec3f*)grads)[getIndex(ix, iy, iz + 1)];
        Vec3f& grad5 = ((Vec3f*)grads)[getIndex(ix + 1, iy, iz + 1)];
        Vec3f& grad6 = ((Vec3f*)grads)[getIndex(ix, iy + 1, iz + 1)];
        Vec3f& grad7 = ((Vec3f*)grads)[getIndex(ix + 1, iy + 1, iz + 1)];

        // Projections, and their gradients
        float g0 = grad0.x * fx + grad0.y * fy + grad0.z * fz;
        float dg0dx = grad0.x;
        float dg0dy = grad0.y;
        float dg0dz = grad0.z;
        float g1 = grad1.x * (fx - 1.0f) + grad1.y * fy + grad1.z * fz;
        float dg1dx = grad1.x;
        float dg1dy = grad1.y;
        float dg1dz = grad1.z;
        float g2 = grad2.x * fx + grad2.y * (fy - 1.0f) + grad2.z * fz;
        float dg2dx = grad2.x;
        float dg2dy = grad2.y;
        float dg2dz = grad2.z;
        float g3 = grad3.x * (fx - 1.0f) + grad3.y * (fy - 1.0f) + grad3.z * fz;

        float dg3dx = grad3.x;
        float dg3dy = grad3.y;
        float dg3dz = grad3.z;
        float g4 = grad4.x * fx + grad4.y * fy + grad4.z * (fz - 1.0f);
        float dg4dx = grad4.x;
        float dg4dy = grad4.y;
        float dg4dz = grad4.z;
        float g5 = grad5.x * (fx - 1.0f) + grad5.y * fy + grad5.z * (fz - 1.0f);

        float dg5dx = grad5.x;
        float dg5dy = grad5.y;
        float dg5dz = grad5.z;
        float g6 = grad6.x * fx + grad6.y * (fy - 1.0f) + grad6.z * (fz - 1.0f);

        float dg6dx = grad6.x;
        float dg6dy = grad6.y;
        float dg6dz = grad6.z;
        float g7 = grad7.x * (fx - 1.0f) + grad7.y * (fy - 1.0f)
                   + grad7.z * (fz - 1.0f);
        float dg7dx = grad7.x;
        float dg7dy = grad7.y;
        float dg7dz = grad7.z;

        // X interpolations
        float cx = cubic(fx);
        float cgx = cubicGrad(fx);
        float g0x = g0 + cx * (g1 - g0);
        float dg0xdx = dg0dx + cx * (dg1dx - dg0dx) + cgx * (g1 - g0);
        float dg0xdy = dg0dy + cx * (dg1dy - dg0dy);
        float dg0xdz = dg0dz + cx * (dg1dz - dg0dz);
        float g1x = g2 + cx * (g3 - g2);
        float dg1xdx = dg2dx + cx * (dg3dx - dg2dx) + cgx * (g3 - g2);
        float dg1xdy = dg2dy + cx * (dg3dy - dg2dy);
        float dg1xdz = dg2dz + cx * (dg3dz - dg2dz);
        float g2x = g4 + cx * (g5 - g4);
        float dg2xdx = dg4dx + cx * (dg5dx - dg4dx) + cgx * (g5 - g4);
        float dg2xdy = dg4dy + cx * (dg5dy - dg4dy);
        float dg2xdz = dg4dz + cx * (dg5dz - dg4dz);
        float g3x = g6 + cx * (g7 - g6);
        float dg3xdx = dg6dx + cx * (dg7dx - dg6dx) + cgx * (g7 - g6);
        float dg3xdy = dg6dy + cx * (dg7dy - dg6dy);
        float dg3xdz = dg6dz + cx * (dg7dz - dg6dz);

        // Y interpolations
        float cy = cubic(fy);
        float cgy = cubicGrad(fy);
        float g0y = g0x + cy * (g1x - g0x);
        float dg0ydx = dg0xdx + cy * (dg1xdx - dg0xdx);
        float dg0ydy = dg0xdy + cy * (dg1xdy - dg0xdy) + cgy * (g1x - g0x);
        float dg0ydz = dg0xdz + cy * (dg1xdz - dg0xdz);
        float g1y = g2x + cy * (g3x - g2x);
        float dg1ydx = dg2xdx + cy * (dg3xdx - dg2xdx);
        float dg1ydy = dg2xdy + cy * (dg3xdy - dg2xdy) + cgy * (g3x - g2x);
        float dg1ydz = dg2xdz + cy * (dg3xdz - dg2xdz);

        // Z interpolations
        float cz = cubic(fz);
        float cgz = cubicGrad(fz);
        grad.x = dg0ydx + cz * (dg1ydx - dg0ydx);
        grad.y = dg0ydy + cz * (dg1ydy - dg0ydy);
        grad.z = dg0ydz + cz * (dg1ydz - dg0ydz) + cgz * (g1y - g0y);
        return g0y + cz * (g1y - g0y);
    }

    //-*****************************************************************************
    static inline float fade(float t)
    {
        return t * t * t * (t * (t * 6.0f - 15.0f) + 10.0f);
    }

    //-*****************************************************************************
    static float grad(int hash, float x, float y, float z, float w)
    {
        // Convert lo 5 bits of hash to 32 grad directions.
        int h = hash & 31;

        // X,Y,Z
        float a = y;
        float b = z;
        float c = w;

        // Or, depending on the high order 2 bits..
        switch (h >> 3)
        {
        case 1:
            // W,X,Y
            a = w;
            b = x;
            c = y;
            break;
        case 2:
            // Z,W,X
            a = z;
            b = w;
            c = x;
            break;
        case 3:
            // Y,Z,W
            a = y;
            b = z;
            c = w;
            break;
        }

        return ((h & 4) == 0 ? -a : a) + ((h & 2) == 0 ? -b : b)
               + ((h & 1) == 0 ? -c : c);
    }

    //-*****************************************************************************
    // IMPROVED 4D NOISE
    float noise(float x, float y, float z, float w)
    {
        static const unsigned char p[512] = {
            151, 160, 137, 91,  90,  15,  131, 13,  201, 95,  96,  53,  194,
            233, 7,   225, 140, 36,  103, 30,  69,  142, 8,   99,  37,  240,
            21,  10,  23,  190, 6,   148, 247, 120, 234, 75,  0,   26,  197,
            62,  94,  252, 219, 203, 117, 35,  11,  32,  57,  177, 33,  88,
            237, 149, 56,  87,  174, 20,  125, 136, 171, 168, 68,  175, 74,
            165, 71,  134, 139, 48,  27,  166, 77,  146, 158, 231, 83,  111,
            229, 122, 60,  211, 133, 230, 220, 105, 92,  41,  55,  46,  245,
            40,  244, 102, 143, 54,  65,  25,  63,  161, 1,   216, 80,  73,
            209, 76,  132, 187, 208, 89,  18,  169, 200, 196, 135, 130, 116,
            188, 159, 86,  164, 100, 109, 198, 173, 186, 3,   64,  52,  217,
            226, 250, 124, 123, 5,   202, 38,  147, 118, 126, 255, 82,  85,
            212, 207, 206, 59,  227, 47,  16,  58,  17,  182, 189, 28,  42,
            223, 183, 170, 213, 119, 248, 152, 2,   44,  154, 163, 70,  221,
            153, 101, 155, 167, 43,  172, 9,   129, 22,  39,  253, 19,  98,
            108, 110, 79,  113, 224, 232, 178, 185, 112, 104, 218, 246, 97,
            228, 251, 34,  242, 193, 238, 210, 144, 12,  191, 179, 162, 241,
            81,  51,  145, 235, 249, 14,  239, 107, 49,  192, 214, 31,  181,
            199, 106, 157, 184, 84,  204, 176, 115, 121, 50,  45,  127, 4,
            150, 254, 138, 236, 205, 93,  222, 114, 67,  29,  24,  72,  243,
            141, 128, 195, 78,  66,  215, 61,  156, 180,

            151, 160, 137, 91,  90,  15,  131, 13,  201, 95,  96,  53,  194,
            233, 7,   225, 140, 36,  103, 30,  69,  142, 8,   99,  37,  240,
            21,  10,  23,  190, 6,   148, 247, 120, 234, 75,  0,   26,  197,
            62,  94,  252, 219, 203, 117, 35,  11,  32,  57,  177, 33,  88,
            237, 149, 56,  87,  174, 20,  125, 136, 171, 168, 68,  175, 74,
            165, 71,  134, 139, 48,  27,  166, 77,  146, 158, 231, 83,  111,
            229, 122, 60,  211, 133, 230, 220, 105, 92,  41,  55,  46,  245,
            40,  244, 102, 143, 54,  65,  25,  63,  161, 1,   216, 80,  73,
            209, 76,  132, 187, 208, 89,  18,  169, 200, 196, 135, 130, 116,
            188, 159, 86,  164, 100, 109, 198, 173, 186, 3,   64,  52,  217,
            226, 250, 124, 123, 5,   202, 38,  147, 118, 126, 255, 82,  85,
            212, 207, 206, 59,  227, 47,  16,  58,  17,  182, 189, 28,  42,
            223, 183, 170, 213, 119, 248, 152, 2,   44,  154, 163, 70,  221,
            153, 101, 155, 167, 43,  172, 9,   129, 22,  39,  253, 19,  98,
            108, 110, 79,  113, 224, 232, 178, 185, 112, 104, 218, 246, 97,
            228, 251, 34,  242, 193, 238, 210, 144, 12,  191, 179, 162, 241,
            81,  51,  145, 235, 249, 14,  239, 107, 49,  192, 214, 31,  181,
            199, 106, 157, 184, 84,  204, 176, 115, 121, 50,  45,  127, 4,
            150, 254, 138, 236, 205, 93,  222, 114, 67,  29,  24,  72,  243,
            141, 128, 195, 78,  66,  215, 61,  156, 180};

        // Find unit hypercube that contains point.
        int X = ((int)floorf(x)) & 255;
        int Y = ((int)floorf(y)) & 255;
        int Z = ((int)floorf(z)) & 255;
        int W = ((int)floorf(w)) & 255;

        // Find relative X,Y,Z,W of point in cube
        x -= floorf(x);
        y -= floorf(y);
        z -= floorf(z);
        w -= floorf(w);

        // Compute fade curves for each of X,Y,Z,W
        float a = fade(x);
        float b = fade(y);
        float c = fade(z);
        float d = fade(w);

        // Hash coordinates of the 16 corners of the hypercube
        int A = p[X] + Y;
        int AA = p[A] + Z;
        int AB = p[A + 1] + Z;
        int B = p[X + 1] + Y;
        int BA = p[B] + Z;
        int BB = p[B + 1] + Z;
        int AAA = p[AA] + W;
        int AAB = p[AA + 1] + W;
        int ABA = p[AB] + W;
        int ABB = p[AB + 1] + W;
        int BAA = p[BA] + W;
        int BAB = p[BA + 1] + W;
        int BBA = p[BB] + W;
        int BBB = p[BB + 1] + W;

        // Interpolate down.
        return lerp(
            d,
            lerp(c,
                 lerp(b,
                      lerp(a, grad(p[AAA], x, y, z, w),
                           grad(p[BAA], x - 1, y, z, w)),
                      lerp(a, grad(p[ABA], x, y - 1, z, w),
                           grad(p[BBA], x - 1, y - 1, z, w))),

                 lerp(b,
                      lerp(a, grad(p[AAB], x, y, z - 1, w),
                           grad(p[BAB], x - 1, y, z - 1, w)),
                      lerp(a, grad(p[ABB], x, y - 1, z - 1, w),
                           grad(p[BBB], x - 1, y - 1, z - 1, w)))),

            lerp(c,
                 lerp(b,
                      lerp(a, grad(p[AAA + 1], x, y, z, w - 1),
                           grad(p[BAA + 1], x - 1, y, z, w - 1)),
                      lerp(a, grad(p[ABA + 1], x, y - 1, z, w - 1),
                           grad(p[BBA + 1], x - 1, y - 1, z, w - 1))),

                 lerp(b,
                      lerp(a, grad(p[AAB + 1], x, y, z - 1, w - 1),
                           grad(p[BAB + 1], x - 1, y, z - 1, w - 1)),
                      lerp(a, grad(p[ABB + 1], x, y - 1, z - 1, w - 1),
                           grad(p[BBB + 1], x - 1, y - 1, z - 1, w - 1)))));
    }

} // End namespace TwkMath
