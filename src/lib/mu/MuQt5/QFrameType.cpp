//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QFrameType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QTabletEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QMoveEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QHideEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QFrame::~MuQt_QFrame()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QFrame::MuQt_QFrame(Pointer muobj, const CallEnvironment* ce,
                             QWidget* parent, Qt::WindowFlags f)
        : QFrame(parent, f)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QFrameType>(
            c->internName("qt.QFrame"));
    }

    QSize MuQt_QFrame::sizeHint() const
    {
        if (!_env)
            return QFrame::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFrame::sizeHint();
        }
    }

    void MuQt_QFrame::changeEvent(QEvent* ev)
    {
        if (!_env)
        {
            QFrame::changeEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, ev, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::changeEvent(ev);
        }
    }

    bool MuQt_QFrame::event(QEvent* e)
    {
        if (!_env)
            return QFrame::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFrame::event(e);
        }
    }

    void MuQt_QFrame::paintEvent(QPaintEvent* _p14)
    {
        if (!_env)
        {
            QFrame::paintEvent(_p14);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, _p14, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::paintEvent(_p14);
        }
    }

    bool MuQt_QFrame::hasHeightForWidth() const
    {
        if (!_env)
            return QFrame::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFrame::hasHeightForWidth();
        }
    }

    int MuQt_QFrame::heightForWidth(int w) const
    {
        if (!_env)
            return QFrame::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QFrame::heightForWidth(w);
        }
    }

    QVariant MuQt_QFrame::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QFrame::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QFrame::inputMethodQuery(query);
        }
    }

    QSize MuQt_QFrame::minimumSizeHint() const
    {
        if (!_env)
            return QFrame::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFrame::minimumSizeHint();
        }
    }

    void MuQt_QFrame::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QFrame::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::closeEvent(event);
        }
    }

    void MuQt_QFrame::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QFrame::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::contextMenuEvent(event);
        }
    }

    void MuQt_QFrame::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QFrame::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::dragEnterEvent(event);
        }
    }

    void MuQt_QFrame::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QFrame::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::dragLeaveEvent(event);
        }
    }

    void MuQt_QFrame::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QFrame::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::dragMoveEvent(event);
        }
    }

    void MuQt_QFrame::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QFrame::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::dropEvent(event);
        }
    }

    void MuQt_QFrame::enterEvent(QEvent* event)
    {
        if (!_env)
        {
            QFrame::enterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::enterEvent(event);
        }
    }

    void MuQt_QFrame::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QFrame::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::focusInEvent(event);
        }
    }

    bool MuQt_QFrame::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QFrame::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFrame::focusNextPrevChild(next);
        }
    }

    void MuQt_QFrame::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QFrame::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::focusOutEvent(event);
        }
    }

    void MuQt_QFrame::hideEvent(QHideEvent* event)
    {
        if (!_env)
        {
            QFrame::hideEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, event, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::hideEvent(event);
        }
    }

    void MuQt_QFrame::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QFrame::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::keyPressEvent(event);
        }
    }

    void MuQt_QFrame::keyReleaseEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QFrame::keyReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::keyReleaseEvent(event);
        }
    }

    void MuQt_QFrame::leaveEvent(QEvent* event)
    {
        if (!_env)
        {
            QFrame::leaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::leaveEvent(event);
        }
    }

    void MuQt_QFrame::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QFrame::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QFrame::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QFrame::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::mouseMoveEvent(event);
        }
    }

    void MuQt_QFrame::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QFrame::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::mousePressEvent(event);
        }
    }

    void MuQt_QFrame::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QFrame::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::mouseReleaseEvent(event);
        }
    }

    void MuQt_QFrame::moveEvent(QMoveEvent* event)
    {
        if (!_env)
        {
            QFrame::moveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMoveEventType>(c, event, "qt.QMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::moveEvent(event);
        }
    }

    void MuQt_QFrame::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QFrame::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::resizeEvent(event);
        }
    }

    void MuQt_QFrame::showEvent(QShowEvent* event)
    {
        if (!_env)
        {
            QFrame::showEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, event, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::showEvent(event);
        }
    }

    void MuQt_QFrame::tabletEvent(QTabletEvent* event)
    {
        if (!_env)
        {
            QFrame::tabletEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTabletEventType>(c, event, "qt.QTabletEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::tabletEvent(event);
        }
    }

    void MuQt_QFrame::wheelEvent(QWheelEvent* event)
    {
        if (!_env)
        {
            QFrame::wheelEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QWheelEventType>(c, event, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFrame::wheelEvent(event);
        }
    }

    int MuQt_QFrame::metric(PaintDeviceMetric m) const
    {
        if (!_env)
            return QFrame::metric(m);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(m);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QFrame::metric(m);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QFrameType::QFrameType(Context* c, const char* name, Class* super,
                           Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QFrameType::~QFrameType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QFrame_QFrame_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QFrame* w = object<QFrame>(widget))
        {
            QFrameType* type = c->findSymbolOfTypeByQualifiedName<QFrameType>(
                c->internName("qt.QFrame"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QFrame_QFrame_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QFrame_QFrame_QFrame_QFrame_QWidget_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_parent,
                                                       int param_f)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        Qt::WindowFlags arg2 = (Qt::WindowFlags)(param_f);
        setobject(param_this,
                  new MuQt_QFrame(param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    int qt_QFrame_frameStyle_int_QFrame(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        return arg0->frameStyle();
    }

    void qt_QFrame_setFrameStyle_void_QFrame_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_style)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        int arg1 = (int)(param_style);
        arg0->setFrameStyle(arg1);
    }

    Pointer qt_QFrame_sizeHint_QSize_QFrame(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QFrame::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QFrame_changeEvent_void_QFrame_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->changeEvent_pub(arg1);
    }

    bool qt_QFrame_event_bool_QFrame_QEvent(Mu::Thread& NODE_THREAD,
                                            Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0) ? ((MuQt_QFrame*)arg0)->event_pub_parent(arg1)
                                  : ((MuQt_QFrame*)arg0)->event_pub(arg1);
    }

    void qt_QFrame_paintEvent_void_QFrame_QPaintEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param__p14)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param__p14);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->paintEvent_pub(arg1);
    }

    bool qt_QFrame_hasHeightForWidth_bool_QFrame(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        return isMuQtObject(arg0) ? arg0->QFrame::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QFrame_heightForWidth_int_QFrame_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this, int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QFrame::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    Pointer qt_QFrame_inputMethodQuery_QVariant_QFrame_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QFrame::inputMethodQuery(arg1), "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer qt_QFrame_minimumSizeHint_QSize_QFrame(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QFrame::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    void qt_QFrame_closeEvent_void_QFrame_QCloseEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QFrame_contextMenuEvent_void_QFrame_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QFrame_dragEnterEvent_void_QFrame_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QFrame_dragLeaveEvent_void_QFrame_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QFrame_dragMoveEvent_void_QFrame_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QFrame_dropEvent_void_QFrame_QDropEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QFrame_enterEvent_void_QFrame_QEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->enterEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->enterEvent_pub(arg1);
    }

    void qt_QFrame_focusInEvent_void_QFrame_QFocusEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QFrame_focusNextPrevChild_bool_QFrame_bool(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QFrame*)arg0)->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QFrame*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QFrame_focusOutEvent_void_QFrame_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QFrame_hideEvent_void_QFrame_QHideEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QFrame_keyPressEvent_void_QFrame_QKeyEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QFrame_keyReleaseEvent_void_QFrame_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QFrame_leaveEvent_void_QFrame_QEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->leaveEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->leaveEvent_pub(arg1);
    }

    void qt_QFrame_mouseDoubleClickEvent_void_QFrame_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QFrame_mouseMoveEvent_void_QFrame_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QFrame_mousePressEvent_void_QFrame_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QFrame_mouseReleaseEvent_void_QFrame_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QFrame_moveEvent_void_QFrame_QMoveEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QMoveEvent* arg1 = getqpointer<QMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->moveEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->moveEvent_pub(arg1);
    }

    void qt_QFrame_resizeEvent_void_QFrame_QResizeEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QFrame_showEvent_void_QFrame_QShowEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->showEvent_pub(arg1);
    }

    void qt_QFrame_tabletEvent_void_QFrame_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QTabletEvent* arg1 = getqpointer<QTabletEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->tabletEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->tabletEvent_pub(arg1);
    }

    void qt_QFrame_wheelEvent_void_QFrame_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFrame*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QFrame*)arg0)->wheelEvent_pub(arg1);
    }

    int qt_QFrame_metric_int_QFrame_int(Mu::Thread& NODE_THREAD,
                                        Pointer param_this, int param_m)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFrame* arg0 = object<QFrame>(param_this);
        QPaintDevice::PaintDeviceMetric arg1 =
            (QPaintDevice::PaintDeviceMetric)(param_m);
        return isMuQtObject(arg0)
                   ? ((MuQt_QFrame*)arg0)->metric_pub_parent(arg1)
                   : ((MuQt_QFrame*)arg0)->metric_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QFrame0, Pointer)
    {
        NODE_RETURN(qt_QFrame_QFrame_QFrame_QFrame_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_frameStyle0, int)
    {
        NODE_RETURN(qt_QFrame_frameStyle_int_QFrame(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setFrameStyle0, void)
    {
        qt_QFrame_setFrameStyle_void_QFrame_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QFrame_sizeHint_QSize_QFrame(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QFrame_changeEvent_void_QFrame_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QFrame_event_bool_QFrame_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QFrame_paintEvent_void_QFrame_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QFrame_hasHeightForWidth_bool_QFrame(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QFrame_heightForWidth_int_QFrame_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QFrame_inputMethodQuery_QVariant_QFrame_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QFrame_minimumSizeHint_QSize_QFrame(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QFrame_closeEvent_void_QFrame_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QFrame_contextMenuEvent_void_QFrame_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QFrame_dragEnterEvent_void_QFrame_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QFrame_dragLeaveEvent_void_QFrame_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QFrame_dragMoveEvent_void_QFrame_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QFrame_dropEvent_void_QFrame_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_enterEvent0, void)
    {
        qt_QFrame_enterEvent_void_QFrame_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QFrame_focusInEvent_void_QFrame_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QFrame_focusNextPrevChild_bool_QFrame_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QFrame_focusOutEvent_void_QFrame_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QFrame_hideEvent_void_QFrame_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QFrame_keyPressEvent_void_QFrame_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QFrame_keyReleaseEvent_void_QFrame_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
    {
        qt_QFrame_leaveEvent_void_QFrame_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QFrame_mouseDoubleClickEvent_void_QFrame_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QFrame_mouseMoveEvent_void_QFrame_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QFrame_mousePressEvent_void_QFrame_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QFrame_mouseReleaseEvent_void_QFrame_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveEvent0, void)
    {
        qt_QFrame_moveEvent_void_QFrame_QMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QFrame_resizeEvent_void_QFrame_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QFrame_showEvent_void_QFrame_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
    {
        qt_QFrame_tabletEvent_void_QFrame_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QFrame_wheelEvent_void_QFrame_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_metric0, int)
    {
        NODE_RETURN(qt_QFrame_metric_int_QFrame_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    void QFrameType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QFrame_QFrame_QObject, Return, ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QFrame", _n_QFrame0, None, Compiled,
                qt_QFrame_QFrame_QFrame_QFrame_QWidget_int, Return, "qt.QFrame",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "parent", "qt.QWidget"),
                new Param(c, "f", "int", Value((int)Qt::WindowFlags())), End),
            // PROP: frameRect (QRect; QFrame this)
            // PROP: frameShadow (flags QFrame::Shadow; QFrame this)
            // PROP: frameShape (flags QFrame::Shape; QFrame this)
            new Function(c, "frameStyle", _n_frameStyle0, None, Compiled,
                         qt_QFrame_frameStyle_int_QFrame, Return, "int",
                         Parameters, new Param(c, "this", "qt.QFrame"), End),
            // PROP: frameWidth (int; QFrame this)
            // PROP: lineWidth (int; QFrame this)
            // PROP: midLineWidth (int; QFrame this)
            // PROP: setFrameRect (void; QFrame this, QRect _p14)
            // PROP: setFrameShadow (void; QFrame this, flags QFrame::Shadow
            // _p7) PROP: setFrameShape (void; QFrame this, flags QFrame::Shape
            // _p6)
            new Function(c, "setFrameStyle", _n_setFrameStyle0, None, Compiled,
                         qt_QFrame_setFrameStyle_void_QFrame_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QFrame"),
                         new Param(c, "style", "int"), End),
            // PROP: setLineWidth (void; QFrame this, int _p4)
            // PROP: setMidLineWidth (void; QFrame this, int _p4)
            _func[0] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QFrame_sizeHint_QSize_QFrame, Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QFrame"), End),
            // MISSING: initStyleOption (void; QFrame this, "QStyleOptionFrame
            // *" option) // protected
            _func[1] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QFrame_changeEvent_void_QFrame_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "ev", "qt.QEvent"), End),
            _func[2] = new MemberFunction(c, "event", _n_event0, None, Compiled,
                                          qt_QFrame_event_bool_QFrame_QEvent,
                                          Return, "bool", Parameters,
                                          new Param(c, "this", "qt.QFrame"),
                                          new Param(c, "e", "qt.QEvent"), End),
            _func[3] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QFrame_paintEvent_void_QFrame_QPaintEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "_p14", "qt.QPaintEvent"), End),
            _func[4] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QFrame_hasHeightForWidth_bool_QFrame, Return, "bool",
                Parameters, new Param(c, "this", "qt.QFrame"), End),
            _func[5] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QFrame_heightForWidth_int_QFrame_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "w", "int"), End),
            _func[6] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QFrame_inputMethodQuery_QVariant_QFrame_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "query", "int"), End),
            _func[7] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QFrame_minimumSizeHint_QSize_QFrame, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QFrame"), End),
            // MISSING: paintEngine ("QPaintEngine *"; QFrame this)
            // MISSING: actionEvent (void; QFrame this, "QActionEvent *" event)
            // // protected
            _func[8] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QFrame_closeEvent_void_QFrame_QCloseEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[9] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QFrame_contextMenuEvent_void_QFrame_QContextMenuEvent,
                Return, "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[10] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QFrame_dragEnterEvent_void_QFrame_QDragEnterEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[11] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QFrame_dragLeaveEvent_void_QFrame_QDragLeaveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[12] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QFrame_dragMoveEvent_void_QFrame_QDragMoveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[13] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QFrame_dropEvent_void_QFrame_QDropEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[14] = new MemberFunction(
                c, "enterEvent", _n_enterEvent0, None, Compiled,
                qt_QFrame_enterEvent_void_QFrame_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[15] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QFrame_focusInEvent_void_QFrame_QFocusEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[16] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QFrame_focusNextPrevChild_bool_QFrame_bool, Return, "bool",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "next", "bool"), End),
            _func[17] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QFrame_focusOutEvent_void_QFrame_QFocusEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[18] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QFrame_hideEvent_void_QFrame_QHideEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QHideEvent"), End),
            // MISSING: inputMethodEvent (void; QFrame this, "QInputMethodEvent
            // *" event) // protected
            _func[19] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QFrame_keyPressEvent_void_QFrame_QKeyEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[20] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QFrame_keyReleaseEvent_void_QFrame_QKeyEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[21] = new MemberFunction(
                c, "leaveEvent", _n_leaveEvent0, None, Compiled,
                qt_QFrame_leaveEvent_void_QFrame_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[22] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QFrame_mouseDoubleClickEvent_void_QFrame_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[23] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QFrame_mouseMoveEvent_void_QFrame_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[24] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QFrame_mousePressEvent_void_QFrame_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[25] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QFrame_mouseReleaseEvent_void_QFrame_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[26] = new MemberFunction(
                c, "moveEvent", _n_moveEvent0, None, Compiled,
                qt_QFrame_moveEvent_void_QFrame_QMoveEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QMoveEvent"), End),
            // MISSING: nativeEvent (bool; QFrame this, QByteArray eventType,
            // "void *" message, "long *" result) // protected
            _func[27] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QFrame_resizeEvent_void_QFrame_QResizeEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[28] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QFrame_showEvent_void_QFrame_QShowEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QShowEvent"), End),
            _func[29] = new MemberFunction(
                c, "tabletEvent", _n_tabletEvent0, None, Compiled,
                qt_QFrame_tabletEvent_void_QFrame_QTabletEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QTabletEvent"), End),
            _func[30] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QFrame_wheelEvent_void_QFrame_QWheelEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QFrame"),
                new Param(c, "event", "qt.QWheelEvent"), End),
            // MISSING: initPainter (void; QFrame this, "QPainter *" painter) //
            // protected
            _func[31] = new MemberFunction(
                c, "metric", _n_metric0, None, Compiled,
                qt_QFrame_metric_int_QFrame_int, Return, "int", Parameters,
                new Param(c, "this", "qt.QFrame"), new Param(c, "m", "int"),
                End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QFrame::staticMetaObject, propExclusions);
    }

} // namespace Mu
