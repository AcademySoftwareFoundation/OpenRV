//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0 
// 
#include <MuQt5/qtUtils.h>
#include <MuQt5/QDirType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <TwkUtil/File.h>
#include <TwkQtCoreUtil/QtConvert.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

QDirType::Instance::Instance(const Class* c) : ClassInstance(c)
{
}

QDirType::QDirType(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QDirType::~QDirType()
{
}

static NODE_IMPLEMENTATION(__allocate, Pointer)
{
    QDirType::Instance* i = new QDirType::Instance((Class*)NODE_THIS.type());
    QDirType::registerFinalizer(i);
    NODE_RETURN(i);
}

void 
QDirType::registerFinalizer (void* o)
{
    GC_register_finalizer(o, QDirType::finalizer, 0, 0, 0);
}

void 
QDirType::finalizer (void* obj, void* data)
{
    QDirType::Instance* i = reinterpret_cast<QDirType::Instance*>(obj);
    delete i;
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

Pointer qt_QDir_QDir_QDir_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg1 = qstring(param_path);
    setqtype<QDirType>(param_this,QDir(arg1));
    return param_this;
}

Pointer qt_QDir_QDir_QDir_QDir_string_string_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_path, Pointer param_nameFilter, int param_sort, int param_filters)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg1 = qstring(param_path);
    const QString  arg2 = qstring(param_nameFilter);
    QDir::SortFlags arg3 = (QDir::SortFlags)(param_sort);
    QDir::Filters arg4 = (QDir::Filters)(param_filters);
    setqtype<QDirType>(param_this,QDir(arg1, arg2, arg3, arg4));
    return param_this;
}

Pointer qt_QDir_absoluteFilePath_string_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_fileName);
    return makestring(c,arg0.absoluteFilePath(arg1));
}

Pointer qt_QDir_absolutePath_string_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return makestring(c,arg0.absolutePath());
}

Pointer qt_QDir_canonicalPath_string_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return makestring(c,arg0.canonicalPath());
}

bool qt_QDir_cd_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dirName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_dirName);
    return arg0.cd(arg1);
}

bool qt_QDir_cdUp_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.cdUp();
}

int qt_QDir_count_int_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.count();
}

Pointer qt_QDir_dirName_string_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return makestring(c,arg0.dirName());
}

Pointer qt_QDir_entryInfoList_qt__QFileInfoBSB_ESB__QDir_stringBSB_ESB__int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_nameFilters, int param_filters, int param_sort)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QStringList  arg1 = qstringlist(param_nameFilters);
    QDir::Filters arg2 = (QDir::Filters)(param_filters);
    QDir::SortFlags arg3 = (QDir::SortFlags)(param_sort);
    return makeqfileinfolist(c,arg0.entryInfoList(arg1, arg2, arg3));
}

Pointer qt_QDir_entryInfoList_qt__QFileInfoBSB_ESB__QDir_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_filters, int param_sort)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    QDir::Filters arg1 = (QDir::Filters)(param_filters);
    QDir::SortFlags arg2 = (QDir::SortFlags)(param_sort);
    return makeqfileinfolist(c,arg0.entryInfoList(arg1, arg2));
}

Pointer qt_QDir_entryList_stringBSB_ESB__QDir_stringBSB_ESB__int_int(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_nameFilters, int param_filters, int param_sort)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QStringList  arg1 = qstringlist(param_nameFilters);
    QDir::Filters arg2 = (QDir::Filters)(param_filters);
    QDir::SortFlags arg3 = (QDir::SortFlags)(param_sort);
    return makestringlist(c,arg0.entryList(arg1, arg2, arg3));
}

Pointer qt_QDir_entryList_stringBSB_ESB__QDir_int_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_filters, int param_sort)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    QDir::Filters arg1 = (QDir::Filters)(param_filters);
    QDir::SortFlags arg2 = (QDir::SortFlags)(param_sort);
    return makestringlist(c,arg0.entryList(arg1, arg2));
}

bool qt_QDir_exists_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_name)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_name);
    return arg0.exists(arg1);
}

bool qt_QDir_exists_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.exists();
}

Pointer qt_QDir_filePath_string_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_fileName);
    return makestring(c,arg0.filePath(arg1));
}

int qt_QDir_filter_int_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return int(arg0.filter());
}

bool qt_QDir_isAbsolute_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.isAbsolute();
}

bool qt_QDir_isReadable_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return TwkUtil::isReadable(TwkQtCoreUtil::UTF8::qconvert(arg0.path()).c_str());
}

bool qt_QDir_isRelative_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.isRelative();
}

bool qt_QDir_isRoot_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.isRoot();
}

bool qt_QDir_makeAbsolute_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.makeAbsolute();
}

bool qt_QDir_mkdir_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dirName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_dirName);
    return arg0.mkdir(arg1);
}

bool qt_QDir_mkpath_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dirPath)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_dirPath);
    return arg0.mkpath(arg1);
}

Pointer qt_QDir_nameFilters_stringBSB_ESB__QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return makestringlist(c,arg0.nameFilters());
}

Pointer qt_QDir_path_string_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return makestring(c,arg0.path());
}

void qt_QDir_refresh_void_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    arg0.refresh();
    setqtype<QDirType>(param_this,arg0);
}

Pointer qt_QDir_relativeFilePath_string_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_fileName);
    return makestring(c,arg0.relativeFilePath(arg1));
}

bool qt_QDir_remove_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_fileName);
    return arg0.remove(arg1);
}

bool qt_QDir_removeRecursively_bool_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    return arg0.removeRecursively();
}

bool qt_QDir_rename_bool_QDir_string_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_oldName, Pointer param_newName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_oldName);
    const QString  arg2 = qstring(param_newName);
    return arg0.rename(arg1, arg2);
}

bool qt_QDir_rmdir_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dirName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_dirName);
    return arg0.rmdir(arg1);
}

bool qt_QDir_rmpath_bool_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dirPath)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_dirPath);
    return arg0.rmpath(arg1);
}

void qt_QDir_setFilter_void_QDir_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_filters)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    QDir::Filters arg1 = (QDir::Filters)(param_filters);
    arg0.setFilter(arg1);
    setqtype<QDirType>(param_this,arg0);
}

void qt_QDir_setNameFilters_void_QDir_stringBSB_ESB_(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_nameFilters)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    const QStringList  arg1 = qstringlist(param_nameFilters);
    arg0.setNameFilters(arg1);
    setqtype<QDirType>(param_this,arg0);
}

void qt_QDir_setPath_void_QDir_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    const QString  arg1 = qstring(param_path);
    arg0.setPath(arg1);
    setqtype<QDirType>(param_this,arg0);
}

void qt_QDir_setSorting_void_QDir_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_sort)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    QDir::SortFlags arg1 = (QDir::SortFlags)(param_sort);
    arg0.setSorting(arg1);
    setqtype<QDirType>(param_this,arg0);
}

int qt_QDir_sorting_int_QDir(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    return int(arg0.sorting());
}

void qt_QDir_swap_void_QDir_QDir(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QDir& arg0 = getqtype<QDirType>(param_this);
    QDir  arg1 = getqtype<QDirType>(param_other);
    arg0.swap(arg1);
    setqtype<QDirType>(param_this,arg0);
}

bool qt_QDir_operatorBang_EQ__bool_QDir_QDir(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dir)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QDir  arg1 = getqtype<QDirType>(param_dir);
    return arg0.operator!=(arg1);
}

bool qt_QDir_operatorEQ_EQ__bool_QDir_QDir(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dir)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    const QDir  arg1 = getqtype<QDirType>(param_dir);
    return arg0.operator==(arg1);
}

Pointer qt_QDir_operatorBSB_ESB__string_QDir_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_pos)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QDir& arg0 = getqtype<QDirType>(param_this);
    int arg1 = (int)(param_pos);
    return makestring(c,arg0.operator[](arg1));
}

void qt_QDir_addSearchPath_void_string_string(Mu::Thread& NODE_THREAD, Pointer param_prefix, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_prefix);
    const QString  arg1 = qstring(param_path);
    QDir::addSearchPath(arg0, arg1);
}

Pointer qt_QDir_cleanPath_string_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    return makestring(c,QDir::cleanPath(arg0));
}

Pointer qt_QDir_current_QDir(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makeqtype<QDirType>(c,QDir::current(),"qt.QDir");
}

Pointer qt_QDir_currentPath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QDir::currentPath());
}

Pointer qt_QDir_drives_qt__QFileInfoBSB_ESB_(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makeqfileinfolist(c,QDir::drives());
}

Pointer qt_QDir_fromNativeSeparators_string_string(Mu::Thread& NODE_THREAD, Pointer param_pathName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_pathName);
    return makestring(c,QDir::fromNativeSeparators(arg0));
}

Pointer qt_QDir_home_QDir(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makeqtype<QDirType>(c,QDir::home(),"qt.QDir");
}

Pointer qt_QDir_homePath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QDir::homePath());
}

bool qt_QDir_isAbsolutePath_bool_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    return QDir::isAbsolutePath(arg0);
}

bool qt_QDir_isRelativePath_bool_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    return QDir::isRelativePath(arg0);
}

bool qt_QDir_match_bool_string_string(Mu::Thread& NODE_THREAD, Pointer param_filter, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_filter);
    const QString  arg1 = qstring(param_fileName);
    return QDir::match(arg0, arg1);
}

bool qt_QDir_match_bool_stringBSB_ESB__string(Mu::Thread& NODE_THREAD, Pointer param_filters, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QStringList  arg0 = qstringlist(param_filters);
    const QString  arg1 = qstring(param_fileName);
    return QDir::match(arg0, arg1);
}

Pointer qt_QDir_root_QDir(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makeqtype<QDirType>(c,QDir::root(),"qt.QDir");
}

Pointer qt_QDir_rootPath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QDir::rootPath());
}

Pointer qt_QDir_searchPaths_stringBSB_ESB__string(Mu::Thread& NODE_THREAD, Pointer param_prefix)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_prefix);
    return makestringlist(c,QDir::searchPaths(arg0));
}

bool qt_QDir_setCurrent_bool_string(Mu::Thread& NODE_THREAD, Pointer param_path)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_path);
    return QDir::setCurrent(arg0);
}

void qt_QDir_setSearchPaths_void_string_stringBSB_ESB_(Mu::Thread& NODE_THREAD, Pointer param_prefix, Pointer param_searchPaths)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_prefix);
    const QStringList  arg1 = qstringlist(param_searchPaths);
    QDir::setSearchPaths(arg0, arg1);
}

Pointer qt_QDir_temp_QDir(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makeqtype<QDirType>(c,QDir::temp(),"qt.QDir");
}

Pointer qt_QDir_tempPath_string(Mu::Thread& NODE_THREAD)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    return makestring(c,QDir::tempPath());
}

Pointer qt_QDir_toNativeSeparators_string_string(Mu::Thread& NODE_THREAD, Pointer param_pathName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_pathName);
    return makestring(c,QDir::toNativeSeparators(arg0));
}


static NODE_IMPLEMENTATION(_n_QDir1, Pointer)
{
    NODE_RETURN(qt_QDir_QDir_QDir_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_QDir2, Pointer)
{
    NODE_RETURN(qt_QDir_QDir_QDir_QDir_string_string_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer), NODE_ARG(3, int), NODE_ARG(4, int)));
}

static NODE_IMPLEMENTATION(_n_absoluteFilePath0, Pointer)
{
    NODE_RETURN(qt_QDir_absoluteFilePath_string_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_absolutePath0, Pointer)
{
    NODE_RETURN(qt_QDir_absolutePath_string_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_canonicalPath0, Pointer)
{
    NODE_RETURN(qt_QDir_canonicalPath_string_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_cd0, bool)
{
    NODE_RETURN(qt_QDir_cd_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_cdUp0, bool)
{
    NODE_RETURN(qt_QDir_cdUp_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_count0, int)
{
    NODE_RETURN(qt_QDir_count_int_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_dirName0, Pointer)
{
    NODE_RETURN(qt_QDir_dirName_string_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_entryInfoList0, Pointer)
{
    NODE_RETURN(qt_QDir_entryInfoList_qt__QFileInfoBSB_ESB__QDir_stringBSB_ESB__int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, int)));
}

static NODE_IMPLEMENTATION(_n_entryInfoList1, Pointer)
{
    NODE_RETURN(qt_QDir_entryInfoList_qt__QFileInfoBSB_ESB__QDir_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int)));
}

static NODE_IMPLEMENTATION(_n_entryList0, Pointer)
{
    NODE_RETURN(qt_QDir_entryList_stringBSB_ESB__QDir_stringBSB_ESB__int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, int), NODE_ARG(3, int)));
}

static NODE_IMPLEMENTATION(_n_entryList1, Pointer)
{
    NODE_RETURN(qt_QDir_entryList_stringBSB_ESB__QDir_int_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int), NODE_ARG(2, int)));
}

static NODE_IMPLEMENTATION(_n_exists0, bool)
{
    NODE_RETURN(qt_QDir_exists_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_exists1, bool)
{
    NODE_RETURN(qt_QDir_exists_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_filePath0, Pointer)
{
    NODE_RETURN(qt_QDir_filePath_string_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_filter0, int)
{
    NODE_RETURN(qt_QDir_filter_int_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isAbsolute0, bool)
{
    NODE_RETURN(qt_QDir_isAbsolute_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isReadable0, bool)
{
    NODE_RETURN(qt_QDir_isReadable_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isRelative0, bool)
{
    NODE_RETURN(qt_QDir_isRelative_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isRoot0, bool)
{
    NODE_RETURN(qt_QDir_isRoot_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_makeAbsolute0, bool)
{
    NODE_RETURN(qt_QDir_makeAbsolute_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_mkdir0, bool)
{
    NODE_RETURN(qt_QDir_mkdir_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_mkpath0, bool)
{
    NODE_RETURN(qt_QDir_mkpath_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_nameFilters0, Pointer)
{
    NODE_RETURN(qt_QDir_nameFilters_stringBSB_ESB__QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_path0, Pointer)
{
    NODE_RETURN(qt_QDir_path_string_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_refresh0, void)
{
    qt_QDir_refresh_void_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_relativeFilePath0, Pointer)
{
    NODE_RETURN(qt_QDir_relativeFilePath_string_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_remove0, bool)
{
    NODE_RETURN(qt_QDir_remove_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_removeRecursively0, bool)
{
    NODE_RETURN(qt_QDir_removeRecursively_bool_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_rename0, bool)
{
    NODE_RETURN(qt_QDir_rename_bool_QDir_string_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_rmdir0, bool)
{
    NODE_RETURN(qt_QDir_rmdir_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_rmpath0, bool)
{
    NODE_RETURN(qt_QDir_rmpath_bool_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setFilter0, void)
{
    qt_QDir_setFilter_void_QDir_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_setNameFilters0, void)
{
    qt_QDir_setNameFilters_void_QDir_stringBSB_ESB_(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setPath0, void)
{
    qt_QDir_setPath_void_QDir_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setSorting0, void)
{
    qt_QDir_setSorting_void_QDir_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_sorting0, int)
{
    NODE_RETURN(qt_QDir_sorting_int_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_swap0, void)
{
    qt_QDir_swap_void_QDir_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
{
    NODE_RETURN(qt_QDir_operatorBang_EQ__bool_QDir_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
{
    NODE_RETURN(qt_QDir_operatorEQ_EQ__bool_QDir_QDir(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorBSB_ESB_0, Pointer)
{
    NODE_RETURN(qt_QDir_operatorBSB_ESB__string_QDir_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
}

static NODE_IMPLEMENTATION(_n_addSearchPath0, void)
{
    qt_QDir_addSearchPath_void_string_string(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_cleanPath0, Pointer)
{
    NODE_RETURN(qt_QDir_cleanPath_string_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_current0, Pointer)
{
    NODE_RETURN(qt_QDir_current_QDir(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_currentPath0, Pointer)
{
    NODE_RETURN(qt_QDir_currentPath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_drives0, Pointer)
{
    NODE_RETURN(qt_QDir_drives_qt__QFileInfoBSB_ESB_(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_fromNativeSeparators0, Pointer)
{
    NODE_RETURN(qt_QDir_fromNativeSeparators_string_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_home0, Pointer)
{
    NODE_RETURN(qt_QDir_home_QDir(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_homePath0, Pointer)
{
    NODE_RETURN(qt_QDir_homePath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_isAbsolutePath0, bool)
{
    NODE_RETURN(qt_QDir_isAbsolutePath_bool_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isRelativePath0, bool)
{
    NODE_RETURN(qt_QDir_isRelativePath_bool_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_match0, bool)
{
    NODE_RETURN(qt_QDir_match_bool_string_string(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_match1, bool)
{
    NODE_RETURN(qt_QDir_match_bool_stringBSB_ESB__string(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_root0, Pointer)
{
    NODE_RETURN(qt_QDir_root_QDir(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_rootPath0, Pointer)
{
    NODE_RETURN(qt_QDir_rootPath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_searchPaths0, Pointer)
{
    NODE_RETURN(qt_QDir_searchPaths_stringBSB_ESB__string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setCurrent0, bool)
{
    NODE_RETURN(qt_QDir_setCurrent_bool_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setSearchPaths0, void)
{
    qt_QDir_setSearchPaths_void_string_stringBSB_ESB_(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_temp0, Pointer)
{
    NODE_RETURN(qt_QDir_temp_QDir(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_tempPath0, Pointer)
{
    NODE_RETURN(qt_QDir_tempPath_string(NODE_THREAD));
}

static NODE_IMPLEMENTATION(_n_toNativeSeparators0, Pointer)
{
    NODE_RETURN(qt_QDir_toNativeSeparators_string_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}



void
QDirType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", __allocate, None,
                            Return, ftn,
                            End),

               EndArguments );

addSymbols(
    new Alias(c, "Filter", "int"),
    new Alias(c, "Filters", "int"),
      new SymbolicConstant(c, "Dirs", "int", Value(int(QDir::Dirs))),
      new SymbolicConstant(c, "AllDirs", "int", Value(int(QDir::AllDirs))),
      new SymbolicConstant(c, "Files", "int", Value(int(QDir::Files))),
      new SymbolicConstant(c, "Drives", "int", Value(int(QDir::Drives))),
      new SymbolicConstant(c, "NoSymLinks", "int", Value(int(QDir::NoSymLinks))),
      new SymbolicConstant(c, "NoDotAndDotDot", "int", Value(int(QDir::NoDotAndDotDot))),
      new SymbolicConstant(c, "NoDot", "int", Value(int(QDir::NoDot))),
      new SymbolicConstant(c, "NoDotDot", "int", Value(int(QDir::NoDotDot))),
      new SymbolicConstant(c, "AllEntries", "int", Value(int(QDir::AllEntries))),
      new SymbolicConstant(c, "Readable", "int", Value(int(QDir::Readable))),
      new SymbolicConstant(c, "Writable", "int", Value(int(QDir::Writable))),
      new SymbolicConstant(c, "Executable", "int", Value(int(QDir::Executable))),
      new SymbolicConstant(c, "Modified", "int", Value(int(QDir::Modified))),
      new SymbolicConstant(c, "Hidden", "int", Value(int(QDir::Hidden))),
      new SymbolicConstant(c, "System", "int", Value(int(QDir::System))),
      new SymbolicConstant(c, "CaseSensitive", "int", Value(int(QDir::CaseSensitive))),
    new Alias(c, "SortFlag", "int"),
    new Alias(c, "SortFlags", "int"),
      new SymbolicConstant(c, "Name", "int", Value(int(QDir::Name))),
      new SymbolicConstant(c, "Time", "int", Value(int(QDir::Time))),
      new SymbolicConstant(c, "Size", "int", Value(int(QDir::Size))),
      new SymbolicConstant(c, "Type", "int", Value(int(QDir::Type))),
      new SymbolicConstant(c, "Unsorted", "int", Value(int(QDir::Unsorted))),
      new SymbolicConstant(c, "NoSort", "int", Value(int(QDir::NoSort))),
      new SymbolicConstant(c, "DirsFirst", "int", Value(int(QDir::DirsFirst))),
      new SymbolicConstant(c, "DirsLast", "int", Value(int(QDir::DirsLast))),
      new SymbolicConstant(c, "Reversed", "int", Value(int(QDir::Reversed))),
      new SymbolicConstant(c, "IgnoreCase", "int", Value(int(QDir::IgnoreCase))),
      new SymbolicConstant(c, "LocaleAware", "int", Value(int(QDir::LocaleAware))),
    EndArguments);

addSymbols(
    // enums
    // member functions
    // MISSING: QDir (QDir; QDir this, QDir dir)
    new Function(c, "QDir", _n_QDir1, None, Compiled, qt_QDir_QDir_QDir_QDir_string, Return, "qt.QDir", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "path", "string"), End),
    new Function(c, "QDir", _n_QDir2, None, Compiled, qt_QDir_QDir_QDir_QDir_string_string_int_int, Return, "qt.QDir", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "path", "string"), new Param(c, "nameFilter", "string"), new Param(c, "sort", "int", Value((int)QDir::SortFlags( QDir::Name | QDir::IgnoreCase ))), new Param(c, "filters", "int", Value((int)QDir::AllEntries)), End),
    new Function(c, "absoluteFilePath", _n_absoluteFilePath0, None, Compiled, qt_QDir_absoluteFilePath_string_QDir_string, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "fileName", "string"), End),
    new Function(c, "absolutePath", _n_absolutePath0, None, Compiled, qt_QDir_absolutePath_string_QDir, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "canonicalPath", _n_canonicalPath0, None, Compiled, qt_QDir_canonicalPath_string_QDir, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "cd", _n_cd0, None, Compiled, qt_QDir_cd_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dirName", "string"), End),
    new Function(c, "cdUp", _n_cdUp0, None, Compiled, qt_QDir_cdUp_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "count", _n_count0, None, Compiled, qt_QDir_count_int_QDir, Return, "int", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "dirName", _n_dirName0, None, Compiled, qt_QDir_dirName_string_QDir, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "entryInfoList", _n_entryInfoList0, None, Compiled, qt_QDir_entryInfoList_qt__QFileInfoBSB_ESB__QDir_stringBSB_ESB__int_int, Return, "qt.QFileInfo[]", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "nameFilters", "string[]"), new Param(c, "filters", "int"), new Param(c, "sort", "int"), End),
    new Function(c, "entryInfoList", _n_entryInfoList1, None, Compiled, qt_QDir_entryInfoList_qt__QFileInfoBSB_ESB__QDir_int_int, Return, "qt.QFileInfo[]", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "filters", "int"), new Param(c, "sort", "int"), End),
    new Function(c, "entryList", _n_entryList0, None, Compiled, qt_QDir_entryList_stringBSB_ESB__QDir_stringBSB_ESB__int_int, Return, "string[]", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "nameFilters", "string[]"), new Param(c, "filters", "int"), new Param(c, "sort", "int"), End),
    new Function(c, "entryList", _n_entryList1, None, Compiled, qt_QDir_entryList_stringBSB_ESB__QDir_int_int, Return, "string[]", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "filters", "int"), new Param(c, "sort", "int"), End),
    new Function(c, "exists", _n_exists0, None, Compiled, qt_QDir_exists_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "name", "string"), End),
    new Function(c, "exists", _n_exists1, None, Compiled, qt_QDir_exists_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "filePath", _n_filePath0, None, Compiled, qt_QDir_filePath_string_QDir_string, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "fileName", "string"), End),
    new Function(c, "filter", _n_filter0, None, Compiled, qt_QDir_filter_int_QDir, Return, "int", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "isAbsolute", _n_isAbsolute0, None, Compiled, qt_QDir_isAbsolute_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "isReadable", _n_isReadable0, None, Compiled, qt_QDir_isReadable_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "isRelative", _n_isRelative0, None, Compiled, qt_QDir_isRelative_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "isRoot", _n_isRoot0, None, Compiled, qt_QDir_isRoot_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "makeAbsolute", _n_makeAbsolute0, None, Compiled, qt_QDir_makeAbsolute_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "mkdir", _n_mkdir0, None, Compiled, qt_QDir_mkdir_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dirName", "string"), End),
    new Function(c, "mkpath", _n_mkpath0, None, Compiled, qt_QDir_mkpath_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dirPath", "string"), End),
    new Function(c, "nameFilters", _n_nameFilters0, None, Compiled, qt_QDir_nameFilters_stringBSB_ESB__QDir, Return, "string[]", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "path", _n_path0, None, Compiled, qt_QDir_path_string_QDir, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "refresh", _n_refresh0, None, Compiled, qt_QDir_refresh_void_QDir, Return, "void", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "relativeFilePath", _n_relativeFilePath0, None, Compiled, qt_QDir_relativeFilePath_string_QDir_string, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "fileName", "string"), End),
    new Function(c, "remove", _n_remove0, None, Compiled, qt_QDir_remove_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "fileName", "string"), End),
    new Function(c, "removeRecursively", _n_removeRecursively0, None, Compiled, qt_QDir_removeRecursively_bool_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "rename", _n_rename0, None, Compiled, qt_QDir_rename_bool_QDir_string_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "oldName", "string"), new Param(c, "newName", "string"), End),
    new Function(c, "rmdir", _n_rmdir0, None, Compiled, qt_QDir_rmdir_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dirName", "string"), End),
    new Function(c, "rmpath", _n_rmpath0, None, Compiled, qt_QDir_rmpath_bool_QDir_string, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dirPath", "string"), End),
    new Function(c, "setFilter", _n_setFilter0, None, Compiled, qt_QDir_setFilter_void_QDir_int, Return, "void", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "filters", "int"), End),
    new Function(c, "setNameFilters", _n_setNameFilters0, None, Compiled, qt_QDir_setNameFilters_void_QDir_stringBSB_ESB_, Return, "void", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "nameFilters", "string[]"), End),
    new Function(c, "setPath", _n_setPath0, None, Compiled, qt_QDir_setPath_void_QDir_string, Return, "void", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "path", "string"), End),
    new Function(c, "setSorting", _n_setSorting0, None, Compiled, qt_QDir_setSorting_void_QDir_int, Return, "void", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "sort", "int"), End),
    new Function(c, "sorting", _n_sorting0, None, Compiled, qt_QDir_sorting_int_QDir, Return, "int", Parameters, new Param(c, "this", "qt.QDir"), End),
    new Function(c, "swap", _n_swap0, None, Compiled, qt_QDir_swap_void_QDir_QDir, Return, "void", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "other", "qt.QDir"), End),
    // static functions
    new Function(c, "addSearchPath", _n_addSearchPath0, None, Compiled, qt_QDir_addSearchPath_void_string_string, Return, "void", Parameters, new Param(c, "prefix", "string"), new Param(c, "path", "string"), End),
    new Function(c, "cleanPath", _n_cleanPath0, None, Compiled, qt_QDir_cleanPath_string_string, Return, "string", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "current", _n_current0, None, Compiled, qt_QDir_current_QDir, Return, "qt.QDir", End),
    new Function(c, "currentPath", _n_currentPath0, None, Compiled, qt_QDir_currentPath_string, Return, "string", End),
    new Function(c, "drives", _n_drives0, None, Compiled, qt_QDir_drives_qt__QFileInfoBSB_ESB_, Return, "qt.QFileInfo[]", End),
    new Function(c, "fromNativeSeparators", _n_fromNativeSeparators0, None, Compiled, qt_QDir_fromNativeSeparators_string_string, Return, "string", Parameters, new Param(c, "pathName", "string"), End),
    new Function(c, "home", _n_home0, None, Compiled, qt_QDir_home_QDir, Return, "qt.QDir", End),
    new Function(c, "homePath", _n_homePath0, None, Compiled, qt_QDir_homePath_string, Return, "string", End),
    new Function(c, "isAbsolutePath", _n_isAbsolutePath0, None, Compiled, qt_QDir_isAbsolutePath_bool_string, Return, "bool", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "isRelativePath", _n_isRelativePath0, None, Compiled, qt_QDir_isRelativePath_bool_string, Return, "bool", Parameters, new Param(c, "path", "string"), End),
    // MISSING: listSeparator ("QChar"; )
    new Function(c, "match", _n_match0, None, Compiled, qt_QDir_match_bool_string_string, Return, "bool", Parameters, new Param(c, "filter", "string"), new Param(c, "fileName", "string"), End),
    new Function(c, "match", _n_match1, None, Compiled, qt_QDir_match_bool_stringBSB_ESB__string, Return, "bool", Parameters, new Param(c, "filters", "string[]"), new Param(c, "fileName", "string"), End),
    new Function(c, "root", _n_root0, None, Compiled, qt_QDir_root_QDir, Return, "qt.QDir", End),
    new Function(c, "rootPath", _n_rootPath0, None, Compiled, qt_QDir_rootPath_string, Return, "string", End),
    new Function(c, "searchPaths", _n_searchPaths0, None, Compiled, qt_QDir_searchPaths_stringBSB_ESB__string, Return, "string[]", Parameters, new Param(c, "prefix", "string"), End),
    // MISSING: separator ("QChar"; )
    new Function(c, "setCurrent", _n_setCurrent0, None, Compiled, qt_QDir_setCurrent_bool_string, Return, "bool", Parameters, new Param(c, "path", "string"), End),
    new Function(c, "setSearchPaths", _n_setSearchPaths0, None, Compiled, qt_QDir_setSearchPaths_void_string_stringBSB_ESB_, Return, "void", Parameters, new Param(c, "prefix", "string"), new Param(c, "searchPaths", "string[]"), End),
    new Function(c, "temp", _n_temp0, None, Compiled, qt_QDir_temp_QDir, Return, "qt.QDir", End),
    new Function(c, "tempPath", _n_tempPath0, None, Compiled, qt_QDir_tempPath_string, Return, "string", End),
    new Function(c, "toNativeSeparators", _n_toNativeSeparators0, None, Compiled, qt_QDir_toNativeSeparators_string_string, Return, "string", Parameters, new Param(c, "pathName", "string"), End),
    EndArguments);
globalScope()->addSymbols(
    new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled, qt_QDir_operatorBang_EQ__bool_QDir_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dir", "qt.QDir"), End),
    // MISSING: = (QDir; QDir this, QDir dir)
    // MISSING: = (QDir; QDir this, QDir other)
    new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled, qt_QDir_operatorEQ_EQ__bool_QDir_QDir, Return, "bool", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "dir", "qt.QDir"), End),
    new Function(c, "[]", _n_operatorBSB_ESB_0, Op, Compiled, qt_QDir_operatorBSB_ESB__string_QDir_int, Return, "string", Parameters, new Param(c, "this", "qt.QDir"), new Param(c, "pos", "int"), End),
    EndArguments);
scope()->addSymbols(
    EndArguments);

}

} // Mu
