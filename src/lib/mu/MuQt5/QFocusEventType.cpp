//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QFocusEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QFocusEventType::QFocusEventType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QFocusEventType::~QFocusEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    bool qt_QFocusEvent_gotFocus_bool_QFocusEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFocusEvent* arg0 = getqpointer<QFocusEventType>(param_this);
        return arg0->gotFocus();
    }

    bool qt_QFocusEvent_lostFocus_bool_QFocusEvent(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFocusEvent* arg0 = getqpointer<QFocusEventType>(param_this);
        return arg0->lostFocus();
    }

    int qt_QFocusEvent_reason_int_QFocusEvent(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFocusEvent* arg0 = getqpointer<QFocusEventType>(param_this);
        return int(arg0->reason());
    }

    static NODE_IMPLEMENTATION(_n_gotFocus0, bool)
    {
        NODE_RETURN(qt_QFocusEvent_gotFocus_bool_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_lostFocus0, bool)
    {
        NODE_RETURN(qt_QFocusEvent_lostFocus_bool_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_reason0, int)
    {
        NODE_RETURN(qt_QFocusEvent_reason_int_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QFocusEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            // MISSING: QFocusEvent (QFocusEvent; QFocusEvent this, "Type" type,
            // flags Qt::FocusReason reason)
            new Function(c, "gotFocus", _n_gotFocus0, None, Compiled,
                         qt_QFocusEvent_gotFocus_bool_QFocusEvent, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QFocusEvent"), End),
            new Function(c, "lostFocus", _n_lostFocus0, None, Compiled,
                         qt_QFocusEvent_lostFocus_bool_QFocusEvent, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QFocusEvent"), End),
            new Function(c, "reason", _n_reason0, None, Compiled,
                         qt_QFocusEvent_reason_int_QFocusEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QFocusEvent"),
                         End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
