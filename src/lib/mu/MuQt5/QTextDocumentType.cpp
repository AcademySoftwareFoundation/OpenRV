//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTextDocumentType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRegExpType.h>
#include <MuQt5/QTextOptionType.h>
#include <MuQt5/QTextCursorType.h>
#include <MuQt5/QUrlType.h>
#include <MuQt5/QFontType.h>
#include <MuQt5/QTextBlockType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QTextDocument::~MuQt_QTextDocument()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QTextDocument::MuQt_QTextDocument(Pointer muobj,
                                           const CallEnvironment* ce,
                                           QObject* parent)
        : QTextDocument(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTextDocumentType>(
            c->internName("qt.QTextDocument"));
    }

    MuQt_QTextDocument::MuQt_QTextDocument(Pointer muobj,
                                           const CallEnvironment* ce,
                                           const QString& text, QObject* parent)
        : QTextDocument(text, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTextDocumentType>(
            c->internName("qt.QTextDocument"));
    }

    void MuQt_QTextDocument::clear()
    {
        if (!_env)
        {
            QTextDocument::clear();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextDocument::clear();
        }
    }

    QVariant MuQt_QTextDocument::loadResource(int type, const QUrl& name)
    {
        if (!_env)
            return QTextDocument::loadResource(type, name);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(type);
            args[2] = Value(makeqtype<QUrlType>(c, name, "qt.QUrl"));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QTextDocument::loadResource(type, name);
        }
    }

    bool MuQt_QTextDocument::event(QEvent* e)
    {
        if (!_env)
            return QTextDocument::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTextDocument::event(e);
        }
    }

    bool MuQt_QTextDocument::eventFilter(QObject* watched, QEvent* event)
    {
        if (!_env)
            return QTextDocument::eventFilter(watched, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QObjectType>(c, watched, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTextDocument::eventFilter(watched, event);
        }
    }

    void MuQt_QTextDocument::customEvent(QEvent* event)
    {
        if (!_env)
        {
            QTextDocument::customEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextDocument::customEvent(event);
        }
    }

    void MuQt_QTextDocument::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QTextDocument::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextDocument::timerEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTextDocumentType::QTextDocumentType(Context* c, const char* name,
                                         Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTextDocumentType::~QTextDocumentType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTextDocument_QTextDocument_QObject(Thread& NODE_THREAD,
                                                       Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTextDocument* w = object<QTextDocument>(widget))
        {
            QTextDocumentType* type =
                c->findSymbolOfTypeByQualifiedName<QTextDocumentType>(
                    c->internName("qt.QTextDocument"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QTextDocument_QTextDocument_QObject(NODE_THREAD,
                                                        NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTextDocument_QTextDocument_QTextDocument_QTextDocument_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QTextDocument(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QTextDocument_QTextDocument_QTextDocument_QTextDocument_string_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_text);
        QObject* arg2 = object<QObject>(param_parent);
        setobject(param_this, new MuQt_QTextDocument(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    void qt_QTextDocument_addResource_void_QTextDocument_int_QUrl_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type,
        Pointer param_name, Pointer param_resource)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_type);
        const QUrl arg2 = getqtype<QUrlType>(param_name);
        const QVariant arg3 = getqtype<QVariantType>(param_resource);
        arg0->addResource(arg1, arg2, arg3);
    }

    void qt_QTextDocument_adjustSize_void_QTextDocument(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        arg0->adjustSize();
    }

    int qt_QTextDocument_availableRedoSteps_int_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->availableRedoSteps();
    }

    int qt_QTextDocument_availableUndoSteps_int_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->availableUndoSteps();
    }

    Pointer
    qt_QTextDocument_begin_QTextBlock_QTextDocument(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makeqtype<QTextBlockType>(c, arg0->begin(), "qt.QTextBlock");
    }

    int
    qt_QTextDocument_characterCount_int_QTextDocument(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->characterCount();
    }

    void qt_QTextDocument_clear_void_QTextDocument(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTextDocument::clear();
        else
            arg0->clear();
    }

    void qt_QTextDocument_clearUndoRedoStacks_void_QTextDocument_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_stacksToClear)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QTextDocument::Stacks arg1 =
            (QTextDocument::Stacks)(param_stacksToClear);
        arg0->clearUndoRedoStacks(arg1);
    }

    Pointer qt_QTextDocument_clone_QTextDocument_QTextDocument_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QObject* arg1 = object<QObject>(param_parent);
        return makeinstance<QTextDocumentType>(c, arg0->clone(arg1),
                                               "qt.QTextDocument");
    }

    int qt_QTextDocument_defaultCursorMoveStyle_int_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return int(arg0->defaultCursorMoveStyle());
    }

    Pointer
    qt_QTextDocument_defaultFont_QFont_QTextDocument(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makeqtype<QFontType>(c, arg0->defaultFont(), "qt.QFont");
    }

    Pointer qt_QTextDocument_defaultTextOption_QTextOption_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makeqtype<QTextOptionType>(c, arg0->defaultTextOption(),
                                          "qt.QTextOption");
    }

    Pointer
    qt_QTextDocument_end_QTextBlock_QTextDocument(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makeqtype<QTextBlockType>(c, arg0->end(), "qt.QTextBlock");
    }

    Pointer
    qt_QTextDocument_find_QTextCursor_QTextDocument_string_QTextCursor_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_subString,
        Pointer param_cursor, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QString arg1 = qstring(param_subString);
        const QTextCursor arg2 = getqtype<QTextCursorType>(param_cursor);
        QTextDocument::FindFlags arg3 =
            (QTextDocument::FindFlags)(param_options);
        return makeqtype<QTextCursorType>(c, arg0->find(arg1, arg2, arg3),
                                          "qt.QTextCursor");
    }

    Pointer qt_QTextDocument_find_QTextCursor_QTextDocument_string_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_subString,
        int param_position, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QString arg1 = qstring(param_subString);
        int arg2 = (int)(param_position);
        QTextDocument::FindFlags arg3 =
            (QTextDocument::FindFlags)(param_options);
        return makeqtype<QTextCursorType>(c, arg0->find(arg1, arg2, arg3),
                                          "qt.QTextCursor");
    }

    Pointer qt_QTextDocument_find_QTextCursor_QTextDocument_QRegExp_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_expr,
        int param_from, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QRegExp arg1 = getqtype<QRegExpType>(param_expr);
        int arg2 = (int)(param_from);
        QTextDocument::FindFlags arg3 =
            (QTextDocument::FindFlags)(param_options);
        return makeqtype<QTextCursorType>(c, arg0->find(arg1, arg2, arg3),
                                          "qt.QTextCursor");
    }

    Pointer
    qt_QTextDocument_find_QTextCursor_QTextDocument_QRegExp_QTextCursor_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_expr,
        Pointer param_cursor, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QRegExp arg1 = getqtype<QRegExpType>(param_expr);
        const QTextCursor arg2 = getqtype<QTextCursorType>(param_cursor);
        QTextDocument::FindFlags arg3 =
            (QTextDocument::FindFlags)(param_options);
        return makeqtype<QTextCursorType>(c, arg0->find(arg1, arg2, arg3),
                                          "qt.QTextCursor");
    }

    Pointer qt_QTextDocument_findBlock_QTextBlock_QTextDocument_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_pos);
        return makeqtype<QTextBlockType>(c, arg0->findBlock(arg1),
                                         "qt.QTextBlock");
    }

    Pointer qt_QTextDocument_findBlockByLineNumber_QTextBlock_QTextDocument_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_lineNumber)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_lineNumber);
        return makeqtype<QTextBlockType>(c, arg0->findBlockByLineNumber(arg1),
                                         "qt.QTextBlock");
    }

    Pointer qt_QTextDocument_findBlockByNumber_QTextBlock_QTextDocument_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_blockNumber)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_blockNumber);
        return makeqtype<QTextBlockType>(c, arg0->findBlockByNumber(arg1),
                                         "qt.QTextBlock");
    }

    Pointer qt_QTextDocument_firstBlock_QTextBlock_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makeqtype<QTextBlockType>(c, arg0->firstBlock(),
                                         "qt.QTextBlock");
    }

    double
    qt_QTextDocument_idealWidth_double_QTextDocument(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->idealWidth();
    }

    bool qt_QTextDocument_isEmpty_bool_QTextDocument(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->isEmpty();
    }

    bool
    qt_QTextDocument_isRedoAvailable_bool_QTextDocument(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->isRedoAvailable();
    }

    bool
    qt_QTextDocument_isUndoAvailable_bool_QTextDocument(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->isUndoAvailable();
    }

    Pointer
    qt_QTextDocument_lastBlock_QTextBlock_QTextDocument(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makeqtype<QTextBlockType>(c, arg0->lastBlock(), "qt.QTextBlock");
    }

    int qt_QTextDocument_lineCount_int_QTextDocument(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->lineCount();
    }

    void qt_QTextDocument_markContentsDirty_void_QTextDocument_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_position,
        int param_length)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_position);
        int arg2 = (int)(param_length);
        arg0->markContentsDirty(arg1, arg2);
    }

    Pointer qt_QTextDocument_metaInformation_string_QTextDocument_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_info)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QTextDocument::MetaInformation arg1 =
            (QTextDocument::MetaInformation)(param_info);
        return makestring(c, arg0->metaInformation(arg1));
    }

    int qt_QTextDocument_pageCount_int_QTextDocument(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->pageCount();
    }

    Pointer qt_QTextDocument_resource_QVariant_QTextDocument_int_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type,
        Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_type);
        const QUrl arg2 = getqtype<QUrlType>(param_name);
        return makeqtype<QVariantType>(c, arg0->resource(arg1, arg2),
                                       "qt.QVariant");
    }

    int qt_QTextDocument_revision_int_QTextDocument(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return arg0->revision();
    }

    void qt_QTextDocument_setDefaultCursorMoveStyle_void_QTextDocument_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_style)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        Qt::CursorMoveStyle arg1 = (Qt::CursorMoveStyle)(param_style);
        arg0->setDefaultCursorMoveStyle(arg1);
    }

    void qt_QTextDocument_setDefaultFont_void_QTextDocument_QFont(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_font)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QFont arg1 = getqtype<QFontType>(param_font);
        arg0->setDefaultFont(arg1);
    }

    void qt_QTextDocument_setDefaultTextOption_void_QTextDocument_QTextOption(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_option)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QTextOption arg1 = getqtype<QTextOptionType>(param_option);
        arg0->setDefaultTextOption(arg1);
    }

    void qt_QTextDocument_setHtml_void_QTextDocument_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_html)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QString arg1 = qstring(param_html);
        arg0->setHtml(arg1);
    }

    void qt_QTextDocument_setIndentWidth_void_QTextDocument_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_width)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        qreal arg1 = (double)(param_width);
        arg0->setIndentWidth(arg1);
    }

    void qt_QTextDocument_setMetaInformation_void_QTextDocument_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_info,
        Pointer param_string)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QTextDocument::MetaInformation arg1 =
            (QTextDocument::MetaInformation)(param_info);
        const QString arg2 = qstring(param_string);
        arg0->setMetaInformation(arg1, arg2);
    }

    void qt_QTextDocument_setPlainText_void_QTextDocument_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QString arg1 = qstring(param_text);
        arg0->setPlainText(arg1);
    }

    Pointer qt_QTextDocument_toHtml_string_QTextDocument_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_encoding)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_encoding);
        return makestring(c, arg0->toHtml(arg1));
    }

    Pointer
    qt_QTextDocument_toPlainText_string_QTextDocument(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        return makestring(c, arg0->toPlainText());
    }

    Pointer qt_QTextDocument_loadResource_QVariant_QTextDocument_int_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type,
        Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        int arg1 = (int)(param_type);
        const QUrl arg2 = getqtype<QUrlType>(param_name);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c,
                         ((MuQt_QTextDocument*)arg0)
                             ->loadResource_pub_parent(arg1, arg2),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c,
                                             ((MuQt_QTextDocument*)arg0)
                                                 ->loadResource_pub(arg1, arg2),
                                             "qt.QVariant");
    }

    bool qt_QTextDocument_event_bool_QTextDocument_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0) ? arg0->QTextDocument::event(arg1)
                                  : arg0->event(arg1);
    }

    bool qt_QTextDocument_eventFilter_bool_QTextDocument_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0) ? arg0->QTextDocument::eventFilter(arg1, arg2)
                                  : arg0->eventFilter(arg1, arg2);
    }

    void qt_QTextDocument_customEvent_void_QTextDocument_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTextDocument*)arg0)->customEvent_pub_parent(arg1);
        else
            ((MuQt_QTextDocument*)arg0)->customEvent_pub(arg1);
    }

    void qt_QTextDocument_timerEvent_void_QTextDocument_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg0 = object<QTextDocument>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTextDocument*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QTextDocument*)arg0)->timerEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QTextDocument0, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_QTextDocument_QTextDocument_QTextDocument_QObject(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QTextDocument1, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_QTextDocument_QTextDocument_QTextDocument_string_QObject(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addResource0, void)
    {
        qt_QTextDocument_addResource_void_QTextDocument_int_QUrl_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_adjustSize0, void)
    {
        qt_QTextDocument_adjustSize_void_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_availableRedoSteps0, int)
    {
        NODE_RETURN(qt_QTextDocument_availableRedoSteps_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_availableUndoSteps0, int)
    {
        NODE_RETURN(qt_QTextDocument_availableUndoSteps_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_begin0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_begin_QTextBlock_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_characterCount0, int)
    {
        NODE_RETURN(qt_QTextDocument_characterCount_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_clear0, void)
    {
        qt_QTextDocument_clear_void_QTextDocument(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_clearUndoRedoStacks0, void)
    {
        qt_QTextDocument_clearUndoRedoStacks_void_QTextDocument_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_clone0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_clone_QTextDocument_QTextDocument_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_defaultCursorMoveStyle0, int)
    {
        NODE_RETURN(qt_QTextDocument_defaultCursorMoveStyle_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_defaultFont0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_defaultFont_QFont_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_defaultTextOption0, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_defaultTextOption_QTextOption_QTextDocument(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_end0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_end_QTextBlock_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_find0, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_find_QTextCursor_QTextDocument_string_QTextCursor_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_find1, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_find_QTextCursor_QTextDocument_string_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_find2, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_find_QTextCursor_QTextDocument_QRegExp_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_find3, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_find_QTextCursor_QTextDocument_QRegExp_QTextCursor_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_findBlock0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_findBlock_QTextBlock_QTextDocument_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_findBlockByLineNumber0, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_findBlockByLineNumber_QTextBlock_QTextDocument_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_findBlockByNumber0, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_findBlockByNumber_QTextBlock_QTextDocument_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_firstBlock0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_firstBlock_QTextBlock_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_idealWidth0, double)
    {
        NODE_RETURN(qt_QTextDocument_idealWidth_double_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
    {
        NODE_RETURN(qt_QTextDocument_isEmpty_bool_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isRedoAvailable0, bool)
    {
        NODE_RETURN(qt_QTextDocument_isRedoAvailable_bool_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isUndoAvailable0, bool)
    {
        NODE_RETURN(qt_QTextDocument_isUndoAvailable_bool_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_lastBlock0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_lastBlock_QTextBlock_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_lineCount0, int)
    {
        NODE_RETURN(qt_QTextDocument_lineCount_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_markContentsDirty0, void)
    {
        qt_QTextDocument_markContentsDirty_void_QTextDocument_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_metaInformation0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_metaInformation_string_QTextDocument_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_pageCount0, int)
    {
        NODE_RETURN(qt_QTextDocument_pageCount_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_resource0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_resource_QVariant_QTextDocument_int_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_revision0, int)
    {
        NODE_RETURN(qt_QTextDocument_revision_int_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setDefaultCursorMoveStyle0, void)
    {
        qt_QTextDocument_setDefaultCursorMoveStyle_void_QTextDocument_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setDefaultFont0, void)
    {
        qt_QTextDocument_setDefaultFont_void_QTextDocument_QFont(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setDefaultTextOption0, void)
    {
        qt_QTextDocument_setDefaultTextOption_void_QTextDocument_QTextOption(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setHtml0, void)
    {
        qt_QTextDocument_setHtml_void_QTextDocument_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setIndentWidth0, void)
    {
        qt_QTextDocument_setIndentWidth_void_QTextDocument_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setMetaInformation0, void)
    {
        qt_QTextDocument_setMetaInformation_void_QTextDocument_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setPlainText0, void)
    {
        qt_QTextDocument_setPlainText_void_QTextDocument_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_toHtml0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_toHtml_string_QTextDocument_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toPlainText0, Pointer)
    {
        NODE_RETURN(qt_QTextDocument_toPlainText_string_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_loadResource0, Pointer)
    {
        NODE_RETURN(
            qt_QTextDocument_loadResource_QVariant_QTextDocument_int_QUrl(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QTextDocument_event_bool_QTextDocument_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(
            qt_QTextDocument_eventFilter_bool_QTextDocument_QObject_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_customEvent0, void)
    {
        qt_QTextDocument_customEvent_void_QTextDocument_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QTextDocument_timerEvent_void_QTextDocument_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QTextDocumentType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTextDocument_QTextDocument_QObject, Return,
                                ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QTextDocument", _n_QTextDocument0, None, Compiled,
                qt_QTextDocument_QTextDocument_QTextDocument_QTextDocument_QObject,
                Return, "qt.QTextDocument", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "parent", "qt.QObject"), End),
            new Function(
                c, "QTextDocument", _n_QTextDocument1, None, Compiled,
                qt_QTextDocument_QTextDocument_QTextDocument_QTextDocument_string_QObject,
                Return, "qt.QTextDocument", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "text", "string"),
                new Param(c, "parent", "qt.QObject"), End),
            new Function(
                c, "addResource", _n_addResource0, None, Compiled,
                qt_QTextDocument_addResource_void_QTextDocument_int_QUrl_QVariant,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "type", "int"), new Param(c, "name", "qt.QUrl"),
                new Param(c, "resource", "qt.QVariant"), End),
            new Function(c, "adjustSize", _n_adjustSize0, None, Compiled,
                         qt_QTextDocument_adjustSize_void_QTextDocument, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // MISSING: allFormats ("QVector<QTextFormat>"; QTextDocument this)
            new Function(c, "availableRedoSteps", _n_availableRedoSteps0, None,
                         Compiled,
                         qt_QTextDocument_availableRedoSteps_int_QTextDocument,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            new Function(c, "availableUndoSteps", _n_availableUndoSteps0, None,
                         Compiled,
                         qt_QTextDocument_availableUndoSteps_int_QTextDocument,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: baseUrl (QUrl; QTextDocument this)
            new Function(c, "begin", _n_begin0, None, Compiled,
                         qt_QTextDocument_begin_QTextBlock_QTextDocument,
                         Return, "qt.QTextBlock", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: blockCount (int; QTextDocument this)
            // MISSING: characterAt ("QChar"; QTextDocument this, int pos)
            new Function(c, "characterCount", _n_characterCount0, None,
                         Compiled,
                         qt_QTextDocument_characterCount_int_QTextDocument,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            _func[0] = new MemberFunction(
                c, "clear", _n_clear0, None, Compiled,
                qt_QTextDocument_clear_void_QTextDocument, Return, "void",
                Parameters, new Param(c, "this", "qt.QTextDocument"), End),
            new Function(
                c, "clearUndoRedoStacks", _n_clearUndoRedoStacks0, None,
                Compiled,
                qt_QTextDocument_clearUndoRedoStacks_void_QTextDocument_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "stacksToClear", "int",
                          Value((int)QTextDocument::UndoAndRedoStacks)),
                End),
            new Function(
                c, "clone", _n_clone0, None, Compiled,
                qt_QTextDocument_clone_QTextDocument_QTextDocument_QObject,
                Return, "qt.QTextDocument", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "parent", "qt.QObject"), End),
            new Function(
                c, "defaultCursorMoveStyle", _n_defaultCursorMoveStyle0, None,
                Compiled,
                qt_QTextDocument_defaultCursorMoveStyle_int_QTextDocument,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QTextDocument"), End),
            new Function(c, "defaultFont", _n_defaultFont0, None, Compiled,
                         qt_QTextDocument_defaultFont_QFont_QTextDocument,
                         Return, "qt.QFont", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: defaultStyleSheet (string; QTextDocument this)
            new Function(
                c, "defaultTextOption", _n_defaultTextOption0, None, Compiled,
                qt_QTextDocument_defaultTextOption_QTextOption_QTextDocument,
                Return, "qt.QTextOption", Parameters,
                new Param(c, "this", "qt.QTextDocument"), End),
            // MISSING: documentLayout ("QAbstractTextDocumentLayout *";
            // QTextDocument this) PROP: documentMargin (double; QTextDocument
            // this)
            new Function(c, "end", _n_end0, None, Compiled,
                         qt_QTextDocument_end_QTextBlock_QTextDocument, Return,
                         "qt.QTextBlock", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            new Function(
                c, "find", _n_find0, None, Compiled,
                qt_QTextDocument_find_QTextCursor_QTextDocument_string_QTextCursor_int,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "subString", "string"),
                new Param(c, "cursor", "qt.QTextCursor"),
                new Param(c, "options", "int",
                          Value((int)QTextDocument::FindFlags())),
                End),
            new Function(
                c, "find", _n_find1, None, Compiled,
                qt_QTextDocument_find_QTextCursor_QTextDocument_string_int_int,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "subString", "string"),
                new Param(c, "position", "int", Value((int)0)),
                new Param(c, "options", "int",
                          Value((int)QTextDocument::FindFlags())),
                End),
            new Function(
                c, "find", _n_find2, None, Compiled,
                qt_QTextDocument_find_QTextCursor_QTextDocument_QRegExp_int_int,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "expr", "qt.QRegExp"),
                new Param(c, "from", "int", Value((int)0)),
                new Param(c, "options", "int",
                          Value((int)QTextDocument::FindFlags())),
                End),
            new Function(
                c, "find", _n_find3, None, Compiled,
                qt_QTextDocument_find_QTextCursor_QTextDocument_QRegExp_QTextCursor_int,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "expr", "qt.QRegExp"),
                new Param(c, "cursor", "qt.QTextCursor"),
                new Param(c, "options", "int",
                          Value((int)QTextDocument::FindFlags())),
                End),
            // MISSING: find (QTextCursor; QTextDocument this, "const
            // QRegularExpression &" expr, int from, flags
            // QTextDocument::FindFlags options) MISSING: find (QTextCursor;
            // QTextDocument this, "const QRegularExpression &" expr,
            // QTextCursor cursor, flags QTextDocument::FindFlags options)
            new Function(
                c, "findBlock", _n_findBlock0, None, Compiled,
                qt_QTextDocument_findBlock_QTextBlock_QTextDocument_int, Return,
                "qt.QTextBlock", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "pos", "int"), End),
            new Function(
                c, "findBlockByLineNumber", _n_findBlockByLineNumber0, None,
                Compiled,
                qt_QTextDocument_findBlockByLineNumber_QTextBlock_QTextDocument_int,
                Return, "qt.QTextBlock", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "lineNumber", "int"), End),
            new Function(
                c, "findBlockByNumber", _n_findBlockByNumber0, None, Compiled,
                qt_QTextDocument_findBlockByNumber_QTextBlock_QTextDocument_int,
                Return, "qt.QTextBlock", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "blockNumber", "int"), End),
            new Function(c, "firstBlock", _n_firstBlock0, None, Compiled,
                         qt_QTextDocument_firstBlock_QTextBlock_QTextDocument,
                         Return, "qt.QTextBlock", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            new Function(c, "idealWidth", _n_idealWidth0, None, Compiled,
                         qt_QTextDocument_idealWidth_double_QTextDocument,
                         Return, "double", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: indentWidth (double; QTextDocument this)
            new Function(c, "isEmpty", _n_isEmpty0, None, Compiled,
                         qt_QTextDocument_isEmpty_bool_QTextDocument, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: isModified (bool; QTextDocument this)
            new Function(c, "isRedoAvailable", _n_isRedoAvailable0, None,
                         Compiled,
                         qt_QTextDocument_isRedoAvailable_bool_QTextDocument,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            new Function(c, "isUndoAvailable", _n_isUndoAvailable0, None,
                         Compiled,
                         qt_QTextDocument_isUndoAvailable_bool_QTextDocument,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: isUndoRedoEnabled (bool; QTextDocument this)
            new Function(c, "lastBlock", _n_lastBlock0, None, Compiled,
                         qt_QTextDocument_lastBlock_QTextBlock_QTextDocument,
                         Return, "qt.QTextBlock", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            new Function(c, "lineCount", _n_lineCount0, None, Compiled,
                         qt_QTextDocument_lineCount_int_QTextDocument, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            new Function(
                c, "markContentsDirty", _n_markContentsDirty0, None, Compiled,
                qt_QTextDocument_markContentsDirty_void_QTextDocument_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "position", "int"), new Param(c, "length", "int"),
                End),
            // PROP: maximumBlockCount (int; QTextDocument this)
            new Function(
                c, "metaInformation", _n_metaInformation0, None, Compiled,
                qt_QTextDocument_metaInformation_string_QTextDocument_int,
                Return, "string", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "info", "int"), End),
            // MISSING: object ("QTextObject *"; QTextDocument this, int
            // objectIndex) MISSING: objectForFormat ("QTextObject *";
            // QTextDocument this, "const QTextFormat &" f)
            new Function(c, "pageCount", _n_pageCount0, None, Compiled,
                         qt_QTextDocument_pageCount_int_QTextDocument, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // MISSING: pageSize ("QSizeF"; QTextDocument this)
            // MISSING: print (void; QTextDocument this, "QPagedPaintDevice *"
            // printer)
            new Function(
                c, "resource", _n_resource0, None, Compiled,
                qt_QTextDocument_resource_QVariant_QTextDocument_int_QUrl,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "type", "int"), new Param(c, "name", "qt.QUrl"),
                End),
            new Function(c, "revision", _n_revision0, None, Compiled,
                         qt_QTextDocument_revision_int_QTextDocument, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // MISSING: rootFrame ("QTextFrame *"; QTextDocument this)
            // PROP: setBaseUrl (void; QTextDocument this, QUrl url)
            new Function(
                c, "setDefaultCursorMoveStyle", _n_setDefaultCursorMoveStyle0,
                None, Compiled,
                qt_QTextDocument_setDefaultCursorMoveStyle_void_QTextDocument_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "style", "int"), End),
            new Function(
                c, "setDefaultFont", _n_setDefaultFont0, None, Compiled,
                qt_QTextDocument_setDefaultFont_void_QTextDocument_QFont,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "font", "qt.QFont"), End),
            // PROP: setDefaultStyleSheet (void; QTextDocument this, string
            // sheet)
            new Function(
                c, "setDefaultTextOption", _n_setDefaultTextOption0, None,
                Compiled,
                qt_QTextDocument_setDefaultTextOption_void_QTextDocument_QTextOption,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "option", "qt.QTextOption"), End),
            // MISSING: setDocumentLayout (void; QTextDocument this,
            // "QAbstractTextDocumentLayout *" layout) PROP: setDocumentMargin
            // (void; QTextDocument this, double margin)
            new Function(c, "setHtml", _n_setHtml0, None, Compiled,
                         qt_QTextDocument_setHtml_void_QTextDocument_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextDocument"),
                         new Param(c, "html", "string"), End),
            new Function(
                c, "setIndentWidth", _n_setIndentWidth0, None, Compiled,
                qt_QTextDocument_setIndentWidth_void_QTextDocument_double,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "width", "double"), End),
            // PROP: setMaximumBlockCount (void; QTextDocument this, int
            // maximum)
            new Function(
                c, "setMetaInformation", _n_setMetaInformation0, None, Compiled,
                qt_QTextDocument_setMetaInformation_void_QTextDocument_int_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "info", "int"), new Param(c, "string", "string"),
                End),
            // MISSING: setPageSize (void; QTextDocument this, "const QSizeF &"
            // size)
            new Function(
                c, "setPlainText", _n_setPlainText0, None, Compiled,
                qt_QTextDocument_setPlainText_void_QTextDocument_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "text", "string"), End),
            // PROP: setTextWidth (void; QTextDocument this, double width)
            // PROP: setUndoRedoEnabled (void; QTextDocument this, bool enable)
            // PROP: setUseDesignMetrics (void; QTextDocument this, bool b)
            // MISSING: size ("QSizeF"; QTextDocument this)
            // PROP: textWidth (double; QTextDocument this)
            new Function(
                c, "toHtml", _n_toHtml0, None, Compiled,
                qt_QTextDocument_toHtml_string_QTextDocument_QByteArray, Return,
                "string", Parameters, new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "encoding", "qt.QByteArray"), End),
            new Function(c, "toPlainText", _n_toPlainText0, None, Compiled,
                         qt_QTextDocument_toPlainText_string_QTextDocument,
                         Return, "string", Parameters,
                         new Param(c, "this", "qt.QTextDocument"), End),
            // PROP: useDesignMetrics (bool; QTextDocument this)
            // MISSING: createObject ("QTextObject *"; QTextDocument this,
            // "const QTextFormat &" format) // protected
            _func[1] = new MemberFunction(
                c, "loadResource", _n_loadResource0, None, Compiled,
                qt_QTextDocument_loadResource_QVariant_QTextDocument_int_QUrl,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "type", "int"), new Param(c, "name", "qt.QUrl"),
                End),
            _func[2] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QTextDocument_event_bool_QTextDocument_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[3] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QTextDocument_eventFilter_bool_QTextDocument_QObject_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QTextDocument this)
            // MISSING: childEvent (void; QTextDocument this, "QChildEvent *"
            // event) // protected MISSING: connectNotify (void; QTextDocument
            // this, "const QMetaMethod &" signal) // protected
            _func[4] = new MemberFunction(
                c, "customEvent", _n_customEvent0, None, Compiled,
                qt_QTextDocument_customEvent_void_QTextDocument_QEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: disconnectNotify (void; QTextDocument this, "const
            // QMetaMethod &" signal) // protected
            _func[5] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QTextDocument_timerEvent_void_QTextDocument_QTimerEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextDocument"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QTextDocument::staticMetaObject, propExclusions);
    }

} // namespace Mu
