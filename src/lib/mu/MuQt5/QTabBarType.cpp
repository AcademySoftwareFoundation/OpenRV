//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTabBarType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QIconType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QTabletEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QHideEventType.h>
#include <MuQt5/QMoveEventType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QColorType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QPointType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QTabBar::~MuQt_QTabBar()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QTabBar::MuQt_QTabBar(Pointer muobj, const CallEnvironment* ce,
                               QWidget* parent)
        : QTabBar(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTabBarType>(
            c->internName("qt.QTabBar"));
    }

    QSize MuQt_QTabBar::minimumSizeHint() const
    {
        if (!_env)
            return QTabBar::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTabBar::minimumSizeHint();
        }
    }

    QSize MuQt_QTabBar::sizeHint() const
    {
        if (!_env)
            return QTabBar::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTabBar::sizeHint();
        }
    }

    QSize MuQt_QTabBar::minimumTabSizeHint(int index) const
    {
        if (!_env)
            return QTabBar::minimumTabSizeHint(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTabBar::minimumTabSizeHint(index);
        }
    }

    void MuQt_QTabBar::tabInserted(int index)
    {
        if (!_env)
        {
            QTabBar::tabInserted(index);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::tabInserted(index);
        }
    }

    void MuQt_QTabBar::tabLayoutChange()
    {
        if (!_env)
        {
            QTabBar::tabLayoutChange();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::tabLayoutChange();
        }
    }

    void MuQt_QTabBar::tabRemoved(int index)
    {
        if (!_env)
        {
            QTabBar::tabRemoved(index);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::tabRemoved(index);
        }
    }

    QSize MuQt_QTabBar::tabSizeHint(int index) const
    {
        if (!_env)
            return QTabBar::tabSizeHint(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTabBar::tabSizeHint(index);
        }
    }

    void MuQt_QTabBar::changeEvent(QEvent* event)
    {
        if (!_env)
        {
            QTabBar::changeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::changeEvent(event);
        }
    }

    bool MuQt_QTabBar::event(QEvent* event_)
    {
        if (!_env)
            return QTabBar::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTabBar::event(event_);
        }
    }

    void MuQt_QTabBar::hideEvent(QHideEvent* _p13)
    {
        if (!_env)
        {
            QTabBar::hideEvent(_p13);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, _p13, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::hideEvent(_p13);
        }
    }

    void MuQt_QTabBar::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QTabBar::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::keyPressEvent(event);
        }
    }

    void MuQt_QTabBar::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTabBar::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::mouseMoveEvent(event);
        }
    }

    void MuQt_QTabBar::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTabBar::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::mousePressEvent(event);
        }
    }

    void MuQt_QTabBar::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTabBar::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::mouseReleaseEvent(event);
        }
    }

    void MuQt_QTabBar::paintEvent(QPaintEvent* _p14)
    {
        if (!_env)
        {
            QTabBar::paintEvent(_p14);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, _p14, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::paintEvent(_p14);
        }
    }

    void MuQt_QTabBar::resizeEvent(QResizeEvent* _p15)
    {
        if (!_env)
        {
            QTabBar::resizeEvent(_p15);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, _p15, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::resizeEvent(_p15);
        }
    }

    void MuQt_QTabBar::showEvent(QShowEvent* _p13)
    {
        if (!_env)
        {
            QTabBar::showEvent(_p13);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, _p13, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::showEvent(_p13);
        }
    }

    void MuQt_QTabBar::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QTabBar::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::timerEvent(event);
        }
    }

    void MuQt_QTabBar::wheelEvent(QWheelEvent* event)
    {
        if (!_env)
        {
            QTabBar::wheelEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QWheelEventType>(c, event, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::wheelEvent(event);
        }
    }

    bool MuQt_QTabBar::hasHeightForWidth() const
    {
        if (!_env)
            return QTabBar::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTabBar::hasHeightForWidth();
        }
    }

    int MuQt_QTabBar::heightForWidth(int w) const
    {
        if (!_env)
            return QTabBar::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTabBar::heightForWidth(w);
        }
    }

    QVariant MuQt_QTabBar::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QTabBar::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QTabBar::inputMethodQuery(query);
        }
    }

    void MuQt_QTabBar::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QTabBar::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::closeEvent(event);
        }
    }

    void MuQt_QTabBar::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QTabBar::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::contextMenuEvent(event);
        }
    }

    void MuQt_QTabBar::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QTabBar::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::dragEnterEvent(event);
        }
    }

    void MuQt_QTabBar::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QTabBar::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::dragLeaveEvent(event);
        }
    }

    void MuQt_QTabBar::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QTabBar::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::dragMoveEvent(event);
        }
    }

    void MuQt_QTabBar::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QTabBar::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::dropEvent(event);
        }
    }

    void MuQt_QTabBar::enterEvent(QEvent* event)
    {
        if (!_env)
        {
            QTabBar::enterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::enterEvent(event);
        }
    }

    void MuQt_QTabBar::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QTabBar::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::focusInEvent(event);
        }
    }

    bool MuQt_QTabBar::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QTabBar::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTabBar::focusNextPrevChild(next);
        }
    }

    void MuQt_QTabBar::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QTabBar::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::focusOutEvent(event);
        }
    }

    void MuQt_QTabBar::keyReleaseEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QTabBar::keyReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::keyReleaseEvent(event);
        }
    }

    void MuQt_QTabBar::leaveEvent(QEvent* event)
    {
        if (!_env)
        {
            QTabBar::leaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::leaveEvent(event);
        }
    }

    void MuQt_QTabBar::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTabBar::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[34];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QTabBar::moveEvent(QMoveEvent* event)
    {
        if (!_env)
        {
            QTabBar::moveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[35];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMoveEventType>(c, event, "qt.QMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::moveEvent(event);
        }
    }

    void MuQt_QTabBar::tabletEvent(QTabletEvent* event)
    {
        if (!_env)
        {
            QTabBar::tabletEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[36];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTabletEventType>(c, event, "qt.QTabletEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTabBar::tabletEvent(event);
        }
    }

    int MuQt_QTabBar::metric(PaintDeviceMetric m) const
    {
        if (!_env)
            return QTabBar::metric(m);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[37];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(m);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTabBar::metric(m);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTabBarType::QTabBarType(Context* c, const char* name, Class* super,
                             Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTabBarType::~QTabBarType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTabBar_QTabBar_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTabBar* w = object<QTabBar>(widget))
        {
            QTabBarType* type = c->findSymbolOfTypeByQualifiedName<QTabBarType>(
                c->internName("qt.QTabBar"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QTabBar_QTabBar_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTabBar_QTabBar_QTabBar_QTabBar_QWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QTabBar(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1));
        return param_this;
    }

    int qt_QTabBar_addTab_int_QTabBar_string(Mu::Thread& NODE_THREAD,
                                             Pointer param_this,
                                             Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        const QString arg1 = qstring(param_text);
        return arg0->addTab(arg1);
    }

    int qt_QTabBar_addTab_int_QTabBar_QIcon_string(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_icon,
                                                   Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        const QIcon arg1 = getqtype<QIconType>(param_icon);
        const QString arg2 = qstring(param_text);
        return arg0->addTab(arg1, arg2);
    }

    int qt_QTabBar_insertTab_int_QTabBar_int_string(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_index,
                                                    Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QString arg2 = qstring(param_text);
        return arg0->insertTab(arg1, arg2);
    }

    int qt_QTabBar_insertTab_int_QTabBar_int_QIcon_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_icon, Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QIcon arg2 = getqtype<QIconType>(param_icon);
        const QString arg3 = qstring(param_text);
        return arg0->insertTab(arg1, arg2, arg3);
    }

    bool qt_QTabBar_isTabEnabled_bool_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return arg0->isTabEnabled(arg1);
    }

    void qt_QTabBar_moveTab_void_QTabBar_int_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_from, int param_to)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_from);
        int arg2 = (int)(param_to);
        arg0->moveTab(arg1, arg2);
    }

    void qt_QTabBar_removeTab_void_QTabBar_int(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        arg0->removeTab(arg1);
    }

    void qt_QTabBar_setTabButton_void_QTabBar_int_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        int param_position, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        QTabBar::ButtonPosition arg2 =
            (QTabBar::ButtonPosition)(param_position);
        QWidget* arg3 = object<QWidget>(param_widget);
        arg0->setTabButton(arg1, arg2, arg3);
    }

    void qt_QTabBar_setTabData_void_QTabBar_int_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_data)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QVariant arg2 = getqtype<QVariantType>(param_data);
        arg0->setTabData(arg1, arg2);
    }

    void qt_QTabBar_setTabEnabled_void_QTabBar_int_bool(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_index,
                                                        bool param_enabled)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        bool arg2 = (bool)(param_enabled);
        arg0->setTabEnabled(arg1, arg2);
    }

    void qt_QTabBar_setTabIcon_void_QTabBar_int_QIcon(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_index,
                                                      Pointer param_icon)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QIcon arg2 = getqtype<QIconType>(param_icon);
        arg0->setTabIcon(arg1, arg2);
    }

    void qt_QTabBar_setTabText_void_QTabBar_int_string(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_index,
                                                       Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QString arg2 = qstring(param_text);
        arg0->setTabText(arg1, arg2);
    }

    void qt_QTabBar_setTabTextColor_void_QTabBar_int_QColor(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_color)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QColor arg2 = getqtype<QColorType>(param_color);
        arg0->setTabTextColor(arg1, arg2);
    }

    void qt_QTabBar_setTabToolTip_void_QTabBar_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_tip)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QString arg2 = qstring(param_tip);
        arg0->setTabToolTip(arg1, arg2);
    }

    void qt_QTabBar_setTabWhatsThis_void_QTabBar_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        const QString arg2 = qstring(param_text);
        arg0->setTabWhatsThis(arg1, arg2);
    }

    int qt_QTabBar_tabAt_int_QTabBar_QPoint(Mu::Thread& NODE_THREAD,
                                            Pointer param_this,
                                            Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        return arg0->tabAt(arg1);
    }

    Pointer qt_QTabBar_tabButton_QWidget_QTabBar_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        int param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        QTabBar::ButtonPosition arg2 =
            (QTabBar::ButtonPosition)(param_position);
        return makeinstance<QWidgetType>(c, arg0->tabButton(arg1, arg2),
                                         "qt.QWidget");
    }

    Pointer qt_QTabBar_tabData_QVariant_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makeqtype<QVariantType>(c, arg0->tabData(arg1), "qt.QVariant");
    }

    Pointer qt_QTabBar_tabIcon_QIcon_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makeqtype<QIconType>(c, arg0->tabIcon(arg1), "qt.QIcon");
    }

    Pointer qt_QTabBar_tabRect_QRect_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makeqtype<QRectType>(c, arg0->tabRect(arg1), "qt.QRect");
    }

    Pointer qt_QTabBar_tabText_string_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makestring(c, arg0->tabText(arg1));
    }

    Pointer qt_QTabBar_tabTextColor_QColor_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makeqtype<QColorType>(c, arg0->tabTextColor(arg1), "qt.QColor");
    }

    Pointer qt_QTabBar_tabToolTip_string_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makestring(c, arg0->tabToolTip(arg1));
    }

    Pointer qt_QTabBar_tabWhatsThis_string_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return makestring(c, arg0->tabWhatsThis(arg1));
    }

    Pointer qt_QTabBar_minimumSizeHint_QSize_QTabBar(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QTabBar::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QTabBar_sizeHint_QSize_QTabBar(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QTabBar::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    Pointer qt_QTabBar_minimumTabSizeHint_QSize_QTabBar_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c,
                         ((MuQt_QTabBar*)arg0)
                             ->minimumTabSizeHint_pub_parent(arg1),
                         "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QTabBar*)arg0)->minimumTabSizeHint_pub(arg1),
                         "qt.QSize");
    }

    void qt_QTabBar_tabInserted_void_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->tabInserted_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->tabInserted_pub(arg1);
    }

    void qt_QTabBar_tabLayoutChange_void_QTabBar(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->tabLayoutChange_pub_parent();
        else
            ((MuQt_QTabBar*)arg0)->tabLayoutChange_pub();
    }

    void qt_QTabBar_tabRemoved_void_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->tabRemoved_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->tabRemoved_pub(arg1);
    }

    Pointer qt_QTabBar_tabSizeHint_QSize_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_index);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, ((MuQt_QTabBar*)arg0)->tabSizeHint_pub_parent(arg1),
                         "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QTabBar*)arg0)->tabSizeHint_pub(arg1),
                         "qt.QSize");
    }

    void qt_QTabBar_changeEvent_void_QTabBar_QEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->changeEvent_pub(arg1);
    }

    bool qt_QTabBar_event_bool_QTabBar_QEvent(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTabBar*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QTabBar*)arg0)->event_pub(arg1);
    }

    void qt_QTabBar_hideEvent_void_QTabBar_QHideEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param__p13)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param__p13);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QTabBar_keyPressEvent_void_QTabBar_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QTabBar_mouseMoveEvent_void_QTabBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QTabBar_mousePressEvent_void_QTabBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QTabBar_mouseReleaseEvent_void_QTabBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QTabBar_paintEvent_void_QTabBar_QPaintEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param__p14)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param__p14);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QTabBar_resizeEvent_void_QTabBar_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p15)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param__p15);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QTabBar_showEvent_void_QTabBar_QShowEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param__p13)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param__p13);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->showEvent_pub(arg1);
    }

    void qt_QTabBar_timerEvent_void_QTabBar_QTimerEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->timerEvent_pub(arg1);
    }

    void qt_QTabBar_wheelEvent_void_QTabBar_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->wheelEvent_pub(arg1);
    }

    bool qt_QTabBar_hasHeightForWidth_bool_QTabBar(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        return isMuQtObject(arg0) ? arg0->QTabBar::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QTabBar_heightForWidth_int_QTabBar_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QTabBar::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    Pointer qt_QTabBar_inputMethodQuery_QVariant_QTabBar_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QTabBar::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    void qt_QTabBar_closeEvent_void_QTabBar_QCloseEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QTabBar_contextMenuEvent_void_QTabBar_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QTabBar_dragEnterEvent_void_QTabBar_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QTabBar_dragLeaveEvent_void_QTabBar_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QTabBar_dragMoveEvent_void_QTabBar_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QTabBar_dropEvent_void_QTabBar_QDropEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QTabBar_enterEvent_void_QTabBar_QEvent(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->enterEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->enterEvent_pub(arg1);
    }

    void qt_QTabBar_focusInEvent_void_QTabBar_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QTabBar_focusNextPrevChild_bool_QTabBar_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTabBar*)arg0)->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QTabBar*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QTabBar_focusOutEvent_void_QTabBar_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QTabBar_keyReleaseEvent_void_QTabBar_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QTabBar_leaveEvent_void_QTabBar_QEvent(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->leaveEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->leaveEvent_pub(arg1);
    }

    void qt_QTabBar_mouseDoubleClickEvent_void_QTabBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QTabBar_moveEvent_void_QTabBar_QMoveEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QMoveEvent* arg1 = getqpointer<QMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->moveEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->moveEvent_pub(arg1);
    }

    void qt_QTabBar_tabletEvent_void_QTabBar_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QTabletEvent* arg1 = getqpointer<QTabletEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTabBar*)arg0)->tabletEvent_pub_parent(arg1);
        else
            ((MuQt_QTabBar*)arg0)->tabletEvent_pub(arg1);
    }

    int qt_QTabBar_metric_int_QTabBar_int(Mu::Thread& NODE_THREAD,
                                          Pointer param_this, int param_m)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabBar* arg0 = object<QTabBar>(param_this);
        QPaintDevice::PaintDeviceMetric arg1 =
            (QPaintDevice::PaintDeviceMetric)(param_m);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTabBar*)arg0)->metric_pub_parent(arg1)
                   : ((MuQt_QTabBar*)arg0)->metric_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QTabBar0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_QTabBar_QTabBar_QTabBar_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addTab0, int)
    {
        NODE_RETURN(qt_QTabBar_addTab_int_QTabBar_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addTab1, int)
    {
        NODE_RETURN(qt_QTabBar_addTab_int_QTabBar_QIcon_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertTab0, int)
    {
        NODE_RETURN(qt_QTabBar_insertTab_int_QTabBar_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertTab1, int)
    {
        NODE_RETURN(qt_QTabBar_insertTab_int_QTabBar_int_QIcon_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isTabEnabled0, bool)
    {
        NODE_RETURN(qt_QTabBar_isTabEnabled_bool_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_moveTab0, void)
    {
        qt_QTabBar_moveTab_void_QTabBar_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_removeTab0, void)
    {
        qt_QTabBar_removeTab_void_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setTabButton0, void)
    {
        qt_QTabBar_setTabButton_void_QTabBar_int_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTabData0, void)
    {
        qt_QTabBar_setTabData_void_QTabBar_int_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTabEnabled0, void)
    {
        qt_QTabBar_setTabEnabled_void_QTabBar_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setTabIcon0, void)
    {
        qt_QTabBar_setTabIcon_void_QTabBar_int_QIcon(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTabText0, void)
    {
        qt_QTabBar_setTabText_void_QTabBar_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTabTextColor0, void)
    {
        qt_QTabBar_setTabTextColor_void_QTabBar_int_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTabToolTip0, void)
    {
        qt_QTabBar_setTabToolTip_void_QTabBar_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTabWhatsThis0, void)
    {
        qt_QTabBar_setTabWhatsThis_void_QTabBar_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabAt0, int)
    {
        NODE_RETURN(qt_QTabBar_tabAt_int_QTabBar_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_tabButton0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabButton_QWidget_QTabBar_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabData0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabData_QVariant_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabIcon0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabIcon_QIcon_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabRect0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabRect_QRect_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabText0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabText_string_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabTextColor0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabTextColor_QColor_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabToolTip0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabToolTip_string_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabWhatsThis0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabWhatsThis_string_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_minimumSizeHint_QSize_QTabBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_sizeHint_QSize_QTabBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_minimumTabSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_minimumTabSizeHint_QSize_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_tabInserted0, void)
    {
        qt_QTabBar_tabInserted_void_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_tabLayoutChange0, void)
    {
        qt_QTabBar_tabLayoutChange_void_QTabBar(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabRemoved0, void)
    {
        qt_QTabBar_tabRemoved_void_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_tabSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_tabSizeHint_QSize_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QTabBar_changeEvent_void_QTabBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QTabBar_event_bool_QTabBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QTabBar_hideEvent_void_QTabBar_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QTabBar_keyPressEvent_void_QTabBar_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QTabBar_mouseMoveEvent_void_QTabBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QTabBar_mousePressEvent_void_QTabBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QTabBar_mouseReleaseEvent_void_QTabBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QTabBar_paintEvent_void_QTabBar_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QTabBar_resizeEvent_void_QTabBar_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QTabBar_showEvent_void_QTabBar_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QTabBar_timerEvent_void_QTabBar_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QTabBar_wheelEvent_void_QTabBar_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QTabBar_hasHeightForWidth_bool_QTabBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QTabBar_heightForWidth_int_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QTabBar_inputMethodQuery_QVariant_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QTabBar_closeEvent_void_QTabBar_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QTabBar_contextMenuEvent_void_QTabBar_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QTabBar_dragEnterEvent_void_QTabBar_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QTabBar_dragLeaveEvent_void_QTabBar_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QTabBar_dragMoveEvent_void_QTabBar_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QTabBar_dropEvent_void_QTabBar_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_enterEvent0, void)
    {
        qt_QTabBar_enterEvent_void_QTabBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QTabBar_focusInEvent_void_QTabBar_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QTabBar_focusNextPrevChild_bool_QTabBar_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QTabBar_focusOutEvent_void_QTabBar_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QTabBar_keyReleaseEvent_void_QTabBar_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
    {
        qt_QTabBar_leaveEvent_void_QTabBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QTabBar_mouseDoubleClickEvent_void_QTabBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveEvent0, void)
    {
        qt_QTabBar_moveEvent_void_QTabBar_QMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
    {
        qt_QTabBar_tabletEvent_void_QTabBar_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_metric0, int)
    {
        NODE_RETURN(qt_QTabBar_metric_int_QTabBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    void QTabBarType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTabBar_QTabBar_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QTabBar", _n_QTabBar0, None, Compiled,
                         qt_QTabBar_QTabBar_QTabBar_QTabBar_QWidget, Return,
                         "qt.QTabBar", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "addTab", _n_addTab0, None, Compiled,
                         qt_QTabBar_addTab_int_QTabBar_string, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "text", "string"), End),
            new Function(c, "addTab", _n_addTab1, None, Compiled,
                         qt_QTabBar_addTab_int_QTabBar_QIcon_string, Return,
                         "int", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "icon", "qt.QIcon"),
                         new Param(c, "text", "string"), End),
            // PROP: autoHide (bool; QTabBar this)
            // PROP: changeCurrentOnDrag (bool; QTabBar this)
            // PROP: count (int; QTabBar this)
            // PROP: currentIndex (int; QTabBar this)
            // PROP: documentMode (bool; QTabBar this)
            // PROP: drawBase (bool; QTabBar this)
            // PROP: elideMode (flags Qt::TextElideMode; QTabBar this)
            // PROP: expanding (bool; QTabBar this)
            // PROP: iconSize (QSize; QTabBar this)
            new Function(c, "insertTab", _n_insertTab0, None, Compiled,
                         qt_QTabBar_insertTab_int_QTabBar_int_string, Return,
                         "int", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "text", "string"), End),
            new Function(
                c, "insertTab", _n_insertTab1, None, Compiled,
                qt_QTabBar_insertTab_int_QTabBar_int_QIcon_string, Return,
                "int", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), new Param(c, "icon", "qt.QIcon"),
                new Param(c, "text", "string"), End),
            // PROP: isMovable (bool; QTabBar this)
            new Function(c, "isTabEnabled", _n_isTabEnabled0, None, Compiled,
                         qt_QTabBar_isTabEnabled_bool_QTabBar_int, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "moveTab", _n_moveTab0, None, Compiled,
                         qt_QTabBar_moveTab_void_QTabBar_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "from", "int"), new Param(c, "to", "int"),
                         End),
            new Function(c, "removeTab", _n_removeTab0, None, Compiled,
                         qt_QTabBar_removeTab_void_QTabBar_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            // PROP: selectionBehaviorOnRemove (flags
            // QTabBar::SelectionBehavior; QTabBar this) PROP: setAutoHide
            // (void; QTabBar this, bool hide) PROP: setChangeCurrentOnDrag
            // (void; QTabBar this, bool change) PROP: setDocumentMode (void;
            // QTabBar this, bool set) PROP: setDrawBase (void; QTabBar this,
            // bool drawTheBase) PROP: setElideMode (void; QTabBar this, flags
            // Qt::TextElideMode _p18) PROP: setExpanding (void; QTabBar this,
            // bool enabled) PROP: setIconSize (void; QTabBar this, QSize size)
            // PROP: setMovable (void; QTabBar this, bool movable)
            // PROP: setSelectionBehaviorOnRemove (void; QTabBar this, flags
            // QTabBar::SelectionBehavior behavior) PROP: setShape (void;
            // QTabBar this, flags QTabBar::Shape shape)
            new Function(
                c, "setTabButton", _n_setTabButton0, None, Compiled,
                qt_QTabBar_setTabButton_void_QTabBar_int_int_QWidget, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), new Param(c, "position", "int"),
                new Param(c, "widget", "qt.QWidget"), End),
            new Function(c, "setTabData", _n_setTabData0, None, Compiled,
                         qt_QTabBar_setTabData_void_QTabBar_int_QVariant,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "data", "qt.QVariant"), End),
            new Function(c, "setTabEnabled", _n_setTabEnabled0, None, Compiled,
                         qt_QTabBar_setTabEnabled_void_QTabBar_int_bool, Return,
                         "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "enabled", "bool"), End),
            new Function(c, "setTabIcon", _n_setTabIcon0, None, Compiled,
                         qt_QTabBar_setTabIcon_void_QTabBar_int_QIcon, Return,
                         "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "icon", "qt.QIcon"), End),
            new Function(c, "setTabText", _n_setTabText0, None, Compiled,
                         qt_QTabBar_setTabText_void_QTabBar_int_string, Return,
                         "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "text", "string"), End),
            new Function(
                c, "setTabTextColor", _n_setTabTextColor0, None, Compiled,
                qt_QTabBar_setTabTextColor_void_QTabBar_int_QColor, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"),
                new Param(c, "color", "qt.QColor"), End),
            new Function(c, "setTabToolTip", _n_setTabToolTip0, None, Compiled,
                         qt_QTabBar_setTabToolTip_void_QTabBar_int_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "tip", "string"), End),
            new Function(
                c, "setTabWhatsThis", _n_setTabWhatsThis0, None, Compiled,
                qt_QTabBar_setTabWhatsThis_void_QTabBar_int_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), new Param(c, "text", "string"),
                End),
            // PROP: setTabsClosable (void; QTabBar this, bool closable)
            // PROP: setUsesScrollButtons (void; QTabBar this, bool useButtons)
            // PROP: shape (flags QTabBar::Shape; QTabBar this)
            new Function(c, "tabAt", _n_tabAt0, None, Compiled,
                         qt_QTabBar_tabAt_int_QTabBar_QPoint, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "tabButton", _n_tabButton0, None, Compiled,
                         qt_QTabBar_tabButton_QWidget_QTabBar_int_int, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"),
                         new Param(c, "position", "int"), End),
            new Function(c, "tabData", _n_tabData0, None, Compiled,
                         qt_QTabBar_tabData_QVariant_QTabBar_int, Return,
                         "qt.QVariant", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "tabIcon", _n_tabIcon0, None, Compiled,
                         qt_QTabBar_tabIcon_QIcon_QTabBar_int, Return,
                         "qt.QIcon", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "tabRect", _n_tabRect0, None, Compiled,
                         qt_QTabBar_tabRect_QRect_QTabBar_int, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "tabText", _n_tabText0, None, Compiled,
                         qt_QTabBar_tabText_string_QTabBar_int, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "tabTextColor", _n_tabTextColor0, None, Compiled,
                         qt_QTabBar_tabTextColor_QColor_QTabBar_int, Return,
                         "qt.QColor", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "tabToolTip", _n_tabToolTip0, None, Compiled,
                         qt_QTabBar_tabToolTip_string_QTabBar_int, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            new Function(c, "tabWhatsThis", _n_tabWhatsThis0, None, Compiled,
                         qt_QTabBar_tabWhatsThis_string_QTabBar_int, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QTabBar"),
                         new Param(c, "index", "int"), End),
            // PROP: tabsClosable (bool; QTabBar this)
            // PROP: usesScrollButtons (bool; QTabBar this)
            _func[0] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QTabBar_minimumSizeHint_QSize_QTabBar, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QTabBar"), End),
            _func[1] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QTabBar_sizeHint_QSize_QTabBar, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QTabBar"), End),
            // MISSING: initStyleOption (void; QTabBar this, "QStyleOptionTab *"
            // option, int tabIndex) // protected
            _func[2] = new MemberFunction(
                c, "minimumTabSizeHint", _n_minimumTabSizeHint0, None, Compiled,
                qt_QTabBar_minimumTabSizeHint_QSize_QTabBar_int, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), End),
            _func[3] = new MemberFunction(
                c, "tabInserted", _n_tabInserted0, None, Compiled,
                qt_QTabBar_tabInserted_void_QTabBar_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), End),
            _func[4] = new MemberFunction(
                c, "tabLayoutChange", _n_tabLayoutChange0, None, Compiled,
                qt_QTabBar_tabLayoutChange_void_QTabBar, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"), End),
            _func[5] = new MemberFunction(
                c, "tabRemoved", _n_tabRemoved0, None, Compiled,
                qt_QTabBar_tabRemoved_void_QTabBar_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), End),
            _func[6] = new MemberFunction(
                c, "tabSizeHint", _n_tabSizeHint0, None, Compiled,
                qt_QTabBar_tabSizeHint_QSize_QTabBar_int, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "index", "int"), End),
            _func[7] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QTabBar_changeEvent_void_QTabBar_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[8] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QTabBar_event_bool_QTabBar_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event_", "qt.QEvent"), End),
            _func[9] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QTabBar_hideEvent_void_QTabBar_QHideEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "_p13", "qt.QHideEvent"), End),
            _func[10] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QTabBar_keyPressEvent_void_QTabBar_QKeyEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[11] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QTabBar_mouseMoveEvent_void_QTabBar_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[12] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QTabBar_mousePressEvent_void_QTabBar_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[13] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QTabBar_mouseReleaseEvent_void_QTabBar_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QTabBar_paintEvent_void_QTabBar_QPaintEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "_p14", "qt.QPaintEvent"), End),
            _func[15] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QTabBar_resizeEvent_void_QTabBar_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "_p15", "qt.QResizeEvent"), End),
            _func[16] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QTabBar_showEvent_void_QTabBar_QShowEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "_p13", "qt.QShowEvent"), End),
            _func[17] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QTabBar_timerEvent_void_QTabBar_QTimerEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[18] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QTabBar_wheelEvent_void_QTabBar_QWheelEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QWheelEvent"), End),
            _func[19] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QTabBar_hasHeightForWidth_bool_QTabBar, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTabBar"), End),
            _func[20] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QTabBar_heightForWidth_int_QTabBar_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "w", "int"), End),
            _func[21] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QTabBar_inputMethodQuery_QVariant_QTabBar_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "query", "int"), End),
            // MISSING: paintEngine ("QPaintEngine *"; QTabBar this)
            // MISSING: actionEvent (void; QTabBar this, "QActionEvent *" event)
            // // protected
            _func[22] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QTabBar_closeEvent_void_QTabBar_QCloseEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[23] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QTabBar_contextMenuEvent_void_QTabBar_QContextMenuEvent,
                Return, "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[24] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QTabBar_dragEnterEvent_void_QTabBar_QDragEnterEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[25] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QTabBar_dragLeaveEvent_void_QTabBar_QDragLeaveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[26] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QTabBar_dragMoveEvent_void_QTabBar_QDragMoveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[27] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QTabBar_dropEvent_void_QTabBar_QDropEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[28] = new MemberFunction(
                c, "enterEvent", _n_enterEvent0, None, Compiled,
                qt_QTabBar_enterEvent_void_QTabBar_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[29] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QTabBar_focusInEvent_void_QTabBar_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[30] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QTabBar_focusNextPrevChild_bool_QTabBar_bool, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "next", "bool"), End),
            _func[31] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QTabBar_focusOutEvent_void_QTabBar_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QTabBar this, "QInputMethodEvent
            // *" event) // protected
            _func[32] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QTabBar_keyReleaseEvent_void_QTabBar_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[33] = new MemberFunction(
                c, "leaveEvent", _n_leaveEvent0, None, Compiled,
                qt_QTabBar_leaveEvent_void_QTabBar_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[34] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QTabBar_mouseDoubleClickEvent_void_QTabBar_QMouseEvent,
                Return, "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[35] = new MemberFunction(
                c, "moveEvent", _n_moveEvent0, None, Compiled,
                qt_QTabBar_moveEvent_void_QTabBar_QMoveEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QMoveEvent"), End),
            // MISSING: nativeEvent (bool; QTabBar this, QByteArray eventType,
            // "void *" message, "long *" result) // protected
            _func[36] = new MemberFunction(
                c, "tabletEvent", _n_tabletEvent0, None, Compiled,
                qt_QTabBar_tabletEvent_void_QTabBar_QTabletEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTabBar"),
                new Param(c, "event", "qt.QTabletEvent"), End),
            // MISSING: initPainter (void; QTabBar this, "QPainter *" painter)
            // // protected
            _func[37] = new MemberFunction(
                c, "metric", _n_metric0, None, Compiled,
                qt_QTabBar_metric_int_QTabBar_int, Return, "int", Parameters,
                new Param(c, "this", "qt.QTabBar"), new Param(c, "m", "int"),
                End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QTabBar::staticMetaObject, propExclusions);
    }

} // namespace Mu
