//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTextBrowserType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QMimeDataType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QUrlType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QDragEnterEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    MuQt_QTextBrowser::MuQt_QTextBrowser(Pointer muobj,
                                         const CallEnvironment* ce,
                                         QWidget* parent)
        : QTextBrowser(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTextBrowserType>(
            c->internName("qt.QTextBrowser"));
    }

    QVariant MuQt_QTextBrowser::loadResource(int type, const QUrl& name)
    {
        if (!_env)
            return QTextBrowser::loadResource(type, name);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(type);
            args[2] = Value(makeqtype<QUrlType>(c, name, "qt.QUrl"));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QTextBrowser::loadResource(type, name);
        }
    }

    bool MuQt_QTextBrowser::event(QEvent* e)
    {
        if (!_env)
            return QTextBrowser::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTextBrowser::event(e);
        }
    }

    bool MuQt_QTextBrowser::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QTextBrowser::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTextBrowser::focusNextPrevChild(next);
        }
    }

    void MuQt_QTextBrowser::focusOutEvent(QFocusEvent* ev)
    {
        if (!_env)
        {
            QTextBrowser::focusOutEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, ev, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::focusOutEvent(ev);
        }
    }

    void MuQt_QTextBrowser::keyPressEvent(QKeyEvent* ev)
    {
        if (!_env)
        {
            QTextBrowser::keyPressEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, ev, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::keyPressEvent(ev);
        }
    }

    void MuQt_QTextBrowser::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::mouseMoveEvent(e);
        }
    }

    void MuQt_QTextBrowser::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::mousePressEvent(e);
        }
    }

    void MuQt_QTextBrowser::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::mouseReleaseEvent(e);
        }
    }

    void MuQt_QTextBrowser::paintEvent(QPaintEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::paintEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, e, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::paintEvent(e);
        }
    }

    QVariant
    MuQt_QTextBrowser::inputMethodQuery(Qt::InputMethodQuery property) const
    {
        if (!_env)
            return QTextBrowser::inputMethodQuery(property);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(property));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QTextBrowser::inputMethodQuery(property);
        }
    }

    bool MuQt_QTextBrowser::canInsertFromMimeData(const QMimeData* source) const
    {
        if (!_env)
            return QTextBrowser::canInsertFromMimeData(source);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QMimeDataType>(c, source, "qt.QMimeData"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTextBrowser::canInsertFromMimeData(source);
        }
    }

    QMimeData* MuQt_QTextBrowser::createMimeDataFromSelection() const
    {
        if (!_env)
            return QTextBrowser::createMimeDataFromSelection();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return object<QMimeData>(rval._Pointer);
        }
        else
        {
            return QTextBrowser::createMimeDataFromSelection();
        }
    }

    void MuQt_QTextBrowser::insertFromMimeData(const QMimeData* source)
    {
        if (!_env)
        {
            QTextBrowser::insertFromMimeData(source);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QMimeDataType>(c, source, "qt.QMimeData"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::insertFromMimeData(source);
        }
    }

    void MuQt_QTextBrowser::changeEvent(QEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::changeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::changeEvent(e);
        }
    }

    void MuQt_QTextBrowser::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QTextBrowser::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::contextMenuEvent(event);
        }
    }

    void MuQt_QTextBrowser::dragEnterEvent(QDragEnterEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::dragEnterEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragEnterEventType>(c, e, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::dragEnterEvent(e);
        }
    }

    void MuQt_QTextBrowser::dragLeaveEvent(QDragLeaveEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::dragLeaveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragLeaveEventType>(c, e, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::dragLeaveEvent(e);
        }
    }

    void MuQt_QTextBrowser::dragMoveEvent(QDragMoveEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::dragMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragMoveEventType>(c, e, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::dragMoveEvent(e);
        }
    }

    void MuQt_QTextBrowser::dropEvent(QDropEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::dropEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, e, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::dropEvent(e);
        }
    }

    void MuQt_QTextBrowser::focusInEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::focusInEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::focusInEvent(e);
        }
    }

    void MuQt_QTextBrowser::keyReleaseEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::keyReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::keyReleaseEvent(e);
        }
    }

    void MuQt_QTextBrowser::mouseDoubleClickEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::mouseDoubleClickEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::mouseDoubleClickEvent(e);
        }
    }

    void MuQt_QTextBrowser::resizeEvent(QResizeEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::resizeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QResizeEventType>(c, e, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::resizeEvent(e);
        }
    }

    void MuQt_QTextBrowser::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QTextBrowser::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::scrollContentsBy(dx, dy);
        }
    }

    void MuQt_QTextBrowser::showEvent(QShowEvent* _p13)
    {
        if (!_env)
        {
            QTextBrowser::showEvent(_p13);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, _p13, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::showEvent(_p13);
        }
    }

    void MuQt_QTextBrowser::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QTextBrowser::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTextBrowser::wheelEvent(e);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTextBrowserType::QTextBrowserType(Context* c, const char* name,
                                       Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTextBrowserType::~QTextBrowserType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTextBrowser_QTextBrowser_QObject(Thread& NODE_THREAD,
                                                     Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTextBrowser* w = object<QTextBrowser>(widget))
        {
            QTextBrowserType* type =
                c->findSymbolOfTypeByQualifiedName<QTextBrowserType>(
                    c->internName("qt.QTextBrowser"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QTextBrowser_QTextBrowser_QObject(NODE_THREAD,
                                                      NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTextBrowser_QTextBrowser_QTextBrowser_QTextBrowser_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QTextBrowser(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    int qt_QTextBrowser_backwardHistoryCount_int_QTextBrowser(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        return arg0->backwardHistoryCount();
    }

    void qt_QTextBrowser_clearHistory_void_QTextBrowser(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        arg0->clearHistory();
    }

    int qt_QTextBrowser_forwardHistoryCount_int_QTextBrowser(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        return arg0->forwardHistoryCount();
    }

    Pointer qt_QTextBrowser_historyTitle_string_QTextBrowser_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_i)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        int arg1 = (int)(param_i);
        return makestring(c, arg0->historyTitle(arg1));
    }

    Pointer qt_QTextBrowser_historyUrl_QUrl_QTextBrowser_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_i)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        int arg1 = (int)(param_i);
        return makeqtype<QUrlType>(c, arg0->historyUrl(arg1), "qt.QUrl");
    }

    bool qt_QTextBrowser_isBackwardAvailable_bool_QTextBrowser(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        return arg0->isBackwardAvailable();
    }

    bool qt_QTextBrowser_isForwardAvailable_bool_QTextBrowser(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        return arg0->isForwardAvailable();
    }

    Pointer qt_QTextBrowser_loadResource_QVariant_QTextBrowser_int_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type,
        Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        int arg1 = (int)(param_type);
        const QUrl arg2 = getqtype<QUrlType>(param_name);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QTextBrowser::loadResource(arg1, arg2),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->loadResource(arg1, arg2),
                                             "qt.QVariant");
    }

    bool qt_QTextBrowser_event_bool_QTextBrowser_QEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTextBrowser*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QTextBrowser*)arg0)->event_pub(arg1);
    }

    bool qt_QTextBrowser_focusNextPrevChild_bool_QTextBrowser_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTextBrowser*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QTextBrowser*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QTextBrowser_focusOutEvent_void_QTextBrowser_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QTextBrowser_keyPressEvent_void_QTextBrowser_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QTextBrowser_mouseMoveEvent_void_QTextBrowser_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QTextBrowser_mousePressEvent_void_QTextBrowser_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QTextBrowser_mouseReleaseEvent_void_QTextBrowser_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QTextBrowser_paintEvent_void_QTextBrowser_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->paintEvent_pub(arg1);
    }

    Pointer qt_QTextBrowser_inputMethodQuery_QVariant_QTextBrowser_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_property)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_property);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QTextBrowser::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    bool qt_QTextBrowser_canInsertFromMimeData_bool_QTextBrowser_QMimeData(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_source)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        const QMimeData* arg1 = object<QMimeData>(param_source);
        return isMuQtObject(arg0) ? ((MuQt_QTextBrowser*)arg0)
                                        ->canInsertFromMimeData_pub_parent(arg1)
                                  : ((MuQt_QTextBrowser*)arg0)
                                        ->canInsertFromMimeData_pub(arg1);
    }

    Pointer qt_QTextBrowser_createMimeDataFromSelection_QMimeData_QTextBrowser(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        return isMuQtObject(arg0)
                   ? makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QTextBrowser*)arg0)
                             ->createMimeDataFromSelection_pub_parent(),
                         "qt.QMimeData")
                   : makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QTextBrowser*)arg0)
                             ->createMimeDataFromSelection_pub(),
                         "qt.QMimeData");
    }

    void qt_QTextBrowser_insertFromMimeData_void_QTextBrowser_QMimeData(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_source)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        const QMimeData* arg1 = object<QMimeData>(param_source);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->insertFromMimeData_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->insertFromMimeData_pub(arg1);
    }

    void qt_QTextBrowser_changeEvent_void_QTextBrowser_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QTextBrowser_contextMenuEvent_void_QTextBrowser_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QTextBrowser_dragEnterEvent_void_QTextBrowser_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QTextBrowser_dragLeaveEvent_void_QTextBrowser_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QTextBrowser_dragMoveEvent_void_QTextBrowser_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QTextBrowser_dropEvent_void_QTextBrowser_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QTextBrowser_focusInEvent_void_QTextBrowser_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->focusInEvent_pub(arg1);
    }

    void qt_QTextBrowser_keyReleaseEvent_void_QTextBrowser_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QTextBrowser_mouseDoubleClickEvent_void_QTextBrowser_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QTextBrowser_resizeEvent_void_QTextBrowser_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QTextBrowser_scrollContentsBy_void_QTextBrowser_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QTextBrowser*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    void qt_QTextBrowser_showEvent_void_QTextBrowser_QShowEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p13)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param__p13);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->showEvent_pub(arg1);
    }

    void qt_QTextBrowser_wheelEvent_void_QTextBrowser_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextBrowser* arg0 = object<QTextBrowser>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QTextBrowser*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QTextBrowser*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QTextBrowser0, Pointer)
    {
        NODE_RETURN(
            qt_QTextBrowser_QTextBrowser_QTextBrowser_QTextBrowser_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_backwardHistoryCount0, int)
    {
        NODE_RETURN(qt_QTextBrowser_backwardHistoryCount_int_QTextBrowser(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_clearHistory0, void)
    {
        qt_QTextBrowser_clearHistory_void_QTextBrowser(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_forwardHistoryCount0, int)
    {
        NODE_RETURN(qt_QTextBrowser_forwardHistoryCount_int_QTextBrowser(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_historyTitle0, Pointer)
    {
        NODE_RETURN(qt_QTextBrowser_historyTitle_string_QTextBrowser_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_historyUrl0, Pointer)
    {
        NODE_RETURN(qt_QTextBrowser_historyUrl_QUrl_QTextBrowser_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_isBackwardAvailable0, bool)
    {
        NODE_RETURN(qt_QTextBrowser_isBackwardAvailable_bool_QTextBrowser(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isForwardAvailable0, bool)
    {
        NODE_RETURN(qt_QTextBrowser_isForwardAvailable_bool_QTextBrowser(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_loadResource0, Pointer)
    {
        NODE_RETURN(qt_QTextBrowser_loadResource_QVariant_QTextBrowser_int_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QTextBrowser_event_bool_QTextBrowser_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QTextBrowser_focusNextPrevChild_bool_QTextBrowser_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QTextBrowser_focusOutEvent_void_QTextBrowser_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QTextBrowser_keyPressEvent_void_QTextBrowser_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QTextBrowser_mouseMoveEvent_void_QTextBrowser_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QTextBrowser_mousePressEvent_void_QTextBrowser_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QTextBrowser_mouseReleaseEvent_void_QTextBrowser_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QTextBrowser_paintEvent_void_QTextBrowser_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QTextBrowser_inputMethodQuery_QVariant_QTextBrowser_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_canInsertFromMimeData0, bool)
    {
        NODE_RETURN(
            qt_QTextBrowser_canInsertFromMimeData_bool_QTextBrowser_QMimeData(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_createMimeDataFromSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QTextBrowser_createMimeDataFromSelection_QMimeData_QTextBrowser(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertFromMimeData0, void)
    {
        qt_QTextBrowser_insertFromMimeData_void_QTextBrowser_QMimeData(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QTextBrowser_changeEvent_void_QTextBrowser_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QTextBrowser_contextMenuEvent_void_QTextBrowser_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QTextBrowser_dragEnterEvent_void_QTextBrowser_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QTextBrowser_dragLeaveEvent_void_QTextBrowser_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QTextBrowser_dragMoveEvent_void_QTextBrowser_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QTextBrowser_dropEvent_void_QTextBrowser_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QTextBrowser_focusInEvent_void_QTextBrowser_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QTextBrowser_keyReleaseEvent_void_QTextBrowser_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QTextBrowser_mouseDoubleClickEvent_void_QTextBrowser_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QTextBrowser_resizeEvent_void_QTextBrowser_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QTextBrowser_scrollContentsBy_void_QTextBrowser_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QTextBrowser_showEvent_void_QTextBrowser_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QTextBrowser_wheelEvent_void_QTextBrowser_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QTextBrowserType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTextBrowser_QTextBrowser_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QTextBrowser", _n_QTextBrowser0, None, Compiled,
                qt_QTextBrowser_QTextBrowser_QTextBrowser_QTextBrowser_QWidget,
                Return, "qt.QTextBrowser", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "backwardHistoryCount", _n_backwardHistoryCount0,
                         None, Compiled,
                         qt_QTextBrowser_backwardHistoryCount_int_QTextBrowser,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"), End),
            new Function(c, "clearHistory", _n_clearHistory0, None, Compiled,
                         qt_QTextBrowser_clearHistory_void_QTextBrowser, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"), End),
            new Function(c, "forwardHistoryCount", _n_forwardHistoryCount0,
                         None, Compiled,
                         qt_QTextBrowser_forwardHistoryCount_int_QTextBrowser,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"), End),
            new Function(c, "historyTitle", _n_historyTitle0, None, Compiled,
                         qt_QTextBrowser_historyTitle_string_QTextBrowser_int,
                         Return, "string", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"),
                         new Param(c, "i", "int"), End),
            new Function(c, "historyUrl", _n_historyUrl0, None, Compiled,
                         qt_QTextBrowser_historyUrl_QUrl_QTextBrowser_int,
                         Return, "qt.QUrl", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"),
                         new Param(c, "i", "int"), End),
            new Function(c, "isBackwardAvailable", _n_isBackwardAvailable0,
                         None, Compiled,
                         qt_QTextBrowser_isBackwardAvailable_bool_QTextBrowser,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"), End),
            new Function(c, "isForwardAvailable", _n_isForwardAvailable0, None,
                         Compiled,
                         qt_QTextBrowser_isForwardAvailable_bool_QTextBrowser,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextBrowser"), End),
            // PROP: openExternalLinks (bool; QTextBrowser this)
            // PROP: openLinks (bool; QTextBrowser this)
            // PROP: searchPaths (string[]; QTextBrowser this)
            // PROP: setOpenExternalLinks (void; QTextBrowser this, bool open)
            // PROP: setOpenLinks (void; QTextBrowser this, bool open)
            // PROP: setSearchPaths (void; QTextBrowser this, string[] paths)
            // PROP: source (QUrl; QTextBrowser this)
            _func[0] = new MemberFunction(
                c, "loadResource", _n_loadResource0, None, Compiled,
                qt_QTextBrowser_loadResource_QVariant_QTextBrowser_int_QUrl,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "type", "int"), new Param(c, "name", "qt.QUrl"),
                End),
            _func[1] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QTextBrowser_event_bool_QTextBrowser_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[2] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QTextBrowser_focusNextPrevChild_bool_QTextBrowser_bool,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "next", "bool"), End),
            _func[3] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QTextBrowser_focusOutEvent_void_QTextBrowser_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "ev", "qt.QFocusEvent"), End),
            _func[4] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QTextBrowser_keyPressEvent_void_QTextBrowser_QKeyEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "ev", "qt.QKeyEvent"), End),
            _func[5] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QTextBrowser_mouseMoveEvent_void_QTextBrowser_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[6] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QTextBrowser_mousePressEvent_void_QTextBrowser_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[7] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QTextBrowser_mouseReleaseEvent_void_QTextBrowser_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[8] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QTextBrowser_paintEvent_void_QTextBrowser_QPaintEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QPaintEvent"), End),
            _func[9] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QTextBrowser_inputMethodQuery_QVariant_QTextBrowser_int,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "property", "int"), End),
            _func[10] = new MemberFunction(
                c, "canInsertFromMimeData", _n_canInsertFromMimeData0, None,
                Compiled,
                qt_QTextBrowser_canInsertFromMimeData_bool_QTextBrowser_QMimeData,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "source", "qt.QMimeData"), End),
            _func[11] = new MemberFunction(
                c, "createMimeDataFromSelection",
                _n_createMimeDataFromSelection0, None, Compiled,
                qt_QTextBrowser_createMimeDataFromSelection_QMimeData_QTextBrowser,
                Return, "qt.QMimeData", Parameters,
                new Param(c, "this", "qt.QTextBrowser"), End),
            _func[12] = new MemberFunction(
                c, "insertFromMimeData", _n_insertFromMimeData0, None, Compiled,
                qt_QTextBrowser_insertFromMimeData_void_QTextBrowser_QMimeData,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "source", "qt.QMimeData"), End),
            _func[13] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QTextBrowser_changeEvent_void_QTextBrowser_QEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[14] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QTextBrowser_contextMenuEvent_void_QTextBrowser_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[15] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QTextBrowser_dragEnterEvent_void_QTextBrowser_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QDragEnterEvent"), End),
            _func[16] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QTextBrowser_dragLeaveEvent_void_QTextBrowser_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QDragLeaveEvent"), End),
            _func[17] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QTextBrowser_dragMoveEvent_void_QTextBrowser_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QDragMoveEvent"), End),
            _func[18] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QTextBrowser_dropEvent_void_QTextBrowser_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QDropEvent"), End),
            _func[19] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QTextBrowser_focusInEvent_void_QTextBrowser_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QTextBrowser this,
            // "QInputMethodEvent *" e) // protected
            _func[20] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QTextBrowser_keyReleaseEvent_void_QTextBrowser_QKeyEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[21] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QTextBrowser_mouseDoubleClickEvent_void_QTextBrowser_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[22] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QTextBrowser_resizeEvent_void_QTextBrowser_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QResizeEvent"), End),
            _func[23] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QTextBrowser_scrollContentsBy_void_QTextBrowser_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[24] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QTextBrowser_showEvent_void_QTextBrowser_QShowEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "_p13", "qt.QShowEvent"), End),
            _func[25] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QTextBrowser_wheelEvent_void_QTextBrowser_QWheelEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextBrowser"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char* propExclusions[] = {"setSource", 0};

        populate(this, QTextBrowser::staticMetaObject, propExclusions);
    }

} // namespace Mu
