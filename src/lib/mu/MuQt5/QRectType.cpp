//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QMarginsType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QRectType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QRectType::QRectType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QRectType::~QRectType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QRectType::Instance* i =
            new QRectType::Instance((Class*)NODE_THIS.type());
        QRectType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QRectType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QRectType::finalizer, 0, 0, 0);
    }

    void QRectType::finalizer(void* obj, void* data)
    {
        QRectType::Instance* i = reinterpret_cast<QRectType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QRect_QRect_QRect_QRect(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QRectType>(param_this, QRect());
        return param_this;
    }

    Pointer qt_QRect_QRect_QRect_QRect_QPoint_QPoint(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_topLeft,
                                                     Pointer param_bottomRight)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg1 = getqtype<QPointType>(param_topLeft);
        const QPoint arg2 = getqtype<QPointType>(param_bottomRight);
        setqtype<QRectType>(param_this, QRect(arg1, arg2));
        return param_this;
    }

    Pointer qt_QRect_QRect_QRect_QRect_QPoint_QSize(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_topLeft,
                                                    Pointer param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg1 = getqtype<QPointType>(param_topLeft);
        const QSize arg2 = getqtype<QSizeType>(param_size);
        setqtype<QRectType>(param_this, QRect(arg1, arg2));
        return param_this;
    }

    Pointer qt_QRect_QRect_QRect_QRect_int_int_int_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_x, int param_y,
                                                       int param_width,
                                                       int param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_width);
        int arg4 = (int)(param_height);
        setqtype<QRectType>(param_this, QRect(arg1, arg2, arg3, arg4));
        return param_this;
    }

    void qt_QRect_adjust_void_QRect_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx1,
        int param_dy1, int param_dx2, int param_dy2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_dx1);
        int arg2 = (int)(param_dy1);
        int arg3 = (int)(param_dx2);
        int arg4 = (int)(param_dy2);
        arg0.adjust(arg1, arg2, arg3, arg4);
        setqtype<QRectType>(param_this, arg0);
    }

    Pointer qt_QRect_adjusted_QRect_QRect_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx1,
        int param_dy1, int param_dx2, int param_dy2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_dx1);
        int arg2 = (int)(param_dy1);
        int arg3 = (int)(param_dx2);
        int arg4 = (int)(param_dy2);
        return makeqtype<QRectType>(c, arg0.adjusted(arg1, arg2, arg3, arg4),
                                    "qt.QRect");
    }

    int qt_QRect_bottom_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.bottom();
    }

    Pointer qt_QRect_bottomLeft_QPoint_QRect(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QPointType>(c, arg0.bottomLeft(), "qt.QPoint");
    }

    Pointer qt_QRect_bottomRight_QPoint_QRect(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QPointType>(c, arg0.bottomRight(), "qt.QPoint");
    }

    Pointer qt_QRect_center_QPoint_QRect(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QPointType>(c, arg0.center(), "qt.QPoint");
    }

    bool qt_QRect_contains_bool_QRect_QPoint_bool(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_point,
                                                  bool param_proper)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        bool arg2 = (bool)(param_proper);
        return arg0.contains(arg1, arg2);
    }

    bool qt_QRect_contains_bool_QRect_QRect_bool(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_rectangle,
                                                 bool param_proper)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        bool arg2 = (bool)(param_proper);
        return arg0.contains(arg1, arg2);
    }

    bool qt_QRect_contains_bool_QRect_int_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this, int param_x,
                                              int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return arg0.contains(arg1, arg2);
    }

    bool qt_QRect_contains_bool_QRect_int_int_bool(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_x, int param_y,
                                                   bool param_proper)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        bool arg3 = (bool)(param_proper);
        return arg0.contains(arg1, arg2, arg3);
    }

    int qt_QRect_height_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.height();
    }

    Pointer qt_QRect_intersected_QRect_QRect_QRect(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.intersected(arg1), "qt.QRect");
    }

    bool qt_QRect_intersects_bool_QRect_QRect(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return arg0.intersects(arg1);
    }

    bool qt_QRect_isEmpty_bool_QRect(Mu::Thread& NODE_THREAD,
                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.isEmpty();
    }

    bool qt_QRect_isNull_bool_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.isNull();
    }

    bool qt_QRect_isValid_bool_QRect(Mu::Thread& NODE_THREAD,
                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.isValid();
    }

    int qt_QRect_left_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.left();
    }

    Pointer qt_QRect_marginsAdded_QRect_QRect_QMargins(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_margins)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QMargins arg1 = getqtype<QMarginsType>(param_margins);
        return makeqtype<QRectType>(c, arg0.marginsAdded(arg1), "qt.QRect");
    }

    Pointer qt_QRect_marginsRemoved_QRect_QRect_QMargins(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_margins)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QMargins arg1 = getqtype<QMarginsType>(param_margins);
        return makeqtype<QRectType>(c, arg0.marginsRemoved(arg1), "qt.QRect");
    }

    void qt_QRect_moveBottom_void_QRect_int(Mu::Thread& NODE_THREAD,
                                            Pointer param_this, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_y);
        arg0.moveBottom(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveBottomLeft_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.moveBottomLeft(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveBottomRight_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.moveBottomRight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveCenter_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.moveCenter(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveLeft_void_QRect_int(Mu::Thread& NODE_THREAD,
                                          Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        arg0.moveLeft(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveRight_void_QRect_int(Mu::Thread& NODE_THREAD,
                                           Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        arg0.moveRight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveTo_void_QRect_int_int(Mu::Thread& NODE_THREAD,
                                            Pointer param_this, int param_x,
                                            int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        arg0.moveTo(arg1, arg2);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveTo_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                           Pointer param_this,
                                           Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.moveTo(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveTop_void_QRect_int(Mu::Thread& NODE_THREAD,
                                         Pointer param_this, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_y);
        arg0.moveTop(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveTopLeft_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.moveTopLeft(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_moveTopRight_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.moveTopRight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    Pointer qt_QRect_normalized_QRect_QRect(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QRectType>(c, arg0.normalized(), "qt.QRect");
    }

    int qt_QRect_right_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.right();
    }

    void qt_QRect_setBottom_void_QRect_int(Mu::Thread& NODE_THREAD,
                                           Pointer param_this, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_y);
        arg0.setBottom(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setBottomLeft_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.setBottomLeft(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setBottomRight_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.setBottomRight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setCoords_void_QRect_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x1, int param_y1,
        int param_x2, int param_y2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x1);
        int arg2 = (int)(param_y1);
        int arg3 = (int)(param_x2);
        int arg4 = (int)(param_y2);
        arg0.setCoords(arg1, arg2, arg3, arg4);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setHeight_void_QRect_int(Mu::Thread& NODE_THREAD,
                                           Pointer param_this, int param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_height);
        arg0.setHeight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setLeft_void_QRect_int(Mu::Thread& NODE_THREAD,
                                         Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        arg0.setLeft(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setRect_void_QRect_int_int_int_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_x, int param_y,
                                                     int param_width,
                                                     int param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_width);
        int arg4 = (int)(param_height);
        arg0.setRect(arg1, arg2, arg3, arg4);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setRight_void_QRect_int(Mu::Thread& NODE_THREAD,
                                          Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        arg0.setRight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setSize_void_QRect_QSize(Mu::Thread& NODE_THREAD,
                                           Pointer param_this,
                                           Pointer param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QSize arg1 = getqtype<QSizeType>(param_size);
        arg0.setSize(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setTop_void_QRect_int(Mu::Thread& NODE_THREAD,
                                        Pointer param_this, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_y);
        arg0.setTop(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setTopLeft_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.setTopLeft(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setTopRight_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        arg0.setTopRight(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setWidth_void_QRect_int(Mu::Thread& NODE_THREAD,
                                          Pointer param_this, int param_width)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_width);
        arg0.setWidth(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setX_void_QRect_int(Mu::Thread& NODE_THREAD,
                                      Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_x);
        arg0.setX(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_setY_void_QRect_int(Mu::Thread& NODE_THREAD,
                                      Pointer param_this, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_y);
        arg0.setY(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    Pointer qt_QRect_size_QSize_QRect(Mu::Thread& NODE_THREAD,
                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QSizeType>(c, arg0.size(), "qt.QSize");
    }

    int qt_QRect_top_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.top();
    }

    Pointer qt_QRect_topLeft_QPoint_QRect(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QPointType>(c, arg0.topLeft(), "qt.QPoint");
    }

    Pointer qt_QRect_topRight_QPoint_QRect(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return makeqtype<QPointType>(c, arg0.topRight(), "qt.QPoint");
    }

    void qt_QRect_translate_void_QRect_int_int(Mu::Thread& NODE_THREAD,
                                               Pointer param_this, int param_dx,
                                               int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        arg0.translate(arg1, arg2);
        setqtype<QRectType>(param_this, arg0);
    }

    void qt_QRect_translate_void_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_offset)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_offset);
        arg0.translate(arg1);
        setqtype<QRectType>(param_this, arg0);
    }

    Pointer qt_QRect_translated_QRect_QRect_int_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        return makeqtype<QRectType>(c, arg0.translated(arg1, arg2), "qt.QRect");
    }

    Pointer qt_QRect_translated_QRect_QRect_QPoint(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_offset)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_offset);
        return makeqtype<QRectType>(c, arg0.translated(arg1), "qt.QRect");
    }

    Pointer qt_QRect_united_QRect_QRect_QRect(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.united(arg1), "qt.QRect");
    }

    int qt_QRect_width_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.width();
    }

    int qt_QRect_x_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.x();
    }

    int qt_QRect_y_int_QRect(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        return arg0.y();
    }

    Pointer qt_QRect_operatorAmp__QRect_QRect_QRect(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.operator&(arg1), "qt.QRect");
    }

    Pointer qt_QRect_operatorPlus_EQ__QRect_QRect_QMargins(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_margins)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QMargins arg1 = getqtype<QMarginsType>(param_margins);
        return makeqtype<QRectType>(c, arg0.operator+=(arg1), "qt.QRect");
    }

    Pointer qt_QRect_operatorMinus_EQ__QRect_QRect_QMargins(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_margins)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QMargins arg1 = getqtype<QMarginsType>(param_margins);
        return makeqtype<QRectType>(c, arg0.operator-=(arg1), "qt.QRect");
    }

    Pointer qt_QRect_operatorPipe__QRect_QRect_QRect(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.operator|(arg1), "qt.QRect");
    }

    Pointer qt_QRect_operatorPipe_EQ__QRect_QRect_QRect(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRect arg0 = getqtype<QRectType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.operator|=(arg1), "qt.QRect");
    }

    static NODE_IMPLEMENTATION(_n_QRect0, Pointer)
    {
        NODE_RETURN(qt_QRect_QRect_QRect_QRect(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QRect1, Pointer)
    {
        NODE_RETURN(qt_QRect_QRect_QRect_QRect_QPoint_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QRect2, Pointer)
    {
        NODE_RETURN(qt_QRect_QRect_QRect_QRect_QPoint_QSize(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QRect3, Pointer)
    {
        NODE_RETURN(qt_QRect_QRect_QRect_QRect_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_adjust0, void)
    {
        qt_QRect_adjust_void_QRect_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_adjusted0, Pointer)
    {
        NODE_RETURN(qt_QRect_adjusted_QRect_QRect_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_bottom0, int)
    {
        NODE_RETURN(qt_QRect_bottom_int_QRect(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bottomLeft0, Pointer)
    {
        NODE_RETURN(qt_QRect_bottomLeft_QPoint_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bottomRight0, Pointer)
    {
        NODE_RETURN(qt_QRect_bottomRight_QPoint_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_center0, Pointer)
    {
        NODE_RETURN(qt_QRect_center_QPoint_QRect(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contains0, bool)
    {
        NODE_RETURN(qt_QRect_contains_bool_QRect_QPoint_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, bool)));
    }

    static NODE_IMPLEMENTATION(_n_contains1, bool)
    {
        NODE_RETURN(qt_QRect_contains_bool_QRect_QRect_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, bool)));
    }

    static NODE_IMPLEMENTATION(_n_contains2, bool)
    {
        NODE_RETURN(qt_QRect_contains_bool_QRect_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_contains3, bool)
    {
        NODE_RETURN(qt_QRect_contains_bool_QRect_int_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, bool)));
    }

    static NODE_IMPLEMENTATION(_n_height0, int)
    {
        NODE_RETURN(qt_QRect_height_int_QRect(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_intersected0, Pointer)
    {
        NODE_RETURN(qt_QRect_intersected_QRect_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_intersects0, bool)
    {
        NODE_RETURN(qt_QRect_intersects_bool_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
    {
        NODE_RETURN(qt_QRect_isEmpty_bool_QRect(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isNull0, bool)
    {
        NODE_RETURN(qt_QRect_isNull_bool_QRect(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isValid0, bool)
    {
        NODE_RETURN(qt_QRect_isValid_bool_QRect(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_left0, int)
    {
        NODE_RETURN(
            qt_QRect_left_int_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_marginsAdded0, Pointer)
    {
        NODE_RETURN(qt_QRect_marginsAdded_QRect_QRect_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_marginsRemoved0, Pointer)
    {
        NODE_RETURN(qt_QRect_marginsRemoved_QRect_QRect_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_moveBottom0, void)
    {
        qt_QRect_moveBottom_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_moveBottomLeft0, void)
    {
        qt_QRect_moveBottomLeft_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveBottomRight0, void)
    {
        qt_QRect_moveBottomRight_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveCenter0, void)
    {
        qt_QRect_moveCenter_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveLeft0, void)
    {
        qt_QRect_moveLeft_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_moveRight0, void)
    {
        qt_QRect_moveRight_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_moveTo0, void)
    {
        qt_QRect_moveTo_void_QRect_int_int(NODE_THREAD,
                                           NONNIL_NODE_ARG(0, Pointer),
                                           NODE_ARG(1, int), NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_moveTo1, void)
    {
        qt_QRect_moveTo_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveTop0, void)
    {
        qt_QRect_moveTop_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_moveTopLeft0, void)
    {
        qt_QRect_moveTopLeft_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveTopRight0, void)
    {
        qt_QRect_moveTopRight_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_normalized0, Pointer)
    {
        NODE_RETURN(qt_QRect_normalized_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_right0, int)
    {
        NODE_RETURN(
            qt_QRect_right_int_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setBottom0, void)
    {
        qt_QRect_setBottom_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setBottomLeft0, void)
    {
        qt_QRect_setBottomLeft_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setBottomRight0, void)
    {
        qt_QRect_setBottomRight_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setCoords0, void)
    {
        qt_QRect_setCoords_void_QRect_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_setHeight0, void)
    {
        qt_QRect_setHeight_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setLeft0, void)
    {
        qt_QRect_setLeft_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setRect0, void)
    {
        qt_QRect_setRect_void_QRect_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_setRight0, void)
    {
        qt_QRect_setRight_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setSize0, void)
    {
        qt_QRect_setSize_void_QRect_QSize(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTop0, void)
    {
        qt_QRect_setTop_void_QRect_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                                       NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setTopLeft0, void)
    {
        qt_QRect_setTopLeft_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTopRight0, void)
    {
        qt_QRect_setTopRight_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setWidth0, void)
    {
        qt_QRect_setWidth_void_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setX0, void)
    {
        qt_QRect_setX_void_QRect_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                                     NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setY0, void)
    {
        qt_QRect_setY_void_QRect_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                                     NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_size0, Pointer)
    {
        NODE_RETURN(qt_QRect_size_QSize_QRect(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_top0, int)
    {
        NODE_RETURN(
            qt_QRect_top_int_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_topLeft0, Pointer)
    {
        NODE_RETURN(qt_QRect_topLeft_QPoint_QRect(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_topRight0, Pointer)
    {
        NODE_RETURN(qt_QRect_topRight_QPoint_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_translate0, void)
    {
        qt_QRect_translate_void_QRect_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_translate1, void)
    {
        qt_QRect_translate_void_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_translated0, Pointer)
    {
        NODE_RETURN(qt_QRect_translated_QRect_QRect_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_translated1, Pointer)
    {
        NODE_RETURN(qt_QRect_translated_QRect_QRect_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_united0, Pointer)
    {
        NODE_RETURN(qt_QRect_united_QRect_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_width0, int)
    {
        NODE_RETURN(
            qt_QRect_width_int_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_x0, int)
    {
        NODE_RETURN(
            qt_QRect_x_int_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_y0, int)
    {
        NODE_RETURN(
            qt_QRect_y_int_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorAmp_0, Pointer)
    {
        NODE_RETURN(qt_QRect_operatorAmp__QRect_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_EQ_0, Pointer)
    {
        NODE_RETURN(qt_QRect_operatorPlus_EQ__QRect_QRect_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_EQ_0, Pointer)
    {
        NODE_RETURN(qt_QRect_operatorMinus_EQ__QRect_QRect_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPipe_0, Pointer)
    {
        NODE_RETURN(qt_QRect_operatorPipe__QRect_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPipe_EQ_0, Pointer)
    {
        NODE_RETURN(qt_QRect_operatorPipe_EQ__QRect_QRect_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QRectType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QRect", _n_QRect0, None, Compiled,
                         qt_QRect_QRect_QRect_QRect, Return, "qt.QRect",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "QRect", _n_QRect1, None, Compiled,
                         qt_QRect_QRect_QRect_QRect_QPoint_QPoint, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "topLeft", "qt.QPoint"),
                         new Param(c, "bottomRight", "qt.QPoint"), End),
            new Function(c, "QRect", _n_QRect2, None, Compiled,
                         qt_QRect_QRect_QRect_QRect_QPoint_QSize, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "topLeft", "qt.QPoint"),
                         new Param(c, "size", "qt.QSize"), End),
            new Function(c, "QRect", _n_QRect3, None, Compiled,
                         qt_QRect_QRect_QRect_QRect_int_int_int_int, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "width", "int"),
                         new Param(c, "height", "int"), End),
            new Function(c, "adjust", _n_adjust0, None, Compiled,
                         qt_QRect_adjust_void_QRect_int_int_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "dx1", "int"), new Param(c, "dy1", "int"),
                         new Param(c, "dx2", "int"), new Param(c, "dy2", "int"),
                         End),
            new Function(
                c, "adjusted", _n_adjusted0, None, Compiled,
                qt_QRect_adjusted_QRect_QRect_int_int_int_int, Return,
                "qt.QRect", Parameters, new Param(c, "this", "qt.QRect"),
                new Param(c, "dx1", "int"), new Param(c, "dy1", "int"),
                new Param(c, "dx2", "int"), new Param(c, "dy2", "int"), End),
            new Function(c, "bottom", _n_bottom0, None, Compiled,
                         qt_QRect_bottom_int_QRect, Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "bottomLeft", _n_bottomLeft0, None, Compiled,
                         qt_QRect_bottomLeft_QPoint_QRect, Return, "qt.QPoint",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "bottomRight", _n_bottomRight0, None, Compiled,
                         qt_QRect_bottomRight_QPoint_QRect, Return, "qt.QPoint",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "center", _n_center0, None, Compiled,
                         qt_QRect_center_QPoint_QRect, Return, "qt.QPoint",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "contains", _n_contains0, None, Compiled,
                         qt_QRect_contains_bool_QRect_QPoint_bool, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "point", "qt.QPoint"),
                         new Param(c, "proper", "bool"), End),
            new Function(c, "contains", _n_contains1, None, Compiled,
                         qt_QRect_contains_bool_QRect_QRect_bool, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"),
                         new Param(c, "proper", "bool"), End),
            new Function(c, "contains", _n_contains2, None, Compiled,
                         qt_QRect_contains_bool_QRect_int_int, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         End),
            new Function(c, "contains", _n_contains3, None, Compiled,
                         qt_QRect_contains_bool_QRect_int_int_bool, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "proper", "bool"), End),
            // MISSING: getCoords (void; QRect this, "int *" x1, "int *" y1,
            // "int *" x2, "int *" y2) MISSING: getRect (void; QRect this, "int
            // *" x, "int *" y, "int *" width, "int *" height)
            new Function(c, "height", _n_height0, None, Compiled,
                         qt_QRect_height_int_QRect, Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "intersected", _n_intersected0, None, Compiled,
                         qt_QRect_intersected_QRect_QRect_QRect, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(c, "intersects", _n_intersects0, None, Compiled,
                         qt_QRect_intersects_bool_QRect_QRect, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(c, "isEmpty", _n_isEmpty0, None, Compiled,
                         qt_QRect_isEmpty_bool_QRect, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "isNull", _n_isNull0, None, Compiled,
                         qt_QRect_isNull_bool_QRect, Return, "bool", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "isValid", _n_isValid0, None, Compiled,
                         qt_QRect_isValid_bool_QRect, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "left", _n_left0, None, Compiled,
                         qt_QRect_left_int_QRect, Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "marginsAdded", _n_marginsAdded0, None, Compiled,
                         qt_QRect_marginsAdded_QRect_QRect_QMargins, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "margins", "qt.QMargins"), End),
            new Function(c, "marginsRemoved", _n_marginsRemoved0, None,
                         Compiled, qt_QRect_marginsRemoved_QRect_QRect_QMargins,
                         Return, "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "margins", "qt.QMargins"), End),
            new Function(c, "moveBottom", _n_moveBottom0, None, Compiled,
                         qt_QRect_moveBottom_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "y", "int"), End),
            new Function(c, "moveBottomLeft", _n_moveBottomLeft0, None,
                         Compiled, qt_QRect_moveBottomLeft_void_QRect_QPoint,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "moveBottomRight", _n_moveBottomRight0, None,
                         Compiled, qt_QRect_moveBottomRight_void_QRect_QPoint,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "moveCenter", _n_moveCenter0, None, Compiled,
                         qt_QRect_moveCenter_void_QRect_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "moveLeft", _n_moveLeft0, None, Compiled,
                         qt_QRect_moveLeft_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), End),
            new Function(c, "moveRight", _n_moveRight0, None, Compiled,
                         qt_QRect_moveRight_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), End),
            new Function(c, "moveTo", _n_moveTo0, None, Compiled,
                         qt_QRect_moveTo_void_QRect_int_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         End),
            new Function(c, "moveTo", _n_moveTo1, None, Compiled,
                         qt_QRect_moveTo_void_QRect_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "moveTop", _n_moveTop0, None, Compiled,
                         qt_QRect_moveTop_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "y", "int"), End),
            new Function(c, "moveTopLeft", _n_moveTopLeft0, None, Compiled,
                         qt_QRect_moveTopLeft_void_QRect_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "moveTopRight", _n_moveTopRight0, None, Compiled,
                         qt_QRect_moveTopRight_void_QRect_QPoint, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "normalized", _n_normalized0, None, Compiled,
                         qt_QRect_normalized_QRect_QRect, Return, "qt.QRect",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "right", _n_right0, None, Compiled,
                         qt_QRect_right_int_QRect, Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "setBottom", _n_setBottom0, None, Compiled,
                         qt_QRect_setBottom_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "y", "int"), End),
            new Function(c, "setBottomLeft", _n_setBottomLeft0, None, Compiled,
                         qt_QRect_setBottomLeft_void_QRect_QPoint, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "setBottomRight", _n_setBottomRight0, None,
                         Compiled, qt_QRect_setBottomRight_void_QRect_QPoint,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "setCoords", _n_setCoords0, None, Compiled,
                         qt_QRect_setCoords_void_QRect_int_int_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x1", "int"), new Param(c, "y1", "int"),
                         new Param(c, "x2", "int"), new Param(c, "y2", "int"),
                         End),
            new Function(c, "setHeight", _n_setHeight0, None, Compiled,
                         qt_QRect_setHeight_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "height", "int"), End),
            new Function(c, "setLeft", _n_setLeft0, None, Compiled,
                         qt_QRect_setLeft_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), End),
            new Function(c, "setRect", _n_setRect0, None, Compiled,
                         qt_QRect_setRect_void_QRect_int_int_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "width", "int"),
                         new Param(c, "height", "int"), End),
            new Function(c, "setRight", _n_setRight0, None, Compiled,
                         qt_QRect_setRight_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), End),
            new Function(c, "setSize", _n_setSize0, None, Compiled,
                         qt_QRect_setSize_void_QRect_QSize, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "size", "qt.QSize"), End),
            new Function(c, "setTop", _n_setTop0, None, Compiled,
                         qt_QRect_setTop_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "y", "int"), End),
            new Function(c, "setTopLeft", _n_setTopLeft0, None, Compiled,
                         qt_QRect_setTopLeft_void_QRect_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "setTopRight", _n_setTopRight0, None, Compiled,
                         qt_QRect_setTopRight_void_QRect_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "setWidth", _n_setWidth0, None, Compiled,
                         qt_QRect_setWidth_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "width", "int"), End),
            new Function(c, "setX", _n_setX0, None, Compiled,
                         qt_QRect_setX_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "x", "int"), End),
            new Function(c, "setY", _n_setY0, None, Compiled,
                         qt_QRect_setY_void_QRect_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "y", "int"), End),
            new Function(c, "size", _n_size0, None, Compiled,
                         qt_QRect_size_QSize_QRect, Return, "qt.QSize",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "top", _n_top0, None, Compiled,
                         qt_QRect_top_int_QRect, Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "topLeft", _n_topLeft0, None, Compiled,
                         qt_QRect_topLeft_QPoint_QRect, Return, "qt.QPoint",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "topRight", _n_topRight0, None, Compiled,
                         qt_QRect_topRight_QPoint_QRect, Return, "qt.QPoint",
                         Parameters, new Param(c, "this", "qt.QRect"), End),
            new Function(c, "translate", _n_translate0, None, Compiled,
                         qt_QRect_translate_void_QRect_int_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "dx", "int"), new Param(c, "dy", "int"),
                         End),
            new Function(c, "translate", _n_translate1, None, Compiled,
                         qt_QRect_translate_void_QRect_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "offset", "qt.QPoint"), End),
            new Function(
                c, "translated", _n_translated0, None, Compiled,
                qt_QRect_translated_QRect_QRect_int_int, Return, "qt.QRect",
                Parameters, new Param(c, "this", "qt.QRect"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            new Function(c, "translated", _n_translated1, None, Compiled,
                         qt_QRect_translated_QRect_QRect_QPoint, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "offset", "qt.QPoint"), End),
            new Function(c, "united", _n_united0, None, Compiled,
                         qt_QRect_united_QRect_QRect_QRect, Return, "qt.QRect",
                         Parameters, new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(c, "width", _n_width0, None, Compiled,
                         qt_QRect_width_int_QRect, Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "x", _n_x0, None, Compiled, qt_QRect_x_int_QRect,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            new Function(c, "y", _n_y0, None, Compiled, qt_QRect_y_int_QRect,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QRect"), End),
            // MISSING: = ("QRect & operator&"; QRect this, QRect rectangle)
            // static functions
            EndArguments);
        globalScope()->addSymbols(
            new Function(c, "&", _n_operatorAmp_0, Op, Compiled,
                         qt_QRect_operatorAmp__QRect_QRect_QRect, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(c, "+=", _n_operatorPlus_EQ_0, Op, Compiled,
                         qt_QRect_operatorPlus_EQ__QRect_QRect_QMargins, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "margins", "qt.QMargins"), End),
            new Function(c, "-=", _n_operatorMinus_EQ_0, Op, Compiled,
                         qt_QRect_operatorMinus_EQ__QRect_QRect_QMargins,
                         Return, "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "margins", "qt.QMargins"), End),
            new Function(c, "|", _n_operatorPipe_0, Op, Compiled,
                         qt_QRect_operatorPipe__QRect_QRect_QRect, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(c, "|=", _n_operatorPipe_EQ_0, Op, Compiled,
                         qt_QRect_operatorPipe_EQ__QRect_QRect_QRect, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRect"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
