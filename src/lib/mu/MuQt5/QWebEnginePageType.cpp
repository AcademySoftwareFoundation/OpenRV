//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QWebEnginePageType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QWebEngineProfileType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QWebChannelType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QWebEngineHistoryType.h>
#include <MuQt5/QMenuType.h>
#include <MuQt5/QUrlType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QWebEngineSettingsType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QWebEnginePage::~MuQt_QWebEnginePage()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QWebEnginePage::MuQt_QWebEnginePage(Pointer muobj,
                                             const CallEnvironment* ce,
                                             QObject* parent)
        : QWebEnginePage(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QWebEnginePageType>(
            c->internName("qt.QWebEnginePage"));
    }

    MuQt_QWebEnginePage::MuQt_QWebEnginePage(Pointer muobj,
                                             const CallEnvironment* ce,
                                             QWebEngineProfile* profile,
                                             QObject* parent)
        : QWebEnginePage(profile, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QWebEnginePageType>(
            c->internName("qt.QWebEnginePage"));
    }

    void MuQt_QWebEnginePage::triggerAction(QWebEnginePage::WebAction action,
                                            bool checked)
    {
        if (!_env)
        {
            QWebEnginePage::triggerAction(action, checked);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(action));
            args[2] = Value(checked);
            Value rval = _env->call(F, args);
        }
        else
        {
            QWebEnginePage::triggerAction(action, checked);
        }
    }

    bool MuQt_QWebEnginePage::event(QEvent* e)
    {
        if (!_env)
            return QWebEnginePage::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWebEnginePage::event(e);
        }
    }

    bool MuQt_QWebEnginePage::acceptNavigationRequest(
        const QUrl& url, QWebEnginePage::NavigationType type, bool isMainFrame)
    {
        if (!_env)
            return QWebEnginePage::acceptNavigationRequest(url, type,
                                                           isMainFrame);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QUrlType>(c, url, "qt.QUrl"));
            args[2] = Value(int(type));
            args[3] = Value(isMainFrame);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWebEnginePage::acceptNavigationRequest(url, type,
                                                           isMainFrame);
        }
    }

    QStringList
    MuQt_QWebEnginePage::chooseFiles(QWebEnginePage::FileSelectionMode mode,
                                     const QStringList& oldFiles,
                                     const QStringList& acceptedMimeTypes)
    {
        if (!_env)
            return QWebEnginePage::chooseFiles(mode, oldFiles,
                                               acceptedMimeTypes);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(mode));
            args[2] = Value(makestringlist(c, oldFiles));
            args[3] = Value(makestringlist(c, acceptedMimeTypes));
            Value rval = _env->call(F, args);
            return qstringlist(rval._Pointer);
        }
        else
        {
            return QWebEnginePage::chooseFiles(mode, oldFiles,
                                               acceptedMimeTypes);
        }
    }

    QWebEnginePage*
    MuQt_QWebEnginePage::createWindow(QWebEnginePage::WebWindowType type)
    {
        if (!_env)
            return QWebEnginePage::createWindow(type);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(type));
            Value rval = _env->call(F, args);
            return object<QWebEnginePage>(rval._Pointer);
        }
        else
        {
            return QWebEnginePage::createWindow(type);
        }
    }

    void MuQt_QWebEnginePage::javaScriptAlert(const QUrl& securityOrigin,
                                              const QString& msg)
    {
        if (!_env)
        {
            QWebEnginePage::javaScriptAlert(securityOrigin, msg);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QUrlType>(c, securityOrigin, "qt.QUrl"));
            args[2] = Value(makestring(c, msg));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWebEnginePage::javaScriptAlert(securityOrigin, msg);
        }
    }

    bool MuQt_QWebEnginePage::javaScriptConfirm(const QUrl& securityOrigin,
                                                const QString& msg)
    {
        if (!_env)
            return QWebEnginePage::javaScriptConfirm(securityOrigin, msg);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QUrlType>(c, securityOrigin, "qt.QUrl"));
            args[2] = Value(makestring(c, msg));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWebEnginePage::javaScriptConfirm(securityOrigin, msg);
        }
    }

    void MuQt_QWebEnginePage::javaScriptConsoleMessage(
        QWebEnginePage::JavaScriptConsoleMessageLevel level,
        const QString& message, int lineNumber, const QString& sourceID)
    {
        if (!_env)
        {
            QWebEnginePage::javaScriptConsoleMessage(level, message, lineNumber,
                                                     sourceID);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(5);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(level));
            args[2] = Value(makestring(c, message));
            args[3] = Value(lineNumber);
            args[4] = Value(makestring(c, sourceID));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWebEnginePage::javaScriptConsoleMessage(level, message, lineNumber,
                                                     sourceID);
        }
    }

    bool MuQt_QWebEnginePage::eventFilter(QObject* watched, QEvent* event)
    {
        if (!_env)
            return QWebEnginePage::eventFilter(watched, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QObjectType>(c, watched, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWebEnginePage::eventFilter(watched, event);
        }
    }

    void MuQt_QWebEnginePage::customEvent(QEvent* event)
    {
        if (!_env)
        {
            QWebEnginePage::customEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWebEnginePage::customEvent(event);
        }
    }

    void MuQt_QWebEnginePage::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QWebEnginePage::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWebEnginePage::timerEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QWebEnginePageType::QWebEnginePageType(Context* c, const char* name,
                                           Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QWebEnginePageType::~QWebEnginePageType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QWebEnginePage_QWebEnginePage_QObject(Thread& NODE_THREAD,
                                                         Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QWebEnginePage* w = object<QWebEnginePage>(widget))
        {
            QWebEnginePageType* type =
                c->findSymbolOfTypeByQualifiedName<QWebEnginePageType>(
                    c->internName("qt.QWebEnginePage"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QWebEnginePage_QWebEnginePage_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer
    qt_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEnginePage_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QWebEnginePage(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEngineProfile_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_profile,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineProfile* arg1 = object<QWebEngineProfile>(param_profile);
        QObject* arg2 = object<QObject>(param_parent);
        setobject(param_this, new MuQt_QWebEnginePage(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    Pointer qt_QWebEnginePage_action_QAction_QWebEnginePage_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_action_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage::WebAction arg1 =
            (QWebEnginePage::WebAction)(param_action_);
        return makeinstance<QActionType>(c, arg0->action(arg1), "qt.QAction");
    }

    Pointer qt_QWebEnginePage_createStandardContextMenu_QMenu_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeinstance<QMenuType>(c, arg0->createStandardContextMenu(),
                                       "qt.QMenu");
    }

    Pointer qt_QWebEnginePage_devToolsPage_QWebEnginePage_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeinstance<QWebEnginePageType>(c, arg0->devToolsPage(),
                                                "qt.QWebEnginePage");
    }

    void qt_QWebEnginePage_download_void_QWebEnginePage_QUrl_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url,
        Pointer param_filename)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_url);
        const QString arg2 = qstring(param_filename);
        arg0->download(arg1, arg2);
    }

    Pointer qt_QWebEnginePage_history_QWebEngineHistory_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeqpointer<QWebEngineHistoryType>(c, arg0->history(),
                                                   "qt.QWebEngineHistory");
    }

    Pointer qt_QWebEnginePage_inspectedPage_QWebEnginePage_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeinstance<QWebEnginePageType>(c, arg0->inspectedPage(),
                                                "qt.QWebEnginePage");
    }

    void qt_QWebEnginePage_load_void_QWebEnginePage_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_url);
        arg0->load(arg1);
    }

    Pointer qt_QWebEnginePage_profile_QWebEngineProfile_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeinstance<QWebEngineProfileType>(c, arg0->profile(),
                                                   "qt.QWebEngineProfile");
    }

    void qt_QWebEnginePage_replaceMisspelledWord_void_QWebEnginePage_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_replacement)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QString arg1 = qstring(param_replacement);
        arg0->replaceMisspelledWord(arg1);
    }

    void qt_QWebEnginePage_runJavaScript_void_QWebEnginePage_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_scriptSource)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QString arg1 = qstring(param_scriptSource);
        arg0->runJavaScript(arg1);
    }

    void qt_QWebEnginePage_runJavaScript_void_QWebEnginePage_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_scriptSource,
        int param_worldId)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QString arg1 = qstring(param_scriptSource);
        quint32 arg2 = (int)(param_worldId);
        arg0->runJavaScript(arg1, arg2);
    }

    void qt_QWebEnginePage_save_void_QWebEnginePage_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filePath,
        int param_format)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QString arg1 = qstring(param_filePath);
        QWebEngineDownloadItem::SavePageFormat arg2 =
            (QWebEngineDownloadItem::SavePageFormat)(param_format);
        arg0->save(arg1, arg2);
    }

    void
    qt_QWebEnginePage_setContent_void_QWebEnginePage_QByteArray_string_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data,
        Pointer param_mimeType, Pointer param_baseUrl)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_data);
        const QString arg2 = qstring(param_mimeType);
        const QUrl arg3 = getqtype<QUrlType>(param_baseUrl);
        arg0->setContent(arg1, arg2, arg3);
    }

    void qt_QWebEnginePage_setDevToolsPage_void_QWebEnginePage_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_devToolsPage)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage* arg1 = object<QWebEnginePage>(param_devToolsPage);
        arg0->setDevToolsPage(arg1);
    }

    void
    qt_QWebEnginePage_setFeaturePermission_void_QWebEnginePage_QUrl_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_securityOrigin, int param_feature, int param_policy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_securityOrigin);
        QWebEnginePage::Feature arg2 = (QWebEnginePage::Feature)(param_feature);
        QWebEnginePage::PermissionPolicy arg3 =
            (QWebEnginePage::PermissionPolicy)(param_policy);
        arg0->setFeaturePermission(arg1, arg2, arg3);
    }

    void qt_QWebEnginePage_setHtml_void_QWebEnginePage_string_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_html,
        Pointer param_baseUrl)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QString arg1 = qstring(param_html);
        const QUrl arg2 = getqtype<QUrlType>(param_baseUrl);
        arg0->setHtml(arg1, arg2);
    }

    void qt_QWebEnginePage_setInspectedPage_void_QWebEnginePage_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_page)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage* arg1 = object<QWebEnginePage>(param_page);
        arg0->setInspectedPage(arg1);
    }

    void qt_QWebEnginePage_setView_void_QWebEnginePage_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_view)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWidget* arg1 = object<QWidget>(param_view);
        arg0->setView(arg1);
    }

    void qt_QWebEnginePage_setWebChannel_void_QWebEnginePage_QWebChannel_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_channel,
        int param_worldId)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebChannel* arg1 = object<QWebChannel>(param_channel);
        uint arg2 = (int)(param_worldId);
        arg0->setWebChannel(arg1, arg2);
    }

    void qt_QWebEnginePage_setWebChannel_void_QWebEnginePage_QWebChannel(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_channel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebChannel* arg1 = object<QWebChannel>(param_channel);
        arg0->setWebChannel(arg1);
    }

    Pointer qt_QWebEnginePage_settings_QWebEngineSettings_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeqpointer<QWebEngineSettingsType>(c, arg0->settings(),
                                                    "qt.QWebEngineSettings");
    }

    void qt_QWebEnginePage_triggerAction_void_QWebEnginePage_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_action,
        bool param_checked)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage::WebAction arg1 =
            (QWebEnginePage::WebAction)(param_action);
        bool arg2 = (bool)(param_checked);
        if (isMuQtObject(arg0))
            arg0->QWebEnginePage::triggerAction(arg1, arg2);
        else
            arg0->triggerAction(arg1, arg2);
    }

    Pointer
    qt_QWebEnginePage_view_QWidget_QWebEnginePage(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeinstance<QWidgetType>(c, arg0->view(), "qt.QWidget");
    }

    Pointer qt_QWebEnginePage_webChannel_QWebChannel_QWebEnginePage(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        return makeinstance<QWebChannelType>(c, arg0->webChannel(),
                                             "qt.QWebChannel");
    }

    bool qt_QWebEnginePage_event_bool_QWebEnginePage_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0) ? arg0->QWebEnginePage::event(arg1)
                                  : arg0->event(arg1);
    }

    bool
    qt_QWebEnginePage_acceptNavigationRequest_bool_QWebEnginePage_QUrl_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url,
        int param_type, bool param_isMainFrame)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_url);
        QWebEnginePage::NavigationType arg2 =
            (QWebEnginePage::NavigationType)(param_type);
        bool arg3 = (bool)(param_isMainFrame);
        return isMuQtObject(arg0)
                   ? ((MuQt_QWebEnginePage*)arg0)
                         ->acceptNavigationRequest_pub_parent(arg1, arg2, arg3)
                   : ((MuQt_QWebEnginePage*)arg0)
                         ->acceptNavigationRequest_pub(arg1, arg2, arg3);
    }

    Pointer
    qt_QWebEnginePage_chooseFiles_stringBSB_ESB__QWebEnginePage_int_stringBSB_ESB__stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_mode,
        Pointer param_oldFiles, Pointer param_acceptedMimeTypes)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage::FileSelectionMode arg1 =
            (QWebEnginePage::FileSelectionMode)(param_mode);
        const QStringList arg2 = qstringlist(param_oldFiles);
        const QStringList arg3 = qstringlist(param_acceptedMimeTypes);
        return isMuQtObject(arg0)
                   ? makestringlist(
                         c, ((MuQt_QWebEnginePage*)arg0)
                                ->chooseFiles_pub_parent(arg1, arg2, arg3))
                   : makestringlist(c, ((MuQt_QWebEnginePage*)arg0)
                                           ->chooseFiles_pub(arg1, arg2, arg3));
    }

    Pointer qt_QWebEnginePage_createWindow_QWebEnginePage_QWebEnginePage_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage::WebWindowType arg1 =
            (QWebEnginePage::WebWindowType)(param_type);
        return isMuQtObject(arg0)
                   ? makeinstance<QWebEnginePageType>(
                         c,
                         ((MuQt_QWebEnginePage*)arg0)
                             ->createWindow_pub_parent(arg1),
                         "qt.QWebEnginePage")
                   : makeinstance<QWebEnginePageType>(
                         c,
                         ((MuQt_QWebEnginePage*)arg0)->createWindow_pub(arg1),
                         "qt.QWebEnginePage");
    }

    void qt_QWebEnginePage_javaScriptAlert_void_QWebEnginePage_QUrl_string(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_securityOrigin, Pointer param_msg)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_securityOrigin);
        const QString arg2 = qstring(param_msg);
        if (isMuQtObject(arg0))
            ((MuQt_QWebEnginePage*)arg0)
                ->javaScriptAlert_pub_parent(arg1, arg2);
        else
            ((MuQt_QWebEnginePage*)arg0)->javaScriptAlert_pub(arg1, arg2);
    }

    bool qt_QWebEnginePage_javaScriptConfirm_bool_QWebEnginePage_QUrl_string(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_securityOrigin, Pointer param_msg)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_securityOrigin);
        const QString arg2 = qstring(param_msg);
        return isMuQtObject(arg0)
                   ? ((MuQt_QWebEnginePage*)arg0)
                         ->javaScriptConfirm_pub_parent(arg1, arg2)
                   : ((MuQt_QWebEnginePage*)arg0)
                         ->javaScriptConfirm_pub(arg1, arg2);
    }

    void
    qt_QWebEnginePage_javaScriptConsoleMessage_void_QWebEnginePage_int_string_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_level,
        Pointer param_message, int param_lineNumber, Pointer param_sourceID)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QWebEnginePage::JavaScriptConsoleMessageLevel arg1 =
            (QWebEnginePage::JavaScriptConsoleMessageLevel)(param_level);
        const QString arg2 = qstring(param_message);
        int arg3 = (int)(param_lineNumber);
        const QString arg4 = qstring(param_sourceID);
        if (isMuQtObject(arg0))
            ((MuQt_QWebEnginePage*)arg0)
                ->javaScriptConsoleMessage_pub_parent(arg1, arg2, arg3, arg4);
        else
            ((MuQt_QWebEnginePage*)arg0)
                ->javaScriptConsoleMessage_pub(arg1, arg2, arg3, arg4);
    }

    bool qt_QWebEnginePage_eventFilter_bool_QWebEnginePage_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? arg0->QWebEnginePage::eventFilter(arg1, arg2)
                   : arg0->eventFilter(arg1, arg2);
    }

    void qt_QWebEnginePage_customEvent_void_QWebEnginePage_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWebEnginePage*)arg0)->customEvent_pub_parent(arg1);
        else
            ((MuQt_QWebEnginePage*)arg0)->customEvent_pub(arg1);
    }

    void qt_QWebEnginePage_timerEvent_void_QWebEnginePage_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEnginePage* arg0 = object<QWebEnginePage>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWebEnginePage*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QWebEnginePage*)arg0)->timerEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QWebEnginePage0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEnginePage_QObject(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QWebEnginePage1, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEngineProfile_QObject(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_action0, Pointer)
    {
        NODE_RETURN(qt_QWebEnginePage_action_QAction_QWebEnginePage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_createStandardContextMenu0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_createStandardContextMenu_QMenu_QWebEnginePage(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_devToolsPage0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_devToolsPage_QWebEnginePage_QWebEnginePage(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_download0, void)
    {
        qt_QWebEnginePage_download_void_QWebEnginePage_QUrl_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_history0, Pointer)
    {
        NODE_RETURN(qt_QWebEnginePage_history_QWebEngineHistory_QWebEnginePage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inspectedPage0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_inspectedPage_QWebEnginePage_QWebEnginePage(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_load0, void)
    {
        qt_QWebEnginePage_load_void_QWebEnginePage_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_profile0, Pointer)
    {
        NODE_RETURN(qt_QWebEnginePage_profile_QWebEngineProfile_QWebEnginePage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_replaceMisspelledWord0, void)
    {
        qt_QWebEnginePage_replaceMisspelledWord_void_QWebEnginePage_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_runJavaScript0, void)
    {
        qt_QWebEnginePage_runJavaScript_void_QWebEnginePage_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_runJavaScript1, void)
    {
        qt_QWebEnginePage_runJavaScript_void_QWebEnginePage_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_save0, void)
    {
        qt_QWebEnginePage_save_void_QWebEnginePage_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setContent0, void)
    {
        qt_QWebEnginePage_setContent_void_QWebEnginePage_QByteArray_string_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setDevToolsPage0, void)
    {
        qt_QWebEnginePage_setDevToolsPage_void_QWebEnginePage_QWebEnginePage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setFeaturePermission0, void)
    {
        qt_QWebEnginePage_setFeaturePermission_void_QWebEnginePage_QUrl_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_setHtml0, void)
    {
        qt_QWebEnginePage_setHtml_void_QWebEnginePage_string_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setInspectedPage0, void)
    {
        qt_QWebEnginePage_setInspectedPage_void_QWebEnginePage_QWebEnginePage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setView0, void)
    {
        qt_QWebEnginePage_setView_void_QWebEnginePage_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setWebChannel0, void)
    {
        qt_QWebEnginePage_setWebChannel_void_QWebEnginePage_QWebChannel_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setWebChannel1, void)
    {
        qt_QWebEnginePage_setWebChannel_void_QWebEnginePage_QWebChannel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_settings0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_settings_QWebEngineSettings_QWebEnginePage(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_triggerAction0, void)
    {
        qt_QWebEnginePage_triggerAction_void_QWebEnginePage_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_view0, Pointer)
    {
        NODE_RETURN(qt_QWebEnginePage_view_QWidget_QWebEnginePage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_webChannel0, Pointer)
    {
        NODE_RETURN(qt_QWebEnginePage_webChannel_QWebChannel_QWebEnginePage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QWebEnginePage_event_bool_QWebEnginePage_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_acceptNavigationRequest0, bool)
    {
        NODE_RETURN(
            qt_QWebEnginePage_acceptNavigationRequest_bool_QWebEnginePage_QUrl_int_bool(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, bool)));
    }

    static NODE_IMPLEMENTATION(_n_chooseFiles0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_chooseFiles_stringBSB_ESB__QWebEnginePage_int_stringBSB_ESB__stringBSB_ESB_(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_createWindow0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEnginePage_createWindow_QWebEnginePage_QWebEnginePage_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_javaScriptAlert0, void)
    {
        qt_QWebEnginePage_javaScriptAlert_void_QWebEnginePage_QUrl_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_javaScriptConfirm0, bool)
    {
        NODE_RETURN(
            qt_QWebEnginePage_javaScriptConfirm_bool_QWebEnginePage_QUrl_string(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_javaScriptConsoleMessage0, void)
    {
        qt_QWebEnginePage_javaScriptConsoleMessage_void_QWebEnginePage_int_string_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, int), NODE_ARG(4, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(
            qt_QWebEnginePage_eventFilter_bool_QWebEnginePage_QObject_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_customEvent0, void)
    {
        qt_QWebEnginePage_customEvent_void_QWebEnginePage_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QWebEnginePage_timerEvent_void_QWebEnginePage_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QWebEnginePageType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QWebEnginePage_QWebEnginePage_QObject, Return,
                                ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QWebEnginePage", _n_QWebEnginePage0, None, Compiled,
                qt_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEnginePage_QObject,
                Return, "qt.QWebEnginePage", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "parent", "qt.QObject"), End),
            new Function(
                c, "QWebEnginePage", _n_QWebEnginePage1, None, Compiled,
                qt_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEnginePage_QWebEngineProfile_QObject,
                Return, "qt.QWebEnginePage", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "profile", "qt.QWebEngineProfile"),
                new Param(c, "parent", "qt.QObject"), End),
            new Function(c, "action", _n_action0, None, Compiled,
                         qt_QWebEnginePage_action_QAction_QWebEnginePage_int,
                         Return, "qt.QAction", Parameters,
                         new Param(c, "this", "qt.QWebEnginePage"),
                         new Param(c, "action_", "int"), End),
            // PROP: backgroundColor (QColor; QWebEnginePage this)
            // MISSING: contentsSize ("QSizeF"; QWebEnginePage this)
            // MISSING: contextMenuData ("const QWebEngineContextMenuData &";
            // QWebEnginePage this)
            new Function(
                c, "createStandardContextMenu", _n_createStandardContextMenu0,
                None, Compiled,
                qt_QWebEnginePage_createStandardContextMenu_QMenu_QWebEnginePage,
                Return, "qt.QMenu", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            new Function(
                c, "devToolsPage", _n_devToolsPage0, None, Compiled,
                qt_QWebEnginePage_devToolsPage_QWebEnginePage_QWebEnginePage,
                Return, "qt.QWebEnginePage", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            new Function(
                c, "download", _n_download0, None, Compiled,
                qt_QWebEnginePage_download_void_QWebEnginePage_QUrl_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "url", "qt.QUrl"),
                new Param(c, "filename", "string"), End),
            // MISSING: findText (void; QWebEnginePage this, string subString,
            // flags QWebEnginePage::FindFlags options, "const
            // QWebEngineCallback<bool> &" resultCallback) PROP: hasSelection
            // (bool; QWebEnginePage this)
            new Function(
                c, "history", _n_history0, None, Compiled,
                qt_QWebEnginePage_history_QWebEngineHistory_QWebEnginePage,
                Return, "qt.QWebEngineHistory", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            // PROP: icon (QIcon; QWebEnginePage this)
            // PROP: iconUrl (QUrl; QWebEnginePage this)
            new Function(
                c, "inspectedPage", _n_inspectedPage0, None, Compiled,
                qt_QWebEnginePage_inspectedPage_QWebEnginePage_QWebEnginePage,
                Return, "qt.QWebEnginePage", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            // PROP: isAudioMuted (bool; QWebEnginePage this)
            new Function(c, "load", _n_load0, None, Compiled,
                         qt_QWebEnginePage_load_void_QWebEnginePage_QUrl,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWebEnginePage"),
                         new Param(c, "url", "qt.QUrl"), End),
            // MISSING: load (void; QWebEnginePage this, "const
            // QWebEngineHttpRequest &" request) MISSING: print (void;
            // QWebEnginePage this, "QPrinter *" printer, "const
            // QWebEngineCallback<bool> &" resultCallback) MISSING: printToPdf
            // (void; QWebEnginePage this, string filePath, "const QPageLayout
            // &" pageLayout) MISSING: printToPdf (void; QWebEnginePage this,
            // "const QWebEngineCallback<const QByteArray & > &" resultCallback,
            // "const QPageLayout &" pageLayout)
            new Function(
                c, "profile", _n_profile0, None, Compiled,
                qt_QWebEnginePage_profile_QWebEngineProfile_QWebEnginePage,
                Return, "qt.QWebEngineProfile", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            // PROP: recentlyAudible (bool; QWebEnginePage this)
            new Function(
                c, "replaceMisspelledWord", _n_replaceMisspelledWord0, None,
                Compiled,
                qt_QWebEnginePage_replaceMisspelledWord_void_QWebEnginePage_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "replacement", "string"), End),
            // PROP: requestedUrl (QUrl; QWebEnginePage this)
            new Function(
                c, "runJavaScript", _n_runJavaScript0, None, Compiled,
                qt_QWebEnginePage_runJavaScript_void_QWebEnginePage_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "scriptSource", "string"), End),
            new Function(
                c, "runJavaScript", _n_runJavaScript1, None, Compiled,
                qt_QWebEnginePage_runJavaScript_void_QWebEnginePage_string_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "scriptSource", "string"),
                new Param(c, "worldId", "int"), End),
            // MISSING: runJavaScript (void; QWebEnginePage this, string
            // scriptSource, "const QWebEngineCallback<const QVariant & > &"
            // resultCallback) MISSING: runJavaScript (void; QWebEnginePage
            // this, string scriptSource, int worldId, "const
            // QWebEngineCallback<const QVariant & > &" resultCallback)
            new Function(
                c, "save", _n_save0, None, Compiled,
                qt_QWebEnginePage_save_void_QWebEnginePage_string_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "filePath", "string"),
                new Param(
                    c, "format", "int",
                    Value((int)QWebEngineDownloadItem::MimeHtmlSaveFormat)),
                End),
            // MISSING: scripts ("QWebEngineScriptCollection &"; QWebEnginePage
            // this) PROP: scrollPosition (QPointF; QWebEnginePage this) PROP:
            // selectedText (string; QWebEnginePage this) PROP: setAudioMuted
            // (void; QWebEnginePage this, bool muted) PROP: setBackgroundColor
            // (void; QWebEnginePage this, QColor color)
            new Function(
                c, "setContent", _n_setContent0, None, Compiled,
                qt_QWebEnginePage_setContent_void_QWebEnginePage_QByteArray_string_QUrl,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "data", "qt.QByteArray"),
                new Param(c, "mimeType", "string"),
                new Param(c, "baseUrl", "qt.QUrl"), End),
            new Function(
                c, "setDevToolsPage", _n_setDevToolsPage0, None, Compiled,
                qt_QWebEnginePage_setDevToolsPage_void_QWebEnginePage_QWebEnginePage,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "devToolsPage", "qt.QWebEnginePage"), End),
            new Function(
                c, "setFeaturePermission", _n_setFeaturePermission0, None,
                Compiled,
                qt_QWebEnginePage_setFeaturePermission_void_QWebEnginePage_QUrl_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "securityOrigin", "qt.QUrl"),
                new Param(c, "feature", "int"), new Param(c, "policy", "int"),
                End),
            new Function(
                c, "setHtml", _n_setHtml0, None, Compiled,
                qt_QWebEnginePage_setHtml_void_QWebEnginePage_string_QUrl,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "html", "string"),
                new Param(c, "baseUrl", "qt.QUrl"), End),
            new Function(
                c, "setInspectedPage", _n_setInspectedPage0, None, Compiled,
                qt_QWebEnginePage_setInspectedPage_void_QWebEnginePage_QWebEnginePage,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "page", "qt.QWebEnginePage"), End),
            // PROP: setUrl (void; QWebEnginePage this, QUrl url)
            new Function(c, "setView", _n_setView0, None, Compiled,
                         qt_QWebEnginePage_setView_void_QWebEnginePage_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWebEnginePage"),
                         new Param(c, "view", "qt.QWidget"), End),
            new Function(
                c, "setWebChannel", _n_setWebChannel0, None, Compiled,
                qt_QWebEnginePage_setWebChannel_void_QWebEnginePage_QWebChannel_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "channel", "qt.QWebChannel"),
                new Param(c, "worldId", "int"), End),
            new Function(
                c, "setWebChannel", _n_setWebChannel1, None, Compiled,
                qt_QWebEnginePage_setWebChannel_void_QWebEnginePage_QWebChannel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "channel", "qt.QWebChannel"), End),
            // PROP: setZoomFactor (void; QWebEnginePage this, double factor)
            new Function(
                c, "settings", _n_settings0, None, Compiled,
                qt_QWebEnginePage_settings_QWebEngineSettings_QWebEnginePage,
                Return, "qt.QWebEngineSettings", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            // PROP: title (string; QWebEnginePage this)
            // MISSING: toHtml (void; QWebEnginePage this, "const
            // QWebEngineCallback<const QString & > &" resultCallback) MISSING:
            // toPlainText (void; QWebEnginePage this, "const
            // QWebEngineCallback<const QString & > &" resultCallback)
            _func[0] = new MemberFunction(
                c, "triggerAction", _n_triggerAction0, None, Compiled,
                qt_QWebEnginePage_triggerAction_void_QWebEnginePage_int_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "action", "int"), new Param(c, "checked", "bool"),
                End),
            // PROP: url (QUrl; QWebEnginePage this)
            new Function(c, "view", _n_view0, None, Compiled,
                         qt_QWebEnginePage_view_QWidget_QWebEnginePage, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWebEnginePage"), End),
            new Function(
                c, "webChannel", _n_webChannel0, None, Compiled,
                qt_QWebEnginePage_webChannel_QWebChannel_QWebEnginePage, Return,
                "qt.QWebChannel", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"), End),
            // PROP: zoomFactor (double; QWebEnginePage this)
            _func[1] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QWebEnginePage_event_bool_QWebEnginePage_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[2] = new MemberFunction(
                c, "acceptNavigationRequest", _n_acceptNavigationRequest0, None,
                Compiled,
                qt_QWebEnginePage_acceptNavigationRequest_bool_QWebEnginePage_QUrl_int_bool,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "url", "qt.QUrl"), new Param(c, "type", "int"),
                new Param(c, "isMainFrame", "bool"), End),
            // MISSING: certificateError (bool; QWebEnginePage this, "const
            // QWebEngineCertificateError &" certificateError_) // protected
            _func[3] = new MemberFunction(
                c, "chooseFiles", _n_chooseFiles0, None, Compiled,
                qt_QWebEnginePage_chooseFiles_stringBSB_ESB__QWebEnginePage_int_stringBSB_ESB__stringBSB_ESB_,
                Return, "string[]", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "mode", "int"),
                new Param(c, "oldFiles", "string[]"),
                new Param(c, "acceptedMimeTypes", "string[]"), End),
            _func[4] = new MemberFunction(
                c, "createWindow", _n_createWindow0, None, Compiled,
                qt_QWebEnginePage_createWindow_QWebEnginePage_QWebEnginePage_int,
                Return, "qt.QWebEnginePage", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "type", "int"), End),
            _func[5] = new MemberFunction(
                c, "javaScriptAlert", _n_javaScriptAlert0, None, Compiled,
                qt_QWebEnginePage_javaScriptAlert_void_QWebEnginePage_QUrl_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "securityOrigin", "qt.QUrl"),
                new Param(c, "msg", "string"), End),
            _func[6] = new MemberFunction(
                c, "javaScriptConfirm", _n_javaScriptConfirm0, None, Compiled,
                qt_QWebEnginePage_javaScriptConfirm_bool_QWebEnginePage_QUrl_string,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "securityOrigin", "qt.QUrl"),
                new Param(c, "msg", "string"), End),
            _func[7] = new MemberFunction(
                c, "javaScriptConsoleMessage", _n_javaScriptConsoleMessage0,
                None, Compiled,
                qt_QWebEnginePage_javaScriptConsoleMessage_void_QWebEnginePage_int_string_int_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "level", "int"), new Param(c, "message", "string"),
                new Param(c, "lineNumber", "int"),
                new Param(c, "sourceID", "string"), End),
            _func[8] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QWebEnginePage_eventFilter_bool_QWebEnginePage_QObject_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QWebEnginePage this)
            // MISSING: childEvent (void; QWebEnginePage this, "QChildEvent *"
            // event) // protected MISSING: connectNotify (void; QWebEnginePage
            // this, "const QMetaMethod &" signal) // protected
            _func[9] = new MemberFunction(
                c, "customEvent", _n_customEvent0, None, Compiled,
                qt_QWebEnginePage_customEvent_void_QWebEnginePage_QEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: disconnectNotify (void; QWebEnginePage this, "const
            // QMetaMethod &" signal) // protected
            _func[10] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QWebEnginePage_timerEvent_void_QWebEnginePage_QTimerEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEnginePage"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QWebEnginePage::staticMetaObject, propExclusions);
    }

} // namespace Mu
