//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QStatusBarType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QTabletEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QMoveEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QHideEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QStatusBar::~MuQt_QStatusBar()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QStatusBar::MuQt_QStatusBar(Pointer muobj, const CallEnvironment* ce,
                                     QWidget* parent)
        : QStatusBar(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QStatusBarType>(
            c->internName("qt.QStatusBar"));
    }

    bool MuQt_QStatusBar::event(QEvent* e)
    {
        if (!_env)
            return QStatusBar::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QStatusBar::event(e);
        }
    }

    void MuQt_QStatusBar::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QStatusBar::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::paintEvent(event);
        }
    }

    void MuQt_QStatusBar::resizeEvent(QResizeEvent* e)
    {
        if (!_env)
        {
            QStatusBar::resizeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QResizeEventType>(c, e, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::resizeEvent(e);
        }
    }

    void MuQt_QStatusBar::showEvent(QShowEvent* _p13)
    {
        if (!_env)
        {
            QStatusBar::showEvent(_p13);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, _p13, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::showEvent(_p13);
        }
    }

    bool MuQt_QStatusBar::hasHeightForWidth() const
    {
        if (!_env)
            return QStatusBar::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QStatusBar::hasHeightForWidth();
        }
    }

    int MuQt_QStatusBar::heightForWidth(int w) const
    {
        if (!_env)
            return QStatusBar::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QStatusBar::heightForWidth(w);
        }
    }

    QVariant MuQt_QStatusBar::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QStatusBar::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QStatusBar::inputMethodQuery(query);
        }
    }

    QSize MuQt_QStatusBar::minimumSizeHint() const
    {
        if (!_env)
            return QStatusBar::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QStatusBar::minimumSizeHint();
        }
    }

    QSize MuQt_QStatusBar::sizeHint() const
    {
        if (!_env)
            return QStatusBar::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QStatusBar::sizeHint();
        }
    }

    void MuQt_QStatusBar::changeEvent(QEvent* event)
    {
        if (!_env)
        {
            QStatusBar::changeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::changeEvent(event);
        }
    }

    void MuQt_QStatusBar::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QStatusBar::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::closeEvent(event);
        }
    }

    void MuQt_QStatusBar::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QStatusBar::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::contextMenuEvent(event);
        }
    }

    void MuQt_QStatusBar::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QStatusBar::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::dragEnterEvent(event);
        }
    }

    void MuQt_QStatusBar::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QStatusBar::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::dragLeaveEvent(event);
        }
    }

    void MuQt_QStatusBar::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QStatusBar::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::dragMoveEvent(event);
        }
    }

    void MuQt_QStatusBar::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QStatusBar::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::dropEvent(event);
        }
    }

    void MuQt_QStatusBar::enterEvent(QEvent* event)
    {
        if (!_env)
        {
            QStatusBar::enterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::enterEvent(event);
        }
    }

    void MuQt_QStatusBar::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QStatusBar::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::focusInEvent(event);
        }
    }

    bool MuQt_QStatusBar::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QStatusBar::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QStatusBar::focusNextPrevChild(next);
        }
    }

    void MuQt_QStatusBar::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QStatusBar::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::focusOutEvent(event);
        }
    }

    void MuQt_QStatusBar::hideEvent(QHideEvent* event)
    {
        if (!_env)
        {
            QStatusBar::hideEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, event, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::hideEvent(event);
        }
    }

    void MuQt_QStatusBar::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QStatusBar::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::keyPressEvent(event);
        }
    }

    void MuQt_QStatusBar::keyReleaseEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QStatusBar::keyReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::keyReleaseEvent(event);
        }
    }

    void MuQt_QStatusBar::leaveEvent(QEvent* event)
    {
        if (!_env)
        {
            QStatusBar::leaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::leaveEvent(event);
        }
    }

    void MuQt_QStatusBar::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QStatusBar::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QStatusBar::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QStatusBar::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::mouseMoveEvent(event);
        }
    }

    void MuQt_QStatusBar::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QStatusBar::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::mousePressEvent(event);
        }
    }

    void MuQt_QStatusBar::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QStatusBar::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::mouseReleaseEvent(event);
        }
    }

    void MuQt_QStatusBar::moveEvent(QMoveEvent* event)
    {
        if (!_env)
        {
            QStatusBar::moveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMoveEventType>(c, event, "qt.QMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::moveEvent(event);
        }
    }

    void MuQt_QStatusBar::tabletEvent(QTabletEvent* event)
    {
        if (!_env)
        {
            QStatusBar::tabletEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTabletEventType>(c, event, "qt.QTabletEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::tabletEvent(event);
        }
    }

    void MuQt_QStatusBar::wheelEvent(QWheelEvent* event)
    {
        if (!_env)
        {
            QStatusBar::wheelEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QWheelEventType>(c, event, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QStatusBar::wheelEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QStatusBarType::QStatusBarType(Context* c, const char* name, Class* super,
                                   Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QStatusBarType::~QStatusBarType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QStatusBar_QStatusBar_QObject(Thread& NODE_THREAD,
                                                 Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QStatusBar* w = object<QStatusBar>(widget))
        {
            QStatusBarType* type =
                c->findSymbolOfTypeByQualifiedName<QStatusBarType>(
                    c->internName("qt.QStatusBar"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QStatusBar_QStatusBar_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QStatusBar_QStatusBar_QStatusBar_QStatusBar_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QStatusBar(param_this,
                                      NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QStatusBar_addPermanentWidget_void_QStatusBar_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget,
        int param_stretch)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        int arg2 = (int)(param_stretch);
        arg0->addPermanentWidget(arg1, arg2);
    }

    void qt_QStatusBar_addWidget_void_QStatusBar_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget,
        int param_stretch)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        int arg2 = (int)(param_stretch);
        arg0->addWidget(arg1, arg2);
    }

    Pointer
    qt_QStatusBar_currentMessage_string_QStatusBar(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        return makestring(c, arg0->currentMessage());
    }

    int qt_QStatusBar_insertPermanentWidget_int_QStatusBar_int_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_widget, int param_stretch)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        int arg1 = (int)(param_index);
        QWidget* arg2 = object<QWidget>(param_widget);
        int arg3 = (int)(param_stretch);
        return arg0->insertPermanentWidget(arg1, arg2, arg3);
    }

    int qt_QStatusBar_insertWidget_int_QStatusBar_int_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_widget, int param_stretch)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        int arg1 = (int)(param_index);
        QWidget* arg2 = object<QWidget>(param_widget);
        int arg3 = (int)(param_stretch);
        return arg0->insertWidget(arg1, arg2, arg3);
    }

    void qt_QStatusBar_removeWidget_void_QStatusBar_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        arg0->removeWidget(arg1);
    }

    void qt_QStatusBar_hideOrShow_void_QStatusBar(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        ((MuQt_QStatusBar*)arg0)->hideOrShow_pub();
    }

    void qt_QStatusBar_reformat_void_QStatusBar(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        ((MuQt_QStatusBar*)arg0)->reformat_pub();
    }

    bool qt_QStatusBar_event_bool_QStatusBar_QEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QStatusBar*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QStatusBar*)arg0)->event_pub(arg1);
    }

    void qt_QStatusBar_paintEvent_void_QStatusBar_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QStatusBar_resizeEvent_void_QStatusBar_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QStatusBar_showEvent_void_QStatusBar_QShowEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p13)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param__p13);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->showEvent_pub(arg1);
    }

    bool
    qt_QStatusBar_hasHeightForWidth_bool_QStatusBar(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        return isMuQtObject(arg0) ? arg0->QStatusBar::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QStatusBar_heightForWidth_int_QStatusBar_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QStatusBar::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    Pointer qt_QStatusBar_inputMethodQuery_QVariant_QStatusBar_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QStatusBar::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer
    qt_QStatusBar_minimumSizeHint_QSize_QStatusBar(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QStatusBar::minimumSizeHint(), "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QStatusBar_sizeHint_QSize_QStatusBar(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QStatusBar::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QStatusBar_changeEvent_void_QStatusBar_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QStatusBar_closeEvent_void_QStatusBar_QCloseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QStatusBar_contextMenuEvent_void_QStatusBar_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QStatusBar_dragEnterEvent_void_QStatusBar_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QStatusBar_dragLeaveEvent_void_QStatusBar_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QStatusBar_dragMoveEvent_void_QStatusBar_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QStatusBar_dropEvent_void_QStatusBar_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QStatusBar_enterEvent_void_QStatusBar_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->enterEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->enterEvent_pub(arg1);
    }

    void qt_QStatusBar_focusInEvent_void_QStatusBar_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QStatusBar_focusNextPrevChild_bool_QStatusBar_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QStatusBar*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QStatusBar*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QStatusBar_focusOutEvent_void_QStatusBar_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QStatusBar_hideEvent_void_QStatusBar_QHideEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QStatusBar_keyPressEvent_void_QStatusBar_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QStatusBar_keyReleaseEvent_void_QStatusBar_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QStatusBar_leaveEvent_void_QStatusBar_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->leaveEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->leaveEvent_pub(arg1);
    }

    void qt_QStatusBar_mouseDoubleClickEvent_void_QStatusBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QStatusBar_mouseMoveEvent_void_QStatusBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QStatusBar_mousePressEvent_void_QStatusBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QStatusBar_mouseReleaseEvent_void_QStatusBar_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QStatusBar_moveEvent_void_QStatusBar_QMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QMoveEvent* arg1 = getqpointer<QMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->moveEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->moveEvent_pub(arg1);
    }

    void qt_QStatusBar_tabletEvent_void_QStatusBar_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QTabletEvent* arg1 = getqpointer<QTabletEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->tabletEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->tabletEvent_pub(arg1);
    }

    void qt_QStatusBar_wheelEvent_void_QStatusBar_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStatusBar* arg0 = object<QStatusBar>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QStatusBar*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QStatusBar*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QStatusBar0, Pointer)
    {
        NODE_RETURN(qt_QStatusBar_QStatusBar_QStatusBar_QStatusBar_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addPermanentWidget0, void)
    {
        qt_QStatusBar_addPermanentWidget_void_QStatusBar_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_addWidget0, void)
    {
        qt_QStatusBar_addWidget_void_QStatusBar_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_currentMessage0, Pointer)
    {
        NODE_RETURN(qt_QStatusBar_currentMessage_string_QStatusBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertPermanentWidget0, int)
    {
        NODE_RETURN(
            qt_QStatusBar_insertPermanentWidget_int_QStatusBar_int_QWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_insertWidget0, int)
    {
        NODE_RETURN(qt_QStatusBar_insertWidget_int_QStatusBar_int_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_removeWidget0, void)
    {
        qt_QStatusBar_removeWidget_void_QStatusBar_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hideOrShow0, void)
    {
        qt_QStatusBar_hideOrShow_void_QStatusBar(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_reformat0, void)
    {
        qt_QStatusBar_reformat_void_QStatusBar(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QStatusBar_event_bool_QStatusBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QStatusBar_paintEvent_void_QStatusBar_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QStatusBar_resizeEvent_void_QStatusBar_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QStatusBar_showEvent_void_QStatusBar_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QStatusBar_hasHeightForWidth_bool_QStatusBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QStatusBar_heightForWidth_int_QStatusBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QStatusBar_inputMethodQuery_QVariant_QStatusBar_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QStatusBar_minimumSizeHint_QSize_QStatusBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QStatusBar_sizeHint_QSize_QStatusBar(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QStatusBar_changeEvent_void_QStatusBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QStatusBar_closeEvent_void_QStatusBar_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QStatusBar_contextMenuEvent_void_QStatusBar_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QStatusBar_dragEnterEvent_void_QStatusBar_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QStatusBar_dragLeaveEvent_void_QStatusBar_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QStatusBar_dragMoveEvent_void_QStatusBar_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QStatusBar_dropEvent_void_QStatusBar_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_enterEvent0, void)
    {
        qt_QStatusBar_enterEvent_void_QStatusBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QStatusBar_focusInEvent_void_QStatusBar_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QStatusBar_focusNextPrevChild_bool_QStatusBar_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QStatusBar_focusOutEvent_void_QStatusBar_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QStatusBar_hideEvent_void_QStatusBar_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QStatusBar_keyPressEvent_void_QStatusBar_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QStatusBar_keyReleaseEvent_void_QStatusBar_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
    {
        qt_QStatusBar_leaveEvent_void_QStatusBar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QStatusBar_mouseDoubleClickEvent_void_QStatusBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QStatusBar_mouseMoveEvent_void_QStatusBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QStatusBar_mousePressEvent_void_QStatusBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QStatusBar_mouseReleaseEvent_void_QStatusBar_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveEvent0, void)
    {
        qt_QStatusBar_moveEvent_void_QStatusBar_QMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
    {
        qt_QStatusBar_tabletEvent_void_QStatusBar_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QStatusBar_wheelEvent_void_QStatusBar_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QStatusBarType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QStatusBar_QStatusBar_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QStatusBar", _n_QStatusBar0, None, Compiled,
                         qt_QStatusBar_QStatusBar_QStatusBar_QStatusBar_QWidget,
                         Return, "qt.QStatusBar", Parameters,
                         new Param(c, "this", "qt.QStatusBar"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "addPermanentWidget", _n_addPermanentWidget0, None, Compiled,
                qt_QStatusBar_addPermanentWidget_void_QStatusBar_QWidget_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "widget", "qt.QWidget"),
                new Param(c, "stretch", "int", Value((int)0)), End),
            new Function(c, "addWidget", _n_addWidget0, None, Compiled,
                         qt_QStatusBar_addWidget_void_QStatusBar_QWidget_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QStatusBar"),
                         new Param(c, "widget", "qt.QWidget"),
                         new Param(c, "stretch", "int", Value((int)0)), End),
            new Function(c, "currentMessage", _n_currentMessage0, None,
                         Compiled,
                         qt_QStatusBar_currentMessage_string_QStatusBar, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QStatusBar"), End),
            new Function(
                c, "insertPermanentWidget", _n_insertPermanentWidget0, None,
                Compiled,
                qt_QStatusBar_insertPermanentWidget_int_QStatusBar_int_QWidget_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "index", "int"),
                new Param(c, "widget", "qt.QWidget"),
                new Param(c, "stretch", "int", Value((int)0)), End),
            new Function(
                c, "insertWidget", _n_insertWidget0, None, Compiled,
                qt_QStatusBar_insertWidget_int_QStatusBar_int_QWidget_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "index", "int"),
                new Param(c, "widget", "qt.QWidget"),
                new Param(c, "stretch", "int", Value((int)0)), End),
            // PROP: isSizeGripEnabled (bool; QStatusBar this)
            new Function(c, "removeWidget", _n_removeWidget0, None, Compiled,
                         qt_QStatusBar_removeWidget_void_QStatusBar_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QStatusBar"),
                         new Param(c, "widget", "qt.QWidget"), End),
            // PROP: setSizeGripEnabled (void; QStatusBar this, bool _p5)
            new Function(c, "hideOrShow", _n_hideOrShow0, None, Compiled,
                         qt_QStatusBar_hideOrShow_void_QStatusBar, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QStatusBar"), End),
            new Function(c, "reformat", _n_reformat0, None, Compiled,
                         qt_QStatusBar_reformat_void_QStatusBar, Return, "void",
                         Parameters, new Param(c, "this", "qt.QStatusBar"),
                         End),
            _func[0] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QStatusBar_event_bool_QStatusBar_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[1] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QStatusBar_paintEvent_void_QStatusBar_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[2] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QStatusBar_resizeEvent_void_QStatusBar_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "e", "qt.QResizeEvent"), End),
            _func[3] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QStatusBar_showEvent_void_QStatusBar_QShowEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "_p13", "qt.QShowEvent"), End),
            _func[4] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QStatusBar_hasHeightForWidth_bool_QStatusBar, Return, "bool",
                Parameters, new Param(c, "this", "qt.QStatusBar"), End),
            _func[5] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QStatusBar_heightForWidth_int_QStatusBar_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "w", "int"), End),
            _func[6] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QStatusBar_inputMethodQuery_QVariant_QStatusBar_int, Return,
                "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "query", "int"), End),
            _func[7] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QStatusBar_minimumSizeHint_QSize_QStatusBar, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QStatusBar"),
                End),
            _func[8] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QStatusBar_sizeHint_QSize_QStatusBar, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QStatusBar"), End),
            // MISSING: paintEngine ("QPaintEngine *"; QStatusBar this)
            // MISSING: actionEvent (void; QStatusBar this, "QActionEvent *"
            // event) // protected
            _func[9] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QStatusBar_changeEvent_void_QStatusBar_QEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[10] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QStatusBar_closeEvent_void_QStatusBar_QCloseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[11] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QStatusBar_contextMenuEvent_void_QStatusBar_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[12] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QStatusBar_dragEnterEvent_void_QStatusBar_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[13] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QStatusBar_dragLeaveEvent_void_QStatusBar_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[14] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QStatusBar_dragMoveEvent_void_QStatusBar_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[15] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QStatusBar_dropEvent_void_QStatusBar_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[16] = new MemberFunction(
                c, "enterEvent", _n_enterEvent0, None, Compiled,
                qt_QStatusBar_enterEvent_void_QStatusBar_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[17] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QStatusBar_focusInEvent_void_QStatusBar_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[18] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QStatusBar_focusNextPrevChild_bool_QStatusBar_bool, Return,
                "bool", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "next", "bool"), End),
            _func[19] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QStatusBar_focusOutEvent_void_QStatusBar_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[20] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QStatusBar_hideEvent_void_QStatusBar_QHideEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QHideEvent"), End),
            // MISSING: inputMethodEvent (void; QStatusBar this,
            // "QInputMethodEvent *" event) // protected
            _func[21] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QStatusBar_keyPressEvent_void_QStatusBar_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[22] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QStatusBar_keyReleaseEvent_void_QStatusBar_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[23] = new MemberFunction(
                c, "leaveEvent", _n_leaveEvent0, None, Compiled,
                qt_QStatusBar_leaveEvent_void_QStatusBar_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[24] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QStatusBar_mouseDoubleClickEvent_void_QStatusBar_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[25] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QStatusBar_mouseMoveEvent_void_QStatusBar_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[26] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QStatusBar_mousePressEvent_void_QStatusBar_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[27] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QStatusBar_mouseReleaseEvent_void_QStatusBar_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[28] = new MemberFunction(
                c, "moveEvent", _n_moveEvent0, None, Compiled,
                qt_QStatusBar_moveEvent_void_QStatusBar_QMoveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QMoveEvent"), End),
            // MISSING: nativeEvent (bool; QStatusBar this, QByteArray
            // eventType, "void *" message, "long *" result) // protected
            _func[29] = new MemberFunction(
                c, "tabletEvent", _n_tabletEvent0, None, Compiled,
                qt_QStatusBar_tabletEvent_void_QStatusBar_QTabletEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QTabletEvent"), End),
            _func[30] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QStatusBar_wheelEvent_void_QStatusBar_QWheelEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QStatusBar"),
                new Param(c, "event", "qt.QWheelEvent"), End),
            // MISSING: initPainter (void; QStatusBar this, "QPainter *"
            // painter) // protected MISSING: metric (int; QStatusBar this,
            // "PaintDeviceMetric" m) // protected static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QStatusBar::staticMetaObject, propExclusions);
    }

} // namespace Mu
