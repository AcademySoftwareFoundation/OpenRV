//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QWebEngineSettingsType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QWebEngineSettingsType::QWebEngineSettingsType(Context* c, const char* name,
                                                   Class* super)
        : Class(c, name, super)
    {
    }

    QWebEngineSettingsType::~QWebEngineSettingsType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QWebEngineSettings_defaultTextEncoding_string_QWebEngineSettings(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        return makestring(c, arg0->defaultTextEncoding());
    }

    Pointer qt_QWebEngineSettings_fontFamily_string_QWebEngineSettings_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_which)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::FontFamily arg1 =
            (QWebEngineSettings::FontFamily)(param_which);
        return makestring(c, arg0->fontFamily(arg1));
    }

    int qt_QWebEngineSettings_fontSize_int_QWebEngineSettings_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::FontSize arg1 =
            (QWebEngineSettings::FontSize)(param_type);
        return arg0->fontSize(arg1);
    }

    void qt_QWebEngineSettings_resetAttribute_void_QWebEngineSettings_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_attribute)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::WebAttribute arg1 =
            (QWebEngineSettings::WebAttribute)(param_attribute);
        arg0->resetAttribute(arg1);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    void qt_QWebEngineSettings_resetFontFamily_void_QWebEngineSettings_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_which)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::FontFamily arg1 =
            (QWebEngineSettings::FontFamily)(param_which);
        arg0->resetFontFamily(arg1);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    void qt_QWebEngineSettings_resetFontSize_void_QWebEngineSettings_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::FontSize arg1 =
            (QWebEngineSettings::FontSize)(param_type);
        arg0->resetFontSize(arg1);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    void qt_QWebEngineSettings_setAttribute_void_QWebEngineSettings_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_attribute,
        bool param_on)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::WebAttribute arg1 =
            (QWebEngineSettings::WebAttribute)(param_attribute);
        bool arg2 = (bool)(param_on);
        arg0->setAttribute(arg1, arg2);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    void
    qt_QWebEngineSettings_setDefaultTextEncoding_void_QWebEngineSettings_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_encoding)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        const QString arg1 = qstring(param_encoding);
        arg0->setDefaultTextEncoding(arg1);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    void qt_QWebEngineSettings_setFontFamily_void_QWebEngineSettings_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_which,
        Pointer param_family)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::FontFamily arg1 =
            (QWebEngineSettings::FontFamily)(param_which);
        const QString arg2 = qstring(param_family);
        arg0->setFontFamily(arg1, arg2);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    void qt_QWebEngineSettings_setFontSize_void_QWebEngineSettings_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type,
        int param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::FontSize arg1 =
            (QWebEngineSettings::FontSize)(param_type);
        int arg2 = (int)(param_size);
        arg0->setFontSize(arg1, arg2);
        setqpointer<QWebEngineSettingsType>(param_this, arg0);
    }

    bool qt_QWebEngineSettings_testAttribute_bool_QWebEngineSettings_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_attribute)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWebEngineSettings* arg0 =
            getqpointer<QWebEngineSettingsType>(param_this);
        QWebEngineSettings::WebAttribute arg1 =
            (QWebEngineSettings::WebAttribute)(param_attribute);
        return arg0->testAttribute(arg1);
    }

    Pointer qt_QWebEngineSettings_defaultSettings_QWebEngineSettings(
        Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makeqpointer<QWebEngineSettingsType>(
            c, QWebEngineSettings::defaultSettings(), "qt.QWebEngineSettings");
    }

    Pointer qt_QWebEngineSettings_globalSettings_QWebEngineSettings(
        Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makeqpointer<QWebEngineSettingsType>(
            c, QWebEngineSettings::globalSettings(), "qt.QWebEngineSettings");
    }

    static NODE_IMPLEMENTATION(_n_defaultTextEncoding0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEngineSettings_defaultTextEncoding_string_QWebEngineSettings(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_fontFamily0, Pointer)
    {
        NODE_RETURN(
            qt_QWebEngineSettings_fontFamily_string_QWebEngineSettings_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_fontSize0, int)
    {
        NODE_RETURN(qt_QWebEngineSettings_fontSize_int_QWebEngineSettings_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_resetAttribute0, void)
    {
        qt_QWebEngineSettings_resetAttribute_void_QWebEngineSettings_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_resetFontFamily0, void)
    {
        qt_QWebEngineSettings_resetFontFamily_void_QWebEngineSettings_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_resetFontSize0, void)
    {
        qt_QWebEngineSettings_resetFontSize_void_QWebEngineSettings_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setAttribute0, void)
    {
        qt_QWebEngineSettings_setAttribute_void_QWebEngineSettings_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setDefaultTextEncoding0, void)
    {
        qt_QWebEngineSettings_setDefaultTextEncoding_void_QWebEngineSettings_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setFontFamily0, void)
    {
        qt_QWebEngineSettings_setFontFamily_void_QWebEngineSettings_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setFontSize0, void)
    {
        qt_QWebEngineSettings_setFontSize_void_QWebEngineSettings_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_testAttribute0, bool)
    {
        NODE_RETURN(
            qt_QWebEngineSettings_testAttribute_bool_QWebEngineSettings_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_defaultSettings0, Pointer)
    {
        NODE_RETURN(qt_QWebEngineSettings_defaultSettings_QWebEngineSettings(
            NODE_THREAD));
    }

    static NODE_IMPLEMENTATION(_n_globalSettings0, Pointer)
    {
        NODE_RETURN(qt_QWebEngineSettings_globalSettings_QWebEngineSettings(
            NODE_THREAD));
    }

    void QWebEngineSettingsType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(
            new Alias(c, "FontFamily", "int"),
            new SymbolicConstant(c, "StandardFont", "int",
                                 Value(int(QWebEngineSettings::StandardFont))),
            new SymbolicConstant(c, "FixedFont", "int",
                                 Value(int(QWebEngineSettings::FixedFont))),
            new SymbolicConstant(c, "SerifFont", "int",
                                 Value(int(QWebEngineSettings::SerifFont))),
            new SymbolicConstant(c, "SansSerifFont", "int",
                                 Value(int(QWebEngineSettings::SansSerifFont))),
            new SymbolicConstant(c, "CursiveFont", "int",
                                 Value(int(QWebEngineSettings::CursiveFont))),
            new SymbolicConstant(c, "FantasyFont", "int",
                                 Value(int(QWebEngineSettings::FantasyFont))),
            new Alias(c, "FontSize", "int"),
            new SymbolicConstant(
                c, "MinimumFontSize", "int",
                Value(int(QWebEngineSettings::MinimumFontSize))),
            new SymbolicConstant(
                c, "MinimumLogicalFontSize", "int",
                Value(int(QWebEngineSettings::MinimumLogicalFontSize))),
            new SymbolicConstant(
                c, "DefaultFontSize", "int",
                Value(int(QWebEngineSettings::DefaultFontSize))),
            new SymbolicConstant(
                c, "DefaultFixedFontSize", "int",
                Value(int(QWebEngineSettings::DefaultFixedFontSize))),
            new Alias(c, "WebAttribute", "int"),
            new SymbolicConstant(
                c, "AutoLoadImages", "int",
                Value(int(QWebEngineSettings::AutoLoadImages))),
            new SymbolicConstant(
                c, "JavascriptEnabled", "int",
                Value(int(QWebEngineSettings::JavascriptEnabled))),
            new SymbolicConstant(
                c, "JavascriptCanOpenWindows", "int",
                Value(int(QWebEngineSettings::JavascriptCanOpenWindows))),
            new SymbolicConstant(
                c, "JavascriptCanAccessClipboard", "int",
                Value(int(QWebEngineSettings::JavascriptCanAccessClipboard))),
            new SymbolicConstant(
                c, "LinksIncludedInFocusChain", "int",
                Value(int(QWebEngineSettings::LinksIncludedInFocusChain))),
            new SymbolicConstant(
                c, "LocalStorageEnabled", "int",
                Value(int(QWebEngineSettings::LocalStorageEnabled))),
            new SymbolicConstant(
                c, "LocalContentCanAccessRemoteUrls", "int",
                Value(
                    int(QWebEngineSettings::LocalContentCanAccessRemoteUrls))),
            new SymbolicConstant(
                c, "XSSAuditingEnabled", "int",
                Value(int(QWebEngineSettings::XSSAuditingEnabled))),
            new SymbolicConstant(
                c, "SpatialNavigationEnabled", "int",
                Value(int(QWebEngineSettings::SpatialNavigationEnabled))),
            new SymbolicConstant(
                c, "LocalContentCanAccessFileUrls", "int",
                Value(int(QWebEngineSettings::LocalContentCanAccessFileUrls))),
            new SymbolicConstant(
                c, "HyperlinkAuditingEnabled", "int",
                Value(int(QWebEngineSettings::HyperlinkAuditingEnabled))),
            new SymbolicConstant(
                c, "ScrollAnimatorEnabled", "int",
                Value(int(QWebEngineSettings::ScrollAnimatorEnabled))),
            new SymbolicConstant(
                c, "ErrorPageEnabled", "int",
                Value(int(QWebEngineSettings::ErrorPageEnabled))),
            new SymbolicConstant(
                c, "PluginsEnabled", "int",
                Value(int(QWebEngineSettings::PluginsEnabled))),
            new SymbolicConstant(
                c, "FullScreenSupportEnabled", "int",
                Value(int(QWebEngineSettings::FullScreenSupportEnabled))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "defaultTextEncoding", _n_defaultTextEncoding0, None,
                Compiled,
                qt_QWebEngineSettings_defaultTextEncoding_string_QWebEngineSettings,
                Return, "string", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"), End),
            new Function(
                c, "fontFamily", _n_fontFamily0, None, Compiled,
                qt_QWebEngineSettings_fontFamily_string_QWebEngineSettings_int,
                Return, "string", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "which", "int"), End),
            new Function(
                c, "fontSize", _n_fontSize0, None, Compiled,
                qt_QWebEngineSettings_fontSize_int_QWebEngineSettings_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "type", "int"), End),
            new Function(
                c, "resetAttribute", _n_resetAttribute0, None, Compiled,
                qt_QWebEngineSettings_resetAttribute_void_QWebEngineSettings_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "attribute", "int"), End),
            new Function(
                c, "resetFontFamily", _n_resetFontFamily0, None, Compiled,
                qt_QWebEngineSettings_resetFontFamily_void_QWebEngineSettings_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "which", "int"), End),
            new Function(
                c, "resetFontSize", _n_resetFontSize0, None, Compiled,
                qt_QWebEngineSettings_resetFontSize_void_QWebEngineSettings_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "type", "int"), End),
            new Function(
                c, "setAttribute", _n_setAttribute0, None, Compiled,
                qt_QWebEngineSettings_setAttribute_void_QWebEngineSettings_int_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "attribute", "int"), new Param(c, "on", "bool"),
                End),
            new Function(
                c, "setDefaultTextEncoding", _n_setDefaultTextEncoding0, None,
                Compiled,
                qt_QWebEngineSettings_setDefaultTextEncoding_void_QWebEngineSettings_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "encoding", "string"), End),
            new Function(
                c, "setFontFamily", _n_setFontFamily0, None, Compiled,
                qt_QWebEngineSettings_setFontFamily_void_QWebEngineSettings_int_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "which", "int"), new Param(c, "family", "string"),
                End),
            new Function(
                c, "setFontSize", _n_setFontSize0, None, Compiled,
                qt_QWebEngineSettings_setFontSize_void_QWebEngineSettings_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "type", "int"), new Param(c, "size", "int"), End),
            new Function(
                c, "testAttribute", _n_testAttribute0, None, Compiled,
                qt_QWebEngineSettings_testAttribute_bool_QWebEngineSettings_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QWebEngineSettings"),
                new Param(c, "attribute", "int"), End),
            // static functions
            new Function(
                c, "defaultSettings", _n_defaultSettings0, None, Compiled,
                qt_QWebEngineSettings_defaultSettings_QWebEngineSettings,
                Return, "qt.QWebEngineSettings", End),
            new Function(
                c, "globalSettings", _n_globalSettings0, None, Compiled,
                qt_QWebEngineSettings_globalSettings_QWebEngineSettings, Return,
                "qt.QWebEngineSettings", End),
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
