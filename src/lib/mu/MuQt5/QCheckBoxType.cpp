//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QCheckBoxType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QTimerEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QCheckBox::~MuQt_QCheckBox()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QCheckBox::MuQt_QCheckBox(Pointer muobj, const CallEnvironment* ce,
                                   QWidget* parent)
        : QCheckBox(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QCheckBoxType>(
            c->internName("qt.QCheckBox"));
    }

    MuQt_QCheckBox::MuQt_QCheckBox(Pointer muobj, const CallEnvironment* ce,
                                   const QString& text, QWidget* parent)
        : QCheckBox(text, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QCheckBoxType>(
            c->internName("qt.QCheckBox"));
    }

    QSize MuQt_QCheckBox::minimumSizeHint() const
    {
        if (!_env)
            return QCheckBox::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QCheckBox::minimumSizeHint();
        }
    }

    QSize MuQt_QCheckBox::sizeHint() const
    {
        if (!_env)
            return QCheckBox::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QCheckBox::sizeHint();
        }
    }

    void MuQt_QCheckBox::checkStateSet()
    {
        if (!_env)
        {
            QCheckBox::checkStateSet();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::checkStateSet();
        }
    }

    bool MuQt_QCheckBox::event(QEvent* e)
    {
        if (!_env)
            return QCheckBox::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QCheckBox::event(e);
        }
    }

    bool MuQt_QCheckBox::hitButton(const QPoint& pos) const
    {
        if (!_env)
            return QCheckBox::hitButton(pos);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QPointType>(c, pos, "qt.QPoint"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QCheckBox::hitButton(pos);
        }
    }

    void MuQt_QCheckBox::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QCheckBox::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::mouseMoveEvent(e);
        }
    }

    void MuQt_QCheckBox::nextCheckState()
    {
        if (!_env)
        {
            QCheckBox::nextCheckState();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::nextCheckState();
        }
    }

    void MuQt_QCheckBox::paintEvent(QPaintEvent* _p14)
    {
        if (!_env)
        {
            QCheckBox::paintEvent(_p14);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, _p14, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::paintEvent(_p14);
        }
    }

    void MuQt_QCheckBox::changeEvent(QEvent* e)
    {
        if (!_env)
        {
            QCheckBox::changeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::changeEvent(e);
        }
    }

    void MuQt_QCheckBox::focusInEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QCheckBox::focusInEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::focusInEvent(e);
        }
    }

    void MuQt_QCheckBox::focusOutEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QCheckBox::focusOutEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::focusOutEvent(e);
        }
    }

    void MuQt_QCheckBox::keyPressEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QCheckBox::keyPressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::keyPressEvent(e);
        }
    }

    void MuQt_QCheckBox::keyReleaseEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QCheckBox::keyReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::keyReleaseEvent(e);
        }
    }

    void MuQt_QCheckBox::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QCheckBox::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::mousePressEvent(e);
        }
    }

    void MuQt_QCheckBox::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QCheckBox::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::mouseReleaseEvent(e);
        }
    }

    void MuQt_QCheckBox::timerEvent(QTimerEvent* e)
    {
        if (!_env)
        {
            QCheckBox::timerEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QTimerEventType>(c, e, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QCheckBox::timerEvent(e);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QCheckBoxType::QCheckBoxType(Context* c, const char* name, Class* super,
                                 Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QCheckBoxType::~QCheckBoxType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QCheckBox_QCheckBox_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QCheckBox* w = object<QCheckBox>(widget))
        {
            QCheckBoxType* type =
                c->findSymbolOfTypeByQualifiedName<QCheckBoxType>(
                    c->internName("qt.QCheckBox"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QCheckBox_QCheckBox_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QCheckBox_QCheckBox_QCheckBox_QCheckBox_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QCheckBox(param_this,
                                     NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer qt_QCheckBox_QCheckBox_QCheckBox_QCheckBox_string_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_text);
        QWidget* arg2 = object<QWidget>(param_parent);
        setobject(param_this, new MuQt_QCheckBox(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    int qt_QCheckBox_checkState_int_QCheckBox(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        return int(arg0->checkState());
    }

    void qt_QCheckBox_setCheckState_void_QCheckBox_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_state)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        Qt::CheckState arg1 = (Qt::CheckState)(param_state);
        arg0->setCheckState(arg1);
    }

    Pointer
    qt_QCheckBox_minimumSizeHint_QSize_QCheckBox(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QCheckBox::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QCheckBox_sizeHint_QSize_QCheckBox(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QCheckBox::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QCheckBox_checkStateSet_void_QCheckBox(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->checkStateSet_pub_parent();
        else
            ((MuQt_QCheckBox*)arg0)->checkStateSet_pub();
    }

    bool qt_QCheckBox_event_bool_QCheckBox_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QCheckBox*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QCheckBox*)arg0)->event_pub(arg1);
    }

    bool qt_QCheckBox_hitButton_bool_QCheckBox_QPoint(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return isMuQtObject(arg0)
                   ? ((MuQt_QCheckBox*)arg0)->hitButton_pub_parent(arg1)
                   : ((MuQt_QCheckBox*)arg0)->hitButton_pub(arg1);
    }

    void qt_QCheckBox_mouseMoveEvent_void_QCheckBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QCheckBox_nextCheckState_void_QCheckBox(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->nextCheckState_pub_parent();
        else
            ((MuQt_QCheckBox*)arg0)->nextCheckState_pub();
    }

    void qt_QCheckBox_paintEvent_void_QCheckBox_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p14)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param__p14);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QCheckBox_changeEvent_void_QCheckBox_QEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QCheckBox_focusInEvent_void_QCheckBox_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->focusInEvent_pub(arg1);
    }

    void qt_QCheckBox_focusOutEvent_void_QCheckBox_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QCheckBox_keyPressEvent_void_QCheckBox_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QCheckBox_keyReleaseEvent_void_QCheckBox_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QCheckBox_mousePressEvent_void_QCheckBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QCheckBox_mouseReleaseEvent_void_QCheckBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QCheckBox_timerEvent_void_QCheckBox_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QCheckBox* arg0 = object<QCheckBox>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QCheckBox*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QCheckBox*)arg0)->timerEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QCheckBox0, Pointer)
    {
        NODE_RETURN(qt_QCheckBox_QCheckBox_QCheckBox_QCheckBox_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QCheckBox1, Pointer)
    {
        NODE_RETURN(qt_QCheckBox_QCheckBox_QCheckBox_QCheckBox_string_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_checkState0, int)
    {
        NODE_RETURN(qt_QCheckBox_checkState_int_QCheckBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCheckState0, void)
    {
        qt_QCheckBox_setCheckState_void_QCheckBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QCheckBox_minimumSizeHint_QSize_QCheckBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QCheckBox_sizeHint_QSize_QCheckBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_checkStateSet0, void)
    {
        qt_QCheckBox_checkStateSet_void_QCheckBox(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QCheckBox_event_bool_QCheckBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hitButton0, bool)
    {
        NODE_RETURN(qt_QCheckBox_hitButton_bool_QCheckBox_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QCheckBox_mouseMoveEvent_void_QCheckBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_nextCheckState0, void)
    {
        qt_QCheckBox_nextCheckState_void_QCheckBox(NODE_THREAD,
                                                   NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QCheckBox_paintEvent_void_QCheckBox_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QCheckBox_changeEvent_void_QCheckBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QCheckBox_focusInEvent_void_QCheckBox_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QCheckBox_focusOutEvent_void_QCheckBox_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QCheckBox_keyPressEvent_void_QCheckBox_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QCheckBox_keyReleaseEvent_void_QCheckBox_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QCheckBox_mousePressEvent_void_QCheckBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QCheckBox_mouseReleaseEvent_void_QCheckBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QCheckBox_timerEvent_void_QCheckBox_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QCheckBoxType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QCheckBox_QCheckBox_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QCheckBox", _n_QCheckBox0, None, Compiled,
                         qt_QCheckBox_QCheckBox_QCheckBox_QCheckBox_QWidget,
                         Return, "qt.QCheckBox", Parameters,
                         new Param(c, "this", "qt.QCheckBox"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "QCheckBox", _n_QCheckBox1, None, Compiled,
                qt_QCheckBox_QCheckBox_QCheckBox_QCheckBox_string_QWidget,
                Return, "qt.QCheckBox", Parameters,
                new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "text", "string"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "checkState", _n_checkState0, None, Compiled,
                         qt_QCheckBox_checkState_int_QCheckBox, Return, "int",
                         Parameters, new Param(c, "this", "qt.QCheckBox"), End),
            // PROP: isTristate (bool; QCheckBox this)
            new Function(c, "setCheckState", _n_setCheckState0, None, Compiled,
                         qt_QCheckBox_setCheckState_void_QCheckBox_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QCheckBox"),
                         new Param(c, "state", "int"), End),
            // PROP: setTristate (void; QCheckBox this, bool y)
            _func[0] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QCheckBox_minimumSizeHint_QSize_QCheckBox, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QCheckBox"),
                End),
            _func[1] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QCheckBox_sizeHint_QSize_QCheckBox, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QCheckBox"), End),
            // MISSING: initStyleOption (void; QCheckBox this,
            // "QStyleOptionButton *" option) // protected
            _func[2] = new MemberFunction(
                c, "checkStateSet", _n_checkStateSet0, None, Compiled,
                qt_QCheckBox_checkStateSet_void_QCheckBox, Return, "void",
                Parameters, new Param(c, "this", "qt.QCheckBox"), End),
            _func[3] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QCheckBox_event_bool_QCheckBox_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[4] = new MemberFunction(
                c, "hitButton", _n_hitButton0, None, Compiled,
                qt_QCheckBox_hitButton_bool_QCheckBox_QPoint, Return, "bool",
                Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "pos", "qt.QPoint"), End),
            _func[5] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QCheckBox_mouseMoveEvent_void_QCheckBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[6] = new MemberFunction(
                c, "nextCheckState", _n_nextCheckState0, None, Compiled,
                qt_QCheckBox_nextCheckState_void_QCheckBox, Return, "void",
                Parameters, new Param(c, "this", "qt.QCheckBox"), End),
            _func[7] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QCheckBox_paintEvent_void_QCheckBox_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "_p14", "qt.QPaintEvent"), End),
            _func[8] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QCheckBox_changeEvent_void_QCheckBox_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[9] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QCheckBox_focusInEvent_void_QCheckBox_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            _func[10] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QCheckBox_focusOutEvent_void_QCheckBox_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            _func[11] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QCheckBox_keyPressEvent_void_QCheckBox_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[12] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QCheckBox_keyReleaseEvent_void_QCheckBox_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[13] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QCheckBox_mousePressEvent_void_QCheckBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QCheckBox_mouseReleaseEvent_void_QCheckBox_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[15] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QCheckBox_timerEvent_void_QCheckBox_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QCheckBox"),
                new Param(c, "e", "qt.QTimerEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QCheckBox::staticMetaObject, propExclusions);
    }

} // namespace Mu
