//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTextCursorType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QTextDocumentType.h>
#include <MuQt5/QImageType.h>
#include <MuQt5/QTextBlockType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QTextCursorType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QTextCursorType::QTextCursorType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QTextCursorType::~QTextCursorType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QTextCursorType::Instance* i =
            new QTextCursorType::Instance((Class*)NODE_THIS.type());
        QTextCursorType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QTextCursorType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QTextCursorType::finalizer, 0, 0, 0);
    }

    void QTextCursorType::finalizer(void* obj, void* data)
    {
        QTextCursorType::Instance* i =
            reinterpret_cast<QTextCursorType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QTextCursorType>(param_this, QTextCursor());
        return param_this;
    }

    Pointer qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_document)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextDocument* arg1 = object<QTextDocument>(param_document);
        setqtype<QTextCursorType>(param_this, QTextCursor(arg1));
        return param_this;
    }

    Pointer qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor_QTextBlock(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_block)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextBlock arg1 = getqtype<QTextBlockType>(param_block);
        setqtype<QTextCursorType>(param_this, QTextCursor(arg1));
        return param_this;
    }

    int qt_QTextCursor_anchor_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.anchor();
    }

    bool qt_QTextCursor_atBlockEnd_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.atBlockEnd();
    }

    bool qt_QTextCursor_atBlockStart_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.atBlockStart();
    }

    bool qt_QTextCursor_atEnd_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.atEnd();
    }

    bool qt_QTextCursor_atStart_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.atStart();
    }

    void qt_QTextCursor_beginEditBlock_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.beginEditBlock();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    Pointer qt_QTextCursor_block_QTextBlock_QTextCursor(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return makeqtype<QTextBlockType>(c, arg0.block(), "qt.QTextBlock");
    }

    int qt_QTextCursor_blockNumber_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.blockNumber();
    }

    void qt_QTextCursor_clearSelection_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.clearSelection();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    int qt_QTextCursor_columnNumber_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.columnNumber();
    }

    void qt_QTextCursor_deleteChar_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.deleteChar();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void
    qt_QTextCursor_deletePreviousChar_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.deletePreviousChar();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    Pointer
    qt_QTextCursor_document_QTextDocument_QTextCursor(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return makeinstance<QTextDocumentType>(c, arg0.document(),
                                               "qt.QTextDocument");
    }

    void qt_QTextCursor_endEditBlock_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.endEditBlock();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    bool
    qt_QTextCursor_hasComplexSelection_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.hasComplexSelection();
    }

    bool qt_QTextCursor_hasSelection_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.hasSelection();
    }

    void qt_QTextCursor_insertBlock_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.insertBlock();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_insertHtml_void_QTextCursor_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_html)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QString arg1 = qstring(param_html);
        arg0.insertHtml(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_insertImage_void_QTextCursor_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QString arg1 = qstring(param_name);
        arg0.insertImage(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_insertImage_void_QTextCursor_QImage_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_image,
        Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QImage arg1 = getqtype<QImageType>(param_image);
        const QString arg2 = qstring(param_name);
        arg0.insertImage(arg1, arg2);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_insertText_void_QTextCursor_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QString arg1 = qstring(param_text);
        arg0.insertText(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    bool qt_QTextCursor_isCopyOf_bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.isCopyOf(arg1);
    }

    bool qt_QTextCursor_isNull_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.isNull();
    }

    void qt_QTextCursor_joinPreviousEditBlock_void_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.joinPreviousEditBlock();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    bool qt_QTextCursor_keepPositionOnInsert_bool_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.keepPositionOnInsert();
    }

    bool qt_QTextCursor_movePosition_bool_QTextCursor_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_operation,
        int param_mode, int param_n)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        QTextCursor::MoveOperation arg1 =
            (QTextCursor::MoveOperation)(param_operation);
        QTextCursor::MoveMode arg2 = (QTextCursor::MoveMode)(param_mode);
        int arg3 = (int)(param_n);
        return arg0.movePosition(arg1, arg2, arg3);
    }

    int qt_QTextCursor_position_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.position();
    }

    int qt_QTextCursor_positionInBlock_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.positionInBlock();
    }

    void
    qt_QTextCursor_removeSelectedText_void_QTextCursor(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        arg0.removeSelectedText();
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_select_void_QTextCursor_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_selection)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        QTextCursor::SelectionType arg1 =
            (QTextCursor::SelectionType)(param_selection);
        arg0.select(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    Pointer
    qt_QTextCursor_selectedText_string_QTextCursor(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return makestring(c, arg0.selectedText());
    }

    int qt_QTextCursor_selectionEnd_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.selectionEnd();
    }

    int qt_QTextCursor_selectionStart_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.selectionStart();
    }

    void qt_QTextCursor_setKeepPositionOnInsert_void_QTextCursor_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_b)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        bool arg1 = (bool)(param_b);
        arg0.setKeepPositionOnInsert(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_setPosition_void_QTextCursor_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_pos, int param_m)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        int arg1 = (int)(param_pos);
        QTextCursor::MoveMode arg2 = (QTextCursor::MoveMode)(param_m);
        arg0.setPosition(arg1, arg2);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_setVerticalMovementX_void_QTextCursor_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        int arg1 = (int)(param_x);
        arg0.setVerticalMovementX(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_setVisualNavigation_void_QTextCursor_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_b)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        bool arg1 = (bool)(param_b);
        arg0.setVisualNavigation(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    void qt_QTextCursor_swap_void_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        arg0.swap(arg1);
        setqtype<QTextCursorType>(param_this, arg0);
    }

    int
    qt_QTextCursor_verticalMovementX_int_QTextCursor(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.verticalMovementX();
    }

    bool
    qt_QTextCursor_visualNavigation_bool_QTextCursor(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        return arg0.visualNavigation();
    }

    bool qt_QTextCursor_operatorBang_EQ__bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.operator!=(arg1);
    }

    bool qt_QTextCursor_operatorLT__bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.operator<(arg1);
    }

    bool qt_QTextCursor_operatorLT_EQ__bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.operator<=(arg1);
    }

    bool qt_QTextCursor_operatorEQ_EQ__bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.operator==(arg1);
    }

    bool qt_QTextCursor_operatorGT__bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.operator>(arg1);
    }

    bool qt_QTextCursor_operatorGT_EQ__bool_QTextCursor_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTextCursor& arg0 = getqtype<QTextCursorType>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_other);
        return arg0.operator>=(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QTextCursor0, Pointer)
    {
        NODE_RETURN(qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QTextCursor1, Pointer)
    {
        NODE_RETURN(
            qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor_QTextDocument(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QTextCursor3, Pointer)
    {
        NODE_RETURN(
            qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor_QTextBlock(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_anchor0, int)
    {
        NODE_RETURN(qt_QTextCursor_anchor_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_atBlockEnd0, bool)
    {
        NODE_RETURN(qt_QTextCursor_atBlockEnd_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_atBlockStart0, bool)
    {
        NODE_RETURN(qt_QTextCursor_atBlockStart_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_atEnd0, bool)
    {
        NODE_RETURN(qt_QTextCursor_atEnd_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_atStart0, bool)
    {
        NODE_RETURN(qt_QTextCursor_atStart_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_beginEditBlock0, void)
    {
        qt_QTextCursor_beginEditBlock_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_block0, Pointer)
    {
        NODE_RETURN(qt_QTextCursor_block_QTextBlock_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_blockNumber0, int)
    {
        NODE_RETURN(qt_QTextCursor_blockNumber_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_clearSelection0, void)
    {
        qt_QTextCursor_clearSelection_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_columnNumber0, int)
    {
        NODE_RETURN(qt_QTextCursor_columnNumber_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_deleteChar0, void)
    {
        qt_QTextCursor_deleteChar_void_QTextCursor(NODE_THREAD,
                                                   NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_deletePreviousChar0, void)
    {
        qt_QTextCursor_deletePreviousChar_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_document0, Pointer)
    {
        NODE_RETURN(qt_QTextCursor_document_QTextDocument_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_endEditBlock0, void)
    {
        qt_QTextCursor_endEditBlock_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasComplexSelection0, bool)
    {
        NODE_RETURN(qt_QTextCursor_hasComplexSelection_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hasSelection0, bool)
    {
        NODE_RETURN(qt_QTextCursor_hasSelection_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertBlock0, void)
    {
        qt_QTextCursor_insertBlock_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertHtml0, void)
    {
        qt_QTextCursor_insertHtml_void_QTextCursor_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertImage2, void)
    {
        qt_QTextCursor_insertImage_void_QTextCursor_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertImage3, void)
    {
        qt_QTextCursor_insertImage_void_QTextCursor_QImage_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertText0, void)
    {
        qt_QTextCursor_insertText_void_QTextCursor_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_isCopyOf0, bool)
    {
        NODE_RETURN(qt_QTextCursor_isCopyOf_bool_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isNull0, bool)
    {
        NODE_RETURN(qt_QTextCursor_isNull_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_joinPreviousEditBlock0, void)
    {
        qt_QTextCursor_joinPreviousEditBlock_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keepPositionOnInsert0, bool)
    {
        NODE_RETURN(qt_QTextCursor_keepPositionOnInsert_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_movePosition0, bool)
    {
        NODE_RETURN(qt_QTextCursor_movePosition_bool_QTextCursor_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_position0, int)
    {
        NODE_RETURN(qt_QTextCursor_position_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_positionInBlock0, int)
    {
        NODE_RETURN(qt_QTextCursor_positionInBlock_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_removeSelectedText0, void)
    {
        qt_QTextCursor_removeSelectedText_void_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_select0, void)
    {
        qt_QTextCursor_select_void_QTextCursor_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_selectedText0, Pointer)
    {
        NODE_RETURN(qt_QTextCursor_selectedText_string_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionEnd0, int)
    {
        NODE_RETURN(qt_QTextCursor_selectionEnd_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionStart0, int)
    {
        NODE_RETURN(qt_QTextCursor_selectionStart_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setKeepPositionOnInsert0, void)
    {
        qt_QTextCursor_setKeepPositionOnInsert_void_QTextCursor_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_setPosition0, void)
    {
        qt_QTextCursor_setPosition_void_QTextCursor_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setVerticalMovementX0, void)
    {
        qt_QTextCursor_setVerticalMovementX_void_QTextCursor_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setVisualNavigation0, void)
    {
        qt_QTextCursor_setVisualNavigation_void_QTextCursor_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_swap0, void)
    {
        qt_QTextCursor_swap_void_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_verticalMovementX0, int)
    {
        NODE_RETURN(qt_QTextCursor_verticalMovementX_int_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualNavigation0, bool)
    {
        NODE_RETURN(qt_QTextCursor_visualNavigation_bool_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(
            qt_QTextCursor_operatorBang_EQ__bool_QTextCursor_QTextCursor(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorLT_0, bool)
    {
        NODE_RETURN(qt_QTextCursor_operatorLT__bool_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorLT_EQ_0, bool)
    {
        NODE_RETURN(qt_QTextCursor_operatorLT_EQ__bool_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt_QTextCursor_operatorEQ_EQ__bool_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorGT_0, bool)
    {
        NODE_RETURN(qt_QTextCursor_operatorGT__bool_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorGT_EQ_0, bool)
    {
        NODE_RETURN(qt_QTextCursor_operatorGT_EQ__bool_QTextCursor_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QTextCursorType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(
            new Alias(c, "MoveMode", "int"),
            new SymbolicConstant(c, "MoveAnchor", "int",
                                 Value(int(QTextCursor::MoveAnchor))),
            new SymbolicConstant(c, "KeepAnchor", "int",
                                 Value(int(QTextCursor::KeepAnchor))),
            new Alias(c, "MoveOperation", "int"),
            new SymbolicConstant(c, "NoMove", "int",
                                 Value(int(QTextCursor::NoMove))),
            new SymbolicConstant(c, "Start", "int",
                                 Value(int(QTextCursor::Start))),
            new SymbolicConstant(c, "StartOfLine", "int",
                                 Value(int(QTextCursor::StartOfLine))),
            new SymbolicConstant(c, "StartOfBlock", "int",
                                 Value(int(QTextCursor::StartOfBlock))),
            new SymbolicConstant(c, "StartOfWord", "int",
                                 Value(int(QTextCursor::StartOfWord))),
            new SymbolicConstant(c, "PreviousBlock", "int",
                                 Value(int(QTextCursor::PreviousBlock))),
            new SymbolicConstant(c, "PreviousCharacter", "int",
                                 Value(int(QTextCursor::PreviousCharacter))),
            new SymbolicConstant(c, "PreviousWord", "int",
                                 Value(int(QTextCursor::PreviousWord))),
            new SymbolicConstant(c, "Up", "int", Value(int(QTextCursor::Up))),
            new SymbolicConstant(c, "Left", "int",
                                 Value(int(QTextCursor::Left))),
            new SymbolicConstant(c, "WordLeft", "int",
                                 Value(int(QTextCursor::WordLeft))),
            new SymbolicConstant(c, "End", "int", Value(int(QTextCursor::End))),
            new SymbolicConstant(c, "EndOfLine", "int",
                                 Value(int(QTextCursor::EndOfLine))),
            new SymbolicConstant(c, "EndOfWord", "int",
                                 Value(int(QTextCursor::EndOfWord))),
            new SymbolicConstant(c, "EndOfBlock", "int",
                                 Value(int(QTextCursor::EndOfBlock))),
            new SymbolicConstant(c, "NextBlock", "int",
                                 Value(int(QTextCursor::NextBlock))),
            new SymbolicConstant(c, "NextCharacter", "int",
                                 Value(int(QTextCursor::NextCharacter))),
            new SymbolicConstant(c, "NextWord", "int",
                                 Value(int(QTextCursor::NextWord))),
            new SymbolicConstant(c, "Down", "int",
                                 Value(int(QTextCursor::Down))),
            new SymbolicConstant(c, "Right", "int",
                                 Value(int(QTextCursor::Right))),
            new SymbolicConstant(c, "WordRight", "int",
                                 Value(int(QTextCursor::WordRight))),
            new SymbolicConstant(c, "NextCell", "int",
                                 Value(int(QTextCursor::NextCell))),
            new SymbolicConstant(c, "PreviousCell", "int",
                                 Value(int(QTextCursor::PreviousCell))),
            new SymbolicConstant(c, "NextRow", "int",
                                 Value(int(QTextCursor::NextRow))),
            new SymbolicConstant(c, "PreviousRow", "int",
                                 Value(int(QTextCursor::PreviousRow))),
            new Alias(c, "SelectionType", "int"),
            new SymbolicConstant(c, "Document", "int",
                                 Value(int(QTextCursor::Document))),
            new SymbolicConstant(c, "BlockUnderCursor", "int",
                                 Value(int(QTextCursor::BlockUnderCursor))),
            new SymbolicConstant(c, "LineUnderCursor", "int",
                                 Value(int(QTextCursor::LineUnderCursor))),
            new SymbolicConstant(c, "WordUnderCursor", "int",
                                 Value(int(QTextCursor::WordUnderCursor))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QTextCursor", _n_QTextCursor0, None, Compiled,
                         qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor,
                         Return, "qt.QTextCursor", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(
                c, "QTextCursor", _n_QTextCursor1, None, Compiled,
                qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor_QTextDocument,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "document", "qt.QTextDocument"), End),
            // MISSING: QTextCursor (QTextCursor; QTextCursor this, "QTextFrame
            // *" frame)
            new Function(
                c, "QTextCursor", _n_QTextCursor3, None, Compiled,
                qt_QTextCursor_QTextCursor_QTextCursor_QTextCursor_QTextBlock,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "block", "qt.QTextBlock"), End),
            // MISSING: QTextCursor (QTextCursor; QTextCursor this, QTextCursor
            // cursor)
            new Function(c, "anchor", _n_anchor0, None, Compiled,
                         qt_QTextCursor_anchor_int_QTextCursor, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTextCursor"),
                         End),
            new Function(c, "atBlockEnd", _n_atBlockEnd0, None, Compiled,
                         qt_QTextCursor_atBlockEnd_bool_QTextCursor, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "atBlockStart", _n_atBlockStart0, None, Compiled,
                         qt_QTextCursor_atBlockStart_bool_QTextCursor, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "atEnd", _n_atEnd0, None, Compiled,
                         qt_QTextCursor_atEnd_bool_QTextCursor, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QTextCursor"),
                         End),
            new Function(c, "atStart", _n_atStart0, None, Compiled,
                         qt_QTextCursor_atStart_bool_QTextCursor, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(
                c, "beginEditBlock", _n_beginEditBlock0, None, Compiled,
                qt_QTextCursor_beginEditBlock_void_QTextCursor, Return, "void",
                Parameters, new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "block", _n_block0, None, Compiled,
                         qt_QTextCursor_block_QTextBlock_QTextCursor, Return,
                         "qt.QTextBlock", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: blockCharFormat ("QTextCharFormat"; QTextCursor this)
            // MISSING: blockFormat ("QTextBlockFormat"; QTextCursor this)
            new Function(c, "blockNumber", _n_blockNumber0, None, Compiled,
                         qt_QTextCursor_blockNumber_int_QTextCursor, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: charFormat ("QTextCharFormat"; QTextCursor this)
            new Function(
                c, "clearSelection", _n_clearSelection0, None, Compiled,
                qt_QTextCursor_clearSelection_void_QTextCursor, Return, "void",
                Parameters, new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "columnNumber", _n_columnNumber0, None, Compiled,
                         qt_QTextCursor_columnNumber_int_QTextCursor, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: createList ("QTextList *"; QTextCursor this, "const
            // QTextListFormat &" format) MISSING: createList ("QTextList *";
            // QTextCursor this, flags QTextListFormat::Style style) MISSING:
            // currentFrame ("QTextFrame *"; QTextCursor this) MISSING:
            // currentList ("QTextList *"; QTextCursor this) MISSING:
            // currentTable ("QTextTable *"; QTextCursor this)
            new Function(c, "deleteChar", _n_deleteChar0, None, Compiled,
                         qt_QTextCursor_deleteChar_void_QTextCursor, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "deletePreviousChar", _n_deletePreviousChar0, None,
                         Compiled,
                         qt_QTextCursor_deletePreviousChar_void_QTextCursor,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "document", _n_document0, None, Compiled,
                         qt_QTextCursor_document_QTextDocument_QTextCursor,
                         Return, "qt.QTextDocument", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "endEditBlock", _n_endEditBlock0, None, Compiled,
                         qt_QTextCursor_endEditBlock_void_QTextCursor, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "hasComplexSelection", _n_hasComplexSelection0,
                         None, Compiled,
                         qt_QTextCursor_hasComplexSelection_bool_QTextCursor,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "hasSelection", _n_hasSelection0, None, Compiled,
                         qt_QTextCursor_hasSelection_bool_QTextCursor, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "insertBlock", _n_insertBlock0, None, Compiled,
                         qt_QTextCursor_insertBlock_void_QTextCursor, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: insertBlock (void; QTextCursor this, "const
            // QTextBlockFormat &" format) MISSING: insertBlock (void;
            // QTextCursor this, "const QTextBlockFormat &" format, "const
            // QTextCharFormat &" charFormat) MISSING: insertFragment (void;
            // QTextCursor this, "const QTextDocumentFragment &" fragment)
            // MISSING: insertFrame ("QTextFrame *"; QTextCursor this, "const
            // QTextFrameFormat &" format)
            new Function(c, "insertHtml", _n_insertHtml0, None, Compiled,
                         qt_QTextCursor_insertHtml_void_QTextCursor_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"),
                         new Param(c, "html", "string"), End),
            // MISSING: insertImage (void; QTextCursor this, "const
            // QTextImageFormat &" format) MISSING: insertImage (void;
            // QTextCursor this, "const QTextImageFormat &" format, flags
            // QTextFrameFormat::Position alignment)
            new Function(c, "insertImage", _n_insertImage2, None, Compiled,
                         qt_QTextCursor_insertImage_void_QTextCursor_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"),
                         new Param(c, "name", "string"), End),
            new Function(
                c, "insertImage", _n_insertImage3, None, Compiled,
                qt_QTextCursor_insertImage_void_QTextCursor_QImage_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "image", "qt.QImage"),
                new Param(c, "name", "string"), End),
            // MISSING: insertList ("QTextList *"; QTextCursor this, "const
            // QTextListFormat &" format) MISSING: insertList ("QTextList *";
            // QTextCursor this, flags QTextListFormat::Style style) MISSING:
            // insertTable ("QTextTable *"; QTextCursor this, int rows, int
            // columns, "const QTextTableFormat &" format) MISSING: insertTable
            // ("QTextTable *"; QTextCursor this, int rows, int columns)
            new Function(c, "insertText", _n_insertText0, None, Compiled,
                         qt_QTextCursor_insertText_void_QTextCursor_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"),
                         new Param(c, "text", "string"), End),
            // MISSING: insertText (void; QTextCursor this, string text, "const
            // QTextCharFormat &" format)
            new Function(c, "isCopyOf", _n_isCopyOf0, None, Compiled,
                         qt_QTextCursor_isCopyOf_bool_QTextCursor_QTextCursor,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"),
                         new Param(c, "other", "qt.QTextCursor"), End),
            new Function(c, "isNull", _n_isNull0, None, Compiled,
                         qt_QTextCursor_isNull_bool_QTextCursor, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QTextCursor"),
                         End),
            new Function(c, "joinPreviousEditBlock", _n_joinPreviousEditBlock0,
                         None, Compiled,
                         qt_QTextCursor_joinPreviousEditBlock_void_QTextCursor,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "keepPositionOnInsert", _n_keepPositionOnInsert0,
                         None, Compiled,
                         qt_QTextCursor_keepPositionOnInsert_bool_QTextCursor,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: mergeBlockCharFormat (void; QTextCursor this, "const
            // QTextCharFormat &" modifier) MISSING: mergeBlockFormat (void;
            // QTextCursor this, "const QTextBlockFormat &" modifier) MISSING:
            // mergeCharFormat (void; QTextCursor this, "const QTextCharFormat
            // &" modifier)
            new Function(
                c, "movePosition", _n_movePosition0, None, Compiled,
                qt_QTextCursor_movePosition_bool_QTextCursor_int_int_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "operation", "int"),
                new Param(c, "mode", "int",
                          Value((int)QTextCursor::MoveAnchor)),
                new Param(c, "n", "int", Value((int)1)), End),
            new Function(c, "position", _n_position0, None, Compiled,
                         qt_QTextCursor_position_int_QTextCursor, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTextCursor"),
                         End),
            new Function(
                c, "positionInBlock", _n_positionInBlock0, None, Compiled,
                qt_QTextCursor_positionInBlock_int_QTextCursor, Return, "int",
                Parameters, new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "removeSelectedText", _n_removeSelectedText0, None,
                         Compiled,
                         qt_QTextCursor_removeSelectedText_void_QTextCursor,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "select", _n_select0, None, Compiled,
                         qt_QTextCursor_select_void_QTextCursor_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"),
                         new Param(c, "selection", "int"), End),
            // MISSING: selectedTableCells (void; QTextCursor this, "int *"
            // firstRow, "int *" numRows, "int *" firstColumn, "int *"
            // numColumns)
            new Function(c, "selectedText", _n_selectedText0, None, Compiled,
                         qt_QTextCursor_selectedText_string_QTextCursor, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: selection ("QTextDocumentFragment"; QTextCursor this)
            new Function(c, "selectionEnd", _n_selectionEnd0, None, Compiled,
                         qt_QTextCursor_selectionEnd_int_QTextCursor, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            new Function(
                c, "selectionStart", _n_selectionStart0, None, Compiled,
                qt_QTextCursor_selectionStart_int_QTextCursor, Return, "int",
                Parameters, new Param(c, "this", "qt.QTextCursor"), End),
            // MISSING: setBlockCharFormat (void; QTextCursor this, "const
            // QTextCharFormat &" format) MISSING: setBlockFormat (void;
            // QTextCursor this, "const QTextBlockFormat &" format) MISSING:
            // setCharFormat (void; QTextCursor this, "const QTextCharFormat &"
            // format)
            new Function(
                c, "setKeepPositionOnInsert", _n_setKeepPositionOnInsert0, None,
                Compiled,
                qt_QTextCursor_setKeepPositionOnInsert_void_QTextCursor_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "b", "bool"), End),
            new Function(
                c, "setPosition", _n_setPosition0, None, Compiled,
                qt_QTextCursor_setPosition_void_QTextCursor_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "pos", "int"),
                new Param(c, "m", "int", Value((int)QTextCursor::MoveAnchor)),
                End),
            new Function(
                c, "setVerticalMovementX", _n_setVerticalMovementX0, None,
                Compiled,
                qt_QTextCursor_setVerticalMovementX_void_QTextCursor_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "x", "int"), End),
            new Function(
                c, "setVisualNavigation", _n_setVisualNavigation0, None,
                Compiled,
                qt_QTextCursor_setVisualNavigation_void_QTextCursor_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "b", "bool"), End),
            new Function(c, "swap", _n_swap0, None, Compiled,
                         qt_QTextCursor_swap_void_QTextCursor_QTextCursor,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTextCursor"),
                         new Param(c, "other", "qt.QTextCursor"), End),
            new Function(
                c, "verticalMovementX", _n_verticalMovementX0, None, Compiled,
                qt_QTextCursor_verticalMovementX_int_QTextCursor, Return, "int",
                Parameters, new Param(c, "this", "qt.QTextCursor"), End),
            new Function(c, "visualNavigation", _n_visualNavigation0, None,
                         Compiled,
                         qt_QTextCursor_visualNavigation_bool_QTextCursor,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTextCursor"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(
            new Function(
                c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                qt_QTextCursor_operatorBang_EQ__bool_QTextCursor_QTextCursor,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "other", "qt.QTextCursor"), End),
            new Function(
                c, "<", _n_operatorLT_0, Op, Compiled,
                qt_QTextCursor_operatorLT__bool_QTextCursor_QTextCursor, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "other", "qt.QTextCursor"), End),
            new Function(
                c, "<=", _n_operatorLT_EQ_0, Op, Compiled,
                qt_QTextCursor_operatorLT_EQ__bool_QTextCursor_QTextCursor,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "other", "qt.QTextCursor"), End),
            // MISSING: = (QTextCursor; QTextCursor this, QTextCursor other)
            // MISSING: = (QTextCursor; QTextCursor this, QTextCursor cursor)
            new Function(
                c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                qt_QTextCursor_operatorEQ_EQ__bool_QTextCursor_QTextCursor,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "other", "qt.QTextCursor"), End),
            new Function(
                c, ">", _n_operatorGT_0, Op, Compiled,
                qt_QTextCursor_operatorGT__bool_QTextCursor_QTextCursor, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "other", "qt.QTextCursor"), End),
            new Function(
                c, ">=", _n_operatorGT_EQ_0, Op, Compiled,
                qt_QTextCursor_operatorGT_EQ__bool_QTextCursor_QTextCursor,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTextCursor"),
                new Param(c, "other", "qt.QTextCursor"), End),
            EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
