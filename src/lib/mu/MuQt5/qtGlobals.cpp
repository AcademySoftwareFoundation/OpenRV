//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/qtModule.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QMarginsType.h>
#include <MuQt5/QMatrixType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QTransformType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QRectFType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    bool qt__operatorBang_EQ__bool_QSize_QSize(Mu::Thread& NODE_THREAD,
                                               Pointer param_s1,
                                               Pointer param_s2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg0 = getqtype<QSizeType>(param_s1);
        const QSize arg1 = getqtype<QSizeType>(param_s2);
        return ::operator!=(arg0, arg1);
    }

    Pointer qt__operatorStar__QSize_QSize_double(Mu::Thread& NODE_THREAD,
                                                 Pointer param_size,
                                                 double param_factor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg0 = getqtype<QSizeType>(param_size);
        qreal arg1 = (double)(param_factor);
        return makeqtype<QSizeType>(c, ::operator*(arg0, arg1), "qt.QSize");
    }

    Pointer qt__operatorStar__QSize_double_QSize(Mu::Thread& NODE_THREAD,
                                                 double param_factor,
                                                 Pointer param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg0 = (double)(param_factor);
        const QSize arg1 = getqtype<QSizeType>(param_size);
        return makeqtype<QSizeType>(c, ::operator*(arg0, arg1), "qt.QSize");
    }

    Pointer qt__operatorPlus__QSize_QSize_QSize(Mu::Thread& NODE_THREAD,
                                                Pointer param_s1,
                                                Pointer param_s2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg0 = getqtype<QSizeType>(param_s1);
        const QSize arg1 = getqtype<QSizeType>(param_s2);
        return makeqtype<QSizeType>(c, ::operator+(arg0, arg1), "qt.QSize");
    }

    Pointer qt__operatorMinus__QSize_QSize_QSize(Mu::Thread& NODE_THREAD,
                                                 Pointer param_s1,
                                                 Pointer param_s2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg0 = getqtype<QSizeType>(param_s1);
        const QSize arg1 = getqtype<QSizeType>(param_s2);
        return makeqtype<QSizeType>(c, ::operator-(arg0, arg1), "qt.QSize");
    }

    Pointer qt__operatorSlash__QSize_QSize_double(Mu::Thread& NODE_THREAD,
                                                  Pointer param_size,
                                                  double param_divisor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg0 = getqtype<QSizeType>(param_size);
        qreal arg1 = (double)(param_divisor);
        return makeqtype<QSizeType>(c, ::operator/(arg0, arg1), "qt.QSize");
    }

    bool qt__operatorEQ_EQ__bool_QSize_QSize(Mu::Thread& NODE_THREAD,
                                             Pointer param_s1, Pointer param_s2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg0 = getqtype<QSizeType>(param_s1);
        const QSize arg1 = getqtype<QSizeType>(param_s2);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorBang_EQ__bool_QPoint_QPoint(Mu::Thread& NODE_THREAD,
                                                 Pointer param_p1,
                                                 Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_p1);
        const QPoint arg1 = getqtype<QPointType>(param_p2);
        return ::operator!=(arg0, arg1);
    }

    Pointer qt__operatorStar__QPoint_QPoint_double(Mu::Thread& NODE_THREAD,
                                                   Pointer param_point,
                                                   double param_factor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_point);
        qreal arg1 = (double)(param_factor);
        return makeqtype<QPointType>(c, ::operator*(arg0, arg1), "qt.QPoint");
    }

    Pointer qt__operatorStar__QPoint_double_QPoint(Mu::Thread& NODE_THREAD,
                                                   double param_factor,
                                                   Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg0 = (double)(param_factor);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return makeqtype<QPointType>(c, ::operator*(arg0, arg1), "qt.QPoint");
    }

    Pointer qt__operatorPlus__QPoint_QPoint_QPoint(Mu::Thread& NODE_THREAD,
                                                   Pointer param_p1,
                                                   Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_p1);
        const QPoint arg1 = getqtype<QPointType>(param_p2);
        return makeqtype<QPointType>(c, ::operator+(arg0, arg1), "qt.QPoint");
    }

    Pointer qt__operatorMinus__QPoint_QPoint_QPoint(Mu::Thread& NODE_THREAD,
                                                    Pointer param_p1,
                                                    Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_p1);
        const QPoint arg1 = getqtype<QPointType>(param_p2);
        return makeqtype<QPointType>(c, ::operator-(arg0, arg1), "qt.QPoint");
    }

    Pointer qt__operatorMinus__QPoint_QPoint(Mu::Thread& NODE_THREAD,
                                             Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_point);
        return makeqtype<QPointType>(c, ::operator-(arg0), "qt.QPoint");
    }

    Pointer qt__operatorSlash__QPoint_QPoint_double(Mu::Thread& NODE_THREAD,
                                                    Pointer param_point,
                                                    double param_divisor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_point);
        qreal arg1 = (double)(param_divisor);
        return makeqtype<QPointType>(c, ::operator/(arg0, arg1), "qt.QPoint");
    }

    bool qt__operatorEQ_EQ__bool_QPoint_QPoint(Mu::Thread& NODE_THREAD,
                                               Pointer param_p1,
                                               Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_p1);
        const QPoint arg1 = getqtype<QPointType>(param_p2);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorBang_EQ__bool_QRect_QRect(Mu::Thread& NODE_THREAD,
                                               Pointer param_r1,
                                               Pointer param_r2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRect arg0 = getqtype<QRectType>(param_r1);
        const QRect arg1 = getqtype<QRectType>(param_r2);
        return ::operator!=(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_QRect_QRect(Mu::Thread& NODE_THREAD,
                                             Pointer param_r1, Pointer param_r2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRect arg0 = getqtype<QRectType>(param_r1);
        const QRect arg1 = getqtype<QRectType>(param_r2);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorBang_EQ__bool_QVariant_QVariant(Mu::Thread& NODE_THREAD,
                                                     Pointer param_v1,
                                                     Pointer param_v2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QVariant arg0 = getqtype<QVariantType>(param_v1);
        const QVariant arg1 = getqtype<QVariantType>(param_v2);
        return ::operator!=(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_QVariant_QVariant(Mu::Thread& NODE_THREAD,
                                                   Pointer param_v1,
                                                   Pointer param_v2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QVariant arg0 = getqtype<QVariantType>(param_v1);
        const QVariant arg1 = getqtype<QVariantType>(param_v2);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_QKeyEvent_int(Mu::Thread& NODE_THREAD,
                                               Pointer param_e, int param_key)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QKeyEvent* arg0 = getqpointer<QKeyEventType>(param_e);
        QKeySequence::StandardKey arg1 = (QKeySequence::StandardKey)(param_key);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_int_QKeyEvent(Mu::Thread& NODE_THREAD,
                                               int param_key, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QKeySequence::StandardKey arg0 = (QKeySequence::StandardKey)(param_key);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        return ::operator==(arg0, arg1);
    }

    int qt__qAlpha_int_int(Mu::Thread& NODE_THREAD, int param_rgba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRgb arg0 = (int)(param_rgba);
        return ::qAlpha(arg0);
    }

    int qt__qBlue_int_int(Mu::Thread& NODE_THREAD, int param_rgb)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRgb arg0 = (int)(param_rgb);
        return ::qBlue(arg0);
    }

    int qt__qGray_int_int_int_int(Mu::Thread& NODE_THREAD, int param_r,
                                  int param_g, int param_b)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg0 = (int)(param_r);
        int arg1 = (int)(param_g);
        int arg2 = (int)(param_b);
        return ::qGray(arg0, arg1, arg2);
    }

    int qt__qGray_int_int(Mu::Thread& NODE_THREAD, int param_rgb)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRgb arg0 = (int)(param_rgb);
        return ::qGray(arg0);
    }

    int qt__qGreen_int_int(Mu::Thread& NODE_THREAD, int param_rgb)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRgb arg0 = (int)(param_rgb);
        return ::qGreen(arg0);
    }

    int qt__qRed_int_int(Mu::Thread& NODE_THREAD, int param_rgb)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRgb arg0 = (int)(param_rgb);
        return ::qRed(arg0);
    }

    int qt__qRgb_int_int_int_int(Mu::Thread& NODE_THREAD, int param_r,
                                 int param_g, int param_b)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg0 = (int)(param_r);
        int arg1 = (int)(param_g);
        int arg2 = (int)(param_b);
        return ::qRgb(arg0, arg1, arg2);
    }

    int qt__qRgba_int_int_int_int_int(Mu::Thread& NODE_THREAD, int param_r,
                                      int param_g, int param_b, int param_a)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg0 = (int)(param_r);
        int arg1 = (int)(param_g);
        int arg2 = (int)(param_b);
        int arg3 = (int)(param_a);
        return ::qRgba(arg0, arg1, arg2, arg3);
    }

    Pointer qt__qCompress_QByteArray_QByteArray_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_data,
                                                    int param_compressionLevel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_data);
        int arg1 = (int)(param_compressionLevel);
        return makeqtype<QByteArrayType>(c, ::qCompress(arg0, arg1),
                                         "qt.QByteArray");
    }

    Pointer qt__qUncompress_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                  Pointer param_data)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_data);
        return makeqtype<QByteArrayType>(c, ::qUncompress(arg0),
                                         "qt.QByteArray");
    }

    bool qt__operatorBang_EQ__bool_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_a1, Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return ::operator!=(arg0, arg1);
    }

    Pointer qt__operatorPlus__QByteArray_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_a1, Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return makeqtype<QByteArrayType>(c, ::operator+(arg0, arg1),
                                         "qt.QByteArray");
    }

    bool qt__operatorLT__bool_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                    Pointer param_a1,
                                                    Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return ::operator<(arg0, arg1);
    }

    bool qt__operatorLT_EQ__bool_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                       Pointer param_a1,
                                                       Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return ::operator<=(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                       Pointer param_a1,
                                                       Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorGT__bool_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                    Pointer param_a1,
                                                    Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return ::operator>(arg0, arg1);
    }

    bool qt__operatorGT_EQ__bool_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                       Pointer param_a1,
                                                       Pointer param_a2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_a1);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_a2);
        return ::operator>=(arg0, arg1);
    }

    bool qt__operatorBang_EQ__bool_QMargins_QMargins(Mu::Thread& NODE_THREAD,
                                                     Pointer param_m1,
                                                     Pointer param_m2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QMargins arg0 = getqtype<QMarginsType>(param_m1);
        const QMargins arg1 = getqtype<QMarginsType>(param_m2);
        return ::operator!=(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_QMargins_QMargins(Mu::Thread& NODE_THREAD,
                                                   Pointer param_m1,
                                                   Pointer param_m2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QMargins arg0 = getqtype<QMarginsType>(param_m1);
        const QMargins arg1 = getqtype<QMarginsType>(param_m2);
        return ::operator==(arg0, arg1);
    }

    bool qt__qFuzzyCompare_bool_QMatrix_QMatrix(Mu::Thread& NODE_THREAD,
                                                Pointer param_m1,
                                                Pointer param_m2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QMatrix arg0 = getqtype<QMatrixType>(param_m1);
        const QMatrix arg1 = getqtype<QMatrixType>(param_m2);
        return ::qFuzzyCompare(arg0, arg1);
    }

    Pointer qt__operatorStar__QPoint_QPoint_QMatrix(Mu::Thread& NODE_THREAD,
                                                    Pointer param_point,
                                                    Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_point);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        return makeqtype<QPointType>(c, ::operator*(arg0, arg1), "qt.QPoint");
    }

    Pointer qt__operatorStar__QPointF_QPointF_QMatrix(Mu::Thread& NODE_THREAD,
                                                      Pointer param_point,
                                                      Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_point);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        return makeqtype<QPointFType>(c, ::operator*(arg0, arg1), "qt.QPointF");
    }

    Pointer qt__operatorStar__QRegion_QRegion_QMatrix(Mu::Thread& NODE_THREAD,
                                                      Pointer param_region,
                                                      Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegion arg0 = getqtype<QRegionType>(param_region);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        return makeqtype<QRegionType>(c, ::operator*(arg0, arg1), "qt.QRegion");
    }

    bool qt__qFuzzyCompare_bool_QTransform_QTransform(Mu::Thread& NODE_THREAD,
                                                      Pointer param_t1,
                                                      Pointer param_t2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTransform arg0 = getqtype<QTransformType>(param_t1);
        const QTransform arg1 = getqtype<QTransformType>(param_t2);
        return ::qFuzzyCompare(arg0, arg1);
    }

    Pointer qt__operatorStar__QPoint_QPoint_QTransform(Mu::Thread& NODE_THREAD,
                                                       Pointer param_point,
                                                       Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg0 = getqtype<QPointType>(param_point);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        return makeqtype<QPointType>(c, ::operator*(arg0, arg1), "qt.QPoint");
    }

    Pointer qt__operatorStar__QPointF_QPointF_QTransform(
        Mu::Thread& NODE_THREAD, Pointer param_point, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_point);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        return makeqtype<QPointFType>(c, ::operator*(arg0, arg1), "qt.QPointF");
    }

    Pointer qt__operatorStar__QRegion_QRegion_QTransform(
        Mu::Thread& NODE_THREAD, Pointer param_region, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegion arg0 = getqtype<QRegionType>(param_region);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        return makeqtype<QRegionType>(c, ::operator*(arg0, arg1), "qt.QRegion");
    }

    bool qt__operatorBang_EQ__bool_QPointF_QPointF(Mu::Thread& NODE_THREAD,
                                                   Pointer param_p1,
                                                   Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_p1);
        const QPointF arg1 = getqtype<QPointFType>(param_p2);
        return ::operator!=(arg0, arg1);
    }

    Pointer qt__operatorStar__QPointF_QPointF_double(Mu::Thread& NODE_THREAD,
                                                     Pointer param_point,
                                                     double param_factor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_point);
        qreal arg1 = (double)(param_factor);
        return makeqtype<QPointFType>(c, ::operator*(arg0, arg1), "qt.QPointF");
    }

    Pointer qt__operatorStar__QPointF_double_QPointF(Mu::Thread& NODE_THREAD,
                                                     double param_factor,
                                                     Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg0 = (double)(param_factor);
        const QPointF arg1 = getqtype<QPointFType>(param_point);
        return makeqtype<QPointFType>(c, ::operator*(arg0, arg1), "qt.QPointF");
    }

    Pointer qt__operatorPlus__QPointF_QPointF_QPointF(Mu::Thread& NODE_THREAD,
                                                      Pointer param_p1,
                                                      Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_p1);
        const QPointF arg1 = getqtype<QPointFType>(param_p2);
        return makeqtype<QPointFType>(c, ::operator+(arg0, arg1), "qt.QPointF");
    }

    Pointer qt__operatorMinus__QPointF_QPointF_QPointF(Mu::Thread& NODE_THREAD,
                                                       Pointer param_p1,
                                                       Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_p1);
        const QPointF arg1 = getqtype<QPointFType>(param_p2);
        return makeqtype<QPointFType>(c, ::operator-(arg0, arg1), "qt.QPointF");
    }

    Pointer qt__operatorMinus__QPointF_QPointF(Mu::Thread& NODE_THREAD,
                                               Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_point);
        return makeqtype<QPointFType>(c, ::operator-(arg0), "qt.QPointF");
    }

    Pointer qt__operatorSlash__QPointF_QPointF_double(Mu::Thread& NODE_THREAD,
                                                      Pointer param_point,
                                                      double param_divisor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_point);
        qreal arg1 = (double)(param_divisor);
        return makeqtype<QPointFType>(c, ::operator/(arg0, arg1), "qt.QPointF");
    }

    bool qt__operatorEQ_EQ__bool_QPointF_QPointF(Mu::Thread& NODE_THREAD,
                                                 Pointer param_p1,
                                                 Pointer param_p2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg0 = getqtype<QPointFType>(param_p1);
        const QPointF arg1 = getqtype<QPointFType>(param_p2);
        return ::operator==(arg0, arg1);
    }

    bool qt__operatorBang_EQ__bool_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                                 Pointer param_r1,
                                                 Pointer param_r2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRectF arg0 = getqtype<QRectFType>(param_r1);
        const QRectF arg1 = getqtype<QRectFType>(param_r2);
        return ::operator!=(arg0, arg1);
    }

    bool qt__operatorEQ_EQ__bool_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                               Pointer param_r1,
                                               Pointer param_r2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRectF arg0 = getqtype<QRectFType>(param_r1);
        const QRectF arg1 = getqtype<QRectFType>(param_r2);
        return ::operator==(arg0, arg1);
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QSize_QSize(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_0, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QSize_QSize_double(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_1, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QSize_double_QSize(
            NODE_THREAD, NODE_ARG(0, double), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_0, Pointer)
    {
        NODE_RETURN(qt__operatorPlus__QSize_QSize_QSize(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_0, Pointer)
    {
        NODE_RETURN(qt__operatorMinus__QSize_QSize_QSize(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorSlash_0, Pointer)
    {
        NODE_RETURN(qt__operatorSlash__QSize_QSize_double(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QSize_QSize(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_1, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QPoint_QPoint(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_2, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPoint_QPoint_double(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_3, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPoint_double_QPoint(
            NODE_THREAD, NODE_ARG(0, double), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_1, Pointer)
    {
        NODE_RETURN(qt__operatorPlus__QPoint_QPoint_QPoint(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_1, Pointer)
    {
        NODE_RETURN(qt__operatorMinus__QPoint_QPoint_QPoint(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_2, Pointer)
    {
        NODE_RETURN(qt__operatorMinus__QPoint_QPoint(NODE_THREAD,
                                                     NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorSlash_1, Pointer)
    {
        NODE_RETURN(qt__operatorSlash__QPoint_QPoint_double(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_1, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QPoint_QPoint(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_2, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QRect_QRect(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_2, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QRect_QRect(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_3, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QVariant_QVariant(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_3, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QVariant_QVariant(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_4, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QKeyEvent_int(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_5, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_int_QKeyEvent(
            NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_qAlpha0, int)
    {
        NODE_RETURN(qt__qAlpha_int_int(NODE_THREAD, NODE_ARG(0, int)));
    }

    static NODE_IMPLEMENTATION(_n_qBlue0, int)
    {
        NODE_RETURN(qt__qBlue_int_int(NODE_THREAD, NODE_ARG(0, int)));
    }

    static NODE_IMPLEMENTATION(_n_qGray0, int)
    {
        NODE_RETURN(qt__qGray_int_int_int_int(
            NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, int), NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_qGray1, int)
    {
        NODE_RETURN(qt__qGray_int_int(NODE_THREAD, NODE_ARG(0, int)));
    }

    static NODE_IMPLEMENTATION(_n_qGreen0, int)
    {
        NODE_RETURN(qt__qGreen_int_int(NODE_THREAD, NODE_ARG(0, int)));
    }

    static NODE_IMPLEMENTATION(_n_qRed0, int)
    {
        NODE_RETURN(qt__qRed_int_int(NODE_THREAD, NODE_ARG(0, int)));
    }

    static NODE_IMPLEMENTATION(_n_qRgb0, int)
    {
        NODE_RETURN(qt__qRgb_int_int_int_int(
            NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, int), NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_qRgba0, int)
    {
        NODE_RETURN(qt__qRgba_int_int_int_int_int(
            NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, int), NODE_ARG(2, int),
            NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_qCompress0, Pointer)
    {
        NODE_RETURN(qt__qCompress_QByteArray_QByteArray_int(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_qUncompress0, Pointer)
    {
        NODE_RETURN(qt__qUncompress_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_4, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_6, Pointer)
    {
        NODE_RETURN(qt__operatorPlus__QByteArray_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorLT_0, bool)
    {
        NODE_RETURN(qt__operatorLT__bool_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorLT_EQ_0, bool)
    {
        NODE_RETURN(qt__operatorLT_EQ__bool_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_6, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorGT_0, bool)
    {
        NODE_RETURN(qt__operatorGT__bool_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorGT_EQ_0, bool)
    {
        NODE_RETURN(qt__operatorGT_EQ__bool_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_7, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QMargins_QMargins(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_9, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QMargins_QMargins(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_qFuzzyCompare0, bool)
    {
        NODE_RETURN(qt__qFuzzyCompare_bool_QMatrix_QMatrix(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_4, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPoint_QPoint_QMatrix(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_5, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPointF_QPointF_QMatrix(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_10, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QRegion_QRegion_QMatrix(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_qFuzzyCompare1, bool)
    {
        NODE_RETURN(qt__qFuzzyCompare_bool_QTransform_QTransform(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_12, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPoint_QPoint_QTransform(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_13, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPointF_QPointF_QTransform(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_18, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QRegion_QRegion_QTransform(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_8, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QPointF_QPointF(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_20, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPointF_QPointF_double(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_21, Pointer)
    {
        NODE_RETURN(qt__operatorStar__QPointF_double_QPointF(
            NODE_THREAD, NODE_ARG(0, double), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_7, Pointer)
    {
        NODE_RETURN(qt__operatorPlus__QPointF_QPointF_QPointF(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_3, Pointer)
    {
        NODE_RETURN(qt__operatorMinus__QPointF_QPointF_QPointF(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_4, Pointer)
    {
        NODE_RETURN(qt__operatorMinus__QPointF_QPointF(NODE_THREAD,
                                                       NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorSlash_2, Pointer)
    {
        NODE_RETURN(qt__operatorSlash__QPointF_QPointF_double(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_10, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QPointF_QPointF(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_9, bool)
    {
        NODE_RETURN(qt__operatorBang_EQ__bool_QRectF_QRectF(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_11, bool)
    {
        NODE_RETURN(qt__operatorEQ_EQ__bool_QRectF_QRectF(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void qtModule::loadGlobals()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            // static functions
            // MISSING: qFindChild ("T"; QObject obj, string name)
            // MISSING: qFindChildren ("QList<T>"; QObject obj, string name)
            // MISSING: qFindChildren ("QList<T>"; QObject obj, QRegExp regExp)
            // MISSING: qobject_cast ("T"; QObject object)
            // MISSING: qRegisterAnimationInterpolator (void; "QVariant(* ) (
            // const T & from, const T & to, qreal progress )" func) MISSING:
            // qAddPostRoutine (void; "QtCleanUpFunction" ptr) MISSING:
            // qt_extension ("T"; "QAbstractExtensionManager *" manager, QObject
            // object) MISSING: qRegisterStaticPluginInstanceFunction (void;
            // "QtPluginInstanceFunction" function) MISSING: qScriptConnect
            // (bool; QObject sender, "const char *" signal, "const QScriptValue
            // &" receiver, "const QScriptValue &" function) MISSING:
            // qScriptDisconnect (bool; QObject sender, "const char *" signal,
            // "const QScriptValue &" receiver, "const QScriptValue &" function)
            // MISSING: qScriptRegisterMetaType (int; "QScriptEngine *" engine,
            // "QScriptValue(* ) ( QScriptEngine *, const T & t )"
            // toScriptValue, "void(* ) ( const QScriptValue &, T & t )"
            // fromScriptValue, "const QScriptValue &" prototype) MISSING:
            // qScriptRegisterSequenceMetaType (int; "QScriptEngine *" engine,
            // "const QScriptValue &" prototype) MISSING:
            // qScriptValueFromQMetaObject ("QScriptValue"; "QScriptEngine *"
            // engine) MISSING: qScriptValueFromSequence ("QScriptValue";
            // "QScriptEngine *" engine, "const Container &" container) MISSING:
            // qScriptValueFromValue ("QScriptValue"; "QScriptEngine *" engine,
            // "const T &" value) MISSING: qScriptValueToSequence (void; "const
            // QScriptValue &" value, "Container &" container) MISSING:
            // qScriptValueToValue ("T"; "const QScriptValue &" value) MISSING:
            // qVariantFromValue (QVariant; "const T &" value) MISSING:
            // qVariantSetValue (void; QVariant variant, "const T &" value)
            // MISSING: qVariantValue ("T"; QVariant value)
            // MISSING: qvariant_cast ("T"; QVariant value)
            new Function(c, "qAlpha", _n_qAlpha0, None, Compiled,
                         qt__qAlpha_int_int, Return, "int", Parameters,
                         new Param(c, "rgba", "int"), End),
            new Function(c, "qBlue", _n_qBlue0, None, Compiled,
                         qt__qBlue_int_int, Return, "int", Parameters,
                         new Param(c, "rgb", "int"), End),
            new Function(c, "qGray", _n_qGray0, None, Compiled,
                         qt__qGray_int_int_int_int, Return, "int", Parameters,
                         new Param(c, "r", "int"), new Param(c, "g", "int"),
                         new Param(c, "b", "int"), End),
            new Function(c, "qGray", _n_qGray1, None, Compiled,
                         qt__qGray_int_int, Return, "int", Parameters,
                         new Param(c, "rgb", "int"), End),
            new Function(c, "qGreen", _n_qGreen0, None, Compiled,
                         qt__qGreen_int_int, Return, "int", Parameters,
                         new Param(c, "rgb", "int"), End),
            new Function(c, "qRed", _n_qRed0, None, Compiled, qt__qRed_int_int,
                         Return, "int", Parameters, new Param(c, "rgb", "int"),
                         End),
            new Function(c, "qRgb", _n_qRgb0, None, Compiled,
                         qt__qRgb_int_int_int_int, Return, "int", Parameters,
                         new Param(c, "r", "int"), new Param(c, "g", "int"),
                         new Param(c, "b", "int"), End),
            new Function(c, "qRgba", _n_qRgba0, None, Compiled,
                         qt__qRgba_int_int_int_int_int, Return, "int",
                         Parameters, new Param(c, "r", "int"),
                         new Param(c, "g", "int"), new Param(c, "b", "int"),
                         new Param(c, "a", "int"), End),
            // MISSING: qChecksum ("quint16"; "const char *" data, int len)
            new Function(c, "qCompress", _n_qCompress0, None, Compiled,
                         qt__qCompress_QByteArray_QByteArray_int, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "data", "qt.QByteArray"),
                         new Param(c, "compressionLevel", "int"), End),
            // MISSING: qCompress (QByteArray; "const uchar *" data, int nbytes,
            // int compressionLevel)
            new Function(c, "qUncompress", _n_qUncompress0, None, Compiled,
                         qt__qUncompress_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "data", "qt.QByteArray"), End),
            // MISSING: qUncompress (QByteArray; "const uchar *" data, int
            // nbytes) MISSING: qsnprintf (int; "char *" str, "size_t" n, "const
            // char *" fmt, "..." _p45) MISSING: qstrcmp (int; "const char *"
            // str1, "const char *" str2) MISSING: qstrcpy ("char *"; "char *"
            // dst, "const char *" src) MISSING: qstrdup ("char *"; "const char
            // *" src) MISSING: qstricmp (int; "const char *" str1, "const char
            // *" str2) MISSING: qstrlen (int; "const char *" str) MISSING:
            // qstrncmp (int; "const char *" str1, "const char *" str2, int len)
            // MISSING: qstrncpy ("char *"; "char *" dst, "const char *" src,
            // int len) MISSING: qstrnicmp (int; "const char *" str1, "const
            // char *" str2, int len) MISSING: qstrnlen (int; "const char *"
            // str, int maxlen) MISSING: qvsnprintf (int; "char *" str, "size_t"
            // n, "const char *" fmt, "va_list" ap)
            new Function(c, "qFuzzyCompare", _n_qFuzzyCompare0, None, Compiled,
                         qt__qFuzzyCompare_bool_QMatrix_QMatrix, Return, "bool",
                         Parameters, new Param(c, "m1", "qt.QMatrix"),
                         new Param(c, "m2", "qt.QMatrix"), End),
            new Function(c, "qFuzzyCompare", _n_qFuzzyCompare1, None, Compiled,
                         qt__qFuzzyCompare_bool_QTransform_QTransform, Return,
                         "bool", Parameters,
                         new Param(c, "t1", "qt.QTransform"),
                         new Param(c, "t2", "qt.QTransform"), End),
            EndArguments);
        globalScope()->addSymbols(
            // MISSING: << ("QDataStream &"; "QDataStream &" s, QFont font)
            // MISSING: >> ("QDataStream &"; "QDataStream &" s, QFont font)
            new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                         qt__operatorBang_EQ__bool_QSize_QSize, Return, "bool",
                         Parameters, new Param(c, "s1", "qt.QSize"),
                         new Param(c, "s2", "qt.QSize"), End),
            new Function(c, "*", _n_operatorStar_0, Op, Compiled,
                         qt__operatorStar__QSize_QSize_double, Return,
                         "qt.QSize", Parameters,
                         new Param(c, "size", "qt.QSize"),
                         new Param(c, "factor", "double"), End),
            new Function(c, "*", _n_operatorStar_1, Op, Compiled,
                         qt__operatorStar__QSize_double_QSize, Return,
                         "qt.QSize", Parameters,
                         new Param(c, "factor", "double"),
                         new Param(c, "size", "qt.QSize"), End),
            new Function(c, "+", _n_operatorPlus_0, Op, Compiled,
                         qt__operatorPlus__QSize_QSize_QSize, Return,
                         "qt.QSize", Parameters, new Param(c, "s1", "qt.QSize"),
                         new Param(c, "s2", "qt.QSize"), End),
            new Function(c, "-", _n_operatorMinus_0, Op, Compiled,
                         qt__operatorMinus__QSize_QSize_QSize, Return,
                         "qt.QSize", Parameters, new Param(c, "s1", "qt.QSize"),
                         new Param(c, "s2", "qt.QSize"), End),
            new Function(c, "/", _n_operatorSlash_0, Op, Compiled,
                         qt__operatorSlash__QSize_QSize_double, Return,
                         "qt.QSize", Parameters,
                         new Param(c, "size", "qt.QSize"),
                         new Param(c, "divisor", "double"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QSize size)
            new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QSize_QSize, Return, "bool",
                         Parameters, new Param(c, "s1", "qt.QSize"),
                         new Param(c, "s2", "qt.QSize"), End),
            // MISSING: >> ("QDataStream &"; "QDataStream &" stream, QSize size)
            new Function(c, "!=", _n_operatorBang_EQ_1, Op, Compiled,
                         qt__operatorBang_EQ__bool_QPoint_QPoint, Return,
                         "bool", Parameters, new Param(c, "p1", "qt.QPoint"),
                         new Param(c, "p2", "qt.QPoint"), End),
            new Function(c, "*", _n_operatorStar_2, Op, Compiled,
                         qt__operatorStar__QPoint_QPoint_double, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "point", "qt.QPoint"),
                         new Param(c, "factor", "double"), End),
            new Function(c, "*", _n_operatorStar_3, Op, Compiled,
                         qt__operatorStar__QPoint_double_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "factor", "double"),
                         new Param(c, "point", "qt.QPoint"), End),
            new Function(c, "+", _n_operatorPlus_1, Op, Compiled,
                         qt__operatorPlus__QPoint_QPoint_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "p1", "qt.QPoint"),
                         new Param(c, "p2", "qt.QPoint"), End),
            new Function(c, "-", _n_operatorMinus_1, Op, Compiled,
                         qt__operatorMinus__QPoint_QPoint_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "p1", "qt.QPoint"),
                         new Param(c, "p2", "qt.QPoint"), End),
            new Function(c, "-", _n_operatorMinus_2, Op, Compiled,
                         qt__operatorMinus__QPoint_QPoint, Return, "qt.QPoint",
                         Parameters, new Param(c, "point", "qt.QPoint"), End),
            new Function(c, "/", _n_operatorSlash_1, Op, Compiled,
                         qt__operatorSlash__QPoint_QPoint_double, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "point", "qt.QPoint"),
                         new Param(c, "divisor", "double"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QPoint
            // point)
            new Function(c, "==", _n_operatorEQ_EQ_1, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QPoint_QPoint, Return, "bool",
                         Parameters, new Param(c, "p1", "qt.QPoint"),
                         new Param(c, "p2", "qt.QPoint"), End),
            // MISSING: >> ("QDataStream &"; "QDataStream &" stream, QPoint
            // point)
            new Function(c, "!=", _n_operatorBang_EQ_2, Op, Compiled,
                         qt__operatorBang_EQ__bool_QRect_QRect, Return, "bool",
                         Parameters, new Param(c, "r1", "qt.QRect"),
                         new Param(c, "r2", "qt.QRect"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QRect
            // rectangle)
            new Function(c, "==", _n_operatorEQ_EQ_2, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QRect_QRect, Return, "bool",
                         Parameters, new Param(c, "r1", "qt.QRect"),
                         new Param(c, "r2", "qt.QRect"), End),
            // MISSING: >> ("QDataStream &"; "QDataStream &" stream, QRect
            // rectangle) MISSING: << ("QDataStream &"; "QDataStream &" stream,
            // QIcon icon) MISSING: >> ("QDataStream &"; "QDataStream &" stream,
            // QIcon icon)
            new Function(c, "!=", _n_operatorBang_EQ_3, Op, Compiled,
                         qt__operatorBang_EQ__bool_QVariant_QVariant, Return,
                         "bool", Parameters, new Param(c, "v1", "qt.QVariant"),
                         new Param(c, "v2", "qt.QVariant"), End),
            new Function(c, "==", _n_operatorEQ_EQ_3, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QVariant_QVariant, Return,
                         "bool", Parameters, new Param(c, "v1", "qt.QVariant"),
                         new Param(c, "v2", "qt.QVariant"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" out, QStandardItem
            // item) MISSING: >> ("QDataStream &"; "QDataStream &" in,
            // QStandardItem item) MISSING: << ("QDataStream &"; "QDataStream &"
            // stream, QPixmap pixmap) MISSING: >> ("QDataStream &";
            // "QDataStream &" stream, QPixmap pixmap) MISSING: << ("QDataStream
            // &"; "QDataStream &" out, QDateTime dateTime) MISSING: >>
            // ("QDataStream &"; "QDataStream &" in, QDateTime dateTime)
            // MISSING: << ("QDataStream &"; "QDataStream &" out, QTime time)
            // MISSING: >> ("QDataStream &"; "QDataStream &" in, QTime time)
            // MISSING: << ("QDataStream &"; "QDataStream &" out, QDate date)
            // MISSING: >> ("QDataStream &"; "QDataStream &" in, QDate date)
            // MISSING: << ("QDataStream &"; "QDataStream &" stream,
            // QKeySequence sequence) MISSING: >> ("QDataStream &"; "QDataStream
            // &" stream, QKeySequence sequence)
            new Function(c, "==", _n_operatorEQ_EQ_4, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QKeyEvent_int, Return, "bool",
                         Parameters, new Param(c, "e", "qt.QKeyEvent"),
                         new Param(c, "key", "int"), End),
            new Function(c, "==", _n_operatorEQ_EQ_5, Op, Compiled,
                         qt__operatorEQ_EQ__bool_int_QKeyEvent, Return, "bool",
                         Parameters, new Param(c, "key", "int"),
                         new Param(c, "e", "qt.QKeyEvent"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" out, QRegExp
            // regExp) MISSING: >> ("QDataStream &"; "QDataStream &" in, QRegExp
            // regExp) MISSING: << ("QDataStream &"; "QDataStream &" s, QRegion
            // r) MISSING: >> ("QDataStream &"; "QDataStream &" s, QRegion r)
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QColor
            // color) MISSING: >> ("QDataStream &"; "QDataStream &" stream,
            // QColor color) MISSING: << ("QDataStream &"; "QDataStream &" out,
            // QListWidgetItem item) MISSING: >> ("QDataStream &"; "QDataStream
            // &" in, QListWidgetItem item) MISSING: << ("QDataStream &";
            // "QDataStream &" out, QTreeWidgetItem item) MISSING: >>
            // ("QDataStream &"; "QDataStream &" in, QTreeWidgetItem item)
            // MISSING: << ("QDataStream &"; "QDataStream &" out,
            // QTableWidgetItem item) MISSING: >> ("QDataStream &"; "QDataStream
            // &" in, QTableWidgetItem item) MISSING: << ("QDataStream &";
            // "QDataStream &" out, QUrl url) MISSING: >> ("QDataStream &";
            // "QDataStream &" in, QUrl url)
            new Function(c, "!=", _n_operatorBang_EQ_4, Op, Compiled,
                         qt__operatorBang_EQ__bool_QByteArray_QByteArray,
                         Return, "bool", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            // MISSING: != (bool; QByteArray a1, "const char *" a2)
            // MISSING: != (bool; "const char *" a1, QByteArray a2)
            // MISSING: + (QByteArray; QByteArray a1, "const char *" a2)
            // MISSING: + (QByteArray; QByteArray a1, "char" a2)
            // MISSING: + (QByteArray; "const char *" a1, QByteArray a2)
            // MISSING: + (QByteArray; "char" a1, QByteArray a2)
            new Function(c, "+", _n_operatorPlus_6, Op, Compiled,
                         qt__operatorPlus__QByteArray_QByteArray_QByteArray,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            new Function(c, "<", _n_operatorLT_0, Op, Compiled,
                         qt__operatorLT__bool_QByteArray_QByteArray, Return,
                         "bool", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            // MISSING: < (bool; QByteArray a1, "const char *" a2)
            // MISSING: < (bool; "const char *" a1, QByteArray a2)
            // MISSING: << ("QDataStream &"; "QDataStream &" out, QByteArray ba)
            new Function(c, "<=", _n_operatorLT_EQ_0, Op, Compiled,
                         qt__operatorLT_EQ__bool_QByteArray_QByteArray, Return,
                         "bool", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            // MISSING: <= (bool; QByteArray a1, "const char *" a2)
            // MISSING: <= (bool; "const char *" a1, QByteArray a2)
            new Function(c, "==", _n_operatorEQ_EQ_6, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QByteArray_QByteArray, Return,
                         "bool", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            // MISSING: == (bool; QByteArray a1, "const char *" a2)
            // MISSING: == (bool; "const char *" a1, QByteArray a2)
            new Function(c, ">", _n_operatorGT_0, Op, Compiled,
                         qt__operatorGT__bool_QByteArray_QByteArray, Return,
                         "bool", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            // MISSING: > (bool; QByteArray a1, "const char *" a2)
            // MISSING: > (bool; "const char *" a1, QByteArray a2)
            new Function(c, ">=", _n_operatorGT_EQ_0, Op, Compiled,
                         qt__operatorGT_EQ__bool_QByteArray_QByteArray, Return,
                         "bool", Parameters,
                         new Param(c, "a1", "qt.QByteArray"),
                         new Param(c, "a2", "qt.QByteArray"), End),
            // MISSING: >= (bool; QByteArray a1, "const char *" a2)
            // MISSING: >= (bool; "const char *" a1, QByteArray a2)
            // MISSING: >> ("QDataStream &"; "QDataStream &" in, QByteArray ba)
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QImage
            // image) MISSING: >> ("QDataStream &"; "QDataStream &" stream,
            // QImage image) MISSING: << ("QDataStream &"; "QDataStream &" s,
            // "const QPicture &" r) MISSING: >> ("QDataStream &"; "QDataStream
            // &" s, "QPicture &" r) MISSING: << ("QDataStream &"; "QDataStream
            // &" stream, QPixmap pixmap) MISSING: >> ("QDataStream &";
            // "QDataStream &" stream, QPixmap pixmap) MISSING: << ("QDataStream
            // &"; "QDataStream &" out, QHostAddress address) MISSING: >>
            // ("QDataStream &"; "QDataStream &" in, QHostAddress address)
            new Function(c, "!=", _n_operatorBang_EQ_7, Op, Compiled,
                         qt__operatorBang_EQ__bool_QMargins_QMargins, Return,
                         "bool", Parameters, new Param(c, "m1", "qt.QMargins"),
                         new Param(c, "m2", "qt.QMargins"), End),
            new Function(c, "==", _n_operatorEQ_EQ_9, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QMargins_QMargins, Return,
                         "bool", Parameters, new Param(c, "m1", "qt.QMargins"),
                         new Param(c, "m2", "qt.QMargins"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QBrush
            // brush) MISSING: >> ("QDataStream &"; "QDataStream &" stream,
            // QBrush brush)
            new Function(c, "*", _n_operatorStar_4, Op, Compiled,
                         qt__operatorStar__QPoint_QPoint_QMatrix, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "point", "qt.QPoint"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            new Function(c, "*", _n_operatorStar_5, Op, Compiled,
                         qt__operatorStar__QPointF_QPointF_QMatrix, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "point", "qt.QPointF"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            // MISSING: * ("QLineF"; "const QLineF &" line, QMatrix matrix)
            // MISSING: * ("QLine"; "const QLine &" line, QMatrix matrix)
            // MISSING: * ("QPolygon"; "const QPolygon &" polygon, QMatrix
            // matrix) MISSING: * ("QPolygonF"; "const QPolygonF &" polygon,
            // QMatrix matrix)
            new Function(c, "*", _n_operatorStar_10, Op, Compiled,
                         qt__operatorStar__QRegion_QRegion_QMatrix, Return,
                         "qt.QRegion", Parameters,
                         new Param(c, "region", "qt.QRegion"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            // MISSING: * (QPainterPath; "const QPainterPath &" path, QMatrix
            // matrix) MISSING: << ("QDataStream &"; "QDataStream &" stream,
            // QMatrix matrix) MISSING: >> ("QDataStream &"; "QDataStream &"
            // stream, QMatrix matrix)
            new Function(c, "*", _n_operatorStar_12, Op, Compiled,
                         qt__operatorStar__QPoint_QPoint_QTransform, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "point", "qt.QPoint"),
                         new Param(c, "matrix", "qt.QTransform"), End),
            new Function(c, "*", _n_operatorStar_13, Op, Compiled,
                         qt__operatorStar__QPointF_QPointF_QTransform, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "point", "qt.QPointF"),
                         new Param(c, "matrix", "qt.QTransform"), End),
            // MISSING: * ("QLineF"; "const QLineF &" line, QTransform matrix)
            // MISSING: * ("QLine"; "const QLine &" line, QTransform matrix)
            // MISSING: * ("QPolygon"; "const QPolygon &" polygon, QTransform
            // matrix) MISSING: * ("QPolygonF"; "const QPolygonF &" polygon,
            // QTransform matrix)
            new Function(c, "*", _n_operatorStar_18, Op, Compiled,
                         qt__operatorStar__QRegion_QRegion_QTransform, Return,
                         "qt.QRegion", Parameters,
                         new Param(c, "region", "qt.QRegion"),
                         new Param(c, "matrix", "qt.QTransform"), End),
            // MISSING: * (QPainterPath; "const QPainterPath &" path, QTransform
            // matrix) MISSING: << ("QDataStream &"; "QDataStream &" stream,
            // QTransform matrix) MISSING: >> ("QDataStream &"; "QDataStream &"
            // stream, QTransform matrix)
            new Function(c, "!=", _n_operatorBang_EQ_8, Op, Compiled,
                         qt__operatorBang_EQ__bool_QPointF_QPointF, Return,
                         "bool", Parameters, new Param(c, "p1", "qt.QPointF"),
                         new Param(c, "p2", "qt.QPointF"), End),
            new Function(c, "*", _n_operatorStar_20, Op, Compiled,
                         qt__operatorStar__QPointF_QPointF_double, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "point", "qt.QPointF"),
                         new Param(c, "factor", "double"), End),
            new Function(c, "*", _n_operatorStar_21, Op, Compiled,
                         qt__operatorStar__QPointF_double_QPointF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "factor", "double"),
                         new Param(c, "point", "qt.QPointF"), End),
            new Function(c, "+", _n_operatorPlus_7, Op, Compiled,
                         qt__operatorPlus__QPointF_QPointF_QPointF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "p1", "qt.QPointF"),
                         new Param(c, "p2", "qt.QPointF"), End),
            new Function(c, "-", _n_operatorMinus_3, Op, Compiled,
                         qt__operatorMinus__QPointF_QPointF_QPointF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "p1", "qt.QPointF"),
                         new Param(c, "p2", "qt.QPointF"), End),
            new Function(c, "-", _n_operatorMinus_4, Op, Compiled,
                         qt__operatorMinus__QPointF_QPointF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "point", "qt.QPointF"), End),
            new Function(c, "/", _n_operatorSlash_2, Op, Compiled,
                         qt__operatorSlash__QPointF_QPointF_double, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "point", "qt.QPointF"),
                         new Param(c, "divisor", "double"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QPointF
            // point)
            new Function(c, "==", _n_operatorEQ_EQ_10, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QPointF_QPointF, Return,
                         "bool", Parameters, new Param(c, "p1", "qt.QPointF"),
                         new Param(c, "p2", "qt.QPointF"), End),
            // MISSING: >> ("QDataStream &"; "QDataStream &" stream, QPointF
            // point) MISSING: << ("QDataStream &"; "QDataStream &" s, QPalette
            // p) MISSING: >> ("QDataStream &"; "QDataStream &" s, QPalette p)
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, "const
            // QPainterPath &" path) MISSING: >> ("QDataStream &"; "QDataStream
            // &" stream, "QPainterPath &" path)
            new Function(c, "!=", _n_operatorBang_EQ_9, Op, Compiled,
                         qt__operatorBang_EQ__bool_QRectF_QRectF, Return,
                         "bool", Parameters, new Param(c, "r1", "qt.QRectF"),
                         new Param(c, "r2", "qt.QRectF"), End),
            // MISSING: << ("QDataStream &"; "QDataStream &" stream, QRectF
            // rectangle)
            new Function(c, "==", _n_operatorEQ_EQ_11, Op, Compiled,
                         qt__operatorEQ_EQ__bool_QRectF_QRectF, Return, "bool",
                         Parameters, new Param(c, "r1", "qt.QRectF"),
                         new Param(c, "r2", "qt.QRectF"), End),
            // MISSING: >> ("QDataStream &"; "QDataStream &" stream, QRectF
            // rectangle)
            EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
