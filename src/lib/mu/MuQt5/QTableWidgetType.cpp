//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTableWidgetType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QMimeDataType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QItemSelectionType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QTableWidgetItemType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QItemSelectionModelType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QTableWidget::~MuQt_QTableWidget()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QTableWidget::MuQt_QTableWidget(Pointer muobj,
                                         const CallEnvironment* ce,
                                         QWidget* parent)
        : QTableWidget(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTableWidgetType>(
            c->internName("qt.QTableWidget"));
    }

    MuQt_QTableWidget::MuQt_QTableWidget(Pointer muobj,
                                         const CallEnvironment* ce, int rows,
                                         int columns, QWidget* parent)
        : QTableWidget(rows, columns, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTableWidgetType>(
            c->internName("qt.QTableWidget"));
    }

    bool MuQt_QTableWidget::dropMimeData(int row, int column,
                                         const QMimeData* data,
                                         Qt::DropAction action)
    {
        if (!_env)
            return QTableWidget::dropMimeData(row, column, data, action);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(5);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(row);
            args[2] = Value(column);
            args[3] =
                Value(makeinstance<QMimeDataType>(c, data, "qt.QMimeData"));
            args[4] = Value(int(action));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTableWidget::dropMimeData(row, column, data, action);
        }
    }

    QMimeData*
    MuQt_QTableWidget::mimeData(const QList<QTableWidgetItem*>& items) const
    {
        if (!_env)
            return QTableWidget::mimeData(items);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointerlist<QTableWidgetItemType>(
                c, items, "qt.QTableWidgetItem"));
            Value rval = _env->call(F, args);
            return object<QMimeData>(rval._Pointer);
        }
        else
        {
            return QTableWidget::mimeData(items);
        }
    }

    QStringList MuQt_QTableWidget::mimeTypes() const
    {
        if (!_env)
            return QTableWidget::mimeTypes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qstringlist(rval._Pointer);
        }
        else
        {
            return QTableWidget::mimeTypes();
        }
    }

    Qt::DropActions MuQt_QTableWidget::supportedDropActions() const
    {
        if (!_env)
            return QTableWidget::supportedDropActions();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (Qt::DropActions)(rval._int);
        }
        else
        {
            return QTableWidget::supportedDropActions();
        }
    }

    void MuQt_QTableWidget::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QTableWidget::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::dropEvent(event);
        }
    }

    bool MuQt_QTableWidget::event(QEvent* e)
    {
        if (!_env)
            return QTableWidget::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTableWidget::event(e);
        }
    }

    QModelIndex MuQt_QTableWidget::indexAt(const QPoint& pos) const
    {
        if (!_env)
            return QTableWidget::indexAt(pos);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QPointType>(c, pos, "qt.QPoint"));
            Value rval = _env->call(F, args);
            return getqtype<QModelIndexType>(rval._Pointer);
        }
        else
        {
            return QTableWidget::indexAt(pos);
        }
    }

    void MuQt_QTableWidget::setRootIndex(const QModelIndex& index)
    {
        if (!_env)
        {
            QTableWidget::setRootIndex(index);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::setRootIndex(index);
        }
    }

    void
    MuQt_QTableWidget::setSelectionModel(QItemSelectionModel* selectionModel)
    {
        if (!_env)
        {
            QTableWidget::setSelectionModel(selectionModel);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QItemSelectionModelType>(
                c, selectionModel, "qt.QItemSelectionModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::setSelectionModel(selectionModel);
        }
    }

    void MuQt_QTableWidget::currentChanged(const QModelIndex& current,
                                           const QModelIndex& previous)
    {
        if (!_env)
        {
            QTableWidget::currentChanged(current, previous);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, current, "qt.QModelIndex"));
            args[2] = Value(
                makeqtype<QModelIndexType>(c, previous, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::currentChanged(current, previous);
        }
    }

    int MuQt_QTableWidget::horizontalOffset() const
    {
        if (!_env)
            return QTableWidget::horizontalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTableWidget::horizontalOffset();
        }
    }

    bool MuQt_QTableWidget::isIndexHidden(const QModelIndex& index) const
    {
        if (!_env)
            return QTableWidget::isIndexHidden(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTableWidget::isIndexHidden(index);
        }
    }

    void MuQt_QTableWidget::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QTableWidget::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::paintEvent(event);
        }
    }

    QModelIndexList MuQt_QTableWidget::selectedIndexes() const
    {
        if (!_env)
            return QTableWidget::selectedIndexes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qmodelindexlist(rval._Pointer);
        }
        else
        {
            return QTableWidget::selectedIndexes();
        }
    }

    void MuQt_QTableWidget::selectionChanged(const QItemSelection& selected,
                                             const QItemSelection& deselected)
    {
        if (!_env)
        {
            QTableWidget::selectionChanged(selected, deselected);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selected,
                                                          "qt.QItemSelection"));
            args[2] = Value(makeqtype<QItemSelectionType>(c, deselected,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::selectionChanged(selected, deselected);
        }
    }

    void
    MuQt_QTableWidget::setSelection(const QRect& rect,
                                    QItemSelectionModel::SelectionFlags flags)
    {
        if (!_env)
        {
            QTableWidget::setSelection(rect, flags);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            args[2] = Value(int(flags));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::setSelection(rect, flags);
        }
    }

    int MuQt_QTableWidget::sizeHintForColumn(int column) const
    {
        if (!_env)
            return QTableWidget::sizeHintForColumn(column);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(column);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTableWidget::sizeHintForColumn(column);
        }
    }

    int MuQt_QTableWidget::sizeHintForRow(int row) const
    {
        if (!_env)
            return QTableWidget::sizeHintForRow(row);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(row);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTableWidget::sizeHintForRow(row);
        }
    }

    void MuQt_QTableWidget::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QTableWidget::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::timerEvent(event);
        }
    }

    void MuQt_QTableWidget::updateGeometries()
    {
        if (!_env)
        {
            QTableWidget::updateGeometries();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTableWidget::updateGeometries();
        }
    }

    int MuQt_QTableWidget::verticalOffset() const
    {
        if (!_env)
            return QTableWidget::verticalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTableWidget::verticalOffset();
        }
    }

    QSize MuQt_QTableWidget::viewportSizeHint() const
    {
        if (!_env)
            return QTableWidget::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTableWidget::viewportSizeHint();
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTableWidgetType::QTableWidgetType(Context* c, const char* name,
                                       Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTableWidgetType::~QTableWidgetType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTableWidget_QTableWidget_QObject(Thread& NODE_THREAD,
                                                     Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTableWidget* w = object<QTableWidget>(widget))
        {
            QTableWidgetType* type =
                c->findSymbolOfTypeByQualifiedName<QTableWidgetType>(
                    c->internName("qt.QTableWidget"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QTableWidget_QTableWidget_QObject(NODE_THREAD,
                                                      NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTableWidget_QTableWidget_QTableWidget_QTableWidget_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QTableWidget(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QTableWidget_QTableWidget_QTableWidget_QTableWidget_int_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_rows,
        int param_columns, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg1 = (int)(param_rows);
        int arg2 = (int)(param_columns);
        QWidget* arg3 = object<QWidget>(param_parent);
        setobject(param_this, new MuQt_QTableWidget(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2, arg3));
        return param_this;
    }

    Pointer qt_QTableWidget_cellWidget_QWidget_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        return makeinstance<QWidgetType>(c, arg0->cellWidget(arg1, arg2),
                                         "qt.QWidget");
    }

    void
    qt_QTableWidget_closePersistentEditor_void_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTableWidgetItem* arg1 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->closePersistentEditor(arg1);
    }

    int qt_QTableWidget_column_int_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QTableWidgetItem* arg1 =
            getqpointer<QTableWidgetItemType>(param_item);
        return arg0->column(arg1);
    }

    int qt_QTableWidget_columnCount_int_QTableWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return arg0->columnCount();
    }

    int qt_QTableWidget_currentColumn_int_QTableWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return arg0->currentColumn();
    }

    Pointer qt_QTableWidget_currentItem_QTableWidgetItem_QTableWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return makeqpointer<QTableWidgetItemType>(c, arg0->currentItem(),
                                                  "qt.QTableWidgetItem");
    }

    int qt_QTableWidget_currentRow_int_QTableWidget(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return arg0->currentRow();
    }

    void qt_QTableWidget_editItem_void_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTableWidgetItem* arg1 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->editItem(arg1);
    }

    Pointer
    qt_QTableWidget_findItems_qt__QTableWidgetItemBSB_ESB__QTableWidget_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QString arg1 = qstring(param_text);
        Qt::MatchFlags arg2 = (Qt::MatchFlags)(param_flags);
        return makeqpointerlist<QTableWidgetItemType>(
            c, arg0->findItems(arg1, arg2), "qt.QTableWidgetItem");
    }

    Pointer
    qt_QTableWidget_horizontalHeaderItem_QTableWidgetItem_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_column);
        return makeqpointer<QTableWidgetItemType>(
            c, arg0->horizontalHeaderItem(arg1), "qt.QTableWidgetItem");
    }

    Pointer qt_QTableWidget_item_QTableWidgetItem_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        return makeqpointer<QTableWidgetItemType>(c, arg0->item(arg1, arg2),
                                                  "qt.QTableWidgetItem");
    }

    Pointer qt_QTableWidget_itemAt_QTableWidgetItem_QTableWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return makeqpointer<QTableWidgetItemType>(c, arg0->itemAt(arg1),
                                                  "qt.QTableWidgetItem");
    }

    Pointer qt_QTableWidget_itemAt_QTableWidgetItem_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_ax, int param_ay)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_ax);
        int arg2 = (int)(param_ay);
        return makeqpointer<QTableWidgetItemType>(c, arg0->itemAt(arg1, arg2),
                                                  "qt.QTableWidgetItem");
    }

    Pointer qt_QTableWidget_itemPrototype_QTableWidgetItem_QTableWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return makeqpointer<QTableWidgetItemType>(c, arg0->itemPrototype(),
                                                  "qt.QTableWidgetItem");
    }

    void
    qt_QTableWidget_openPersistentEditor_void_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTableWidgetItem* arg1 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->openPersistentEditor(arg1);
    }

    void qt_QTableWidget_removeCellWidget_void_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        arg0->removeCellWidget(arg1, arg2);
    }

    int qt_QTableWidget_row_int_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QTableWidgetItem* arg1 =
            getqpointer<QTableWidgetItemType>(param_item);
        return arg0->row(arg1);
    }

    int qt_QTableWidget_rowCount_int_QTableWidget(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return arg0->rowCount();
    }

    Pointer
    qt_QTableWidget_selectedItems_qt__QTableWidgetItemBSB_ESB__QTableWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return makeqpointerlist<QTableWidgetItemType>(c, arg0->selectedItems(),
                                                      "qt.QTableWidgetItem");
    }

    void qt_QTableWidget_setCellWidget_void_QTableWidget_int_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        QWidget* arg3 = object<QWidget>(param_widget);
        arg0->setCellWidget(arg1, arg2, arg3);
    }

    void qt_QTableWidget_setColumnCount_void_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_columns)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_columns);
        arg0->setColumnCount(arg1);
    }

    void qt_QTableWidget_setCurrentCell_void_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        arg0->setCurrentCell(arg1, arg2);
    }

    void qt_QTableWidget_setCurrentCell_void_QTableWidget_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column, int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        QItemSelectionModel::SelectionFlags arg3 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        arg0->setCurrentCell(arg1, arg2, arg3);
    }

    void qt_QTableWidget_setCurrentItem_void_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTableWidgetItem* arg1 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->setCurrentItem(arg1);
    }

    void qt_QTableWidget_setCurrentItem_void_QTableWidget_QTableWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTableWidgetItem* arg1 = getqpointer<QTableWidgetItemType>(param_item);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        arg0->setCurrentItem(arg1, arg2);
    }

    void
    qt_QTableWidget_setHorizontalHeaderItem_void_QTableWidget_int_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_column);
        QTableWidgetItem* arg2 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->setHorizontalHeaderItem(arg1, arg2);
    }

    void
    qt_QTableWidget_setHorizontalHeaderLabels_void_QTableWidget_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_labels)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QStringList arg1 = qstringlist(param_labels);
        arg0->setHorizontalHeaderLabels(arg1);
    }

    void qt_QTableWidget_setItem_void_QTableWidget_int_int_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        QTableWidgetItem* arg3 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->setItem(arg1, arg2, arg3);
    }

    void qt_QTableWidget_setItemPrototype_void_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QTableWidgetItem* arg1 =
            getqpointer<QTableWidgetItemType>(param_item);
        arg0->setItemPrototype(arg1);
    }

    void qt_QTableWidget_setRowCount_void_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_rows)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_rows);
        arg0->setRowCount(arg1);
    }

    void
    qt_QTableWidget_setVerticalHeaderItem_void_QTableWidget_int_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        QTableWidgetItem* arg2 = getqpointer<QTableWidgetItemType>(param_item);
        arg0->setVerticalHeaderItem(arg1, arg2);
    }

    void
    qt_QTableWidget_setVerticalHeaderLabels_void_QTableWidget_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_labels)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QStringList arg1 = qstringlist(param_labels);
        arg0->setVerticalHeaderLabels(arg1);
    }

    void qt_QTableWidget_sortItems_void_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        int param_order)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_column);
        Qt::SortOrder arg2 = (Qt::SortOrder)(param_order);
        arg0->sortItems(arg1, arg2);
    }

    Pointer
    qt_QTableWidget_takeHorizontalHeaderItem_QTableWidgetItem_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_column);
        return makeqpointer<QTableWidgetItemType>(
            c, arg0->takeHorizontalHeaderItem(arg1), "qt.QTableWidgetItem");
    }

    Pointer qt_QTableWidget_takeItem_QTableWidgetItem_QTableWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        return makeqpointer<QTableWidgetItemType>(c, arg0->takeItem(arg1, arg2),
                                                  "qt.QTableWidgetItem");
    }

    Pointer
    qt_QTableWidget_takeVerticalHeaderItem_QTableWidgetItem_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        return makeqpointer<QTableWidgetItemType>(
            c, arg0->takeVerticalHeaderItem(arg1), "qt.QTableWidgetItem");
    }

    Pointer
    qt_QTableWidget_verticalHeaderItem_QTableWidgetItem_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        return makeqpointer<QTableWidgetItemType>(
            c, arg0->verticalHeaderItem(arg1), "qt.QTableWidgetItem");
    }

    int qt_QTableWidget_visualColumn_int_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalColumn)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_logicalColumn);
        return arg0->visualColumn(arg1);
    }

    Pointer qt_QTableWidget_visualItemRect_QRect_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QTableWidgetItem* arg1 =
            getqpointer<QTableWidgetItemType>(param_item);
        return makeqtype<QRectType>(c, arg0->visualItemRect(arg1), "qt.QRect");
    }

    int qt_QTableWidget_visualRow_int_QTableWidget_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_logicalRow)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_logicalRow);
        return arg0->visualRow(arg1);
    }

    bool qt_QTableWidget_dropMimeData_bool_QTableWidget_int_int_QMimeData_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column, Pointer param_data, int param_action)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        const QMimeData* arg3 = object<QMimeData>(param_data);
        Qt::DropAction arg4 = (Qt::DropAction)(param_action);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)
                         ->dropMimeData_pub_parent(arg1, arg2, arg3, arg4)
                   : ((MuQt_QTableWidget*)arg0)
                         ->dropMimeData_pub(arg1, arg2, arg3, arg4);
    }

    Pointer
    qt_QTableWidget_indexFromItem_QModelIndex_QTableWidget_QTableWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTableWidgetItem* arg1 = getqpointer<QTableWidgetItemType>(param_item);
        return makeqtype<QModelIndexType>(
            c, ((MuQt_QTableWidget*)arg0)->indexFromItem_pub(arg1),
            "qt.QModelIndex");
    }

    Pointer
    qt_QTableWidget_itemFromIndex_QTableWidgetItem_QTableWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqpointer<QTableWidgetItemType>(
            c, ((MuQt_QTableWidget*)arg0)->itemFromIndex_pub(arg1),
            "qt.QTableWidgetItem");
    }

    Pointer
    qt_QTableWidget_items_qt__QTableWidgetItemBSB_ESB__QTableWidget_QMimeData(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QMimeData* arg1 = object<QMimeData>(param_data);
        return makeqpointerlist<QTableWidgetItemType>(
            c, ((MuQt_QTableWidget*)arg0)->items_pub(arg1),
            "qt.QTableWidgetItem");
    }

    Pointer
    qt_QTableWidget_mimeData_QMimeData_QTableWidget_qt__QTableWidgetItemBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_items)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QList<QTableWidgetItem*> arg1 =
            qpointerlist<QTableWidgetItemType>(param_items);
        return isMuQtObject(arg0)
                   ? makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QTableWidget*)arg0)->mimeData_pub_parent(arg1),
                         "qt.QMimeData")
                   : makeinstance<QMimeDataType>(
                         c, ((MuQt_QTableWidget*)arg0)->mimeData_pub(arg1),
                         "qt.QMimeData");
    }

    Pointer qt_QTableWidget_mimeTypes_stringBSB_ESB__QTableWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makestringlist(
                         c, ((MuQt_QTableWidget*)arg0)->mimeTypes_pub_parent())
                   : makestringlist(
                         c, ((MuQt_QTableWidget*)arg0)->mimeTypes_pub());
    }

    int qt_QTableWidget_supportedDropActions_int_QTableWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return isMuQtObject(arg0) ? int(((MuQt_QTableWidget*)arg0)
                                            ->supportedDropActions_pub_parent())
                                  : int(((MuQt_QTableWidget*)arg0)
                                            ->supportedDropActions_pub());
    }

    void qt_QTableWidget_dropEvent_void_QTableWidget_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QTableWidget*)arg0)->dropEvent_pub(arg1);
    }

    bool qt_QTableWidget_event_bool_QTableWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QTableWidget*)arg0)->event_pub(arg1);
    }

    Pointer qt_QTableWidget_indexAt_QModelIndex_QTableWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return isMuQtObject(arg0)
                   ? makeqtype<QModelIndexType>(
                         c, arg0->QTableWidget::indexAt(arg1), "qt.QModelIndex")
                   : makeqtype<QModelIndexType>(c, arg0->indexAt(arg1),
                                                "qt.QModelIndex");
    }

    void qt_QTableWidget_setRootIndex_void_QTableWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        if (isMuQtObject(arg0))
            arg0->QTableWidget::setRootIndex(arg1);
        else
            arg0->setRootIndex(arg1);
    }

    void
    qt_QTableWidget_setSelectionModel_void_QTableWidget_QItemSelectionModel(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_selectionModel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QItemSelectionModel* arg1 =
            object<QItemSelectionModel>(param_selectionModel);
        if (isMuQtObject(arg0))
            arg0->QTableWidget::setSelectionModel(arg1);
        else
            arg0->setSelectionModel(arg1);
    }

    void
    qt_QTableWidget_currentChanged_void_QTableWidget_QModelIndex_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_current,
        Pointer param_previous)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_current);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_previous);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->currentChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QTableWidget*)arg0)->currentChanged_pub(arg1, arg2);
    }

    int
    qt_QTableWidget_horizontalOffset_int_QTableWidget(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)->horizontalOffset_pub_parent()
                   : ((MuQt_QTableWidget*)arg0)->horizontalOffset_pub();
    }

    bool qt_QTableWidget_isIndexHidden_bool_QTableWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)->isIndexHidden_pub_parent(arg1)
                   : ((MuQt_QTableWidget*)arg0)->isIndexHidden_pub(arg1);
    }

    void qt_QTableWidget_paintEvent_void_QTableWidget_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QTableWidget*)arg0)->paintEvent_pub(arg1);
    }

    Pointer
    qt_QTableWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QTableWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqmodelindexlist(c, ((MuQt_QTableWidget*)arg0)
                                                ->selectedIndexes_pub_parent())
                   : makeqmodelindexlist(
                         c, ((MuQt_QTableWidget*)arg0)->selectedIndexes_pub());
    }

    void
    qt_QTableWidget_selectionChanged_void_QTableWidget_QItemSelection_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selected,
        Pointer param_deselected)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selected);
        const QItemSelection arg2 =
            getqtype<QItemSelectionType>(param_deselected);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->selectionChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QTableWidget*)arg0)->selectionChanged_pub(arg1, arg2);
    }

    void qt_QTableWidget_setSelection_void_QTableWidget_QRect_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_flags);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->setSelection_pub_parent(arg1, arg2);
        else
            ((MuQt_QTableWidget*)arg0)->setSelection_pub(arg1, arg2);
    }

    int qt_QTableWidget_sizeHintForColumn_int_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_column);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)
                         ->sizeHintForColumn_pub_parent(arg1)
                   : ((MuQt_QTableWidget*)arg0)->sizeHintForColumn_pub(arg1);
    }

    int qt_QTableWidget_sizeHintForRow_int_QTableWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        int arg1 = (int)(param_row);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)->sizeHintForRow_pub_parent(arg1)
                   : ((MuQt_QTableWidget*)arg0)->sizeHintForRow_pub(arg1);
    }

    void qt_QTableWidget_timerEvent_void_QTableWidget_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QTableWidget*)arg0)->timerEvent_pub(arg1);
    }

    void
    qt_QTableWidget_updateGeometries_void_QTableWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QTableWidget*)arg0)->updateGeometries_pub_parent();
        else
            ((MuQt_QTableWidget*)arg0)->updateGeometries_pub();
    }

    int qt_QTableWidget_verticalOffset_int_QTableWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTableWidget*)arg0)->verticalOffset_pub_parent()
                   : ((MuQt_QTableWidget*)arg0)->verticalOffset_pub();
    }

    Pointer
    qt_QTableWidget_viewportSizeHint_QSize_QTableWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTableWidget* arg0 = object<QTableWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QTableWidget*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QTableWidget*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    static NODE_IMPLEMENTATION(_n_QTableWidget0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_QTableWidget_QTableWidget_QTableWidget_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QTableWidget1, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_QTableWidget_QTableWidget_QTableWidget_int_int_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cellWidget0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_cellWidget_QWidget_QTableWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_closePersistentEditor0, void)
    {
        qt_QTableWidget_closePersistentEditor_void_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_column0, int)
    {
        NODE_RETURN(qt_QTableWidget_column_int_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_columnCount0, int)
    {
        NODE_RETURN(qt_QTableWidget_columnCount_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentColumn0, int)
    {
        NODE_RETURN(qt_QTableWidget_currentColumn_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentItem0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_currentItem_QTableWidgetItem_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentRow0, int)
    {
        NODE_RETURN(qt_QTableWidget_currentRow_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_editItem0, void)
    {
        qt_QTableWidget_editItem_void_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_findItems0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_findItems_qt__QTableWidgetItemBSB_ESB__QTableWidget_string_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_horizontalHeaderItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_horizontalHeaderItem_QTableWidgetItem_QTableWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_item0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_item_QTableWidgetItem_QTableWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemAt0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_itemAt_QTableWidgetItem_QTableWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemAt1, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_itemAt_QTableWidgetItem_QTableWidget_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemPrototype0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_itemPrototype_QTableWidgetItem_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_openPersistentEditor0, void)
    {
        qt_QTableWidget_openPersistentEditor_void_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_removeCellWidget0, void)
    {
        qt_QTableWidget_removeCellWidget_void_QTableWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_row0, int)
    {
        NODE_RETURN(qt_QTableWidget_row_int_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rowCount0, int)
    {
        NODE_RETURN(qt_QTableWidget_rowCount_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectedItems0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_selectedItems_qt__QTableWidgetItemBSB_ESB__QTableWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCellWidget0, void)
    {
        qt_QTableWidget_setCellWidget_void_QTableWidget_int_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setColumnCount0, void)
    {
        qt_QTableWidget_setColumnCount_void_QTableWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentCell0, void)
    {
        qt_QTableWidget_setCurrentCell_void_QTableWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentCell1, void)
    {
        qt_QTableWidget_setCurrentCell_void_QTableWidget_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem0, void)
    {
        qt_QTableWidget_setCurrentItem_void_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem1, void)
    {
        qt_QTableWidget_setCurrentItem_void_QTableWidget_QTableWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setHorizontalHeaderItem0, void)
    {
        qt_QTableWidget_setHorizontalHeaderItem_void_QTableWidget_int_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setHorizontalHeaderLabels0, void)
    {
        qt_QTableWidget_setHorizontalHeaderLabels_void_QTableWidget_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setItem0, void)
    {
        qt_QTableWidget_setItem_void_QTableWidget_int_int_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setItemPrototype0, void)
    {
        qt_QTableWidget_setItemPrototype_void_QTableWidget_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setRowCount0, void)
    {
        qt_QTableWidget_setRowCount_void_QTableWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setVerticalHeaderItem0, void)
    {
        qt_QTableWidget_setVerticalHeaderItem_void_QTableWidget_int_QTableWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setVerticalHeaderLabels0, void)
    {
        qt_QTableWidget_setVerticalHeaderLabels_void_QTableWidget_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sortItems0, void)
    {
        qt_QTableWidget_sortItems_void_QTableWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_takeHorizontalHeaderItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_takeHorizontalHeaderItem_QTableWidgetItem_QTableWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_takeItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_takeItem_QTableWidgetItem_QTableWidget_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_takeVerticalHeaderItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_takeVerticalHeaderItem_QTableWidgetItem_QTableWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_verticalHeaderItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_verticalHeaderItem_QTableWidgetItem_QTableWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_visualColumn0, int)
    {
        NODE_RETURN(qt_QTableWidget_visualColumn_int_QTableWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_visualItemRect0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_visualItemRect_QRect_QTableWidget_QTableWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualRow0, int)
    {
        NODE_RETURN(qt_QTableWidget_visualRow_int_QTableWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_dropMimeData0, bool)
    {
        NODE_RETURN(
            qt_QTableWidget_dropMimeData_bool_QTableWidget_int_int_QMimeData_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int), NODE_ARG(3, Pointer), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_indexFromItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_indexFromItem_QModelIndex_QTableWidget_QTableWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemFromIndex0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_itemFromIndex_QTableWidgetItem_QTableWidget_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_items0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_items_qt__QTableWidgetItemBSB_ESB__QTableWidget_QMimeData(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mimeData0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_mimeData_QMimeData_QTableWidget_qt__QTableWidgetItemBSB_ESB_(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mimeTypes0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_mimeTypes_stringBSB_ESB__QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_supportedDropActions0, int)
    {
        NODE_RETURN(qt_QTableWidget_supportedDropActions_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QTableWidget_dropEvent_void_QTableWidget_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QTableWidget_event_bool_QTableWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexAt0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_indexAt_QModelIndex_QTableWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setRootIndex0, void)
    {
        qt_QTableWidget_setRootIndex_void_QTableWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelectionModel0, void)
    {
        qt_QTableWidget_setSelectionModel_void_QTableWidget_QItemSelectionModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_currentChanged0, void)
    {
        qt_QTableWidget_currentChanged_void_QTableWidget_QModelIndex_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_horizontalOffset0, int)
    {
        NODE_RETURN(qt_QTableWidget_horizontalOffset_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIndexHidden0, bool)
    {
        NODE_RETURN(qt_QTableWidget_isIndexHidden_bool_QTableWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QTableWidget_paintEvent_void_QTableWidget_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectedIndexes0, Pointer)
    {
        NODE_RETURN(
            qt_QTableWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QTableWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionChanged0, void)
    {
        qt_QTableWidget_selectionChanged_void_QTableWidget_QItemSelection_QItemSelection(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QTableWidget_setSelection_void_QTableWidget_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForColumn0, int)
    {
        NODE_RETURN(qt_QTableWidget_sizeHintForColumn_int_QTableWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForRow0, int)
    {
        NODE_RETURN(qt_QTableWidget_sizeHintForRow_int_QTableWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QTableWidget_timerEvent_void_QTableWidget_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_updateGeometries0, void)
    {
        qt_QTableWidget_updateGeometries_void_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_verticalOffset0, int)
    {
        NODE_RETURN(qt_QTableWidget_verticalOffset_int_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTableWidget_viewportSizeHint_QSize_QTableWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QTableWidgetType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTableWidget_QTableWidget_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QTableWidget", _n_QTableWidget0, None, Compiled,
                qt_QTableWidget_QTableWidget_QTableWidget_QTableWidget_QWidget,
                Return, "qt.QTableWidget", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "QTableWidget", _n_QTableWidget1, None, Compiled,
                qt_QTableWidget_QTableWidget_QTableWidget_QTableWidget_int_int_QWidget,
                Return, "qt.QTableWidget", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "rows", "int"), new Param(c, "columns", "int"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "cellWidget", _n_cellWidget0, None, Compiled,
                qt_QTableWidget_cellWidget_QWidget_QTableWidget_int_int, Return,
                "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(
                c, "closePersistentEditor", _n_closePersistentEditor0, None,
                Compiled,
                qt_QTableWidget_closePersistentEditor_void_QTableWidget_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "column", _n_column0, None, Compiled,
                qt_QTableWidget_column_int_QTableWidget_QTableWidgetItem,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(c, "columnCount", _n_columnCount0, None, Compiled,
                         qt_QTableWidget_columnCount_int_QTableWidget, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"), End),
            new Function(c, "currentColumn", _n_currentColumn0, None, Compiled,
                         qt_QTableWidget_currentColumn_int_QTableWidget, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"), End),
            new Function(
                c, "currentItem", _n_currentItem0, None, Compiled,
                qt_QTableWidget_currentItem_QTableWidgetItem_QTableWidget,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"), End),
            new Function(c, "currentRow", _n_currentRow0, None, Compiled,
                         qt_QTableWidget_currentRow_int_QTableWidget, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"), End),
            new Function(
                c, "editItem", _n_editItem0, None, Compiled,
                qt_QTableWidget_editItem_void_QTableWidget_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "findItems", _n_findItems0, None, Compiled,
                qt_QTableWidget_findItems_qt__QTableWidgetItemBSB_ESB__QTableWidget_string_int,
                Return, "qt.QTableWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "text", "string"), new Param(c, "flags", "int"),
                End),
            new Function(
                c, "horizontalHeaderItem", _n_horizontalHeaderItem0, None,
                Compiled,
                qt_QTableWidget_horizontalHeaderItem_QTableWidgetItem_QTableWidget_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "column", "int"), End),
            new Function(
                c, "item", _n_item0, None, Compiled,
                qt_QTableWidget_item_QTableWidgetItem_QTableWidget_int_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(
                c, "itemAt", _n_itemAt0, None, Compiled,
                qt_QTableWidget_itemAt_QTableWidgetItem_QTableWidget_QPoint,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "point", "qt.QPoint"), End),
            new Function(
                c, "itemAt", _n_itemAt1, None, Compiled,
                qt_QTableWidget_itemAt_QTableWidgetItem_QTableWidget_int_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "ax", "int"), new Param(c, "ay", "int"), End),
            new Function(
                c, "itemPrototype", _n_itemPrototype0, None, Compiled,
                qt_QTableWidget_itemPrototype_QTableWidgetItem_QTableWidget,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"), End),
            new Function(
                c, "openPersistentEditor", _n_openPersistentEditor0, None,
                Compiled,
                qt_QTableWidget_openPersistentEditor_void_QTableWidget_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "removeCellWidget", _n_removeCellWidget0, None, Compiled,
                qt_QTableWidget_removeCellWidget_void_QTableWidget_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(c, "row", _n_row0, None, Compiled,
                         qt_QTableWidget_row_int_QTableWidget_QTableWidgetItem,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"),
                         new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(c, "rowCount", _n_rowCount0, None, Compiled,
                         qt_QTableWidget_rowCount_int_QTableWidget, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"), End),
            new Function(
                c, "selectedItems", _n_selectedItems0, None, Compiled,
                qt_QTableWidget_selectedItems_qt__QTableWidgetItemBSB_ESB__QTableWidget,
                Return, "qt.QTableWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QTableWidget"), End),
            // MISSING: selectedRanges ("QList<QTableWidgetSelectionRange>";
            // QTableWidget this)
            new Function(
                c, "setCellWidget", _n_setCellWidget0, None, Compiled,
                qt_QTableWidget_setCellWidget_void_QTableWidget_int_int_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "widget", "qt.QWidget"), End),
            new Function(
                c, "setColumnCount", _n_setColumnCount0, None, Compiled,
                qt_QTableWidget_setColumnCount_void_QTableWidget_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "columns", "int"), End),
            new Function(
                c, "setCurrentCell", _n_setCurrentCell0, None, Compiled,
                qt_QTableWidget_setCurrentCell_void_QTableWidget_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(
                c, "setCurrentCell", _n_setCurrentCell1, None, Compiled,
                qt_QTableWidget_setCurrentCell_void_QTableWidget_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "command", "int"), End),
            new Function(
                c, "setCurrentItem", _n_setCurrentItem0, None, Compiled,
                qt_QTableWidget_setCurrentItem_void_QTableWidget_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "setCurrentItem", _n_setCurrentItem1, None, Compiled,
                qt_QTableWidget_setCurrentItem_void_QTableWidget_QTableWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"),
                new Param(c, "command", "int"), End),
            new Function(
                c, "setHorizontalHeaderItem", _n_setHorizontalHeaderItem0, None,
                Compiled,
                qt_QTableWidget_setHorizontalHeaderItem_void_QTableWidget_int_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "column", "int"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "setHorizontalHeaderLabels", _n_setHorizontalHeaderLabels0,
                None, Compiled,
                qt_QTableWidget_setHorizontalHeaderLabels_void_QTableWidget_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "labels", "string[]"), End),
            new Function(
                c, "setItem", _n_setItem0, None, Compiled,
                qt_QTableWidget_setItem_void_QTableWidget_int_int_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "setItemPrototype", _n_setItemPrototype0, None, Compiled,
                qt_QTableWidget_setItemPrototype_void_QTableWidget_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            // MISSING: setRangeSelected (void; QTableWidget this, "const
            // QTableWidgetSelectionRange &" range, bool select)
            new Function(c, "setRowCount", _n_setRowCount0, None, Compiled,
                         qt_QTableWidget_setRowCount_void_QTableWidget_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTableWidget"),
                         new Param(c, "rows", "int"), End),
            new Function(
                c, "setVerticalHeaderItem", _n_setVerticalHeaderItem0, None,
                Compiled,
                qt_QTableWidget_setVerticalHeaderItem_void_QTableWidget_int_QTableWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "setVerticalHeaderLabels", _n_setVerticalHeaderLabels0, None,
                Compiled,
                qt_QTableWidget_setVerticalHeaderLabels_void_QTableWidget_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "labels", "string[]"), End),
            new Function(
                c, "sortItems", _n_sortItems0, None, Compiled,
                qt_QTableWidget_sortItems_void_QTableWidget_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "column", "int"),
                new Param(c, "order", "int", Value((int)Qt::AscendingOrder)),
                End),
            new Function(
                c, "takeHorizontalHeaderItem", _n_takeHorizontalHeaderItem0,
                None, Compiled,
                qt_QTableWidget_takeHorizontalHeaderItem_QTableWidgetItem_QTableWidget_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "column", "int"), End),
            new Function(
                c, "takeItem", _n_takeItem0, None, Compiled,
                qt_QTableWidget_takeItem_QTableWidgetItem_QTableWidget_int_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(
                c, "takeVerticalHeaderItem", _n_takeVerticalHeaderItem0, None,
                Compiled,
                qt_QTableWidget_takeVerticalHeaderItem_QTableWidgetItem_QTableWidget_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), End),
            new Function(
                c, "verticalHeaderItem", _n_verticalHeaderItem0, None, Compiled,
                qt_QTableWidget_verticalHeaderItem_QTableWidgetItem_QTableWidget_int,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), End),
            new Function(c, "visualColumn", _n_visualColumn0, None, Compiled,
                         qt_QTableWidget_visualColumn_int_QTableWidget_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"),
                         new Param(c, "logicalColumn", "int"), End),
            new Function(
                c, "visualItemRect", _n_visualItemRect0, None, Compiled,
                qt_QTableWidget_visualItemRect_QRect_QTableWidget_QTableWidgetItem,
                Return, "qt.QRect", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(c, "visualRow", _n_visualRow0, None, Compiled,
                         qt_QTableWidget_visualRow_int_QTableWidget_int, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTableWidget"),
                         new Param(c, "logicalRow", "int"), End),
            _func[0] = new MemberFunction(
                c, "dropMimeData", _n_dropMimeData0, None, Compiled,
                qt_QTableWidget_dropMimeData_bool_QTableWidget_int_int_QMimeData_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "data", "qt.QMimeData"),
                new Param(c, "action", "int"), End),
            new Function(
                c, "indexFromItem", _n_indexFromItem0, None, Compiled,
                qt_QTableWidget_indexFromItem_QModelIndex_QTableWidget_QTableWidgetItem,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "item", "qt.QTableWidgetItem"), End),
            new Function(
                c, "itemFromIndex", _n_itemFromIndex0, None, Compiled,
                qt_QTableWidget_itemFromIndex_QTableWidgetItem_QTableWidget_QModelIndex,
                Return, "qt.QTableWidgetItem", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            new Function(
                c, "items", _n_items0, None, Compiled,
                qt_QTableWidget_items_qt__QTableWidgetItemBSB_ESB__QTableWidget_QMimeData,
                Return, "qt.QTableWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "data", "qt.QMimeData"), End),
            _func[1] = new MemberFunction(
                c, "mimeData", _n_mimeData0, None, Compiled,
                qt_QTableWidget_mimeData_QMimeData_QTableWidget_qt__QTableWidgetItemBSB_ESB_,
                Return, "qt.QMimeData", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "items", "qt.QTableWidgetItem[]"), End),
            _func[2] = new MemberFunction(
                c, "mimeTypes", _n_mimeTypes0, None, Compiled,
                qt_QTableWidget_mimeTypes_stringBSB_ESB__QTableWidget, Return,
                "string[]", Parameters, new Param(c, "this", "qt.QTableWidget"),
                End),
            _func[3] = new MemberFunction(
                c, "supportedDropActions", _n_supportedDropActions0, None,
                Compiled, qt_QTableWidget_supportedDropActions_int_QTableWidget,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QTableWidget"), End),
            _func[4] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QTableWidget_dropEvent_void_QTableWidget_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[5] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QTableWidget_event_bool_QTableWidget_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[6] = new MemberFunction(
                c, "indexAt", _n_indexAt0, None, Compiled,
                qt_QTableWidget_indexAt_QModelIndex_QTableWidget_QPoint, Return,
                "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "pos", "qt.QPoint"), End),
            _func[7] = new MemberFunction(
                c, "setRootIndex", _n_setRootIndex0, None, Compiled,
                qt_QTableWidget_setRootIndex_void_QTableWidget_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[8] = new MemberFunction(
                c, "setSelectionModel", _n_setSelectionModel0, None, Compiled,
                qt_QTableWidget_setSelectionModel_void_QTableWidget_QItemSelectionModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "selectionModel", "qt.QItemSelectionModel"), End),
            _func[9] = new MemberFunction(
                c, "currentChanged", _n_currentChanged0, None, Compiled,
                qt_QTableWidget_currentChanged_void_QTableWidget_QModelIndex_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "current", "qt.QModelIndex"),
                new Param(c, "previous", "qt.QModelIndex"), End),
            _func[10] = new MemberFunction(
                c, "horizontalOffset", _n_horizontalOffset0, None, Compiled,
                qt_QTableWidget_horizontalOffset_int_QTableWidget, Return,
                "int", Parameters, new Param(c, "this", "qt.QTableWidget"),
                End),
            _func[11] = new MemberFunction(
                c, "isIndexHidden", _n_isIndexHidden0, None, Compiled,
                qt_QTableWidget_isIndexHidden_bool_QTableWidget_QModelIndex,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            // MISSING: moveCursor (QModelIndex; QTableWidget this,
            // "CursorAction" cursorAction, flags Qt::KeyboardModifiers
            // modifiers) // protected
            _func[12] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QTableWidget_paintEvent_void_QTableWidget_QPaintEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[13] = new MemberFunction(
                c, "selectedIndexes", _n_selectedIndexes0, None, Compiled,
                qt_QTableWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QTableWidget,
                Return, "qt.QModelIndex[]", Parameters,
                new Param(c, "this", "qt.QTableWidget"), End),
            _func[14] = new MemberFunction(
                c, "selectionChanged", _n_selectionChanged0, None, Compiled,
                qt_QTableWidget_selectionChanged_void_QTableWidget_QItemSelection_QItemSelection,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "selected", "qt.QItemSelection"),
                new Param(c, "deselected", "qt.QItemSelection"), End),
            _func[15] = new MemberFunction(
                c, "setSelection", _n_setSelection0, None, Compiled,
                qt_QTableWidget_setSelection_void_QTableWidget_QRect_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "rect", "qt.QRect"), new Param(c, "flags", "int"),
                End),
            _func[16] = new MemberFunction(
                c, "sizeHintForColumn", _n_sizeHintForColumn0, None, Compiled,
                qt_QTableWidget_sizeHintForColumn_int_QTableWidget_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "column", "int"), End),
            _func[17] = new MemberFunction(
                c, "sizeHintForRow", _n_sizeHintForRow0, None, Compiled,
                qt_QTableWidget_sizeHintForRow_int_QTableWidget_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "row", "int"), End),
            _func[18] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QTableWidget_timerEvent_void_QTableWidget_QTimerEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTableWidget"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[19] = new MemberFunction(
                c, "updateGeometries", _n_updateGeometries0, None, Compiled,
                qt_QTableWidget_updateGeometries_void_QTableWidget, Return,
                "void", Parameters, new Param(c, "this", "qt.QTableWidget"),
                End),
            _func[20] = new MemberFunction(
                c, "verticalOffset", _n_verticalOffset0, None, Compiled,
                qt_QTableWidget_verticalOffset_int_QTableWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QTableWidget"), End),
            // MISSING: viewOptions ("QStyleOptionViewItem"; QTableWidget this)
            // // protected
            _func[21] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QTableWidget_viewportSizeHint_QSize_QTableWidget, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QTableWidget"),
                End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QTableWidget::staticMetaObject, propExclusions);
    }

} // namespace Mu
