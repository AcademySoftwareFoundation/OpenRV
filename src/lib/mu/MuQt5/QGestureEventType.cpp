//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QGestureEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QWidgetType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QGestureEventType::QGestureEventType(Context* c, const char* name,
                                         Class* super)
        : Class(c, name, super)
    {
    }

    QGestureEventType::~QGestureEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    void qt_QGestureEvent_accept_void_QGestureEvent_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_gestureType)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGestureEvent* arg0 = getqpointer<QGestureEventType>(param_this);
        Qt::GestureType arg1 = (Qt::GestureType)(param_gestureType);
        arg0->accept(arg1);
        setqpointer<QGestureEventType>(param_this, arg0);
    }

    void qt_QGestureEvent_ignore_void_QGestureEvent_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_gestureType)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGestureEvent* arg0 = getqpointer<QGestureEventType>(param_this);
        Qt::GestureType arg1 = (Qt::GestureType)(param_gestureType);
        arg0->ignore(arg1);
        setqpointer<QGestureEventType>(param_this, arg0);
    }

    bool qt_QGestureEvent_isAccepted_bool_QGestureEvent_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_gestureType)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGestureEvent* arg0 = getqpointer<QGestureEventType>(param_this);
        Qt::GestureType arg1 = (Qt::GestureType)(param_gestureType);
        return arg0->isAccepted(arg1);
    }

    Pointer qt_QGestureEvent_mapToGraphicsScene_QPointF_QGestureEvent_QPointF(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_gesturePoint)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGestureEvent* arg0 = getqpointer<QGestureEventType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_gesturePoint);
        return makeqtype<QPointFType>(c, arg0->mapToGraphicsScene(arg1),
                                      "qt.QPointF");
    }

    void qt_QGestureEvent_setAccepted_void_QGestureEvent_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_gestureType,
        bool param_value)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGestureEvent* arg0 = getqpointer<QGestureEventType>(param_this);
        Qt::GestureType arg1 = (Qt::GestureType)(param_gestureType);
        bool arg2 = (bool)(param_value);
        arg0->setAccepted(arg1, arg2);
        setqpointer<QGestureEventType>(param_this, arg0);
    }

    Pointer
    qt_QGestureEvent_widget_QWidget_QGestureEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGestureEvent* arg0 = getqpointer<QGestureEventType>(param_this);
        return makeinstance<QWidgetType>(c, arg0->widget(), "qt.QWidget");
    }

    static NODE_IMPLEMENTATION(_n_accept1, void)
    {
        qt_QGestureEvent_accept_void_QGestureEvent_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_ignore1, void)
    {
        qt_QGestureEvent_ignore_void_QGestureEvent_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_isAccepted1, bool)
    {
        NODE_RETURN(qt_QGestureEvent_isAccepted_bool_QGestureEvent_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_mapToGraphicsScene0, Pointer)
    {
        NODE_RETURN(
            qt_QGestureEvent_mapToGraphicsScene_QPointF_QGestureEvent_QPointF(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setAccepted1, void)
    {
        qt_QGestureEvent_setAccepted_void_QGestureEvent_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_widget0, Pointer)
    {
        NODE_RETURN(qt_QGestureEvent_widget_QWidget_QGestureEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QGestureEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            // MISSING: QGestureEvent (QGestureEvent; QGestureEvent this, "const
            // QList<QGesture * > &" gestures) MISSING: accept (void;
            // QGestureEvent this, "QGesture *" gesture)
            new Function(c, "accept", _n_accept1, None, Compiled,
                         qt_QGestureEvent_accept_void_QGestureEvent_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QGestureEvent"),
                         new Param(c, "gestureType", "int"), End),
            // MISSING: activeGestures ("QList<QGesture * >"; QGestureEvent
            // this) MISSING: canceledGestures ("QList<QGesture * >";
            // QGestureEvent this) MISSING: gesture ("QGesture *"; QGestureEvent
            // this, flags Qt::GestureType type) MISSING: gestures
            // ("QList<QGesture * >"; QGestureEvent this) MISSING: ignore (void;
            // QGestureEvent this, "QGesture *" gesture)
            new Function(c, "ignore", _n_ignore1, None, Compiled,
                         qt_QGestureEvent_ignore_void_QGestureEvent_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QGestureEvent"),
                         new Param(c, "gestureType", "int"), End),
            // MISSING: isAccepted (bool; QGestureEvent this, "QGesture *"
            // gesture)
            new Function(c, "isAccepted", _n_isAccepted1, None, Compiled,
                         qt_QGestureEvent_isAccepted_bool_QGestureEvent_int,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QGestureEvent"),
                         new Param(c, "gestureType", "int"), End),
            new Function(
                c, "mapToGraphicsScene", _n_mapToGraphicsScene0, None, Compiled,
                qt_QGestureEvent_mapToGraphicsScene_QPointF_QGestureEvent_QPointF,
                Return, "qt.QPointF", Parameters,
                new Param(c, "this", "qt.QGestureEvent"),
                new Param(c, "gesturePoint", "qt.QPointF"), End),
            // MISSING: setAccepted (void; QGestureEvent this, "QGesture *"
            // gesture, bool value)
            new Function(
                c, "setAccepted", _n_setAccepted1, None, Compiled,
                qt_QGestureEvent_setAccepted_void_QGestureEvent_int_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGestureEvent"),
                new Param(c, "gestureType", "int"),
                new Param(c, "value", "bool"), End),
            new Function(c, "widget", _n_widget0, None, Compiled,
                         qt_QGestureEvent_widget_QWidget_QGestureEvent, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QGestureEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
