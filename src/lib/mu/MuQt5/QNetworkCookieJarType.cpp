//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QNetworkCookieJarType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QNetworkCookieType.h>
#include <MuQt5/QUrlType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QNetworkCookieJar::~MuQt_QNetworkCookieJar()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QNetworkCookieJar::MuQt_QNetworkCookieJar(Pointer muobj,
                                                   const CallEnvironment* ce,
                                                   QObject* parent)
        : QNetworkCookieJar(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QNetworkCookieJarType>(
            c->internName("qt.QNetworkCookieJar"));
    }

    QList<QNetworkCookie>
    MuQt_QNetworkCookieJar::cookiesForUrl(const QUrl& url) const
    {
        if (!_env)
            return QNetworkCookieJar::cookiesForUrl(url);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QUrlType>(c, url, "qt.QUrl"));
            Value rval = _env->call(F, args);
            return qtypelist<QNetworkCookie, QNetworkCookieType>(rval._Pointer);
        }
        else
        {
            return QNetworkCookieJar::cookiesForUrl(url);
        }
    }

    bool MuQt_QNetworkCookieJar::deleteCookie(const QNetworkCookie& cookie)
    {
        if (!_env)
            return QNetworkCookieJar::deleteCookie(cookie);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqtype<QNetworkCookieType>(c, cookie, "qt.QNetworkCookie"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::deleteCookie(cookie);
        }
    }

    bool MuQt_QNetworkCookieJar::insertCookie(const QNetworkCookie& cookie)
    {
        if (!_env)
            return QNetworkCookieJar::insertCookie(cookie);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqtype<QNetworkCookieType>(c, cookie, "qt.QNetworkCookie"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::insertCookie(cookie);
        }
    }

    bool MuQt_QNetworkCookieJar::setCookiesFromUrl(
        const QList<QNetworkCookie>& cookieList, const QUrl& url)
    {
        if (!_env)
            return QNetworkCookieJar::setCookiesFromUrl(cookieList, url);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtypelist<QNetworkCookie, QNetworkCookieType>(
                c, cookieList, "qt.QNetworkCookie"));
            args[2] = Value(makeqtype<QUrlType>(c, url, "qt.QUrl"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::setCookiesFromUrl(cookieList, url);
        }
    }

    bool MuQt_QNetworkCookieJar::updateCookie(const QNetworkCookie& cookie)
    {
        if (!_env)
            return QNetworkCookieJar::updateCookie(cookie);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqtype<QNetworkCookieType>(c, cookie, "qt.QNetworkCookie"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::updateCookie(cookie);
        }
    }

    bool MuQt_QNetworkCookieJar::validateCookie(const QNetworkCookie& cookie,
                                                const QUrl& url) const
    {
        if (!_env)
            return QNetworkCookieJar::validateCookie(cookie, url);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqtype<QNetworkCookieType>(c, cookie, "qt.QNetworkCookie"));
            args[2] = Value(makeqtype<QUrlType>(c, url, "qt.QUrl"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::validateCookie(cookie, url);
        }
    }

    bool MuQt_QNetworkCookieJar::event(QEvent* e)
    {
        if (!_env)
            return QNetworkCookieJar::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::event(e);
        }
    }

    bool MuQt_QNetworkCookieJar::eventFilter(QObject* watched, QEvent* event)
    {
        if (!_env)
            return QNetworkCookieJar::eventFilter(watched, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QObjectType>(c, watched, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QNetworkCookieJar::eventFilter(watched, event);
        }
    }

    void MuQt_QNetworkCookieJar::customEvent(QEvent* event)
    {
        if (!_env)
        {
            QNetworkCookieJar::customEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QNetworkCookieJar::customEvent(event);
        }
    }

    void MuQt_QNetworkCookieJar::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QNetworkCookieJar::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QNetworkCookieJar::timerEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QNetworkCookieJarType::QNetworkCookieJarType(Context* c, const char* name,
                                                 Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QNetworkCookieJarType::~QNetworkCookieJarType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer
    QNetworkCookieJar_QNetworkCookieJar_QObject(Thread& NODE_THREAD,
                                                Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QNetworkCookieJar* w = object<QNetworkCookieJar>(widget))
        {
            QNetworkCookieJarType* type =
                c->findSymbolOfTypeByQualifiedName<QNetworkCookieJarType>(
                    c->internName("qt.QNetworkCookieJar"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QNetworkCookieJar_QNetworkCookieJar_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer
    qt_QNetworkCookieJar_QNetworkCookieJar_QNetworkCookieJar_QNetworkCookieJar_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QNetworkCookieJar(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QNetworkCookieJar_cookiesForUrl_qt__QNetworkCookieBSB_ESB__QNetworkCookieJar_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_url)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_url);
        return isMuQtObject(arg0)
                   ? makeqtypelist<QNetworkCookie, QNetworkCookieType>(
                         c, arg0->QNetworkCookieJar::cookiesForUrl(arg1),
                         "qt.QNetworkCookie")
                   : makeqtypelist<QNetworkCookie, QNetworkCookieType>(
                         c, arg0->cookiesForUrl(arg1), "qt.QNetworkCookie");
    }

    bool
    qt_QNetworkCookieJar_deleteCookie_bool_QNetworkCookieJar_QNetworkCookie(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cookie)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QNetworkCookie arg1 = getqtype<QNetworkCookieType>(param_cookie);
        return isMuQtObject(arg0) ? arg0->QNetworkCookieJar::deleteCookie(arg1)
                                  : arg0->deleteCookie(arg1);
    }

    bool
    qt_QNetworkCookieJar_insertCookie_bool_QNetworkCookieJar_QNetworkCookie(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cookie)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QNetworkCookie arg1 = getqtype<QNetworkCookieType>(param_cookie);
        return isMuQtObject(arg0) ? arg0->QNetworkCookieJar::insertCookie(arg1)
                                  : arg0->insertCookie(arg1);
    }

    bool
    qt_QNetworkCookieJar_setCookiesFromUrl_bool_QNetworkCookieJar_qt__QNetworkCookieBSB_ESB__QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cookieList,
        Pointer param_url)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QList<QNetworkCookie> arg1 =
            qtypelist<QNetworkCookie, QNetworkCookieType>(param_cookieList);
        const QUrl arg2 = getqtype<QUrlType>(param_url);
        return isMuQtObject(arg0)
                   ? arg0->QNetworkCookieJar::setCookiesFromUrl(arg1, arg2)
                   : arg0->setCookiesFromUrl(arg1, arg2);
    }

    bool
    qt_QNetworkCookieJar_updateCookie_bool_QNetworkCookieJar_QNetworkCookie(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cookie)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QNetworkCookie arg1 = getqtype<QNetworkCookieType>(param_cookie);
        return isMuQtObject(arg0) ? arg0->QNetworkCookieJar::updateCookie(arg1)
                                  : arg0->updateCookie(arg1);
    }

    Pointer
    qt_QNetworkCookieJar_allCookies_qt__QNetworkCookieBSB_ESB__QNetworkCookieJar(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        return makeqtypelist<QNetworkCookie, QNetworkCookieType>(
            c, ((MuQt_QNetworkCookieJar*)arg0)->allCookies_pub(),
            "qt.QNetworkCookie");
    }

    void
    qt_QNetworkCookieJar_setAllCookies_void_QNetworkCookieJar_qt__QNetworkCookieBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cookieList)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QList<QNetworkCookie> arg1 =
            qtypelist<QNetworkCookie, QNetworkCookieType>(param_cookieList);
        ((MuQt_QNetworkCookieJar*)arg0)->setAllCookies_pub(arg1);
    }

    bool
    qt_QNetworkCookieJar_validateCookie_bool_QNetworkCookieJar_QNetworkCookie_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cookie,
        Pointer param_url)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        const QNetworkCookie arg1 = getqtype<QNetworkCookieType>(param_cookie);
        const QUrl arg2 = getqtype<QUrlType>(param_url);
        return isMuQtObject(arg0) ? ((MuQt_QNetworkCookieJar*)arg0)
                                        ->validateCookie_pub_parent(arg1, arg2)
                                  : ((MuQt_QNetworkCookieJar*)arg0)
                                        ->validateCookie_pub(arg1, arg2);
    }

    bool qt_QNetworkCookieJar_event_bool_QNetworkCookieJar_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0) ? arg0->QNetworkCookieJar::event(arg1)
                                  : arg0->event(arg1);
    }

    bool qt_QNetworkCookieJar_eventFilter_bool_QNetworkCookieJar_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? arg0->QNetworkCookieJar::eventFilter(arg1, arg2)
                   : arg0->eventFilter(arg1, arg2);
    }

    void qt_QNetworkCookieJar_customEvent_void_QNetworkCookieJar_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QNetworkCookieJar*)arg0)->customEvent_pub_parent(arg1);
        else
            ((MuQt_QNetworkCookieJar*)arg0)->customEvent_pub(arg1);
    }

    void qt_QNetworkCookieJar_timerEvent_void_QNetworkCookieJar_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QNetworkCookieJar* arg0 = object<QNetworkCookieJar>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QNetworkCookieJar*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QNetworkCookieJar*)arg0)->timerEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QNetworkCookieJar0, Pointer)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_QNetworkCookieJar_QNetworkCookieJar_QNetworkCookieJar_QObject(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cookiesForUrl0, Pointer)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_cookiesForUrl_qt__QNetworkCookieBSB_ESB__QNetworkCookieJar_QUrl(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_deleteCookie0, bool)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_deleteCookie_bool_QNetworkCookieJar_QNetworkCookie(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertCookie0, bool)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_insertCookie_bool_QNetworkCookieJar_QNetworkCookie(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCookiesFromUrl0, bool)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_setCookiesFromUrl_bool_QNetworkCookieJar_qt__QNetworkCookieBSB_ESB__QUrl(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_updateCookie0, bool)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_updateCookie_bool_QNetworkCookieJar_QNetworkCookie(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_allCookies0, Pointer)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_allCookies_qt__QNetworkCookieBSB_ESB__QNetworkCookieJar(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setAllCookies0, void)
    {
        qt_QNetworkCookieJar_setAllCookies_void_QNetworkCookieJar_qt__QNetworkCookieBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_validateCookie0, bool)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_validateCookie_bool_QNetworkCookieJar_QNetworkCookie_QUrl(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QNetworkCookieJar_event_bool_QNetworkCookieJar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(
            qt_QNetworkCookieJar_eventFilter_bool_QNetworkCookieJar_QObject_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_customEvent0, void)
    {
        qt_QNetworkCookieJar_customEvent_void_QNetworkCookieJar_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QNetworkCookieJar_timerEvent_void_QNetworkCookieJar_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QNetworkCookieJarType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QNetworkCookieJar_QNetworkCookieJar_QObject,
                                Return, ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QNetworkCookieJar", _n_QNetworkCookieJar0, None, Compiled,
                qt_QNetworkCookieJar_QNetworkCookieJar_QNetworkCookieJar_QNetworkCookieJar_QObject,
                Return, "qt.QNetworkCookieJar", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "parent", "qt.QObject"), End),
            _func[0] = new MemberFunction(
                c, "cookiesForUrl", _n_cookiesForUrl0, None, Compiled,
                qt_QNetworkCookieJar_cookiesForUrl_qt__QNetworkCookieBSB_ESB__QNetworkCookieJar_QUrl,
                Return, "qt.QNetworkCookie[]", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "url", "qt.QUrl"), End),
            _func[1] = new MemberFunction(
                c, "deleteCookie", _n_deleteCookie0, None, Compiled,
                qt_QNetworkCookieJar_deleteCookie_bool_QNetworkCookieJar_QNetworkCookie,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "cookie", "qt.QNetworkCookie"), End),
            _func[2] = new MemberFunction(
                c, "insertCookie", _n_insertCookie0, None, Compiled,
                qt_QNetworkCookieJar_insertCookie_bool_QNetworkCookieJar_QNetworkCookie,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "cookie", "qt.QNetworkCookie"), End),
            _func[3] = new MemberFunction(
                c, "setCookiesFromUrl", _n_setCookiesFromUrl0, None, Compiled,
                qt_QNetworkCookieJar_setCookiesFromUrl_bool_QNetworkCookieJar_qt__QNetworkCookieBSB_ESB__QUrl,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "cookieList", "qt.QNetworkCookie[]"),
                new Param(c, "url", "qt.QUrl"), End),
            _func[4] = new MemberFunction(
                c, "updateCookie", _n_updateCookie0, None, Compiled,
                qt_QNetworkCookieJar_updateCookie_bool_QNetworkCookieJar_QNetworkCookie,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "cookie", "qt.QNetworkCookie"), End),
            new Function(
                c, "allCookies", _n_allCookies0, None, Compiled,
                qt_QNetworkCookieJar_allCookies_qt__QNetworkCookieBSB_ESB__QNetworkCookieJar,
                Return, "qt.QNetworkCookie[]", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"), End),
            new Function(
                c, "setAllCookies", _n_setAllCookies0, None, Compiled,
                qt_QNetworkCookieJar_setAllCookies_void_QNetworkCookieJar_qt__QNetworkCookieBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "cookieList", "qt.QNetworkCookie[]"), End),
            _func[5] = new MemberFunction(
                c, "validateCookie", _n_validateCookie0, None, Compiled,
                qt_QNetworkCookieJar_validateCookie_bool_QNetworkCookieJar_QNetworkCookie_QUrl,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "cookie", "qt.QNetworkCookie"),
                new Param(c, "url", "qt.QUrl"), End),
            _func[6] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QNetworkCookieJar_event_bool_QNetworkCookieJar_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[7] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QNetworkCookieJar_eventFilter_bool_QNetworkCookieJar_QObject_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QNetworkCookieJar
            // this) MISSING: childEvent (void; QNetworkCookieJar this,
            // "QChildEvent *" event) // protected MISSING: connectNotify (void;
            // QNetworkCookieJar this, "const QMetaMethod &" signal) //
            // protected
            _func[8] = new MemberFunction(
                c, "customEvent", _n_customEvent0, None, Compiled,
                qt_QNetworkCookieJar_customEvent_void_QNetworkCookieJar_QEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: disconnectNotify (void; QNetworkCookieJar this, "const
            // QMetaMethod &" signal) // protected
            _func[9] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QNetworkCookieJar_timerEvent_void_QNetworkCookieJar_QTimerEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QNetworkCookieJar"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QNetworkCookieJar::staticMetaObject, propExclusions);
    }

} // namespace Mu
