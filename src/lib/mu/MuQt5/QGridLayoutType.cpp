//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QGridLayoutType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QLayoutItemType.h>
#include <MuQt5/QLayoutType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QGridLayout::~MuQt_QGridLayout()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QGridLayout::MuQt_QGridLayout(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent)
        : QGridLayout(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QGridLayoutType>(
            c->internName("qt.QGridLayout"));
    }

    MuQt_QGridLayout::MuQt_QGridLayout(Pointer muobj, const CallEnvironment* ce)
        : QGridLayout()
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QGridLayoutType>(
            c->internName("qt.QGridLayout"));
    }

    int MuQt_QGridLayout::count() const
    {
        if (!_env)
            return QGridLayout::count();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QGridLayout::count();
        }
    }

    Qt::Orientations MuQt_QGridLayout::expandingDirections() const
    {
        if (!_env)
            return QGridLayout::expandingDirections();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (Qt::Orientations)(rval._int);
        }
        else
        {
            return QGridLayout::expandingDirections();
        }
    }

    bool MuQt_QGridLayout::hasHeightForWidth() const
    {
        if (!_env)
            return QGridLayout::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QGridLayout::hasHeightForWidth();
        }
    }

    int MuQt_QGridLayout::heightForWidth(int w) const
    {
        if (!_env)
            return QGridLayout::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QGridLayout::heightForWidth(w);
        }
    }

    void MuQt_QGridLayout::invalidate()
    {
        if (!_env)
        {
            QGridLayout::invalidate();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QGridLayout::invalidate();
        }
    }

    QLayoutItem* MuQt_QGridLayout::itemAt(int index) const
    {
        if (!_env)
            return QGridLayout::itemAt(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
            return layoutitem<QLayoutItem>(rval._Pointer);
        }
        else
        {
            return QGridLayout::itemAt(index);
        }
    }

    QSize MuQt_QGridLayout::maximumSize() const
    {
        if (!_env)
            return QGridLayout::maximumSize();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QGridLayout::maximumSize();
        }
    }

    int MuQt_QGridLayout::minimumHeightForWidth(int w) const
    {
        if (!_env)
            return QGridLayout::minimumHeightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QGridLayout::minimumHeightForWidth(w);
        }
    }

    QSize MuQt_QGridLayout::minimumSize() const
    {
        if (!_env)
            return QGridLayout::minimumSize();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QGridLayout::minimumSize();
        }
    }

    void MuQt_QGridLayout::setGeometry(const QRect& rect)
    {
        if (!_env)
        {
            QGridLayout::setGeometry(rect);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QGridLayout::setGeometry(rect);
        }
    }

    QSize MuQt_QGridLayout::sizeHint() const
    {
        if (!_env)
            return QGridLayout::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QGridLayout::sizeHint();
        }
    }

    QLayoutItem* MuQt_QGridLayout::takeAt(int index)
    {
        if (!_env)
            return QGridLayout::takeAt(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
            return layoutitem<QLayoutItem>(rval._Pointer);
        }
        else
        {
            return QGridLayout::takeAt(index);
        }
    }

    void MuQt_QGridLayout::addItem(QLayoutItem* item)
    {
        if (!_env)
        {
            QGridLayout::addItem(item);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makelayoutitem<QLayoutItemType>(c, item, "qt.QLayoutItem"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QGridLayout::addItem(item);
        }
    }

    int MuQt_QGridLayout::indexOf(QWidget* widget) const
    {
        if (!_env)
            return QGridLayout::indexOf(widget);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QWidgetType>(c, widget, "qt.QWidget"));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QGridLayout::indexOf(widget);
        }
    }

    QSizePolicy::ControlTypes MuQt_QGridLayout::controlTypes() const
    {
        if (!_env)
            return QGridLayout::controlTypes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (QSizePolicy::ControlTypes)(rval._int);
        }
        else
        {
            return QGridLayout::controlTypes();
        }
    }

    QRect MuQt_QGridLayout::geometry() const
    {
        if (!_env)
            return QGridLayout::geometry();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QRectType>(rval._Pointer);
        }
        else
        {
            return QGridLayout::geometry();
        }
    }

    bool MuQt_QGridLayout::isEmpty() const
    {
        if (!_env)
            return QGridLayout::isEmpty();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QGridLayout::isEmpty();
        }
    }

    QLayout* MuQt_QGridLayout::layout()
    {
        if (!_env)
            return QGridLayout::layout();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return object<QLayout>(rval._Pointer);
        }
        else
        {
            return QGridLayout::layout();
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QGridLayoutType::QGridLayoutType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QGridLayoutType::~QGridLayoutType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QGridLayout_QGridLayout_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QGridLayout* w = object<QGridLayout>(widget))
        {
            QGridLayoutType* type =
                c->findSymbolOfTypeByQualifiedName<QGridLayoutType>(
                    c->internName("qt.QGridLayout"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QGridLayout_QGridLayout_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QGridLayout_QGridLayout_QGridLayout_QGridLayout_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QGridLayout(param_this,
                                       NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QGridLayout_QGridLayout_QGridLayout_QGridLayout(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setobject(
            param_this,
            new MuQt_QGridLayout(param_this, NODE_THREAD.process()->callEnv()));
        return param_this;
    }

    void
    qt_QGridLayout_addItem_void_QGridLayout_QLayoutItem_int_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_row, int param_column, int param_rowSpan,
        int param_columnSpan, int param_alignment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QLayoutItem* arg1 = layoutitem<QLayoutItem>(param_item);
        int arg2 = (int)(param_row);
        int arg3 = (int)(param_column);
        int arg4 = (int)(param_rowSpan);
        int arg5 = (int)(param_columnSpan);
        Qt::Alignment arg6 = (Qt::Alignment)(param_alignment);
        arg0->addItem(arg1, arg2, arg3, arg4, arg5, arg6);
    }

    void qt_QGridLayout_addLayout_void_QGridLayout_QLayout_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_layout,
        int param_row, int param_column, int param_alignment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QLayout* arg1 = object<QLayout>(param_layout);
        int arg2 = (int)(param_row);
        int arg3 = (int)(param_column);
        Qt::Alignment arg4 = (Qt::Alignment)(param_alignment);
        arg0->addLayout(arg1, arg2, arg3, arg4);
    }

    void qt_QGridLayout_addLayout_void_QGridLayout_QLayout_int_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_layout,
        int param_row, int param_column, int param_rowSpan,
        int param_columnSpan, int param_alignment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QLayout* arg1 = object<QLayout>(param_layout);
        int arg2 = (int)(param_row);
        int arg3 = (int)(param_column);
        int arg4 = (int)(param_rowSpan);
        int arg5 = (int)(param_columnSpan);
        Qt::Alignment arg6 = (Qt::Alignment)(param_alignment);
        arg0->addLayout(arg1, arg2, arg3, arg4, arg5, arg6);
    }

    void qt_QGridLayout_addWidget_void_QGridLayout_QWidget_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget,
        int param_row, int param_column, int param_alignment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        int arg2 = (int)(param_row);
        int arg3 = (int)(param_column);
        Qt::Alignment arg4 = (Qt::Alignment)(param_alignment);
        arg0->addWidget(arg1, arg2, arg3, arg4);
    }

    void qt_QGridLayout_addWidget_void_QGridLayout_QWidget_int_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget,
        int param_fromRow, int param_fromColumn, int param_rowSpan,
        int param_columnSpan, int param_alignment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        int arg2 = (int)(param_fromRow);
        int arg3 = (int)(param_fromColumn);
        int arg4 = (int)(param_rowSpan);
        int arg5 = (int)(param_columnSpan);
        Qt::Alignment arg6 = (Qt::Alignment)(param_alignment);
        arg0->addWidget(arg1, arg2, arg3, arg4, arg5, arg6);
    }

    Pointer qt_QGridLayout_cellRect_QRect_QGridLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        return makeqtype<QRectType>(c, arg0->cellRect(arg1, arg2), "qt.QRect");
    }

    int qt_QGridLayout_columnCount_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return arg0->columnCount();
    }

    int qt_QGridLayout_columnMinimumWidth_int_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_column);
        return arg0->columnMinimumWidth(arg1);
    }

    int qt_QGridLayout_columnStretch_int_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_column);
        return arg0->columnStretch(arg1);
    }

    Pointer qt_QGridLayout_itemAtPosition_QLayoutItem_QGridLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_column);
        return makelayoutitem<QLayoutItemType>(
            c, arg0->itemAtPosition(arg1, arg2), "qt.QLayoutItem");
    }

    int qt_QGridLayout_originCorner_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return int(arg0->originCorner());
    }

    int qt_QGridLayout_rowCount_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return arg0->rowCount();
    }

    int qt_QGridLayout_rowMinimumHeight_int_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_row);
        return arg0->rowMinimumHeight(arg1);
    }

    int qt_QGridLayout_rowStretch_int_QGridLayout_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_row);
        return arg0->rowStretch(arg1);
    }

    void qt_QGridLayout_setColumnMinimumWidth_void_QGridLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        int param_minSize)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_column);
        int arg2 = (int)(param_minSize);
        arg0->setColumnMinimumWidth(arg1, arg2);
    }

    void qt_QGridLayout_setColumnStretch_void_QGridLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        int param_stretch)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_column);
        int arg2 = (int)(param_stretch);
        arg0->setColumnStretch(arg1, arg2);
    }

    void qt_QGridLayout_setOriginCorner_void_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_corner)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        Qt::Corner arg1 = (Qt::Corner)(param_corner);
        arg0->setOriginCorner(arg1);
    }

    void qt_QGridLayout_setRowMinimumHeight_void_QGridLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_minSize)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_minSize);
        arg0->setRowMinimumHeight(arg1, arg2);
    }

    void qt_QGridLayout_setRowStretch_void_QGridLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_stretch)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_row);
        int arg2 = (int)(param_stretch);
        arg0->setRowStretch(arg1, arg2);
    }

    void qt_QGridLayout_setSpacing_void_QGridLayout_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_spacing)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_spacing);
        arg0->setSpacing(arg1);
    }

    int qt_QGridLayout_spacing_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return arg0->spacing();
    }

    int qt_QGridLayout_count_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0) ? arg0->QGridLayout::count() : arg0->count();
    }

    int
    qt_QGridLayout_expandingDirections_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0)
                   ? int(arg0->QGridLayout::expandingDirections())
                   : int(arg0->expandingDirections());
    }

    bool
    qt_QGridLayout_hasHeightForWidth_bool_QGridLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0) ? arg0->QGridLayout::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QGridLayout_heightForWidth_int_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QGridLayout::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    void qt_QGridLayout_invalidate_void_QGridLayout(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        if (isMuQtObject(arg0))
            arg0->QGridLayout::invalidate();
        else
            arg0->invalidate();
    }

    Pointer qt_QGridLayout_itemAt_QLayoutItem_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_index);
        return isMuQtObject(arg0)
                   ? makelayoutitem<QLayoutItemType>(
                         c, arg0->QGridLayout::itemAt(arg1), "qt.QLayoutItem")
                   : makelayoutitem<QLayoutItemType>(c, arg0->itemAt(arg1),
                                                     "qt.QLayoutItem");
    }

    Pointer
    qt_QGridLayout_maximumSize_QSize_QGridLayout(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QGridLayout::maximumSize(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->maximumSize(), "qt.QSize");
    }

    int qt_QGridLayout_minimumHeightForWidth_int_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0)
                   ? arg0->QGridLayout::minimumHeightForWidth(arg1)
                   : arg0->minimumHeightForWidth(arg1);
    }

    Pointer
    qt_QGridLayout_minimumSize_QSize_QGridLayout(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QGridLayout::minimumSize(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSize(), "qt.QSize");
    }

    void qt_QGridLayout_setGeometry_void_QGridLayout_QRect(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        if (isMuQtObject(arg0))
            arg0->QGridLayout::setGeometry(arg1);
        else
            arg0->setGeometry(arg1);
    }

    Pointer qt_QGridLayout_sizeHint_QSize_QGridLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QGridLayout::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    Pointer qt_QGridLayout_takeAt_QLayoutItem_QGridLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        int arg1 = (int)(param_index);
        return isMuQtObject(arg0)
                   ? makelayoutitem<QLayoutItemType>(
                         c, arg0->QGridLayout::takeAt(arg1), "qt.QLayoutItem")
                   : makelayoutitem<QLayoutItemType>(c, arg0->takeAt(arg1),
                                                     "qt.QLayoutItem");
    }

    void qt_QGridLayout_addItem_void_QGridLayout_QLayoutItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QLayoutItem* arg1 = layoutitem<QLayoutItem>(param_item);
        if (isMuQtObject(arg0))
            ((MuQt_QGridLayout*)arg0)->addItem_pub_parent(arg1);
        else
            ((MuQt_QGridLayout*)arg0)->addItem_pub(arg1);
    }

    int qt_QGridLayout_indexOf_int_QGridLayout_QWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        return isMuQtObject(arg0) ? arg0->QGridLayout::indexOf(arg1)
                                  : arg0->indexOf(arg1);
    }

    int qt_QGridLayout_controlTypes_int_QGridLayout(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0) ? int(arg0->QGridLayout::controlTypes())
                                  : int(arg0->controlTypes());
    }

    Pointer qt_QGridLayout_geometry_QRect_QGridLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QRectType>(c, arg0->QGridLayout::geometry(),
                                          "qt.QRect")
                   : makeqtype<QRectType>(c, arg0->geometry(), "qt.QRect");
    }

    bool qt_QGridLayout_isEmpty_bool_QGridLayout(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0) ? arg0->QGridLayout::isEmpty()
                                  : arg0->isEmpty();
    }

    Pointer qt_QGridLayout_layout_QLayout_QGridLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QGridLayout* arg0 = object<QGridLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeinstance<QLayoutType>(c, arg0->QGridLayout::layout(),
                                               "qt.QLayout")
                   : makeinstance<QLayoutType>(c, arg0->layout(), "qt.QLayout");
    }

    static NODE_IMPLEMENTATION(_n_QGridLayout0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_QGridLayout_QGridLayout_QGridLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QGridLayout1, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_QGridLayout_QGridLayout_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addItem0, void)
    {
        qt_QGridLayout_addItem_void_QGridLayout_QLayoutItem_int_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int),
            NODE_ARG(5, int), NODE_ARG(6, int));
    }

    static NODE_IMPLEMENTATION(_n_addLayout0, void)
    {
        qt_QGridLayout_addLayout_void_QGridLayout_QLayout_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_addLayout1, void)
    {
        qt_QGridLayout_addLayout_void_QGridLayout_QLayout_int_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int),
            NODE_ARG(5, int), NODE_ARG(6, int));
    }

    static NODE_IMPLEMENTATION(_n_addWidget0, void)
    {
        qt_QGridLayout_addWidget_void_QGridLayout_QWidget_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_addWidget1, void)
    {
        qt_QGridLayout_addWidget_void_QGridLayout_QWidget_int_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int),
            NODE_ARG(5, int), NODE_ARG(6, int));
    }

    static NODE_IMPLEMENTATION(_n_cellRect0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_cellRect_QRect_QGridLayout_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_columnCount0, int)
    {
        NODE_RETURN(qt_QGridLayout_columnCount_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_columnMinimumWidth0, int)
    {
        NODE_RETURN(qt_QGridLayout_columnMinimumWidth_int_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_columnStretch0, int)
    {
        NODE_RETURN(qt_QGridLayout_columnStretch_int_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemAtPosition0, Pointer)
    {
        NODE_RETURN(
            qt_QGridLayout_itemAtPosition_QLayoutItem_QGridLayout_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_originCorner0, int)
    {
        NODE_RETURN(qt_QGridLayout_originCorner_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rowCount0, int)
    {
        NODE_RETURN(qt_QGridLayout_rowCount_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rowMinimumHeight0, int)
    {
        NODE_RETURN(qt_QGridLayout_rowMinimumHeight_int_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_rowStretch0, int)
    {
        NODE_RETURN(qt_QGridLayout_rowStretch_int_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_setColumnMinimumWidth0, void)
    {
        qt_QGridLayout_setColumnMinimumWidth_void_QGridLayout_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setColumnStretch0, void)
    {
        qt_QGridLayout_setColumnStretch_void_QGridLayout_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setOriginCorner0, void)
    {
        qt_QGridLayout_setOriginCorner_void_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setRowMinimumHeight0, void)
    {
        qt_QGridLayout_setRowMinimumHeight_void_QGridLayout_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setRowStretch0, void)
    {
        qt_QGridLayout_setRowStretch_void_QGridLayout_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setSpacing0, void)
    {
        qt_QGridLayout_setSpacing_void_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_spacing0, int)
    {
        NODE_RETURN(qt_QGridLayout_spacing_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_count0, int)
    {
        NODE_RETURN(qt_QGridLayout_count_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_expandingDirections0, int)
    {
        NODE_RETURN(qt_QGridLayout_expandingDirections_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QGridLayout_hasHeightForWidth_bool_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QGridLayout_heightForWidth_int_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_invalidate0, void)
    {
        qt_QGridLayout_invalidate_void_QGridLayout(NODE_THREAD,
                                                   NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_itemAt0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_itemAt_QLayoutItem_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_maximumSize0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_maximumSize_QSize_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_minimumHeightForWidth0, int)
    {
        NODE_RETURN(qt_QGridLayout_minimumHeightForWidth_int_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSize0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_minimumSize_QSize_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setGeometry0, void)
    {
        qt_QGridLayout_setGeometry_void_QGridLayout_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_sizeHint_QSize_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_takeAt0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_takeAt_QLayoutItem_QGridLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_addItem1, void)
    {
        qt_QGridLayout_addItem_void_QGridLayout_QLayoutItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_indexOf0, int)
    {
        NODE_RETURN(qt_QGridLayout_indexOf_int_QGridLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_controlTypes0, int)
    {
        NODE_RETURN(qt_QGridLayout_controlTypes_int_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_geometry0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_geometry_QRect_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
    {
        NODE_RETURN(qt_QGridLayout_isEmpty_bool_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_layout0, Pointer)
    {
        NODE_RETURN(qt_QGridLayout_layout_QLayout_QGridLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QGridLayoutType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QGridLayout_QGridLayout_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QGridLayout", _n_QGridLayout0, None, Compiled,
                qt_QGridLayout_QGridLayout_QGridLayout_QGridLayout_QWidget,
                Return, "qt.QGridLayout", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "QGridLayout", _n_QGridLayout1, None, Compiled,
                         qt_QGridLayout_QGridLayout_QGridLayout_QGridLayout,
                         Return, "qt.QGridLayout", Parameters,
                         new Param(c, "this", "qt.QGridLayout"), End),
            new Function(
                c, "addItem", _n_addItem0, None, Compiled,
                qt_QGridLayout_addItem_void_QGridLayout_QLayoutItem_int_int_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "item", "qt.QLayoutItem"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "rowSpan", "int", Value((int)1)),
                new Param(c, "columnSpan", "int", Value((int)1)),
                new Param(c, "alignment", "int", Value((int)Qt::Alignment())),
                End),
            new Function(
                c, "addLayout", _n_addLayout0, None, Compiled,
                qt_QGridLayout_addLayout_void_QGridLayout_QLayout_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "layout", "qt.QLayout"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "alignment", "int", Value((int)Qt::Alignment())),
                End),
            new Function(
                c, "addLayout", _n_addLayout1, None, Compiled,
                qt_QGridLayout_addLayout_void_QGridLayout_QLayout_int_int_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "layout", "qt.QLayout"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "rowSpan", "int"),
                new Param(c, "columnSpan", "int"),
                new Param(c, "alignment", "int", Value((int)Qt::Alignment())),
                End),
            new Function(
                c, "addWidget", _n_addWidget0, None, Compiled,
                qt_QGridLayout_addWidget_void_QGridLayout_QWidget_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "widget", "qt.QWidget"),
                new Param(c, "row", "int"), new Param(c, "column", "int"),
                new Param(c, "alignment", "int", Value((int)Qt::Alignment())),
                End),
            new Function(
                c, "addWidget", _n_addWidget1, None, Compiled,
                qt_QGridLayout_addWidget_void_QGridLayout_QWidget_int_int_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "widget", "qt.QWidget"),
                new Param(c, "fromRow", "int"),
                new Param(c, "fromColumn", "int"),
                new Param(c, "rowSpan", "int"),
                new Param(c, "columnSpan", "int"),
                new Param(c, "alignment", "int", Value((int)Qt::Alignment())),
                End),
            new Function(
                c, "cellRect", _n_cellRect0, None, Compiled,
                qt_QGridLayout_cellRect_QRect_QGridLayout_int_int, Return,
                "qt.QRect", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(c, "columnCount", _n_columnCount0, None, Compiled,
                         qt_QGridLayout_columnCount_int_QGridLayout, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QGridLayout"), End),
            new Function(
                c, "columnMinimumWidth", _n_columnMinimumWidth0, None, Compiled,
                qt_QGridLayout_columnMinimumWidth_int_QGridLayout_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "column", "int"), End),
            new Function(c, "columnStretch", _n_columnStretch0, None, Compiled,
                         qt_QGridLayout_columnStretch_int_QGridLayout_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QGridLayout"),
                         new Param(c, "column", "int"), End),
            // MISSING: getItemPosition (void; QGridLayout this, int index, "int
            // *" row, "int *" column, "int *" rowSpan, "int *" columnSpan)
            // PROP: horizontalSpacing (int; QGridLayout this)
            new Function(
                c, "itemAtPosition", _n_itemAtPosition0, None, Compiled,
                qt_QGridLayout_itemAtPosition_QLayoutItem_QGridLayout_int_int,
                Return, "qt.QLayoutItem", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "row", "int"), new Param(c, "column", "int"), End),
            new Function(c, "originCorner", _n_originCorner0, None, Compiled,
                         qt_QGridLayout_originCorner_int_QGridLayout, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QGridLayout"), End),
            new Function(c, "rowCount", _n_rowCount0, None, Compiled,
                         qt_QGridLayout_rowCount_int_QGridLayout, Return, "int",
                         Parameters, new Param(c, "this", "qt.QGridLayout"),
                         End),
            new Function(
                c, "rowMinimumHeight", _n_rowMinimumHeight0, None, Compiled,
                qt_QGridLayout_rowMinimumHeight_int_QGridLayout_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "row", "int"), End),
            new Function(c, "rowStretch", _n_rowStretch0, None, Compiled,
                         qt_QGridLayout_rowStretch_int_QGridLayout_int, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QGridLayout"),
                         new Param(c, "row", "int"), End),
            new Function(
                c, "setColumnMinimumWidth", _n_setColumnMinimumWidth0, None,
                Compiled,
                qt_QGridLayout_setColumnMinimumWidth_void_QGridLayout_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "column", "int"), new Param(c, "minSize", "int"),
                End),
            new Function(
                c, "setColumnStretch", _n_setColumnStretch0, None, Compiled,
                qt_QGridLayout_setColumnStretch_void_QGridLayout_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "column", "int"), new Param(c, "stretch", "int"),
                End),
            // PROP: setHorizontalSpacing (void; QGridLayout this, int spacing)
            new Function(
                c, "setOriginCorner", _n_setOriginCorner0, None, Compiled,
                qt_QGridLayout_setOriginCorner_void_QGridLayout_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "corner", "int"), End),
            new Function(
                c, "setRowMinimumHeight", _n_setRowMinimumHeight0, None,
                Compiled,
                qt_QGridLayout_setRowMinimumHeight_void_QGridLayout_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "row", "int"), new Param(c, "minSize", "int"),
                End),
            new Function(c, "setRowStretch", _n_setRowStretch0, None, Compiled,
                         qt_QGridLayout_setRowStretch_void_QGridLayout_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QGridLayout"),
                         new Param(c, "row", "int"),
                         new Param(c, "stretch", "int"), End),
            new Function(c, "setSpacing", _n_setSpacing0, None, Compiled,
                         qt_QGridLayout_setSpacing_void_QGridLayout_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QGridLayout"),
                         new Param(c, "spacing", "int"), End),
            // PROP: setVerticalSpacing (void; QGridLayout this, int spacing)
            new Function(c, "spacing", _n_spacing0, None, Compiled,
                         qt_QGridLayout_spacing_int_QGridLayout, Return, "int",
                         Parameters, new Param(c, "this", "qt.QGridLayout"),
                         End),
            // PROP: verticalSpacing (int; QGridLayout this)
            _func[0] = new MemberFunction(
                c, "count", _n_count0, None, Compiled,
                qt_QGridLayout_count_int_QGridLayout, Return, "int", Parameters,
                new Param(c, "this", "qt.QGridLayout"), End),
            _func[1] = new MemberFunction(
                c, "expandingDirections", _n_expandingDirections0, None,
                Compiled, qt_QGridLayout_expandingDirections_int_QGridLayout,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QGridLayout"), End),
            _func[2] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QGridLayout_hasHeightForWidth_bool_QGridLayout, Return,
                "bool", Parameters, new Param(c, "this", "qt.QGridLayout"),
                End),
            _func[3] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QGridLayout_heightForWidth_int_QGridLayout_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "w", "int"), End),
            _func[4] = new MemberFunction(
                c, "invalidate", _n_invalidate0, None, Compiled,
                qt_QGridLayout_invalidate_void_QGridLayout, Return, "void",
                Parameters, new Param(c, "this", "qt.QGridLayout"), End),
            _func[5] = new MemberFunction(
                c, "itemAt", _n_itemAt0, None, Compiled,
                qt_QGridLayout_itemAt_QLayoutItem_QGridLayout_int, Return,
                "qt.QLayoutItem", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "index", "int"), End),
            _func[6] = new MemberFunction(
                c, "maximumSize", _n_maximumSize0, None, Compiled,
                qt_QGridLayout_maximumSize_QSize_QGridLayout, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QGridLayout"),
                End),
            _func[7] = new MemberFunction(
                c, "minimumHeightForWidth", _n_minimumHeightForWidth0, None,
                Compiled,
                qt_QGridLayout_minimumHeightForWidth_int_QGridLayout_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "w", "int"), End),
            _func[8] = new MemberFunction(
                c, "minimumSize", _n_minimumSize0, None, Compiled,
                qt_QGridLayout_minimumSize_QSize_QGridLayout, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QGridLayout"),
                End),
            _func[9] = new MemberFunction(
                c, "setGeometry", _n_setGeometry0, None, Compiled,
                qt_QGridLayout_setGeometry_void_QGridLayout_QRect, Return,
                "void", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "rect", "qt.QRect"), End),
            _func[10] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QGridLayout_sizeHint_QSize_QGridLayout, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QGridLayout"), End),
            _func[11] = new MemberFunction(
                c, "takeAt", _n_takeAt0, None, Compiled,
                qt_QGridLayout_takeAt_QLayoutItem_QGridLayout_int, Return,
                "qt.QLayoutItem", Parameters,
                new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "index", "int"), End),
            _func[12] = new MemberFunction(
                c, "addItem", _n_addItem1, None, Compiled,
                qt_QGridLayout_addItem_void_QGridLayout_QLayoutItem, Return,
                "void", Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "item", "qt.QLayoutItem"), End),
            _func[13] = new MemberFunction(
                c, "indexOf", _n_indexOf0, None, Compiled,
                qt_QGridLayout_indexOf_int_QGridLayout_QWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QGridLayout"),
                new Param(c, "widget", "qt.QWidget"), End),
            _func[14] = new MemberFunction(
                c, "controlTypes", _n_controlTypes0, None, Compiled,
                qt_QGridLayout_controlTypes_int_QGridLayout, Return, "int",
                Parameters, new Param(c, "this", "qt.QGridLayout"), End),
            _func[15] = new MemberFunction(
                c, "geometry", _n_geometry0, None, Compiled,
                qt_QGridLayout_geometry_QRect_QGridLayout, Return, "qt.QRect",
                Parameters, new Param(c, "this", "qt.QGridLayout"), End),
            _func[16] = new MemberFunction(
                c, "isEmpty", _n_isEmpty0, None, Compiled,
                qt_QGridLayout_isEmpty_bool_QGridLayout, Return, "bool",
                Parameters, new Param(c, "this", "qt.QGridLayout"), End),
            _func[17] = new MemberFunction(
                c, "layout", _n_layout0, None, Compiled,
                qt_QGridLayout_layout_QLayout_QGridLayout, Return, "qt.QLayout",
                Parameters, new Param(c, "this", "qt.QGridLayout"), End),
            // MISSING: childEvent (void; QGridLayout this, "QChildEvent *" e)
            // // protected static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QGridLayout::staticMetaObject, propExclusions);
    }

} // namespace Mu
