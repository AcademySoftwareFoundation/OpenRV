//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QHostInfoType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QHostInfoType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QHostInfoType::QHostInfoType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QHostInfoType::~QHostInfoType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QHostInfoType::Instance* i =
            new QHostInfoType::Instance((Class*)NODE_THIS.type());
        QHostInfoType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QHostInfoType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QHostInfoType::finalizer, 0, 0, 0);
    }

    void QHostInfoType::finalizer(void* obj, void* data)
    {
        QHostInfoType::Instance* i =
            reinterpret_cast<QHostInfoType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QHostInfo_QHostInfo_QHostInfo_QHostInfo_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_id)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg1 = (int)(param_id);
        setqtype<QHostInfoType>(param_this, QHostInfo(arg1));
        return param_this;
    }

    int qt_QHostInfo_error_int_QHostInfo(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        return int(arg0.error());
    }

    Pointer qt_QHostInfo_errorString_string_QHostInfo(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        return makestring(c, arg0.errorString());
    }

    Pointer qt_QHostInfo_hostName_string_QHostInfo(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        return makestring(c, arg0.hostName());
    }

    int qt_QHostInfo_lookupId_int_QHostInfo(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        return arg0.lookupId();
    }

    void qt_QHostInfo_setError_void_QHostInfo_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_error)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        QHostInfo::HostInfoError arg1 = (QHostInfo::HostInfoError)(param_error);
        arg0.setError(arg1);
        setqtype<QHostInfoType>(param_this, arg0);
    }

    void qt_QHostInfo_setErrorString_void_QHostInfo_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        const QString arg1 = qstring(param_str);
        arg0.setErrorString(arg1);
        setqtype<QHostInfoType>(param_this, arg0);
    }

    void qt_QHostInfo_setHostName_void_QHostInfo_string(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_hostName)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        const QString arg1 = qstring(param_hostName);
        arg0.setHostName(arg1);
        setqtype<QHostInfoType>(param_this, arg0);
    }

    void qt_QHostInfo_setLookupId_void_QHostInfo_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_id)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHostInfo arg0 = getqtype<QHostInfoType>(param_this);
        int arg1 = (int)(param_id);
        arg0.setLookupId(arg1);
        setqtype<QHostInfoType>(param_this, arg0);
    }

    void qt_QHostInfo_abortHostLookup_void_int(Mu::Thread& NODE_THREAD,
                                               int param_id)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg0 = (int)(param_id);
        QHostInfo::abortHostLookup(arg0);
    }

    Pointer qt_QHostInfo_fromName_QHostInfo_string(Mu::Thread& NODE_THREAD,
                                                   Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_name);
        return makeqtype<QHostInfoType>(c, QHostInfo::fromName(arg0),
                                        "qt.QHostInfo");
    }

    Pointer qt_QHostInfo_localDomainName_string(Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makestring(c, QHostInfo::localDomainName());
    }

    Pointer qt_QHostInfo_localHostName_string(Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makestring(c, QHostInfo::localHostName());
    }

    static NODE_IMPLEMENTATION(_n_QHostInfo0, Pointer)
    {
        NODE_RETURN(qt_QHostInfo_QHostInfo_QHostInfo_QHostInfo_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_error0, int)
    {
        NODE_RETURN(qt_QHostInfo_error_int_QHostInfo(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_errorString0, Pointer)
    {
        NODE_RETURN(qt_QHostInfo_errorString_string_QHostInfo(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hostName0, Pointer)
    {
        NODE_RETURN(qt_QHostInfo_hostName_string_QHostInfo(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_lookupId0, int)
    {
        NODE_RETURN(qt_QHostInfo_lookupId_int_QHostInfo(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setError0, void)
    {
        qt_QHostInfo_setError_void_QHostInfo_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setErrorString0, void)
    {
        qt_QHostInfo_setErrorString_void_QHostInfo_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setHostName0, void)
    {
        qt_QHostInfo_setHostName_void_QHostInfo_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setLookupId0, void)
    {
        qt_QHostInfo_setLookupId_void_QHostInfo_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_abortHostLookup0, void)
    {
        qt_QHostInfo_abortHostLookup_void_int(NODE_THREAD, NODE_ARG(0, int));
    }

    static NODE_IMPLEMENTATION(_n_fromName0, Pointer)
    {
        NODE_RETURN(qt_QHostInfo_fromName_QHostInfo_string(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_localDomainName0, Pointer)
    {
        NODE_RETURN(qt_QHostInfo_localDomainName_string(NODE_THREAD));
    }

    static NODE_IMPLEMENTATION(_n_localHostName0, Pointer)
    {
        NODE_RETURN(qt_QHostInfo_localHostName_string(NODE_THREAD));
    }

    void QHostInfoType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(new Alias(c, "HostInfoError", "int"),
                   new SymbolicConstant(c, "NoError", "int",
                                        Value(int(QHostInfo::NoError))),
                   new SymbolicConstant(c, "HostNotFound", "int",
                                        Value(int(QHostInfo::HostNotFound))),
                   new SymbolicConstant(c, "UnknownError", "int",
                                        Value(int(QHostInfo::UnknownError))),
                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QHostInfo", _n_QHostInfo0, None, Compiled,
                         qt_QHostInfo_QHostInfo_QHostInfo_QHostInfo_int, Return,
                         "qt.QHostInfo", Parameters,
                         new Param(c, "this", "qt.QHostInfo"),
                         new Param(c, "id", "int", Value((int)-1)), End),
            // MISSING: QHostInfo (QHostInfo; QHostInfo this, QHostInfo other)
            // MISSING: addresses ("QList<QHostAddress>"; QHostInfo this)
            new Function(c, "error", _n_error0, None, Compiled,
                         qt_QHostInfo_error_int_QHostInfo, Return, "int",
                         Parameters, new Param(c, "this", "qt.QHostInfo"), End),
            new Function(c, "errorString", _n_errorString0, None, Compiled,
                         qt_QHostInfo_errorString_string_QHostInfo, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QHostInfo"), End),
            new Function(c, "hostName", _n_hostName0, None, Compiled,
                         qt_QHostInfo_hostName_string_QHostInfo, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QHostInfo"), End),
            new Function(c, "lookupId", _n_lookupId0, None, Compiled,
                         qt_QHostInfo_lookupId_int_QHostInfo, Return, "int",
                         Parameters, new Param(c, "this", "qt.QHostInfo"), End),
            // MISSING: setAddresses (void; QHostInfo this, "const
            // QList<QHostAddress> &" addresses)
            new Function(c, "setError", _n_setError0, None, Compiled,
                         qt_QHostInfo_setError_void_QHostInfo_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QHostInfo"),
                         new Param(c, "error", "int"), End),
            new Function(
                c, "setErrorString", _n_setErrorString0, None, Compiled,
                qt_QHostInfo_setErrorString_void_QHostInfo_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QHostInfo"),
                new Param(c, "str", "string"), End),
            new Function(c, "setHostName", _n_setHostName0, None, Compiled,
                         qt_QHostInfo_setHostName_void_QHostInfo_string, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QHostInfo"),
                         new Param(c, "hostName", "string"), End),
            new Function(c, "setLookupId", _n_setLookupId0, None, Compiled,
                         qt_QHostInfo_setLookupId_void_QHostInfo_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QHostInfo"),
                         new Param(c, "id", "int"), End),
            // static functions
            new Function(c, "abortHostLookup", _n_abortHostLookup0, None,
                         Compiled, qt_QHostInfo_abortHostLookup_void_int,
                         Return, "void", Parameters, new Param(c, "id", "int"),
                         End),
            new Function(c, "fromName", _n_fromName0, None, Compiled,
                         qt_QHostInfo_fromName_QHostInfo_string, Return,
                         "qt.QHostInfo", Parameters,
                         new Param(c, "name", "string"), End),
            new Function(c, "localDomainName", _n_localDomainName0, None,
                         Compiled, qt_QHostInfo_localDomainName_string, Return,
                         "string", End),
            new Function(c, "localHostName", _n_localHostName0, None, Compiled,
                         qt_QHostInfo_localHostName_string, Return, "string",
                         End),
            // MISSING: lookupHost (int; string name, QObject receiver, "const
            // char *" member)
            EndArguments);
        globalScope()->addSymbols(
            // MISSING: = (QHostInfo; QHostInfo this, QHostInfo other)
            EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
