//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QtColorTriangleType.h>
#include <QtGui/QtGui>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <qtcolortriangle/qtcolortriangle.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QtColorTriangleType::QtColorTriangleType(Context* c, const char* name,
                                             Class* super)
        : Class(c, name, super)
    {
    }

    QtColorTriangleType::~QtColorTriangleType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QtColorTriangle_QtColorTriangle_QObject(Thread& NODE_THREAD,
                                                           Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (QtColorTriangle* w = object<QtColorTriangle>(widget))
        {
            QtColorTriangleType* type =
                c->findSymbolOfTypeByQualifiedName<QtColorTriangleType>(
                    c->internName("qt.QtColorTriangle"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QtColorTriangle_QtColorTriangle_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer QtColorTriangle_QtColorTriangle_QtColorTriangle_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this, new QtColorTriangle(arg1));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QtColorTriangle0, Pointer)
    {
        NODE_RETURN(QtColorTriangle_QtColorTriangle_QtColorTriangle_QWidget(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QtColorTriangleType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QtColorTriangle_QtColorTriangle_QObject, Return,
                                ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(new Function(
                       c, "QtColorTriangle", _n_QtColorTriangle0, None,
                       Compiled,
                       QtColorTriangle_QtColorTriangle_QtColorTriangle_QWidget,
                       Return, "qt.QtColorTriangle", Parameters,
                       new Param(c, "this", "qt.QtColorTriangle"),
                       new Param(c, "parent", "qt.QWidget"), End),

#if 0
               new Function(c, "color", _n_color, None,
                            Compiled, QtColorTriangle_color_QtColorTriangle,
                            Return, "qt.QColor",
                            Parameters,
                            new Parameters
#endif

                   EndArguments);

        populate(this, QtColorTriangle::staticMetaObject);
    }

} // namespace Mu
