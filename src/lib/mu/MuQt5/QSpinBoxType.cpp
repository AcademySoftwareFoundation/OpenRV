//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QSpinBoxType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QHideEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QPaintEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QSpinBox::~MuQt_QSpinBox()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QSpinBox::MuQt_QSpinBox(Pointer muobj, const CallEnvironment* ce,
                                 QWidget* parent)
        : QSpinBox(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QSpinBoxType>(
            c->internName("qt.QSpinBox"));
    }

    QString MuQt_QSpinBox::textFromValue(int value) const
    {
        if (!_env)
            return QSpinBox::textFromValue(value);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(value);
            Value rval = _env->call(F, args);
            return qstring(rval._Pointer);
        }
        else
        {
            return QSpinBox::textFromValue(value);
        }
    }

    int MuQt_QSpinBox::valueFromText(const QString& text) const
    {
        if (!_env)
            return QSpinBox::valueFromText(text);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makestring(c, text));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QSpinBox::valueFromText(text);
        }
    }

    bool MuQt_QSpinBox::event(QEvent* event_)
    {
        if (!_env)
            return QSpinBox::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QSpinBox::event(event_);
        }
    }

    void MuQt_QSpinBox::stepBy(int steps)
    {
        if (!_env)
        {
            QSpinBox::stepBy(steps);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(steps);
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::stepBy(steps);
        }
    }

    QVariant MuQt_QSpinBox::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QSpinBox::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QSpinBox::inputMethodQuery(query);
        }
    }

    QSize MuQt_QSpinBox::minimumSizeHint() const
    {
        if (!_env)
            return QSpinBox::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QSpinBox::minimumSizeHint();
        }
    }

    QSize MuQt_QSpinBox::sizeHint() const
    {
        if (!_env)
            return QSpinBox::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QSpinBox::sizeHint();
        }
    }

    void MuQt_QSpinBox::changeEvent(QEvent* event)
    {
        if (!_env)
        {
            QSpinBox::changeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::changeEvent(event);
        }
    }

    void MuQt_QSpinBox::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QSpinBox::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::closeEvent(event);
        }
    }

    void MuQt_QSpinBox::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QSpinBox::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::contextMenuEvent(event);
        }
    }

    void MuQt_QSpinBox::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QSpinBox::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::focusInEvent(event);
        }
    }

    void MuQt_QSpinBox::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QSpinBox::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::focusOutEvent(event);
        }
    }

    void MuQt_QSpinBox::hideEvent(QHideEvent* event)
    {
        if (!_env)
        {
            QSpinBox::hideEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, event, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::hideEvent(event);
        }
    }

    void MuQt_QSpinBox::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QSpinBox::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::keyPressEvent(event);
        }
    }

    void MuQt_QSpinBox::keyReleaseEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QSpinBox::keyReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::keyReleaseEvent(event);
        }
    }

    void MuQt_QSpinBox::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QSpinBox::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::mouseMoveEvent(event);
        }
    }

    void MuQt_QSpinBox::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QSpinBox::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::mousePressEvent(event);
        }
    }

    void MuQt_QSpinBox::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QSpinBox::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::mouseReleaseEvent(event);
        }
    }

    void MuQt_QSpinBox::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QSpinBox::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::paintEvent(event);
        }
    }

    void MuQt_QSpinBox::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QSpinBox::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::resizeEvent(event);
        }
    }

    void MuQt_QSpinBox::showEvent(QShowEvent* event)
    {
        if (!_env)
        {
            QSpinBox::showEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, event, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::showEvent(event);
        }
    }

    void MuQt_QSpinBox::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QSpinBox::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::timerEvent(event);
        }
    }

    void MuQt_QSpinBox::wheelEvent(QWheelEvent* event)
    {
        if (!_env)
        {
            QSpinBox::wheelEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QWheelEventType>(c, event, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSpinBox::wheelEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QSpinBoxType::QSpinBoxType(Context* c, const char* name, Class* super,
                               Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QSpinBoxType::~QSpinBoxType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QSpinBox_QSpinBox_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QSpinBox* w = object<QSpinBox>(widget))
        {
            QSpinBoxType* type =
                c->findSymbolOfTypeByQualifiedName<QSpinBoxType>(
                    c->internName("qt.QSpinBox"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QSpinBox_QSpinBox_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QSpinBox_QSpinBox_QSpinBox_QSpinBox_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QSpinBox(param_this,
                                    NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QSpinBox_setRange_void_QSpinBox_int_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_minimum,
                                                    int param_maximum)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        int arg1 = (int)(param_minimum);
        int arg2 = (int)(param_maximum);
        arg0->setRange(arg1, arg2);
    }

    Pointer qt_QSpinBox_textFromValue_string_QSpinBox_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_value)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        int arg1 = (int)(param_value);
        return isMuQtObject(arg0)
                   ? makestring(
                         c,
                         ((MuQt_QSpinBox*)arg0)->textFromValue_pub_parent(arg1))
                   : makestring(
                         c, ((MuQt_QSpinBox*)arg0)->textFromValue_pub(arg1));
    }

    int qt_QSpinBox_valueFromText_int_QSpinBox_string(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        const QString arg1 = qstring(param_text);
        return isMuQtObject(arg0)
                   ? ((MuQt_QSpinBox*)arg0)->valueFromText_pub_parent(arg1)
                   : ((MuQt_QSpinBox*)arg0)->valueFromText_pub(arg1);
    }

    bool qt_QSpinBox_event_bool_QSpinBox_QEvent(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QSpinBox*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QSpinBox*)arg0)->event_pub(arg1);
    }

    void qt_QSpinBox_stepBy_void_QSpinBox_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              int param_steps)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        int arg1 = (int)(param_steps);
        if (isMuQtObject(arg0))
            arg0->QSpinBox::stepBy(arg1);
        else
            arg0->stepBy(arg1);
    }

    Pointer qt_QSpinBox_inputMethodQuery_QVariant_QSpinBox_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QSpinBox::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer qt_QSpinBox_minimumSizeHint_QSize_QSpinBox(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QSpinBox::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QSpinBox_sizeHint_QSize_QSpinBox(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QSpinBox::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QSpinBox_changeEvent_void_QSpinBox_QEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QSpinBox_closeEvent_void_QSpinBox_QCloseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QSpinBox_contextMenuEvent_void_QSpinBox_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QSpinBox_focusInEvent_void_QSpinBox_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->focusInEvent_pub(arg1);
    }

    void qt_QSpinBox_focusOutEvent_void_QSpinBox_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QSpinBox_hideEvent_void_QSpinBox_QHideEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QSpinBox_keyPressEvent_void_QSpinBox_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QSpinBox_keyReleaseEvent_void_QSpinBox_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QSpinBox_mouseMoveEvent_void_QSpinBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QSpinBox_mousePressEvent_void_QSpinBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QSpinBox_mouseReleaseEvent_void_QSpinBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QSpinBox_paintEvent_void_QSpinBox_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QSpinBox_resizeEvent_void_QSpinBox_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QSpinBox_showEvent_void_QSpinBox_QShowEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->showEvent_pub(arg1);
    }

    void qt_QSpinBox_timerEvent_void_QSpinBox_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->timerEvent_pub(arg1);
    }

    void qt_QSpinBox_wheelEvent_void_QSpinBox_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSpinBox* arg0 = object<QSpinBox>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QSpinBox*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QSpinBox*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QSpinBox0, Pointer)
    {
        NODE_RETURN(qt_QSpinBox_QSpinBox_QSpinBox_QSpinBox_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setRange0, void)
    {
        qt_QSpinBox_setRange_void_QSpinBox_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_textFromValue0, Pointer)
    {
        NODE_RETURN(qt_QSpinBox_textFromValue_string_QSpinBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_valueFromText0, int)
    {
        NODE_RETURN(qt_QSpinBox_valueFromText_int_QSpinBox_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QSpinBox_event_bool_QSpinBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_stepBy0, void)
    {
        qt_QSpinBox_stepBy_void_QSpinBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QSpinBox_inputMethodQuery_QVariant_QSpinBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QSpinBox_minimumSizeHint_QSize_QSpinBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QSpinBox_sizeHint_QSize_QSpinBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QSpinBox_changeEvent_void_QSpinBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QSpinBox_closeEvent_void_QSpinBox_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QSpinBox_contextMenuEvent_void_QSpinBox_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QSpinBox_focusInEvent_void_QSpinBox_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QSpinBox_focusOutEvent_void_QSpinBox_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QSpinBox_hideEvent_void_QSpinBox_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QSpinBox_keyPressEvent_void_QSpinBox_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QSpinBox_keyReleaseEvent_void_QSpinBox_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QSpinBox_mouseMoveEvent_void_QSpinBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QSpinBox_mousePressEvent_void_QSpinBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QSpinBox_mouseReleaseEvent_void_QSpinBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QSpinBox_paintEvent_void_QSpinBox_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QSpinBox_resizeEvent_void_QSpinBox_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QSpinBox_showEvent_void_QSpinBox_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QSpinBox_timerEvent_void_QSpinBox_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QSpinBox_wheelEvent_void_QSpinBox_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QSpinBoxType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QSpinBox_QSpinBox_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QSpinBox", _n_QSpinBox0, None, Compiled,
                         qt_QSpinBox_QSpinBox_QSpinBox_QSpinBox_QWidget, Return,
                         "qt.QSpinBox", Parameters,
                         new Param(c, "this", "qt.QSpinBox"),
                         new Param(c, "parent", "qt.QWidget"), End),
            // PROP: cleanText (string; QSpinBox this)
            // PROP: displayIntegerBase (int; QSpinBox this)
            // PROP: maximum (int; QSpinBox this)
            // PROP: minimum (int; QSpinBox this)
            // PROP: prefix (string; QSpinBox this)
            // PROP: setDisplayIntegerBase (void; QSpinBox this, int base)
            // PROP: setMaximum (void; QSpinBox this, int max)
            // PROP: setMinimum (void; QSpinBox this, int min)
            // PROP: setPrefix (void; QSpinBox this, string prefix)
            new Function(c, "setRange", _n_setRange0, None, Compiled,
                         qt_QSpinBox_setRange_void_QSpinBox_int_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QSpinBox"),
                         new Param(c, "minimum", "int"),
                         new Param(c, "maximum", "int"), End),
            // PROP: setSingleStep (void; QSpinBox this, int val)
            // PROP: setSuffix (void; QSpinBox this, string suffix)
            // PROP: singleStep (int; QSpinBox this)
            // PROP: suffix (string; QSpinBox this)
            // PROP: value (int; QSpinBox this)
            _func[0] = new MemberFunction(
                c, "textFromValue", _n_textFromValue0, None, Compiled,
                qt_QSpinBox_textFromValue_string_QSpinBox_int, Return, "string",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "value", "int"), End),
            _func[1] = new MemberFunction(
                c, "valueFromText", _n_valueFromText0, None, Compiled,
                qt_QSpinBox_valueFromText_int_QSpinBox_string, Return, "int",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "text", "string"), End),
            _func[2] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QSpinBox_event_bool_QSpinBox_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event_", "qt.QEvent"), End),
            // MISSING: validate (flags QValidator::State; QSpinBox this, string
            // text, "int &" pos) // protected
            _func[3] = new MemberFunction(
                c, "stepBy", _n_stepBy0, None, Compiled,
                qt_QSpinBox_stepBy_void_QSpinBox_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "steps", "int"), End),
            _func[4] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QSpinBox_inputMethodQuery_QVariant_QSpinBox_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "query", "int"), End),
            _func[5] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QSpinBox_minimumSizeHint_QSize_QSpinBox, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QSpinBox"), End),
            _func[6] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QSpinBox_sizeHint_QSize_QSpinBox, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QSpinBox"), End),
            // MISSING: stepEnabled ("StepEnabled"; QSpinBox this) // protected
            _func[7] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QSpinBox_changeEvent_void_QSpinBox_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[8] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QSpinBox_closeEvent_void_QSpinBox_QCloseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[9] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QSpinBox_contextMenuEvent_void_QSpinBox_QContextMenuEvent,
                Return, "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[10] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QSpinBox_focusInEvent_void_QSpinBox_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[11] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QSpinBox_focusOutEvent_void_QSpinBox_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[12] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QSpinBox_hideEvent_void_QSpinBox_QHideEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QHideEvent"), End),
            _func[13] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QSpinBox_keyPressEvent_void_QSpinBox_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[14] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QSpinBox_keyReleaseEvent_void_QSpinBox_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[15] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QSpinBox_mouseMoveEvent_void_QSpinBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[16] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QSpinBox_mousePressEvent_void_QSpinBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[17] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QSpinBox_mouseReleaseEvent_void_QSpinBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[18] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QSpinBox_paintEvent_void_QSpinBox_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[19] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QSpinBox_resizeEvent_void_QSpinBox_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[20] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QSpinBox_showEvent_void_QSpinBox_QShowEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QShowEvent"), End),
            _func[21] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QSpinBox_timerEvent_void_QSpinBox_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[22] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QSpinBox_wheelEvent_void_QSpinBox_QWheelEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSpinBox"),
                new Param(c, "event", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QSpinBox::staticMetaObject, propExclusions);
    }

} // namespace Mu
