//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QAbstractItemViewType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QAbstractItemModelType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QItemSelectionType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QItemSelectionModelType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QPointType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QAbstractItemView::~MuQt_QAbstractItemView()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QAbstractItemView::MuQt_QAbstractItemView(Pointer muobj,
                                                   const CallEnvironment* ce,
                                                   QWidget* parent)
        : QAbstractItemView(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QAbstractItemViewType>(
            c->internName("qt.QAbstractItemView"));
    }

    QModelIndex
    MuQt_QAbstractItemView::indexAt(const QPoint& point) const // pure virtual
    {
        if (!_env)
            return defaultValue<QModelIndex>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QPointType>(c, point, "qt.QPoint"));
            Value rval = _env->call(F, args);
            return getqtype<QModelIndexType>(rval._Pointer);
        }
        else
        {
            return defaultValue<QModelIndex>();
        }
    }

    void MuQt_QAbstractItemView::keyboardSearch(const QString& search)
    {
        if (!_env)
        {
            QAbstractItemView::keyboardSearch(search);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makestring(c, search));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::keyboardSearch(search);
        }
    }

    void MuQt_QAbstractItemView::scrollTo(
        const QModelIndex& index,
        QAbstractItemView::ScrollHint hint) // pure virtual
    {
        if (!_env)
            return;
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(int(hint));
            Value rval = _env->call(F, args);
        }
        else
        {
            defaultValue<void>();
        }
    }

    void MuQt_QAbstractItemView::setModel(QAbstractItemModel* model)
    {
        if (!_env)
        {
            QAbstractItemView::setModel(model);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QAbstractItemModelType>(
                c, model, "qt.QAbstractItemModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::setModel(model);
        }
    }

    void MuQt_QAbstractItemView::setSelectionModel(
        QItemSelectionModel* selectionModel)
    {
        if (!_env)
        {
            QAbstractItemView::setSelectionModel(selectionModel);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QItemSelectionModelType>(
                c, selectionModel, "qt.QItemSelectionModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::setSelectionModel(selectionModel);
        }
    }

    int MuQt_QAbstractItemView::sizeHintForColumn(int column) const
    {
        if (!_env)
            return QAbstractItemView::sizeHintForColumn(column);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(column);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QAbstractItemView::sizeHintForColumn(column);
        }
    }

    int MuQt_QAbstractItemView::sizeHintForRow(int row) const
    {
        if (!_env)
            return QAbstractItemView::sizeHintForRow(row);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(row);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QAbstractItemView::sizeHintForRow(row);
        }
    }

    QRect MuQt_QAbstractItemView::visualRect(
        const QModelIndex& index) const // pure virtual
    {
        if (!_env)
            return defaultValue<QRect>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return getqtype<QRectType>(rval._Pointer);
        }
        else
        {
            return defaultValue<QRect>();
        }
    }

    QVariant
    MuQt_QAbstractItemView::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QAbstractItemView::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QAbstractItemView::inputMethodQuery(query);
        }
    }

    bool MuQt_QAbstractItemView::edit(const QModelIndex& index,
                                      QAbstractItemView::EditTrigger trigger,
                                      QEvent* event)
    {
        if (!_env)
            return QAbstractItemView::edit(index, trigger, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(int(trigger));
            args[3] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAbstractItemView::edit(index, trigger, event);
        }
    }

    int MuQt_QAbstractItemView::horizontalOffset() const // pure virtual
    {
        if (!_env)
            return defaultValue<int>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return defaultValue<int>();
        }
    }

    bool MuQt_QAbstractItemView::isIndexHidden(
        const QModelIndex& index) const // pure virtual
    {
        if (!_env)
            return defaultValue<bool>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return defaultValue<bool>();
        }
    }

    QModelIndex MuQt_QAbstractItemView::moveCursor(
        QAbstractItemView::CursorAction cursorAction,
        Qt::KeyboardModifiers modifiers) // pure virtual
    {
        if (!_env)
            return defaultValue<QModelIndex>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(cursorAction));
            args[2] = Value(int(modifiers));
            Value rval = _env->call(F, args);
            return getqtype<QModelIndexType>(rval._Pointer);
        }
        else
        {
            return defaultValue<QModelIndex>();
        }
    }

    QModelIndexList MuQt_QAbstractItemView::selectedIndexes() const
    {
        if (!_env)
            return QAbstractItemView::selectedIndexes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qmodelindexlist(rval._Pointer);
        }
        else
        {
            return QAbstractItemView::selectedIndexes();
        }
    }

    QItemSelectionModel::SelectionFlags
    MuQt_QAbstractItemView::selectionCommand(const QModelIndex& index,
                                             const QEvent* event) const
    {
        if (!_env)
            return QAbstractItemView::selectionCommand(index, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (QItemSelectionModel::SelectionFlags)(rval._int);
        }
        else
        {
            return QAbstractItemView::selectionCommand(index, event);
        }
    }

    void MuQt_QAbstractItemView::setSelection(
        const QRect& rect,
        QItemSelectionModel::SelectionFlags flags) // pure virtual
    {
        if (!_env)
            return;
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            args[2] = Value(int(flags));
            Value rval = _env->call(F, args);
        }
        else
        {
            defaultValue<void>();
        }
    }

    void MuQt_QAbstractItemView::startDrag(Qt::DropActions supportedActions)
    {
        if (!_env)
        {
            QAbstractItemView::startDrag(supportedActions);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(supportedActions));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::startDrag(supportedActions);
        }
    }

    int MuQt_QAbstractItemView::verticalOffset() const // pure virtual
    {
        if (!_env)
            return defaultValue<int>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return defaultValue<int>();
        }
    }

    QRegion MuQt_QAbstractItemView::visualRegionForSelection(
        const QItemSelection& selection) const // pure virtual
    {
        if (!_env)
            return defaultValue<QRegion>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selection,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
            return getqtype<QRegionType>(rval._Pointer);
        }
        else
        {
            return defaultValue<QRegion>();
        }
    }

    void MuQt_QAbstractItemView::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::dragEnterEvent(event);
        }
    }

    void MuQt_QAbstractItemView::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::dragLeaveEvent(event);
        }
    }

    void MuQt_QAbstractItemView::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::dragMoveEvent(event);
        }
    }

    void MuQt_QAbstractItemView::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::dropEvent(event);
        }
    }

    bool MuQt_QAbstractItemView::event(QEvent* event_)
    {
        if (!_env)
            return QAbstractItemView::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAbstractItemView::event(event_);
        }
    }

    void MuQt_QAbstractItemView::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::focusInEvent(event);
        }
    }

    bool MuQt_QAbstractItemView::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QAbstractItemView::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAbstractItemView::focusNextPrevChild(next);
        }
    }

    void MuQt_QAbstractItemView::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::focusOutEvent(event);
        }
    }

    void MuQt_QAbstractItemView::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::keyPressEvent(event);
        }
    }

    void MuQt_QAbstractItemView::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QAbstractItemView::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::mouseMoveEvent(event);
        }
    }

    void MuQt_QAbstractItemView::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::mousePressEvent(event);
        }
    }

    void MuQt_QAbstractItemView::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::mouseReleaseEvent(event);
        }
    }

    void MuQt_QAbstractItemView::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::resizeEvent(event);
        }
    }

    void MuQt_QAbstractItemView::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::timerEvent(event);
        }
    }

    bool MuQt_QAbstractItemView::viewportEvent(QEvent* event)
    {
        if (!_env)
            return QAbstractItemView::viewportEvent(event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[34];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAbstractItemView::viewportEvent(event);
        }
    }

    QSize MuQt_QAbstractItemView::viewportSizeHint() const
    {
        if (!_env)
            return QAbstractItemView::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[35];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QAbstractItemView::viewportSizeHint();
        }
    }

    void MuQt_QAbstractItemView::setupViewport(QWidget* viewport)
    {
        if (!_env)
        {
            QAbstractItemView::setupViewport(viewport);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[36];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QWidgetType>(c, viewport, "qt.QWidget"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::setupViewport(viewport);
        }
    }

    QSize MuQt_QAbstractItemView::minimumSizeHint() const
    {
        if (!_env)
            return QAbstractItemView::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[37];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QAbstractItemView::minimumSizeHint();
        }
    }

    QSize MuQt_QAbstractItemView::sizeHint() const
    {
        if (!_env)
            return QAbstractItemView::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[38];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QAbstractItemView::sizeHint();
        }
    }

    void MuQt_QAbstractItemView::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QAbstractItemView::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[39];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::scrollContentsBy(dx, dy);
        }
    }

    void MuQt_QAbstractItemView::contextMenuEvent(QContextMenuEvent* e)
    {
        if (!_env)
        {
            QAbstractItemView::contextMenuEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[40];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, e, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::contextMenuEvent(e);
        }
    }

    void MuQt_QAbstractItemView::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QAbstractItemView::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[41];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::paintEvent(event);
        }
    }

    void MuQt_QAbstractItemView::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QAbstractItemView::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[42];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractItemView::wheelEvent(e);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QAbstractItemViewType::QAbstractItemViewType(Context* c, const char* name,
                                                 Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QAbstractItemViewType::~QAbstractItemViewType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer
    QAbstractItemView_QAbstractItemView_QObject(Thread& NODE_THREAD,
                                                Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QAbstractItemView* w = object<QAbstractItemView>(widget))
        {
            QAbstractItemViewType* type =
                c->findSymbolOfTypeByQualifiedName<QAbstractItemViewType>(
                    c->internName("qt.QAbstractItemView"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QAbstractItemView_QAbstractItemView_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer
    qt_QAbstractItemView_QAbstractItemView_QAbstractItemView_QAbstractItemView_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QAbstractItemView(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void
    qt_QAbstractItemView_closePersistentEditor_void_QAbstractItemView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        arg0->closePersistentEditor(arg1);
    }

    Pointer qt_QAbstractItemView_currentIndex_QModelIndex_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return makeqtype<QModelIndexType>(c, arg0->currentIndex(),
                                          "qt.QModelIndex");
    }

    Pointer qt_QAbstractItemView_indexAt_QModelIndex_QAbstractItemView_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return makeqtype<QModelIndexType>(c, arg0->indexAt(arg1),
                                          "qt.QModelIndex");
    }

    Pointer
    qt_QAbstractItemView_indexWidget_QWidget_QAbstractItemView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeinstance<QWidgetType>(c, arg0->indexWidget(arg1),
                                         "qt.QWidget");
    }

    void qt_QAbstractItemView_keyboardSearch_void_QAbstractItemView_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_search)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QString arg1 = qstring(param_search);
        if (isMuQtObject(arg0))
            arg0->QAbstractItemView::keyboardSearch(arg1);
        else
            arg0->keyboardSearch(arg1);
    }

    Pointer qt_QAbstractItemView_model_QAbstractItemModel_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return makeinstance<QAbstractItemModelType>(c, arg0->model(),
                                                    "qt.QAbstractItemModel");
    }

    void
    qt_QAbstractItemView_openPersistentEditor_void_QAbstractItemView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        arg0->openPersistentEditor(arg1);
    }

    Pointer qt_QAbstractItemView_rootIndex_QModelIndex_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return makeqtype<QModelIndexType>(c, arg0->rootIndex(),
                                          "qt.QModelIndex");
    }

    void qt_QAbstractItemView_scrollTo_void_QAbstractItemView_QModelIndex_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        int param_hint)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        QAbstractItemView::ScrollHint arg2 =
            (QAbstractItemView::ScrollHint)(param_hint);
        arg0->scrollTo(arg1, arg2);
    }

    Pointer
    qt_QAbstractItemView_selectionModel_QItemSelectionModel_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return makeinstance<QItemSelectionModelType>(c, arg0->selectionModel(),
                                                     "qt.QItemSelectionModel");
    }

    void
    qt_QAbstractItemView_setIndexWidget_void_QAbstractItemView_QModelIndex_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        QWidget* arg2 = object<QWidget>(param_widget);
        arg0->setIndexWidget(arg1, arg2);
    }

    void
    qt_QAbstractItemView_setModel_void_QAbstractItemView_QAbstractItemModel(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_model)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QAbstractItemModel* arg1 = object<QAbstractItemModel>(param_model);
        if (isMuQtObject(arg0))
            arg0->QAbstractItemView::setModel(arg1);
        else
            arg0->setModel(arg1);
    }

    void
    qt_QAbstractItemView_setSelectionModel_void_QAbstractItemView_QItemSelectionModel(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_selectionModel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QItemSelectionModel* arg1 =
            object<QItemSelectionModel>(param_selectionModel);
        if (isMuQtObject(arg0))
            arg0->QAbstractItemView::setSelectionModel(arg1);
        else
            arg0->setSelectionModel(arg1);
    }

    int qt_QAbstractItemView_sizeHintForColumn_int_QAbstractItemView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        int arg1 = (int)(param_column);
        return isMuQtObject(arg0)
                   ? arg0->QAbstractItemView::sizeHintForColumn(arg1)
                   : arg0->sizeHintForColumn(arg1);
    }

    Pointer
    qt_QAbstractItemView_sizeHintForIndex_QSize_QAbstractItemView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqtype<QSizeType>(c, arg0->sizeHintForIndex(arg1),
                                    "qt.QSize");
    }

    int qt_QAbstractItemView_sizeHintForRow_int_QAbstractItemView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        int arg1 = (int)(param_row);
        return isMuQtObject(arg0)
                   ? arg0->QAbstractItemView::sizeHintForRow(arg1)
                   : arg0->sizeHintForRow(arg1);
    }

    Pointer qt_QAbstractItemView_visualRect_QRect_QAbstractItemView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqtype<QRectType>(c, arg0->visualRect(arg1), "qt.QRect");
    }

    Pointer
    qt_QAbstractItemView_inputMethodQuery_QVariant_QAbstractItemView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QAbstractItemView::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer qt_QAbstractItemView_dirtyRegionOffset_QPoint_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return makeqtype<QPointType>(
            c, ((MuQt_QAbstractItemView*)arg0)->dirtyRegionOffset_pub(),
            "qt.QPoint");
    }

    int qt_QAbstractItemView_dropIndicatorPosition_int_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return int(
            ((MuQt_QAbstractItemView*)arg0)->dropIndicatorPosition_pub());
    }

    bool
    qt_QAbstractItemView_edit_bool_QAbstractItemView_QModelIndex_int_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        int param_trigger, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        QAbstractItemView::EditTrigger arg2 =
            (QAbstractItemView::EditTrigger)(param_trigger);
        QEvent* arg3 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0) ? ((MuQt_QAbstractItemView*)arg0)
                                        ->edit_pub_parent(arg1, arg2, arg3)
                                  : ((MuQt_QAbstractItemView*)arg0)
                                        ->edit_pub(arg1, arg2, arg3);
    }

    void qt_QAbstractItemView_executeDelayedItemsLayout_void_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        ((MuQt_QAbstractItemView*)arg0)->executeDelayedItemsLayout_pub();
    }

    int qt_QAbstractItemView_horizontalOffset_int_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return ((MuQt_QAbstractItemView*)arg0)->horizontalOffset_pub();
    }

    bool qt_QAbstractItemView_isIndexHidden_bool_QAbstractItemView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return ((MuQt_QAbstractItemView*)arg0)->isIndexHidden_pub(arg1);
    }

    Pointer
    qt_QAbstractItemView_moveCursor_QModelIndex_QAbstractItemView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_cursorAction,
        int param_modifiers)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        MuQtPublicEnum arg1 = (MuQtPublicEnum)(param_cursorAction);
        Qt::KeyboardModifiers arg2 = (Qt::KeyboardModifiers)(param_modifiers);
        return makeqtype<QModelIndexType>(
            c, ((MuQt_QAbstractItemView*)arg0)->moveCursor_pub(arg1, arg2),
            "qt.QModelIndex");
    }

    void qt_QAbstractItemView_scheduleDelayedItemsLayout_void_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        ((MuQt_QAbstractItemView*)arg0)->scheduleDelayedItemsLayout_pub();
    }

    void qt_QAbstractItemView_scrollDirtyRegion_void_QAbstractItemView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        ((MuQt_QAbstractItemView*)arg0)->scrollDirtyRegion_pub(arg1, arg2);
    }

    Pointer
    qt_QAbstractItemView_selectedIndexes_qt__QModelIndexBSB_ESB__QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqmodelindexlist(c, ((MuQt_QAbstractItemView*)arg0)
                                                ->selectedIndexes_pub_parent())
                   : makeqmodelindexlist(c, ((MuQt_QAbstractItemView*)arg0)
                                                ->selectedIndexes_pub());
    }

    int
    qt_QAbstractItemView_selectionCommand_int_QAbstractItemView_QModelIndex_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        const QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? int(((MuQt_QAbstractItemView*)arg0)
                             ->selectionCommand_pub_parent(arg1, arg2))
                   : int(((MuQt_QAbstractItemView*)arg0)
                             ->selectionCommand_pub(arg1, arg2));
    }

    void qt_QAbstractItemView_setDirtyRegion_void_QAbstractItemView_QRegion(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_region)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QRegion arg1 = getqtype<QRegionType>(param_region);
        ((MuQt_QAbstractItemView*)arg0)->setDirtyRegion_pub(arg1);
    }

    void qt_QAbstractItemView_setSelection_void_QAbstractItemView_QRect_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_flags);
        ((MuQt_QAbstractItemView*)arg0)->setSelection_pub(arg1, arg2);
    }

    void qt_QAbstractItemView_setState_void_QAbstractItemView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_state)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        MuQtPublicEnum arg1 = (MuQtPublicEnum)(param_state);
        ((MuQt_QAbstractItemView*)arg0)->setState_pub(arg1);
    }

    void qt_QAbstractItemView_startDrag_void_QAbstractItemView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_supportedActions)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        Qt::DropActions arg1 = (Qt::DropActions)(param_supportedActions);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->startDrag_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->startDrag_pub(arg1);
    }

    int
    qt_QAbstractItemView_state_int_QAbstractItemView(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return int(((MuQt_QAbstractItemView*)arg0)->state_pub());
    }

    int qt_QAbstractItemView_verticalOffset_int_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return ((MuQt_QAbstractItemView*)arg0)->verticalOffset_pub();
    }

    Pointer
    qt_QAbstractItemView_visualRegionForSelection_QRegion_QAbstractItemView_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selection)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selection);
        return makeqtype<QRegionType>(
            c,
            ((MuQt_QAbstractItemView*)arg0)->visualRegionForSelection_pub(arg1),
            "qt.QRegion");
    }

    void
    qt_QAbstractItemView_dragEnterEvent_void_QAbstractItemView_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->dragEnterEvent_pub(arg1);
    }

    void
    qt_QAbstractItemView_dragLeaveEvent_void_QAbstractItemView_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void
    qt_QAbstractItemView_dragMoveEvent_void_QAbstractItemView_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QAbstractItemView_dropEvent_void_QAbstractItemView_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->dropEvent_pub(arg1);
    }

    bool qt_QAbstractItemView_event_bool_QAbstractItemView_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QAbstractItemView*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QAbstractItemView*)arg0)->event_pub(arg1);
    }

    void qt_QAbstractItemView_focusInEvent_void_QAbstractItemView_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QAbstractItemView_focusNextPrevChild_bool_QAbstractItemView_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0) ? ((MuQt_QAbstractItemView*)arg0)
                                        ->focusNextPrevChild_pub_parent(arg1)
                                  : ((MuQt_QAbstractItemView*)arg0)
                                        ->focusNextPrevChild_pub(arg1);
    }

    void qt_QAbstractItemView_focusOutEvent_void_QAbstractItemView_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QAbstractItemView_keyPressEvent_void_QAbstractItemView_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->keyPressEvent_pub(arg1);
    }

    void
    qt_QAbstractItemView_mouseDoubleClickEvent_void_QAbstractItemView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)
                ->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QAbstractItemView_mouseMoveEvent_void_QAbstractItemView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void
    qt_QAbstractItemView_mousePressEvent_void_QAbstractItemView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->mousePressEvent_pub(arg1);
    }

    void
    qt_QAbstractItemView_mouseReleaseEvent_void_QAbstractItemView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QAbstractItemView_resizeEvent_void_QAbstractItemView_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QAbstractItemView_timerEvent_void_QAbstractItemView_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->timerEvent_pub(arg1);
    }

    bool qt_QAbstractItemView_viewportEvent_bool_QAbstractItemView_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QAbstractItemView*)arg0)
                         ->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QAbstractItemView*)arg0)->viewportEvent_pub(arg1);
    }

    Pointer qt_QAbstractItemView_viewportSizeHint_QSize_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QAbstractItemView*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c,
                                          ((MuQt_QAbstractItemView*)arg0)
                                              ->viewportSizeHint_pub(),
                                          "qt.QSize");
    }

    void qt_QAbstractItemView_setupViewport_void_QAbstractItemView_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_viewport)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QWidget* arg1 = object<QWidget>(param_viewport);
        if (isMuQtObject(arg0))
            arg0->QAbstractItemView::setupViewport(arg1);
        else
            arg0->setupViewport(arg1);
    }

    Pointer qt_QAbstractItemView_minimumSizeHint_QSize_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QAbstractItemView::minimumSizeHint(),
                         "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QAbstractItemView_sizeHint_QSize_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QAbstractItemView::sizeHint(), "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QAbstractItemView_scrollContentsBy_void_QAbstractItemView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)
                ->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QAbstractItemView*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    void
    qt_QAbstractItemView_contextMenuEvent_void_QAbstractItemView_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QContextMenuEvent* arg1 = getqpointer<QContextMenuEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QAbstractItemView_paintEvent_void_QAbstractItemView_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QAbstractItemView_wheelEvent_void_QAbstractItemView_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractItemView* arg0 = object<QAbstractItemView>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractItemView*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractItemView*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QAbstractItemView0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_QAbstractItemView_QAbstractItemView_QAbstractItemView_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_closePersistentEditor0, void)
    {
        qt_QAbstractItemView_closePersistentEditor_void_QAbstractItemView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_currentIndex0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_currentIndex_QModelIndex_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexAt0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_indexAt_QModelIndex_QAbstractItemView_QPoint(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexWidget0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_indexWidget_QWidget_QAbstractItemView_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyboardSearch0, void)
    {
        qt_QAbstractItemView_keyboardSearch_void_QAbstractItemView_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_model0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_model_QAbstractItemModel_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_openPersistentEditor0, void)
    {
        qt_QAbstractItemView_openPersistentEditor_void_QAbstractItemView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_rootIndex0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_rootIndex_QModelIndex_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_scrollTo0, void)
    {
        qt_QAbstractItemView_scrollTo_void_QAbstractItemView_QModelIndex_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_selectionModel0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_selectionModel_QItemSelectionModel_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setIndexWidget0, void)
    {
        qt_QAbstractItemView_setIndexWidget_void_QAbstractItemView_QModelIndex_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setModel0, void)
    {
        qt_QAbstractItemView_setModel_void_QAbstractItemView_QAbstractItemModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelectionModel0, void)
    {
        qt_QAbstractItemView_setSelectionModel_void_QAbstractItemView_QItemSelectionModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForColumn0, int)
    {
        NODE_RETURN(
            qt_QAbstractItemView_sizeHintForColumn_int_QAbstractItemView_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForIndex0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_sizeHintForIndex_QSize_QAbstractItemView_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForRow0, int)
    {
        NODE_RETURN(
            qt_QAbstractItemView_sizeHintForRow_int_QAbstractItemView_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_visualRect0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_visualRect_QRect_QAbstractItemView_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_inputMethodQuery_QVariant_QAbstractItemView_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_dirtyRegionOffset0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_dirtyRegionOffset_QPoint_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dropIndicatorPosition0, int)
    {
        NODE_RETURN(
            qt_QAbstractItemView_dropIndicatorPosition_int_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_edit0, bool)
    {
        NODE_RETURN(
            qt_QAbstractItemView_edit_bool_QAbstractItemView_QModelIndex_int_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_executeDelayedItemsLayout0, void)
    {
        qt_QAbstractItemView_executeDelayedItemsLayout_void_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_horizontalOffset0, int)
    {
        NODE_RETURN(qt_QAbstractItemView_horizontalOffset_int_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIndexHidden0, bool)
    {
        NODE_RETURN(
            qt_QAbstractItemView_isIndexHidden_bool_QAbstractItemView_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_moveCursor0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_moveCursor_QModelIndex_QAbstractItemView_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_scheduleDelayedItemsLayout0, void)
    {
        qt_QAbstractItemView_scheduleDelayedItemsLayout_void_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_scrollDirtyRegion0, void)
    {
        qt_QAbstractItemView_scrollDirtyRegion_void_QAbstractItemView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_selectedIndexes0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_selectedIndexes_qt__QModelIndexBSB_ESB__QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionCommand0, int)
    {
        NODE_RETURN(
            qt_QAbstractItemView_selectionCommand_int_QAbstractItemView_QModelIndex_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setDirtyRegion0, void)
    {
        qt_QAbstractItemView_setDirtyRegion_void_QAbstractItemView_QRegion(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QAbstractItemView_setSelection_void_QAbstractItemView_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setState0, void)
    {
        qt_QAbstractItemView_setState_void_QAbstractItemView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_startDrag0, void)
    {
        qt_QAbstractItemView_startDrag_void_QAbstractItemView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_state0, int)
    {
        NODE_RETURN(qt_QAbstractItemView_state_int_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_verticalOffset0, int)
    {
        NODE_RETURN(qt_QAbstractItemView_verticalOffset_int_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualRegionForSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_visualRegionForSelection_QRegion_QAbstractItemView_QItemSelection(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QAbstractItemView_dragEnterEvent_void_QAbstractItemView_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QAbstractItemView_dragLeaveEvent_void_QAbstractItemView_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QAbstractItemView_dragMoveEvent_void_QAbstractItemView_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QAbstractItemView_dropEvent_void_QAbstractItemView_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QAbstractItemView_event_bool_QAbstractItemView_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QAbstractItemView_focusInEvent_void_QAbstractItemView_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(
            qt_QAbstractItemView_focusNextPrevChild_bool_QAbstractItemView_bool(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QAbstractItemView_focusOutEvent_void_QAbstractItemView_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QAbstractItemView_keyPressEvent_void_QAbstractItemView_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QAbstractItemView_mouseDoubleClickEvent_void_QAbstractItemView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QAbstractItemView_mouseMoveEvent_void_QAbstractItemView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QAbstractItemView_mousePressEvent_void_QAbstractItemView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QAbstractItemView_mouseReleaseEvent_void_QAbstractItemView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QAbstractItemView_resizeEvent_void_QAbstractItemView_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QAbstractItemView_timerEvent_void_QAbstractItemView_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(
            qt_QAbstractItemView_viewportEvent_bool_QAbstractItemView_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_viewportSizeHint_QSize_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setupViewport0, void)
    {
        qt_QAbstractItemView_setupViewport_void_QAbstractItemView_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractItemView_minimumSizeHint_QSize_QAbstractItemView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QAbstractItemView_sizeHint_QSize_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QAbstractItemView_scrollContentsBy_void_QAbstractItemView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QAbstractItemView_contextMenuEvent_void_QAbstractItemView_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QAbstractItemView_paintEvent_void_QAbstractItemView_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QAbstractItemView_wheelEvent_void_QAbstractItemView_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QAbstractItemViewType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QAbstractItemView_QAbstractItemView_QObject,
                                Return, ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            new Alias(c, "CursorAction", "int") /* PROTECTED ENUM */,
            new SymbolicConstant(c, "MoveUp", "int", Value(int(0))),
            new SymbolicConstant(c, "MoveDown", "int", Value(int(1))),
            new SymbolicConstant(c, "MoveLeft", "int", Value(int(2))),
            new SymbolicConstant(c, "MoveRight", "int", Value(int(3))),
            new SymbolicConstant(c, "MoveHome", "int", Value(int(4))),
            new SymbolicConstant(c, "MoveEnd", "int", Value(int(5))),
            new SymbolicConstant(c, "MovePageUp", "int", Value(int(6))),
            new SymbolicConstant(c, "MovePageDown", "int", Value(int(7))),
            new SymbolicConstant(c, "MoveNext", "int", Value(int(8))),
            new SymbolicConstant(c, "MovePrevious", "int", Value(int(9))),
            new Alias(c, "DropIndicatorPosition", "int") /* PROTECTED ENUM */,
            new SymbolicConstant(c, "OnItem", "int", Value(int(0))),
            new SymbolicConstant(c, "AboveItem", "int", Value(int(1))),
            new SymbolicConstant(c, "BelowItem", "int", Value(int(2))),
            new SymbolicConstant(c, "OnViewport", "int", Value(int(3))),
            new Alias(c, "State", "int") /* PROTECTED ENUM */,
            new SymbolicConstant(c, "NoState", "int", Value(int(0))),
            new SymbolicConstant(c, "DraggingState", "int", Value(int(1))),
            new SymbolicConstant(c, "DragSelectingState", "int", Value(int(2))),
            new SymbolicConstant(c, "EditingState", "int", Value(int(3))),
            new SymbolicConstant(c, "ExpandingState", "int", Value(int(4))),
            new SymbolicConstant(c, "CollapsingState", "int", Value(int(5))),
            new SymbolicConstant(c, "AnimatingState", "int", Value(int(6))),
            // member functions
            new Function(
                c, "QAbstractItemView", _n_QAbstractItemView0, None, Compiled,
                qt_QAbstractItemView_QAbstractItemView_QAbstractItemView_QAbstractItemView_QWidget,
                Return, "qt.QAbstractItemView", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "parent", "qt.QWidget"), End),
            // PROP: alternatingRowColors (bool; QAbstractItemView this)
            // PROP: autoScrollMargin (int; QAbstractItemView this)
            new Function(
                c, "closePersistentEditor", _n_closePersistentEditor0, None,
                Compiled,
                qt_QAbstractItemView_closePersistentEditor_void_QAbstractItemView_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            new Function(
                c, "currentIndex", _n_currentIndex0, None, Compiled,
                qt_QAbstractItemView_currentIndex_QModelIndex_QAbstractItemView,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            // PROP: defaultDropAction (flags Qt::DropAction; QAbstractItemView
            // this) PROP: dragDropMode (flags QAbstractItemView::DragDropMode;
            // QAbstractItemView this) PROP: dragDropOverwriteMode (bool;
            // QAbstractItemView this) PROP: dragEnabled (bool;
            // QAbstractItemView this) PROP: editTriggers (flags
            // QAbstractItemView::EditTriggers; QAbstractItemView this) PROP:
            // hasAutoScroll (bool; QAbstractItemView this) PROP:
            // horizontalScrollMode (flags QAbstractItemView::ScrollMode;
            // QAbstractItemView this) PROP: iconSize (QSize; QAbstractItemView
            // this)
            _func[0] = new MemberFunction(
                c, "indexAt", _n_indexAt0, None, Compiled,
                qt_QAbstractItemView_indexAt_QModelIndex_QAbstractItemView_QPoint,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "point", "qt.QPoint"), End),
            new Function(
                c, "indexWidget", _n_indexWidget0, None, Compiled,
                qt_QAbstractItemView_indexWidget_QWidget_QAbstractItemView_QModelIndex,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            // MISSING: itemDelegate ("QAbstractItemDelegate *";
            // QAbstractItemView this) MISSING: itemDelegate
            // ("QAbstractItemDelegate *"; QAbstractItemView this, QModelIndex
            // index) MISSING: itemDelegateForColumn ("QAbstractItemDelegate *";
            // QAbstractItemView this, int column) MISSING: itemDelegateForRow
            // ("QAbstractItemDelegate *"; QAbstractItemView this, int row)
            _func[1] = new MemberFunction(
                c, "keyboardSearch", _n_keyboardSearch0, None, Compiled,
                qt_QAbstractItemView_keyboardSearch_void_QAbstractItemView_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "search", "string"), End),
            new Function(
                c, "model", _n_model0, None, Compiled,
                qt_QAbstractItemView_model_QAbstractItemModel_QAbstractItemView,
                Return, "qt.QAbstractItemModel", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            new Function(
                c, "openPersistentEditor", _n_openPersistentEditor0, None,
                Compiled,
                qt_QAbstractItemView_openPersistentEditor_void_QAbstractItemView_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            new Function(
                c, "rootIndex", _n_rootIndex0, None, Compiled,
                qt_QAbstractItemView_rootIndex_QModelIndex_QAbstractItemView,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[2] = new MemberFunction(
                c, "scrollTo", _n_scrollTo0, None, Compiled,
                qt_QAbstractItemView_scrollTo_void_QAbstractItemView_QModelIndex_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "hint", "int",
                          Value((int)QAbstractItemView::EnsureVisible)),
                End),
            // PROP: selectionBehavior (flags
            // QAbstractItemView::SelectionBehavior; QAbstractItemView this)
            // PROP: selectionMode (flags QAbstractItemView::SelectionMode;
            // QAbstractItemView this)
            new Function(
                c, "selectionModel", _n_selectionModel0, None, Compiled,
                qt_QAbstractItemView_selectionModel_QItemSelectionModel_QAbstractItemView,
                Return, "qt.QItemSelectionModel", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            // PROP: setAlternatingRowColors (void; QAbstractItemView this, bool
            // enable) PROP: setAutoScroll (void; QAbstractItemView this, bool
            // enable) PROP: setAutoScrollMargin (void; QAbstractItemView this,
            // int margin) PROP: setDefaultDropAction (void; QAbstractItemView
            // this, flags Qt::DropAction dropAction) PROP: setDragDropMode
            // (void; QAbstractItemView this, flags
            // QAbstractItemView::DragDropMode behavior) PROP:
            // setDragDropOverwriteMode (void; QAbstractItemView this, bool
            // overwrite) PROP: setDragEnabled (void; QAbstractItemView this,
            // bool enable) PROP: setDropIndicatorShown (void; QAbstractItemView
            // this, bool enable) PROP: setEditTriggers (void; QAbstractItemView
            // this, flags QAbstractItemView::EditTriggers triggers) PROP:
            // setHorizontalScrollMode (void; QAbstractItemView this, flags
            // QAbstractItemView::ScrollMode mode) PROP: setIconSize (void;
            // QAbstractItemView this, QSize size)
            new Function(
                c, "setIndexWidget", _n_setIndexWidget0, None, Compiled,
                qt_QAbstractItemView_setIndexWidget_void_QAbstractItemView_QModelIndex_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "widget", "qt.QWidget"), End),
            // MISSING: setItemDelegate (void; QAbstractItemView this,
            // "QAbstractItemDelegate *" delegate) MISSING:
            // setItemDelegateForColumn (void; QAbstractItemView this, int
            // column, "QAbstractItemDelegate *" delegate) MISSING:
            // setItemDelegateForRow (void; QAbstractItemView this, int row,
            // "QAbstractItemDelegate *" delegate)
            _func[3] = new MemberFunction(
                c, "setModel", _n_setModel0, None, Compiled,
                qt_QAbstractItemView_setModel_void_QAbstractItemView_QAbstractItemModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "model", "qt.QAbstractItemModel"), End),
            // PROP: setSelectionBehavior (void; QAbstractItemView this, flags
            // QAbstractItemView::SelectionBehavior behavior) PROP:
            // setSelectionMode (void; QAbstractItemView this, flags
            // QAbstractItemView::SelectionMode mode)
            _func[4] = new MemberFunction(
                c, "setSelectionModel", _n_setSelectionModel0, None, Compiled,
                qt_QAbstractItemView_setSelectionModel_void_QAbstractItemView_QItemSelectionModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "selectionModel", "qt.QItemSelectionModel"), End),
            // PROP: setTabKeyNavigation (void; QAbstractItemView this, bool
            // enable) PROP: setTextElideMode (void; QAbstractItemView this,
            // flags Qt::TextElideMode mode) PROP: setVerticalScrollMode (void;
            // QAbstractItemView this, flags QAbstractItemView::ScrollMode mode)
            // PROP: showDropIndicator (bool; QAbstractItemView this)
            _func[5] = new MemberFunction(
                c, "sizeHintForColumn", _n_sizeHintForColumn0, None, Compiled,
                qt_QAbstractItemView_sizeHintForColumn_int_QAbstractItemView_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "column", "int"), End),
            new Function(
                c, "sizeHintForIndex", _n_sizeHintForIndex0, None, Compiled,
                qt_QAbstractItemView_sizeHintForIndex_QSize_QAbstractItemView_QModelIndex,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[6] = new MemberFunction(
                c, "sizeHintForRow", _n_sizeHintForRow0, None, Compiled,
                qt_QAbstractItemView_sizeHintForRow_int_QAbstractItemView_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "row", "int"), End),
            // PROP: tabKeyNavigation (bool; QAbstractItemView this)
            // PROP: textElideMode (flags Qt::TextElideMode; QAbstractItemView
            // this) PROP: verticalScrollMode (flags
            // QAbstractItemView::ScrollMode; QAbstractItemView this)
            _func[7] = new MemberFunction(
                c, "visualRect", _n_visualRect0, None, Compiled,
                qt_QAbstractItemView_visualRect_QRect_QAbstractItemView_QModelIndex,
                Return, "qt.QRect", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[8] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QAbstractItemView_inputMethodQuery_QVariant_QAbstractItemView_int,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "query", "int"), End),
            new Function(
                c, "dirtyRegionOffset", _n_dirtyRegionOffset0, None, Compiled,
                qt_QAbstractItemView_dirtyRegionOffset_QPoint_QAbstractItemView,
                Return, "qt.QPoint", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            new Function(
                c, "dropIndicatorPosition", _n_dropIndicatorPosition0, None,
                Compiled,
                qt_QAbstractItemView_dropIndicatorPosition_int_QAbstractItemView,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[9] = new MemberFunction(
                c, "edit", _n_edit0, None, Compiled,
                qt_QAbstractItemView_edit_bool_QAbstractItemView_QModelIndex_int_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "trigger", "int"),
                new Param(c, "event", "qt.QEvent"), End),
            new Function(
                c, "executeDelayedItemsLayout", _n_executeDelayedItemsLayout0,
                None, Compiled,
                qt_QAbstractItemView_executeDelayedItemsLayout_void_QAbstractItemView,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[10] = new MemberFunction(
                c, "horizontalOffset", _n_horizontalOffset0, None, Compiled,
                qt_QAbstractItemView_horizontalOffset_int_QAbstractItemView,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[11] = new MemberFunction(
                c, "isIndexHidden", _n_isIndexHidden0, None, Compiled,
                qt_QAbstractItemView_isIndexHidden_bool_QAbstractItemView_QModelIndex,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[12] = new MemberFunction(
                c, "moveCursor", _n_moveCursor0, None, Compiled,
                qt_QAbstractItemView_moveCursor_QModelIndex_QAbstractItemView_int_int,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "cursorAction", "int"),
                new Param(c, "modifiers", "int"), End),
            new Function(
                c, "scheduleDelayedItemsLayout", _n_scheduleDelayedItemsLayout0,
                None, Compiled,
                qt_QAbstractItemView_scheduleDelayedItemsLayout_void_QAbstractItemView,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            new Function(
                c, "scrollDirtyRegion", _n_scrollDirtyRegion0, None, Compiled,
                qt_QAbstractItemView_scrollDirtyRegion_void_QAbstractItemView_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[13] = new MemberFunction(
                c, "selectedIndexes", _n_selectedIndexes0, None, Compiled,
                qt_QAbstractItemView_selectedIndexes_qt__QModelIndexBSB_ESB__QAbstractItemView,
                Return, "qt.QModelIndex[]", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[14] = new MemberFunction(
                c, "selectionCommand", _n_selectionCommand0, None, Compiled,
                qt_QAbstractItemView_selectionCommand_int_QAbstractItemView_QModelIndex_QEvent,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "event", "qt.QEvent"), End),
            new Function(
                c, "setDirtyRegion", _n_setDirtyRegion0, None, Compiled,
                qt_QAbstractItemView_setDirtyRegion_void_QAbstractItemView_QRegion,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "region", "qt.QRegion"), End),
            _func[15] = new MemberFunction(
                c, "setSelection", _n_setSelection0, None, Compiled,
                qt_QAbstractItemView_setSelection_void_QAbstractItemView_QRect_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "rect", "qt.QRect"), new Param(c, "flags", "int"),
                End),
            new Function(
                c, "setState", _n_setState0, None, Compiled,
                qt_QAbstractItemView_setState_void_QAbstractItemView_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "state", "int"), End),
            _func[16] = new MemberFunction(
                c, "startDrag", _n_startDrag0, None, Compiled,
                qt_QAbstractItemView_startDrag_void_QAbstractItemView_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "supportedActions", "int"), End),
            new Function(c, "state", _n_state0, None, Compiled,
                         qt_QAbstractItemView_state_int_QAbstractItemView,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[17] = new MemberFunction(
                c, "verticalOffset", _n_verticalOffset0, None, Compiled,
                qt_QAbstractItemView_verticalOffset_int_QAbstractItemView,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            // MISSING: viewOptions ("QStyleOptionViewItem"; QAbstractItemView
            // this) // protected
            _func[18] = new MemberFunction(
                c, "visualRegionForSelection", _n_visualRegionForSelection0,
                None, Compiled,
                qt_QAbstractItemView_visualRegionForSelection_QRegion_QAbstractItemView_QItemSelection,
                Return, "qt.QRegion", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "selection", "qt.QItemSelection"), End),
            _func[19] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QAbstractItemView_dragEnterEvent_void_QAbstractItemView_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[20] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QAbstractItemView_dragLeaveEvent_void_QAbstractItemView_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[21] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QAbstractItemView_dragMoveEvent_void_QAbstractItemView_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[22] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QAbstractItemView_dropEvent_void_QAbstractItemView_QDropEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[23] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QAbstractItemView_event_bool_QAbstractItemView_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event_", "qt.QEvent"), End),
            _func[24] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QAbstractItemView_focusInEvent_void_QAbstractItemView_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[25] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QAbstractItemView_focusNextPrevChild_bool_QAbstractItemView_bool,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "next", "bool"), End),
            _func[26] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QAbstractItemView_focusOutEvent_void_QAbstractItemView_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QAbstractItemView this,
            // "QInputMethodEvent *" event) // protected
            _func[27] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QAbstractItemView_keyPressEvent_void_QAbstractItemView_QKeyEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[28] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QAbstractItemView_mouseDoubleClickEvent_void_QAbstractItemView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[29] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QAbstractItemView_mouseMoveEvent_void_QAbstractItemView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[30] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QAbstractItemView_mousePressEvent_void_QAbstractItemView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[31] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QAbstractItemView_mouseReleaseEvent_void_QAbstractItemView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[32] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QAbstractItemView_resizeEvent_void_QAbstractItemView_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[33] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QAbstractItemView_timerEvent_void_QAbstractItemView_QTimerEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[34] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QAbstractItemView_viewportEvent_bool_QAbstractItemView_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[35] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QAbstractItemView_viewportSizeHint_QSize_QAbstractItemView,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[36] = new MemberFunction(
                c, "setupViewport", _n_setupViewport0, None, Compiled,
                qt_QAbstractItemView_setupViewport_void_QAbstractItemView_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "viewport", "qt.QWidget"), End),
            _func[37] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QAbstractItemView_minimumSizeHint_QSize_QAbstractItemView,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[38] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QAbstractItemView_sizeHint_QSize_QAbstractItemView, Return,
                "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"), End),
            _func[39] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QAbstractItemView_scrollContentsBy_void_QAbstractItemView_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[40] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QAbstractItemView_contextMenuEvent_void_QAbstractItemView_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "e", "qt.QContextMenuEvent"), End),
            _func[41] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QAbstractItemView_paintEvent_void_QAbstractItemView_QPaintEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[42] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QAbstractItemView_wheelEvent_void_QAbstractItemView_QWheelEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractItemView"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QAbstractItemView::staticMetaObject, propExclusions);
    }

} // namespace Mu
