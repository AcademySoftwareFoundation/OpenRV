//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTcpSocketType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QVariantType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QTcpSocket::~MuQt_QTcpSocket()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QTcpSocket::MuQt_QTcpSocket(Pointer muobj, const CallEnvironment* ce,
                                     QObject* parent)
        : QTcpSocket(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTcpSocketType>(
            c->internName("qt.QTcpSocket"));
    }

    void MuQt_QTcpSocket::disconnectFromHost()
    {
        if (!_env)
        {
            QTcpSocket::disconnectFromHost();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTcpSocket::disconnectFromHost();
        }
    }

    void MuQt_QTcpSocket::resume()
    {
        if (!_env)
        {
            QTcpSocket::resume();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTcpSocket::resume();
        }
    }

    void MuQt_QTcpSocket::setReadBufferSize(qint64 size)
    {
        if (!_env)
        {
            QTcpSocket::setReadBufferSize(size);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(size);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTcpSocket::setReadBufferSize(size);
        }
    }

    void MuQt_QTcpSocket::setSocketOption(QAbstractSocket::SocketOption option,
                                          const QVariant& value)
    {
        if (!_env)
        {
            QTcpSocket::setSocketOption(option, value);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(option));
            args[2] = Value(makeqtype<QVariantType>(c, value, "qt.QVariant"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTcpSocket::setSocketOption(option, value);
        }
    }

    QVariant MuQt_QTcpSocket::socketOption(QAbstractSocket::SocketOption option)
    {
        if (!_env)
            return QTcpSocket::socketOption(option);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(option));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QTcpSocket::socketOption(option);
        }
    }

    bool MuQt_QTcpSocket::waitForConnected(int msecs)
    {
        if (!_env)
            return QTcpSocket::waitForConnected(msecs);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(msecs);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::waitForConnected(msecs);
        }
    }

    bool MuQt_QTcpSocket::waitForDisconnected(int msecs)
    {
        if (!_env)
            return QTcpSocket::waitForDisconnected(msecs);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(msecs);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::waitForDisconnected(msecs);
        }
    }

    bool MuQt_QTcpSocket::atEnd() const
    {
        if (!_env)
            return QTcpSocket::atEnd();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::atEnd();
        }
    }

    qint64 MuQt_QTcpSocket::bytesAvailable() const
    {
        if (!_env)
            return QTcpSocket::bytesAvailable();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int64)(rval._int64);
        }
        else
        {
            return QTcpSocket::bytesAvailable();
        }
    }

    qint64 MuQt_QTcpSocket::bytesToWrite() const
    {
        if (!_env)
            return QTcpSocket::bytesToWrite();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int64)(rval._int64);
        }
        else
        {
            return QTcpSocket::bytesToWrite();
        }
    }

    bool MuQt_QTcpSocket::canReadLine() const
    {
        if (!_env)
            return QTcpSocket::canReadLine();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::canReadLine();
        }
    }

    void MuQt_QTcpSocket::close()
    {
        if (!_env)
        {
            QTcpSocket::close();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTcpSocket::close();
        }
    }

    bool MuQt_QTcpSocket::isSequential() const
    {
        if (!_env)
            return QTcpSocket::isSequential();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::isSequential();
        }
    }

    bool MuQt_QTcpSocket::waitForBytesWritten(int msecs)
    {
        if (!_env)
            return QTcpSocket::waitForBytesWritten(msecs);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(msecs);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::waitForBytesWritten(msecs);
        }
    }

    bool MuQt_QTcpSocket::waitForReadyRead(int msecs)
    {
        if (!_env)
            return QTcpSocket::waitForReadyRead(msecs);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(msecs);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTcpSocket::waitForReadyRead(msecs);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTcpSocketType::QTcpSocketType(Context* c, const char* name, Class* super,
                                   Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTcpSocketType::~QTcpSocketType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTcpSocket_QTcpSocket_QObject(Thread& NODE_THREAD,
                                                 Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTcpSocket* w = object<QTcpSocket>(widget))
        {
            QTcpSocketType* type =
                c->findSymbolOfTypeByQualifiedName<QTcpSocketType>(
                    c->internName("qt.QTcpSocket"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QTcpSocket_QTcpSocket_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTcpSocket_QTcpSocket_QTcpSocket_QTcpSocket_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QTcpSocket(param_this,
                                      NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void
    qt_QTcpSocket_disconnectFromHost_void_QTcpSocket(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTcpSocket::disconnectFromHost();
        else
            arg0->disconnectFromHost();
    }

    void qt_QTcpSocket_resume_void_QTcpSocket(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTcpSocket::resume();
        else
            arg0->resume();
    }

    void qt_QTcpSocket_setReadBufferSize_void_QTcpSocket_int64(
        Mu::Thread& NODE_THREAD, Pointer param_this, int64 param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        qint64 arg1 = (int64)(param_size);
        if (isMuQtObject(arg0))
            arg0->QTcpSocket::setReadBufferSize(arg1);
        else
            arg0->setReadBufferSize(arg1);
    }

    void qt_QTcpSocket_setSocketOption_void_QTcpSocket_int_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_option,
        Pointer param_value)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        QAbstractSocket::SocketOption arg1 =
            (QAbstractSocket::SocketOption)(param_option);
        const QVariant arg2 = getqtype<QVariantType>(param_value);
        if (isMuQtObject(arg0))
            arg0->QTcpSocket::setSocketOption(arg1, arg2);
        else
            arg0->setSocketOption(arg1, arg2);
    }

    Pointer qt_QTcpSocket_socketOption_QVariant_QTcpSocket_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_option)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        QAbstractSocket::SocketOption arg1 =
            (QAbstractSocket::SocketOption)(param_option);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QTcpSocket::socketOption(arg1), "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->socketOption(arg1),
                                             "qt.QVariant");
    }

    bool qt_QTcpSocket_waitForConnected_bool_QTcpSocket_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        int arg1 = (int)(param_msecs);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::waitForConnected(arg1)
                                  : arg0->waitForConnected(arg1);
    }

    bool qt_QTcpSocket_waitForDisconnected_bool_QTcpSocket_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        int arg1 = (int)(param_msecs);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::waitForDisconnected(arg1)
                                  : arg0->waitForDisconnected(arg1);
    }

    bool qt_QTcpSocket_atEnd_bool_QTcpSocket(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::atEnd() : arg0->atEnd();
    }

    int64 qt_QTcpSocket_bytesAvailable_int64_QTcpSocket(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::bytesAvailable()
                                  : arg0->bytesAvailable();
    }

    int64 qt_QTcpSocket_bytesToWrite_int64_QTcpSocket(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::bytesToWrite()
                                  : arg0->bytesToWrite();
    }

    bool qt_QTcpSocket_canReadLine_bool_QTcpSocket(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::canReadLine()
                                  : arg0->canReadLine();
    }

    void qt_QTcpSocket_close_void_QTcpSocket(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTcpSocket::close();
        else
            arg0->close();
    }

    bool qt_QTcpSocket_isSequential_bool_QTcpSocket(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::isSequential()
                                  : arg0->isSequential();
    }

    bool qt_QTcpSocket_waitForBytesWritten_bool_QTcpSocket_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        int arg1 = (int)(param_msecs);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::waitForBytesWritten(arg1)
                                  : arg0->waitForBytesWritten(arg1);
    }

    bool qt_QTcpSocket_waitForReadyRead_bool_QTcpSocket_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTcpSocket* arg0 = object<QTcpSocket>(param_this);
        int arg1 = (int)(param_msecs);
        return isMuQtObject(arg0) ? arg0->QTcpSocket::waitForReadyRead(arg1)
                                  : arg0->waitForReadyRead(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QTcpSocket0, Pointer)
    {
        NODE_RETURN(qt_QTcpSocket_QTcpSocket_QTcpSocket_QTcpSocket_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_disconnectFromHost0, void)
    {
        qt_QTcpSocket_disconnectFromHost_void_QTcpSocket(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resume0, void)
    {
        qt_QTcpSocket_resume_void_QTcpSocket(NODE_THREAD,
                                             NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setReadBufferSize0, void)
    {
        qt_QTcpSocket_setReadBufferSize_void_QTcpSocket_int64(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64));
    }

    static NODE_IMPLEMENTATION(_n_setSocketOption0, void)
    {
        qt_QTcpSocket_setSocketOption_void_QTcpSocket_int_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_socketOption0, Pointer)
    {
        NODE_RETURN(qt_QTcpSocket_socketOption_QVariant_QTcpSocket_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForConnected0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_waitForConnected_bool_QTcpSocket_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForDisconnected0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_waitForDisconnected_bool_QTcpSocket_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_atEnd0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_atEnd_bool_QTcpSocket(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesAvailable0, int64)
    {
        NODE_RETURN(qt_QTcpSocket_bytesAvailable_int64_QTcpSocket(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesToWrite0, int64)
    {
        NODE_RETURN(qt_QTcpSocket_bytesToWrite_int64_QTcpSocket(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_canReadLine0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_canReadLine_bool_QTcpSocket(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_close0, void)
    {
        qt_QTcpSocket_close_void_QTcpSocket(NODE_THREAD,
                                            NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_isSequential0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_isSequential_bool_QTcpSocket(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_waitForBytesWritten0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_waitForBytesWritten_bool_QTcpSocket_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForReadyRead0, bool)
    {
        NODE_RETURN(qt_QTcpSocket_waitForReadyRead_bool_QTcpSocket_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    void QTcpSocketType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTcpSocket_QTcpSocket_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QTcpSocket", _n_QTcpSocket0, None, Compiled,
                         qt_QTcpSocket_QTcpSocket_QTcpSocket_QTcpSocket_QObject,
                         Return, "qt.QTcpSocket", Parameters,
                         new Param(c, "this", "qt.QTcpSocket"),
                         new Param(c, "parent", "qt.QObject"), End),
            // MISSING: connectToHost (void; QTcpSocket this, string hostName,
            // "quint16" port, "OpenMode" openMode, flags
            // QAbstractSocket::NetworkLayerProtocol protocol)
            _func[0] = new MemberFunction(
                c, "disconnectFromHost", _n_disconnectFromHost0, None, Compiled,
                qt_QTcpSocket_disconnectFromHost_void_QTcpSocket, Return,
                "void", Parameters, new Param(c, "this", "qt.QTcpSocket"), End),
            _func[1] = new MemberFunction(
                c, "resume", _n_resume0, None, Compiled,
                qt_QTcpSocket_resume_void_QTcpSocket, Return, "void",
                Parameters, new Param(c, "this", "qt.QTcpSocket"), End),
            _func[2] = new MemberFunction(
                c, "setReadBufferSize", _n_setReadBufferSize0, None, Compiled,
                qt_QTcpSocket_setReadBufferSize_void_QTcpSocket_int64, Return,
                "void", Parameters, new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "size", "int64"), End),
            // MISSING: setSocketDescriptor (bool; QTcpSocket this, "qintptr"
            // socketDescriptor, flags QAbstractSocket::SocketState socketState,
            // "OpenMode" openMode)
            _func[3] = new MemberFunction(
                c, "setSocketOption", _n_setSocketOption0, None, Compiled,
                qt_QTcpSocket_setSocketOption_void_QTcpSocket_int_QVariant,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "option", "int"),
                new Param(c, "value", "qt.QVariant"), End),
            // MISSING: socketDescriptor ("qintptr"; QTcpSocket this)
            _func[4] = new MemberFunction(
                c, "socketOption", _n_socketOption0, None, Compiled,
                qt_QTcpSocket_socketOption_QVariant_QTcpSocket_int, Return,
                "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "option", "int"), End),
            _func[5] = new MemberFunction(
                c, "waitForConnected", _n_waitForConnected0, None, Compiled,
                qt_QTcpSocket_waitForConnected_bool_QTcpSocket_int, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            _func[6] = new MemberFunction(
                c, "waitForDisconnected", _n_waitForDisconnected0, None,
                Compiled, qt_QTcpSocket_waitForDisconnected_bool_QTcpSocket_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            _func[7] = new MemberFunction(
                c, "atEnd", _n_atEnd0, None, Compiled,
                qt_QTcpSocket_atEnd_bool_QTcpSocket, Return, "bool", Parameters,
                new Param(c, "this", "qt.QTcpSocket"), End),
            _func[8] = new MemberFunction(
                c, "bytesAvailable", _n_bytesAvailable0, None, Compiled,
                qt_QTcpSocket_bytesAvailable_int64_QTcpSocket, Return, "int64",
                Parameters, new Param(c, "this", "qt.QTcpSocket"), End),
            _func[9] = new MemberFunction(
                c, "bytesToWrite", _n_bytesToWrite0, None, Compiled,
                qt_QTcpSocket_bytesToWrite_int64_QTcpSocket, Return, "int64",
                Parameters, new Param(c, "this", "qt.QTcpSocket"), End),
            _func[10] = new MemberFunction(
                c, "canReadLine", _n_canReadLine0, None, Compiled,
                qt_QTcpSocket_canReadLine_bool_QTcpSocket, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTcpSocket"), End),
            _func[11] = new MemberFunction(
                c, "close", _n_close0, None, Compiled,
                qt_QTcpSocket_close_void_QTcpSocket, Return, "void", Parameters,
                new Param(c, "this", "qt.QTcpSocket"), End),
            _func[12] = new MemberFunction(
                c, "isSequential", _n_isSequential0, None, Compiled,
                qt_QTcpSocket_isSequential_bool_QTcpSocket, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTcpSocket"), End),
            _func[13] = new MemberFunction(
                c, "waitForBytesWritten", _n_waitForBytesWritten0, None,
                Compiled, qt_QTcpSocket_waitForBytesWritten_bool_QTcpSocket_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            _func[14] = new MemberFunction(
                c, "waitForReadyRead", _n_waitForReadyRead0, None, Compiled,
                qt_QTcpSocket_waitForReadyRead_bool_QTcpSocket_int, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTcpSocket"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            // MISSING: readData (int64; QTcpSocket this, "char *" data, int64
            // maxSize) // protected MISSING: readLineData (int64; QTcpSocket
            // this, "char *" data, int64 maxlen) // protected MISSING:
            // writeData (int64; QTcpSocket this, "const char *" data, int64
            // size) // protected static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QTcpSocket::staticMetaObject, propExclusions);
    }

} // namespace Mu
