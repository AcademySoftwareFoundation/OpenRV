//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QSliderType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QWheelEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QSlider::~MuQt_QSlider()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QSlider::MuQt_QSlider(Pointer muobj, const CallEnvironment* ce,
                               QWidget* parent)
        : QSlider(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QSliderType>(
            c->internName("qt.QSlider"));
    }

    MuQt_QSlider::MuQt_QSlider(Pointer muobj, const CallEnvironment* ce,
                               Qt::Orientation orientation, QWidget* parent)
        : QSlider(orientation, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QSliderType>(
            c->internName("qt.QSlider"));
    }

    bool MuQt_QSlider::event(QEvent* event_)
    {
        if (!_env)
            return QSlider::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QSlider::event(event_);
        }
    }

    QSize MuQt_QSlider::minimumSizeHint() const
    {
        if (!_env)
            return QSlider::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QSlider::minimumSizeHint();
        }
    }

    QSize MuQt_QSlider::sizeHint() const
    {
        if (!_env)
            return QSlider::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QSlider::sizeHint();
        }
    }

    void MuQt_QSlider::mouseMoveEvent(QMouseEvent* ev)
    {
        if (!_env)
        {
            QSlider::mouseMoveEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, ev, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::mouseMoveEvent(ev);
        }
    }

    void MuQt_QSlider::mousePressEvent(QMouseEvent* ev)
    {
        if (!_env)
        {
            QSlider::mousePressEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, ev, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::mousePressEvent(ev);
        }
    }

    void MuQt_QSlider::mouseReleaseEvent(QMouseEvent* ev)
    {
        if (!_env)
        {
            QSlider::mouseReleaseEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, ev, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::mouseReleaseEvent(ev);
        }
    }

    void MuQt_QSlider::paintEvent(QPaintEvent* ev)
    {
        if (!_env)
        {
            QSlider::paintEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, ev, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::paintEvent(ev);
        }
    }

    void MuQt_QSlider::changeEvent(QEvent* ev)
    {
        if (!_env)
        {
            QSlider::changeEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, ev, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::changeEvent(ev);
        }
    }

    void MuQt_QSlider::keyPressEvent(QKeyEvent* ev)
    {
        if (!_env)
        {
            QSlider::keyPressEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, ev, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::keyPressEvent(ev);
        }
    }

    void MuQt_QSlider::timerEvent(QTimerEvent* e)
    {
        if (!_env)
        {
            QSlider::timerEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QTimerEventType>(c, e, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::timerEvent(e);
        }
    }

    void MuQt_QSlider::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QSlider::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QSlider::wheelEvent(e);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QSliderType::QSliderType(Context* c, const char* name, Class* super,
                             Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QSliderType::~QSliderType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QSlider_QSlider_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QSlider* w = object<QSlider>(widget))
        {
            QSliderType* type = c->findSymbolOfTypeByQualifiedName<QSliderType>(
                c->internName("qt.QSlider"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QSlider_QSlider_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QSlider_QSlider_QSlider_QSlider_QWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QSlider(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1));
        return param_this;
    }

    Pointer qt_QSlider_QSlider_QSlider_QSlider_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
        QWidget* arg2 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QSlider(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1, arg2));
        return param_this;
    }

    bool qt_QSlider_event_bool_QSlider_QEvent(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0) ? arg0->QSlider::event(arg1)
                                  : arg0->event(arg1);
    }

    Pointer qt_QSlider_minimumSizeHint_QSize_QSlider(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QSlider::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QSlider_sizeHint_QSize_QSlider(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QSlider::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QSlider_mouseMoveEvent_void_QSlider_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QSlider_mousePressEvent_void_QSlider_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QSlider_mouseReleaseEvent_void_QSlider_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QSlider_paintEvent_void_QSlider_QPaintEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QSlider_changeEvent_void_QSlider_QEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QSlider_keyPressEvent_void_QSlider_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QSlider_timerEvent_void_QSlider_QTimerEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->timerEvent_pub(arg1);
    }

    void qt_QSlider_wheelEvent_void_QSlider_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSlider* arg0 = object<QSlider>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QSlider*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QSlider*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QSlider0, Pointer)
    {
        NODE_RETURN(qt_QSlider_QSlider_QSlider_QSlider_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QSlider1, Pointer)
    {
        NODE_RETURN(qt_QSlider_QSlider_QSlider_QSlider_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QSlider_event_bool_QSlider_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QSlider_minimumSizeHint_QSize_QSlider(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QSlider_sizeHint_QSize_QSlider(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QSlider_mouseMoveEvent_void_QSlider_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QSlider_mousePressEvent_void_QSlider_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QSlider_mouseReleaseEvent_void_QSlider_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QSlider_paintEvent_void_QSlider_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QSlider_changeEvent_void_QSlider_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QSlider_keyPressEvent_void_QSlider_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QSlider_timerEvent_void_QSlider_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QSlider_wheelEvent_void_QSlider_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QSliderType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QSlider_QSlider_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QSlider", _n_QSlider0, None, Compiled,
                         qt_QSlider_QSlider_QSlider_QSlider_QWidget, Return,
                         "qt.QSlider", Parameters,
                         new Param(c, "this", "qt.QSlider"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "QSlider", _n_QSlider1, None, Compiled,
                         qt_QSlider_QSlider_QSlider_QSlider_int_QWidget, Return,
                         "qt.QSlider", Parameters,
                         new Param(c, "this", "qt.QSlider"),
                         new Param(c, "orientation", "int"),
                         new Param(c, "parent", "qt.QWidget"), End),
            // PROP: setTickInterval (void; QSlider this, int ti)
            // PROP: setTickPosition (void; QSlider this, flags
            // QSlider::TickPosition position) PROP: tickInterval (int; QSlider
            // this) PROP: tickPosition (flags QSlider::TickPosition; QSlider
            // this)
            _func[0] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QSlider_event_bool_QSlider_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "event_", "qt.QEvent"), End),
            _func[1] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QSlider_minimumSizeHint_QSize_QSlider, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QSlider"), End),
            _func[2] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QSlider_sizeHint_QSize_QSlider, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QSlider"), End),
            // MISSING: initStyleOption (void; QSlider this, "QStyleOptionSlider
            // *" option) // protected
            _func[3] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QSlider_mouseMoveEvent_void_QSlider_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "ev", "qt.QMouseEvent"), End),
            _func[4] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QSlider_mousePressEvent_void_QSlider_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "ev", "qt.QMouseEvent"), End),
            _func[5] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QSlider_mouseReleaseEvent_void_QSlider_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "ev", "qt.QMouseEvent"), End),
            _func[6] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QSlider_paintEvent_void_QSlider_QPaintEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "ev", "qt.QPaintEvent"), End),
            _func[7] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QSlider_changeEvent_void_QSlider_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "ev", "qt.QEvent"), End),
            _func[8] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QSlider_keyPressEvent_void_QSlider_QKeyEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "ev", "qt.QKeyEvent"), End),
            _func[9] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QSlider_timerEvent_void_QSlider_QTimerEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "e", "qt.QTimerEvent"), End),
            _func[10] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QSlider_wheelEvent_void_QSlider_QWheelEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QSlider"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QSlider::staticMetaObject, propExclusions);
    }

} // namespace Mu
