//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QWidgetType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <Mu/TupleType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QLayoutType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QBitmapType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QMarginsType.h>
#include <MuQt5/QKeySequenceType.h>
#include <MuQt5/QCursorType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QTabletEventType.h>
#include <MuQt5/QPixmapType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QHideEventType.h>
#include <MuQt5/QMoveEventType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QByteArrayType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QResizeEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QWidget::~MuQt_QWidget()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QWidget::MuQt_QWidget(Pointer muobj, const CallEnvironment* ce,
                               QWidget* parent, Qt::WindowFlags f)
        : QWidget(parent, f)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QWidgetType>(
            c->internName("qt.QWidget"));
    }

    bool MuQt_QWidget::hasHeightForWidth() const
    {
        if (!_env)
            return QWidget::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWidget::hasHeightForWidth();
        }
    }

    int MuQt_QWidget::heightForWidth(int w) const
    {
        if (!_env)
            return QWidget::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QWidget::heightForWidth(w);
        }
    }

    QVariant MuQt_QWidget::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QWidget::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QWidget::inputMethodQuery(query);
        }
    }

    QSize MuQt_QWidget::minimumSizeHint() const
    {
        if (!_env)
            return QWidget::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QWidget::minimumSizeHint();
        }
    }

    QSize MuQt_QWidget::sizeHint() const
    {
        if (!_env)
            return QWidget::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QWidget::sizeHint();
        }
    }

    void MuQt_QWidget::changeEvent(QEvent* event)
    {
        if (!_env)
        {
            QWidget::changeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::changeEvent(event);
        }
    }

    void MuQt_QWidget::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QWidget::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::closeEvent(event);
        }
    }

    void MuQt_QWidget::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QWidget::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::contextMenuEvent(event);
        }
    }

    void MuQt_QWidget::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QWidget::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::dragEnterEvent(event);
        }
    }

    void MuQt_QWidget::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QWidget::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::dragLeaveEvent(event);
        }
    }

    void MuQt_QWidget::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QWidget::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::dragMoveEvent(event);
        }
    }

    void MuQt_QWidget::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QWidget::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::dropEvent(event);
        }
    }

    void MuQt_QWidget::enterEvent(QEvent* event)
    {
        if (!_env)
        {
            QWidget::enterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::enterEvent(event);
        }
    }

    void MuQt_QWidget::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QWidget::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::focusInEvent(event);
        }
    }

    bool MuQt_QWidget::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QWidget::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWidget::focusNextPrevChild(next);
        }
    }

    void MuQt_QWidget::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QWidget::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::focusOutEvent(event);
        }
    }

    void MuQt_QWidget::hideEvent(QHideEvent* event)
    {
        if (!_env)
        {
            QWidget::hideEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, event, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::hideEvent(event);
        }
    }

    void MuQt_QWidget::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QWidget::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::keyPressEvent(event);
        }
    }

    void MuQt_QWidget::keyReleaseEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QWidget::keyReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::keyReleaseEvent(event);
        }
    }

    void MuQt_QWidget::leaveEvent(QEvent* event)
    {
        if (!_env)
        {
            QWidget::leaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::leaveEvent(event);
        }
    }

    void MuQt_QWidget::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QWidget::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QWidget::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QWidget::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::mouseMoveEvent(event);
        }
    }

    void MuQt_QWidget::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QWidget::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::mousePressEvent(event);
        }
    }

    void MuQt_QWidget::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QWidget::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::mouseReleaseEvent(event);
        }
    }

    void MuQt_QWidget::moveEvent(QMoveEvent* event)
    {
        if (!_env)
        {
            QWidget::moveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMoveEventType>(c, event, "qt.QMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::moveEvent(event);
        }
    }

    void MuQt_QWidget::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QWidget::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::paintEvent(event);
        }
    }

    void MuQt_QWidget::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QWidget::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::resizeEvent(event);
        }
    }

    void MuQt_QWidget::showEvent(QShowEvent* event)
    {
        if (!_env)
        {
            QWidget::showEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, event, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::showEvent(event);
        }
    }

    void MuQt_QWidget::tabletEvent(QTabletEvent* event)
    {
        if (!_env)
        {
            QWidget::tabletEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTabletEventType>(c, event, "qt.QTabletEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::tabletEvent(event);
        }
    }

    void MuQt_QWidget::wheelEvent(QWheelEvent* event)
    {
        if (!_env)
        {
            QWidget::wheelEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QWheelEventType>(c, event, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::wheelEvent(event);
        }
    }

    bool MuQt_QWidget::event(QEvent* event_)
    {
        if (!_env)
            return QWidget::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWidget::event(event_);
        }
    }

    int MuQt_QWidget::metric(PaintDeviceMetric m) const
    {
        if (!_env)
            return QWidget::metric(m);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(m);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QWidget::metric(m);
        }
    }

    bool MuQt_QWidget::eventFilter(QObject* watched, QEvent* event)
    {
        if (!_env)
            return QWidget::eventFilter(watched, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QObjectType>(c, watched, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QWidget::eventFilter(watched, event);
        }
    }

    void MuQt_QWidget::customEvent(QEvent* event)
    {
        if (!_env)
        {
            QWidget::customEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::customEvent(event);
        }
    }

    void MuQt_QWidget::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QWidget::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[34];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QWidget::timerEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QWidgetType::QWidgetType(Context* c, const char* name, Class* super,
                             Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QWidgetType::~QWidgetType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QWidget_QWidget_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QWidget* w = object<QWidget>(widget))
        {
            QWidgetType* type = c->findSymbolOfTypeByQualifiedName<QWidgetType>(
                c->internName("qt.QWidget"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QWidget_QWidget_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QWidget_QWidget_QWidget_QWidget_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_f)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        Qt::WindowFlags arg2 = (Qt::WindowFlags)(param_f);
        setobject(param_this,
                  new MuQt_QWidget(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1, arg2));
        return param_this;
    }

    void qt_QWidget_activateWindow_void_QWidget(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->activateWindow();
    }

    Pointer qt_QWidget_action_QAction_QWidget_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this, int index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QActionType>(c, arg0->actions()[index],
                                         "qt.QAction");
    }

    void qt_QWidget_addAction_void_QWidget_QAction(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_action)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QAction* arg1 = object<QAction>(param_action);
        arg0->addAction(arg1);
    }

    void qt_QWidget_adjustSize_void_QWidget(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->adjustSize();
    }

    int qt_QWidget_backgroundRole_int_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return int(arg0->backgroundRole());
    }

    Pointer qt_QWidget_childAt_QWidget_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_x, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return makeinstance<QWidgetType>(c, arg0->childAt(arg1, arg2),
                                         "qt.QWidget");
    }

    Pointer qt_QWidget_childAt_QWidget_QWidget_QPoint(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_p);
        return makeinstance<QWidgetType>(c, arg0->childAt(arg1), "qt.QWidget");
    }

    void qt_QWidget_clearFocus_void_QWidget(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->clearFocus();
    }

    void qt_QWidget_clearMask_void_QWidget(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->clearMask();
    }

    Pointer qt_QWidget_contentsMargins_QMargins_QWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeqtype<QMarginsType>(c, arg0->contentsMargins(),
                                       "qt.QMargins");
    }

    Pointer qt_QWidget_contentsRect_QRect_QWidget(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeqtype<QRectType>(c, arg0->contentsRect(), "qt.QRect");
    }

    void qt_QWidget_ensurePolished_void_QWidget(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->ensurePolished();
    }

    Pointer qt_QWidget_focusProxy_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->focusProxy(), "qt.QWidget");
    }

    Pointer qt_QWidget_focusWidget_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->focusWidget(), "qt.QWidget");
    }

    int qt_QWidget_foregroundRole_int_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return int(arg0->foregroundRole());
    }

    Pointer qt_QWidget_grab_QPixmap_QWidget_QRect(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QPixmapType>(c, arg0->grab(arg1), "qt.QPixmap");
    }

    void qt_QWidget_grabGesture_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_gesture,
                                                     int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::GestureType arg1 = (Qt::GestureType)(param_gesture);
        Qt::GestureFlags arg2 = (Qt::GestureFlags)(param_flags);
        arg0->grabGesture(arg1, arg2);
    }

    void qt_QWidget_grabKeyboard_void_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->grabKeyboard();
    }

    void qt_QWidget_grabMouse_void_QWidget(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->grabMouse();
    }

    void qt_QWidget_grabMouse_void_QWidget_QCursor(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_cursor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QCursor arg1 = getqtype<QCursorType>(param_cursor);
        arg0->grabMouse(arg1);
    }

    int qt_QWidget_grabShortcut_int_QWidget_QKeySequence_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_key,
        int param_context)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QKeySequence arg1 = getqtype<QKeySequenceType>(param_key);
        Qt::ShortcutContext arg2 = (Qt::ShortcutContext)(param_context);
        return arg0->grabShortcut(arg1, arg2);
    }

    bool qt_QWidget_hasHeightForWidth_bool_QWidget(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return isMuQtObject(arg0) ? arg0->QWidget::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QWidget_heightForWidth_int_QWidget_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QWidget::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    Pointer qt_QWidget_inputMethodQuery_QVariant_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QWidget::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    void qt_QWidget_insertAction_void_QWidget_QAction_QAction(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_before,
        Pointer param_action)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QAction* arg1 = object<QAction>(param_before);
        QAction* arg2 = object<QAction>(param_action);
        arg0->insertAction(arg1, arg2);
    }

    bool qt_QWidget_isAncestorOf_bool_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_child)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QWidget* arg1 = object<QWidget>(param_child);
        return arg0->isAncestorOf(arg1);
    }

    bool qt_QWidget_isEnabledTo_bool_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_ancestor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QWidget* arg1 = object<QWidget>(param_ancestor);
        return arg0->isEnabledTo(arg1);
    }

    bool qt_QWidget_isHidden_bool_QWidget(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return arg0->isHidden();
    }

    bool qt_QWidget_isVisibleTo_bool_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_ancestor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QWidget* arg1 = object<QWidget>(param_ancestor);
        return arg0->isVisibleTo(arg1);
    }

    bool qt_QWidget_isWindow_bool_QWidget(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return arg0->isWindow();
    }

    Pointer qt_QWidget_layout_QLayout_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QLayoutType>(c, arg0->layout(), "qt.QLayout");
    }

    Pointer qt_QWidget_mapFrom_QPoint_QWidget_QWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QWidget* arg1 = object<QWidget>(param_parent);
        const QPoint arg2 = getqtype<QPointType>(param_pos);
        return makeqtype<QPointType>(c, arg0->mapFrom(arg1, arg2), "qt.QPoint");
    }

    Pointer qt_QWidget_mapFromGlobal_QPoint_QWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return makeqtype<QPointType>(c, arg0->mapFromGlobal(arg1), "qt.QPoint");
    }

    Pointer qt_QWidget_mapFromParent_QPoint_QWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return makeqtype<QPointType>(c, arg0->mapFromParent(arg1), "qt.QPoint");
    }

    Pointer qt_QWidget_mapTo_QPoint_QWidget_QWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QWidget* arg1 = object<QWidget>(param_parent);
        const QPoint arg2 = getqtype<QPointType>(param_pos);
        return makeqtype<QPointType>(c, arg0->mapTo(arg1, arg2), "qt.QPoint");
    }

    Pointer qt_QWidget_mapToGlobal_QPoint_QWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return makeqtype<QPointType>(c, arg0->mapToGlobal(arg1), "qt.QPoint");
    }

    Pointer qt_QWidget_mapToParent_QPoint_QWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return makeqtype<QPointType>(c, arg0->mapToParent(arg1), "qt.QPoint");
    }

    Pointer qt_QWidget_mask_QRegion_QWidget(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeqtype<QRegionType>(c, arg0->mask(), "qt.QRegion");
    }

    Pointer qt_QWidget_minimumSizeHint_QSize_QWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QWidget::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    void qt_QWidget_move_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this, int param_x,
                                              int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        arg0->move(arg1, arg2);
    }

    Pointer
    qt_QWidget_nativeParentWidget_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->nativeParentWidget(),
                                         "qt.QWidget");
    }

    Pointer qt_QWidget_nextInFocusChain_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->nextInFocusChain(),
                                         "qt.QWidget");
    }

    void qt_QWidget_overrideWindowFlags_void_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::WindowFlags arg1 = (Qt::WindowFlags)(param_flags);
        arg0->overrideWindowFlags(arg1);
    }

    Pointer qt_QWidget_parentWidget_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->parentWidget(), "qt.QWidget");
    }

    Pointer
    qt_QWidget_previousInFocusChain_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->previousInFocusChain(),
                                         "qt.QWidget");
    }

    void qt_QWidget_releaseKeyboard_void_QWidget(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->releaseKeyboard();
    }

    void qt_QWidget_releaseMouse_void_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->releaseMouse();
    }

    void qt_QWidget_releaseShortcut_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_id)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_id);
        arg0->releaseShortcut(arg1);
    }

    void qt_QWidget_removeAction_void_QWidget_QAction(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_action)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QAction* arg1 = object<QAction>(param_action);
        arg0->removeAction(arg1);
    }

    void qt_QWidget_repaint_void_QWidget_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y,
        int param_w, int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_w);
        int arg4 = (int)(param_h);
        arg0->repaint(arg1, arg2, arg3, arg4);
    }

    void qt_QWidget_repaint_void_QWidget_QRect(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_rect)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        arg0->repaint(arg1);
    }

    void qt_QWidget_repaint_void_QWidget_QRegion(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_rgn)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QRegion arg1 = getqtype<QRegionType>(param_rgn);
        arg0->repaint(arg1);
    }

    void qt_QWidget_resize_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this, int param_w,
                                                int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_w);
        int arg2 = (int)(param_h);
        arg0->resize(arg1, arg2);
    }

    bool qt_QWidget_restoreGeometry_bool_QWidget_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_geometry)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_geometry);
        return arg0->restoreGeometry(arg1);
    }

    Pointer qt_QWidget_saveGeometry_QByteArray_QWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeqtype<QByteArrayType>(c, arg0->saveGeometry(),
                                         "qt.QByteArray");
    }

    void qt_QWidget_scroll_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        arg0->scroll(arg1, arg2);
    }

    void qt_QWidget_scroll_void_QWidget_int_int_QRect(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_dx,
                                                      int param_dy,
                                                      Pointer param_r)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        const QRect arg3 = getqtype<QRectType>(param_r);
        arg0->scroll(arg1, arg2, arg3);
    }

    void qt_QWidget_setAttribute_void_QWidget_int_bool(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_attribute,
                                                       bool param_on)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::WidgetAttribute arg1 = (Qt::WidgetAttribute)(param_attribute);
        bool arg2 = (bool)(param_on);
        arg0->setAttribute(arg1, arg2);
    }

    void qt_QWidget_setBackgroundRole_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QPalette::ColorRole arg1 = (QPalette::ColorRole)(param_role);
        arg0->setBackgroundRole(arg1);
    }

    void qt_QWidget_setBaseSize_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     int param_basew,
                                                     int param_baseh)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_basew);
        int arg2 = (int)(param_baseh);
        arg0->setBaseSize(arg1, arg2);
    }

    void qt_QWidget_setFixedHeight_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_h);
        arg0->setFixedHeight(arg1);
    }

    void qt_QWidget_setFixedSize_void_QWidget_QSize(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_s)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QSize arg1 = getqtype<QSizeType>(param_s);
        arg0->setFixedSize(arg1);
    }

    void qt_QWidget_setFixedSize_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_w, int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_w);
        int arg2 = (int)(param_h);
        arg0->setFixedSize(arg1, arg2);
    }

    void qt_QWidget_setFixedWidth_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_w);
        arg0->setFixedWidth(arg1);
    }

    void qt_QWidget_setFocus_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              int param_reason)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::FocusReason arg1 = (Qt::FocusReason)(param_reason);
        arg0->setFocus(arg1);
    }

    void qt_QWidget_setFocusProxy_void_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QWidget* arg1 = object<QWidget>(param_w);
        arg0->setFocusProxy(arg1);
    }

    void qt_QWidget_setForegroundRole_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QPalette::ColorRole arg1 = (QPalette::ColorRole)(param_role);
        arg0->setForegroundRole(arg1);
    }

    void qt_QWidget_setGeometry_void_QWidget_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y,
        int param_w, int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_w);
        int arg4 = (int)(param_h);
        arg0->setGeometry(arg1, arg2, arg3, arg4);
    }

    void qt_QWidget_setLayout_void_QWidget_QLayout(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_layout)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QLayout* arg1 = object<QLayout>(param_layout);
        arg0->setLayout(arg1);
    }

    void qt_QWidget_setMask_void_QWidget_QBitmap(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_bitmap)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QBitmap arg1 = getqtype<QBitmapType>(param_bitmap);
        arg0->setMask(arg1);
    }

    void qt_QWidget_setMask_void_QWidget_QRegion(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_region)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QRegion arg1 = getqtype<QRegionType>(param_region);
        arg0->setMask(arg1);
    }

    void qt_QWidget_setMaximumSize_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_maxw,
                                                        int param_maxh)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_maxw);
        int arg2 = (int)(param_maxh);
        arg0->setMaximumSize(arg1, arg2);
    }

    void qt_QWidget_setMinimumSize_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_minw,
                                                        int param_minh)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_minw);
        int arg2 = (int)(param_minh);
        arg0->setMinimumSize(arg1, arg2);
    }

    void qt_QWidget_setParent_void_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QWidget* arg1 = object<QWidget>(param_parent);
        arg0->setParent(arg1);
    }

    void qt_QWidget_setParent_void_QWidget_QWidget_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_parent,
                                                       int param_f)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QWidget* arg1 = object<QWidget>(param_parent);
        Qt::WindowFlags arg2 = (Qt::WindowFlags)(param_f);
        arg0->setParent(arg1, arg2);
    }

    void qt_QWidget_setShortcutAutoRepeat_void_QWidget_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_id,
        bool param_enable)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_id);
        bool arg2 = (bool)(param_enable);
        arg0->setShortcutAutoRepeat(arg1, arg2);
    }

    void qt_QWidget_setShortcutEnabled_void_QWidget_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_id,
        bool param_enable)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_id);
        bool arg2 = (bool)(param_enable);
        arg0->setShortcutEnabled(arg1, arg2);
    }

    void qt_QWidget_setSizeIncrement_void_QWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_w, int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_w);
        int arg2 = (int)(param_h);
        arg0->setSizeIncrement(arg1, arg2);
    }

    void qt_QWidget_setSizePolicy_void_QWidget_int_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_horizontal,
                                                       int param_vertical)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QSizePolicy::Policy arg1 = (QSizePolicy::Policy)(param_horizontal);
        QSizePolicy::Policy arg2 = (QSizePolicy::Policy)(param_vertical);
        arg0->setSizePolicy(arg1, arg2);
    }

    void qt_QWidget_setWindowRole_void_QWidget_string(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QString arg1 = qstring(param_role);
        arg0->setWindowRole(arg1);
    }

    void qt_QWidget_setWindowState_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_windowState)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::WindowStates arg1 = (Qt::WindowStates)(param_windowState);
        arg0->setWindowState(arg1);
    }

    Pointer qt_QWidget_sizeHint_QSize_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QWidget::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QWidget_stackUnder_void_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QWidget* arg1 = object<QWidget>(param_w);
        arg0->stackUnder(arg1);
    }

    bool qt_QWidget_testAttribute_bool_QWidget_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_attribute)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::WidgetAttribute arg1 = (Qt::WidgetAttribute)(param_attribute);
        return arg0->testAttribute(arg1);
    }

    bool qt_QWidget_underMouse_bool_QWidget(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return arg0->underMouse();
    }

    void qt_QWidget_ungrabGesture_void_QWidget_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_gesture)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        Qt::GestureType arg1 = (Qt::GestureType)(param_gesture);
        arg0->ungrabGesture(arg1);
    }

    void qt_QWidget_update_void_QWidget_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y,
        int param_w, int param_h)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_w);
        int arg4 = (int)(param_h);
        arg0->update(arg1, arg2, arg3, arg4);
    }

    void qt_QWidget_update_void_QWidget_QRect(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_rect)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        arg0->update(arg1);
    }

    void qt_QWidget_update_void_QWidget_QRegion(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_rgn)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        const QRegion arg1 = getqtype<QRegionType>(param_rgn);
        arg0->update(arg1);
    }

    void qt_QWidget_updateGeometry_void_QWidget(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        arg0->updateGeometry();
    }

    Pointer qt_QWidget_visibleRegion_QRegion_QWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeqtype<QRegionType>(c, arg0->visibleRegion(), "qt.QRegion");
    }

    Pointer qt_QWidget_window_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makeinstance<QWidgetType>(c, arg0->window(), "qt.QWidget");
    }

    Pointer qt_QWidget_windowRole_string_QWidget(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return makestring(c, arg0->windowRole());
    }

    int qt_QWidget_windowState_int_QWidget(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return int(arg0->windowState());
    }

    int qt_QWidget_windowType_int_QWidget(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return int(arg0->windowType());
    }

    void qt_QWidget_changeEvent_void_QWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QWidget_closeEvent_void_QWidget_QCloseEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QWidget_contextMenuEvent_void_QWidget_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QWidget_destroy_void_QWidget_bool_bool(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   bool param_destroyWindow,
                                                   bool param_destroySubWindows)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        bool arg1 = (bool)(param_destroyWindow);
        bool arg2 = (bool)(param_destroySubWindows);
        ((MuQt_QWidget*)arg0)->destroy_pub(arg1, arg2);
    }

    void qt_QWidget_dragEnterEvent_void_QWidget_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QWidget_dragLeaveEvent_void_QWidget_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QWidget_dragMoveEvent_void_QWidget_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QWidget_dropEvent_void_QWidget_QDropEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QWidget_enterEvent_void_QWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->enterEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->enterEvent_pub(arg1);
    }

    void qt_QWidget_focusInEvent_void_QWidget_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QWidget_focusNextChild_bool_QWidget(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return ((MuQt_QWidget*)arg0)->focusNextChild_pub();
    }

    bool qt_QWidget_focusNextPrevChild_bool_QWidget_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QWidget*)arg0)->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QWidget*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QWidget_focusOutEvent_void_QWidget_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->focusOutEvent_pub(arg1);
    }

    bool qt_QWidget_focusPreviousChild_bool_QWidget(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        return ((MuQt_QWidget*)arg0)->focusPreviousChild_pub();
    }

    void qt_QWidget_hideEvent_void_QWidget_QHideEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QWidget_keyPressEvent_void_QWidget_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QWidget_keyReleaseEvent_void_QWidget_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QWidget_leaveEvent_void_QWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->leaveEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->leaveEvent_pub(arg1);
    }

    void qt_QWidget_mouseDoubleClickEvent_void_QWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QWidget_mouseMoveEvent_void_QWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QWidget_mousePressEvent_void_QWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QWidget_mouseReleaseEvent_void_QWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QWidget_moveEvent_void_QWidget_QMoveEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QMoveEvent* arg1 = getqpointer<QMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->moveEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->moveEvent_pub(arg1);
    }

    void qt_QWidget_paintEvent_void_QWidget_QPaintEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QWidget_resizeEvent_void_QWidget_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QWidget_showEvent_void_QWidget_QShowEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->showEvent_pub(arg1);
    }

    void qt_QWidget_tabletEvent_void_QWidget_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QTabletEvent* arg1 = getqpointer<QTabletEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->tabletEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->tabletEvent_pub(arg1);
    }

    void qt_QWidget_wheelEvent_void_QWidget_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->wheelEvent_pub(arg1);
    }

    bool qt_QWidget_event_bool_QWidget_QEvent(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QWidget*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QWidget*)arg0)->event_pub(arg1);
    }

    int qt_QWidget_metric_int_QWidget_int(Mu::Thread& NODE_THREAD,
                                          Pointer param_this, int param_m)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QPaintDevice::PaintDeviceMetric arg1 =
            (QPaintDevice::PaintDeviceMetric)(param_m);
        return isMuQtObject(arg0)
                   ? ((MuQt_QWidget*)arg0)->metric_pub_parent(arg1)
                   : ((MuQt_QWidget*)arg0)->metric_pub(arg1);
    }

    bool qt_QWidget_eventFilter_bool_QWidget_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0) ? arg0->QWidget::eventFilter(arg1, arg2)
                                  : arg0->eventFilter(arg1, arg2);
    }

    void qt_QWidget_customEvent_void_QWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->customEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->customEvent_pub(arg1);
    }

    void qt_QWidget_timerEvent_void_QWidget_QTimerEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QWidget*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QWidget*)arg0)->timerEvent_pub(arg1);
    }

    Pointer qt_QWidget_keyboardGrabber_QWidget(Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makeinstance<QWidgetType>(c, QWidget::keyboardGrabber(),
                                         "qt.QWidget");
    }

    Pointer qt_QWidget_mouseGrabber_QWidget(Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makeinstance<QWidgetType>(c, QWidget::mouseGrabber(),
                                         "qt.QWidget");
    }

    void qt_QWidget_setTabOrder_void_QWidget_QWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_first,
                                                     Pointer param_second)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_first);
        QWidget* arg1 = object<QWidget>(param_second);
        QWidget::setTabOrder(arg0, arg1);
    }

    static NODE_IMPLEMENTATION(_n_QWidget0, Pointer)
    {
        NODE_RETURN(qt_QWidget_QWidget_QWidget_QWidget_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_activateWindow0, void)
    {
        qt_QWidget_activateWindow_void_QWidget(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_action0, Pointer)
    {
        NODE_RETURN(qt_QWidget_action_QAction_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_addAction0, void)
    {
        qt_QWidget_addAction_void_QWidget_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_adjustSize0, void)
    {
        qt_QWidget_adjustSize_void_QWidget(NODE_THREAD,
                                           NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_backgroundRole0, int)
    {
        NODE_RETURN(qt_QWidget_backgroundRole_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_childAt0, Pointer)
    {
        NODE_RETURN(qt_QWidget_childAt_QWidget_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_childAt1, Pointer)
    {
        NODE_RETURN(qt_QWidget_childAt_QWidget_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_clearFocus0, void)
    {
        qt_QWidget_clearFocus_void_QWidget(NODE_THREAD,
                                           NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_clearMask0, void)
    {
        qt_QWidget_clearMask_void_QWidget(NODE_THREAD,
                                          NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contentsMargins0, Pointer)
    {
        NODE_RETURN(qt_QWidget_contentsMargins_QMargins_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contentsRect0, Pointer)
    {
        NODE_RETURN(qt_QWidget_contentsRect_QRect_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_ensurePolished0, void)
    {
        qt_QWidget_ensurePolished_void_QWidget(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusProxy0, Pointer)
    {
        NODE_RETURN(qt_QWidget_focusProxy_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_focusWidget0, Pointer)
    {
        NODE_RETURN(qt_QWidget_focusWidget_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_foregroundRole0, int)
    {
        NODE_RETURN(qt_QWidget_foregroundRole_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_grab0, Pointer)
    {
        NODE_RETURN(qt_QWidget_grab_QPixmap_QWidget_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_grabGesture0, void)
    {
        qt_QWidget_grabGesture_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_grabKeyboard0, void)
    {
        qt_QWidget_grabKeyboard_void_QWidget(NODE_THREAD,
                                             NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_grabMouse0, void)
    {
        qt_QWidget_grabMouse_void_QWidget(NODE_THREAD,
                                          NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_grabMouse1, void)
    {
        qt_QWidget_grabMouse_void_QWidget_QCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_grabShortcut0, int)
    {
        NODE_RETURN(qt_QWidget_grabShortcut_int_QWidget_QKeySequence_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QWidget_hasHeightForWidth_bool_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QWidget_heightForWidth_int_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QWidget_inputMethodQuery_QVariant_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_insertAction0, void)
    {
        qt_QWidget_insertAction_void_QWidget_QAction_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_isAncestorOf0, bool)
    {
        NODE_RETURN(qt_QWidget_isAncestorOf_bool_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEnabledTo0, bool)
    {
        NODE_RETURN(qt_QWidget_isEnabledTo_bool_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isHidden0, bool)
    {
        NODE_RETURN(qt_QWidget_isHidden_bool_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isVisibleTo0, bool)
    {
        NODE_RETURN(qt_QWidget_isVisibleTo_bool_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isWindow0, bool)
    {
        NODE_RETURN(qt_QWidget_isWindow_bool_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_layout0, Pointer)
    {
        NODE_RETURN(qt_QWidget_layout_QLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapFrom0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mapFrom_QPoint_QWidget_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapFromGlobal0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mapFromGlobal_QPoint_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapFromParent0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mapFromParent_QPoint_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapTo0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mapTo_QPoint_QWidget_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapToGlobal0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mapToGlobal_QPoint_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapToParent0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mapToParent_QPoint_QWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mask0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mask_QRegion_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QWidget_minimumSizeHint_QSize_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_move1, void)
    {
        qt_QWidget_move_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_nativeParentWidget0, Pointer)
    {
        NODE_RETURN(qt_QWidget_nativeParentWidget_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_nextInFocusChain0, Pointer)
    {
        NODE_RETURN(qt_QWidget_nextInFocusChain_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_overrideWindowFlags0, void)
    {
        qt_QWidget_overrideWindowFlags_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_parentWidget0, Pointer)
    {
        NODE_RETURN(qt_QWidget_parentWidget_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_previousInFocusChain0, Pointer)
    {
        NODE_RETURN(qt_QWidget_previousInFocusChain_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_releaseKeyboard0, void)
    {
        qt_QWidget_releaseKeyboard_void_QWidget(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_releaseMouse0, void)
    {
        qt_QWidget_releaseMouse_void_QWidget(NODE_THREAD,
                                             NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_releaseShortcut0, void)
    {
        qt_QWidget_releaseShortcut_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_removeAction0, void)
    {
        qt_QWidget_removeAction_void_QWidget_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_repaint0, void)
    {
        qt_QWidget_repaint_void_QWidget_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_repaint1, void)
    {
        qt_QWidget_repaint_void_QWidget_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_repaint2, void)
    {
        qt_QWidget_repaint_void_QWidget_QRegion(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resize1, void)
    {
        qt_QWidget_resize_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_restoreGeometry0, bool)
    {
        NODE_RETURN(qt_QWidget_restoreGeometry_bool_QWidget_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_saveGeometry0, Pointer)
    {
        NODE_RETURN(qt_QWidget_saveGeometry_QByteArray_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_scroll0, void)
    {
        qt_QWidget_scroll_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_scroll1, void)
    {
        qt_QWidget_scroll_void_QWidget_int_int_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setAttribute0, void)
    {
        qt_QWidget_setAttribute_void_QWidget_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setBackgroundRole0, void)
    {
        qt_QWidget_setBackgroundRole_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setBaseSize1, void)
    {
        qt_QWidget_setBaseSize_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setFixedHeight0, void)
    {
        qt_QWidget_setFixedHeight_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setFixedSize0, void)
    {
        qt_QWidget_setFixedSize_void_QWidget_QSize(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setFixedSize1, void)
    {
        qt_QWidget_setFixedSize_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setFixedWidth0, void)
    {
        qt_QWidget_setFixedWidth_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setFocus0, void)
    {
        qt_QWidget_setFocus_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setFocusProxy0, void)
    {
        qt_QWidget_setFocusProxy_void_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setForegroundRole0, void)
    {
        qt_QWidget_setForegroundRole_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setGeometry1, void)
    {
        qt_QWidget_setGeometry_void_QWidget_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_setLayout0, void)
    {
        qt_QWidget_setLayout_void_QWidget_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setMask0, void)
    {
        qt_QWidget_setMask_void_QWidget_QBitmap(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setMask1, void)
    {
        qt_QWidget_setMask_void_QWidget_QRegion(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setMaximumSize1, void)
    {
        qt_QWidget_setMaximumSize_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setMinimumSize1, void)
    {
        qt_QWidget_setMinimumSize_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setParent0, void)
    {
        qt_QWidget_setParent_void_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setParent1, void)
    {
        qt_QWidget_setParent_void_QWidget_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setShortcutAutoRepeat0, void)
    {
        qt_QWidget_setShortcutAutoRepeat_void_QWidget_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setShortcutEnabled0, void)
    {
        qt_QWidget_setShortcutEnabled_void_QWidget_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setSizeIncrement1, void)
    {
        qt_QWidget_setSizeIncrement_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setSizePolicy1, void)
    {
        qt_QWidget_setSizePolicy_void_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setWindowRole0, void)
    {
        qt_QWidget_setWindowRole_void_QWidget_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setWindowState0, void)
    {
        qt_QWidget_setWindowState_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QWidget_sizeHint_QSize_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_stackUnder0, void)
    {
        qt_QWidget_stackUnder_void_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_testAttribute0, bool)
    {
        NODE_RETURN(qt_QWidget_testAttribute_bool_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_underMouse0, bool)
    {
        NODE_RETURN(qt_QWidget_underMouse_bool_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_ungrabGesture0, void)
    {
        qt_QWidget_ungrabGesture_void_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_update0, void)
    {
        qt_QWidget_update_void_QWidget_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_update1, void)
    {
        qt_QWidget_update_void_QWidget_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_update2, void)
    {
        qt_QWidget_update_void_QWidget_QRegion(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_updateGeometry0, void)
    {
        qt_QWidget_updateGeometry_void_QWidget(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_visibleRegion0, Pointer)
    {
        NODE_RETURN(qt_QWidget_visibleRegion_QRegion_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_window0, Pointer)
    {
        NODE_RETURN(qt_QWidget_window_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_windowRole0, Pointer)
    {
        NODE_RETURN(qt_QWidget_windowRole_string_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_windowState0, int)
    {
        NODE_RETURN(qt_QWidget_windowState_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_windowType0, int)
    {
        NODE_RETURN(qt_QWidget_windowType_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QWidget_changeEvent_void_QWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QWidget_closeEvent_void_QWidget_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QWidget_contextMenuEvent_void_QWidget_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_destroy0, void)
    {
        qt_QWidget_destroy_void_QWidget_bool_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QWidget_dragEnterEvent_void_QWidget_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QWidget_dragLeaveEvent_void_QWidget_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QWidget_dragMoveEvent_void_QWidget_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QWidget_dropEvent_void_QWidget_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_enterEvent0, void)
    {
        qt_QWidget_enterEvent_void_QWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QWidget_focusInEvent_void_QWidget_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextChild0, bool)
    {
        NODE_RETURN(qt_QWidget_focusNextChild_bool_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QWidget_focusNextPrevChild_bool_QWidget_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QWidget_focusOutEvent_void_QWidget_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusPreviousChild0, bool)
    {
        NODE_RETURN(qt_QWidget_focusPreviousChild_bool_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QWidget_hideEvent_void_QWidget_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QWidget_keyPressEvent_void_QWidget_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QWidget_keyReleaseEvent_void_QWidget_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
    {
        qt_QWidget_leaveEvent_void_QWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QWidget_mouseDoubleClickEvent_void_QWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QWidget_mouseMoveEvent_void_QWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QWidget_mousePressEvent_void_QWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QWidget_mouseReleaseEvent_void_QWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveEvent0, void)
    {
        qt_QWidget_moveEvent_void_QWidget_QMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QWidget_paintEvent_void_QWidget_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QWidget_resizeEvent_void_QWidget_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QWidget_showEvent_void_QWidget_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
    {
        qt_QWidget_tabletEvent_void_QWidget_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QWidget_wheelEvent_void_QWidget_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QWidget_event_bool_QWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_metric0, int)
    {
        NODE_RETURN(qt_QWidget_metric_int_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(qt_QWidget_eventFilter_bool_QWidget_QObject_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_customEvent0, void)
    {
        qt_QWidget_customEvent_void_QWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QWidget_timerEvent_void_QWidget_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyboardGrabber0, Pointer)
    {
        NODE_RETURN(qt_QWidget_keyboardGrabber_QWidget(NODE_THREAD));
    }

    static NODE_IMPLEMENTATION(_n_mouseGrabber0, Pointer)
    {
        NODE_RETURN(qt_QWidget_mouseGrabber_QWidget(NODE_THREAD));
    }

    static NODE_IMPLEMENTATION(_n_setTabOrder0, void)
    {
        qt_QWidget_setTabOrder_void_QWidget_QWidget(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_QWidget_windowFlags_int, int)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(NODE_ARG(0, Pointer));
        NODE_RETURN(arg0->windowFlags());
    }

    static NODE_IMPLEMENTATION(_n_QWidget_setWindowFlags_void_int, void)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(NODE_ARG(0, Pointer));
        arg0->setWindowFlags(Qt::WindowFlags(NODE_ARG(0, int)));
    }

    static NODE_IMPLEMENTATION(_n_QWidget_getContentsMargins, Pointer)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(NODE_ARG(0, Pointer));

        MuLangContext::TypeVector types(4);
        const Type* t = c->intType();
        types[0] = t;
        types[1] = t;
        types[2] = t;
        types[3] = t;

        struct Tuple
        {
            int a, b, c, d;
        };

        ClassInstance* obj = ClassInstance::allocate(c->tupleType(types));
        Tuple* tuple = (Tuple*)obj->structure();
        arg0->getContentsMargins(&tuple->a, &tuple->b, &tuple->c, &tuple->d);
        NODE_RETURN(obj);
    }

    void QWidgetType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QWidget_QWidget_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QWidget", _n_QWidget0, None, Compiled,
                qt_QWidget_QWidget_QWidget_QWidget_QWidget_int, Return,
                "qt.QWidget", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "parent", "qt.QWidget"),
                new Param(c, "f", "int", Value((int)Qt::WindowFlags())), End),
            // PROP: acceptDrops (bool; QWidget this)
            // PROP: accessibleDescription (string; QWidget this)
            // PROP: accessibleName (string; QWidget this)
            // MISSING: actions ("QList<QAction * >"; QWidget this)
            new Function(c, "action", _n_action0, None, Compiled,
                         qt_QWidget_action_QAction_QWidget_int, Return,
                         "qt.QAction", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "index", "int"), End),
            new Function(c, "activateWindow", _n_activateWindow0, None,
                         Compiled, qt_QWidget_activateWindow_void_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "addAction", _n_addAction0, None, Compiled,
                         qt_QWidget_addAction_void_QWidget_QAction, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "action", "qt.QAction"), End),
            // MISSING: addActions (void; QWidget this, "const QList<QAction * >
            // &" actions)
            new Function(c, "adjustSize", _n_adjustSize0, None, Compiled,
                         qt_QWidget_adjustSize_void_QWidget, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: autoFillBackground (bool; QWidget this)
            new Function(c, "backgroundRole", _n_backgroundRole0, None,
                         Compiled, qt_QWidget_backgroundRole_int_QWidget,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // MISSING: backingStore ("QBackingStore *"; QWidget this)
            // PROP: baseSize (QSize; QWidget this)
            new Function(
                c, "childAt", _n_childAt0, None, Compiled,
                qt_QWidget_childAt_QWidget_QWidget_int_int, Return,
                "qt.QWidget", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "x", "int"), new Param(c, "y", "int"), End),
            new Function(c, "childAt", _n_childAt1, None, Compiled,
                         qt_QWidget_childAt_QWidget_QWidget_QPoint, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "p", "qt.QPoint"), End),
            // PROP: childrenRect (QRect; QWidget this)
            // PROP: childrenRegion (QRegion; QWidget this)
            new Function(c, "clearFocus", _n_clearFocus0, None, Compiled,
                         qt_QWidget_clearFocus_void_QWidget, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "clearMask", _n_clearMask0, None, Compiled,
                         qt_QWidget_clearMask_void_QWidget, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "contentsMargins", _n_contentsMargins0, None,
                         Compiled, qt_QWidget_contentsMargins_QMargins_QWidget,
                         Return, "qt.QMargins", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "contentsRect", _n_contentsRect0, None, Compiled,
                         qt_QWidget_contentsRect_QRect_QWidget, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: contextMenuPolicy (flags Qt::ContextMenuPolicy; QWidget
            // this) PROP: cursor (QCursor; QWidget this) MISSING:
            // effectiveWinId ("WId"; QWidget this)
            new Function(c, "ensurePolished", _n_ensurePolished0, None,
                         Compiled, qt_QWidget_ensurePolished_void_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: focusPolicy (flags Qt::FocusPolicy; QWidget this)
            new Function(c, "focusProxy", _n_focusProxy0, None, Compiled,
                         qt_QWidget_focusProxy_QWidget_QWidget, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "focusWidget", _n_focusWidget0, None, Compiled,
                         qt_QWidget_focusWidget_QWidget_QWidget, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: font (QFont; QWidget this)
            // MISSING: fontInfo ("QFontInfo"; QWidget this)
            // MISSING: fontMetrics ("QFontMetrics"; QWidget this)
            new Function(c, "foregroundRole", _n_foregroundRole0, None,
                         Compiled, qt_QWidget_foregroundRole_int_QWidget,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: frameGeometry (QRect; QWidget this)
            // PROP: frameSize (QSize; QWidget this)
            // PROP: geometry (QRect; QWidget this)
            new Function(c, "grab", _n_grab0, None, Compiled,
                         qt_QWidget_grab_QPixmap_QWidget_QRect, Return,
                         "qt.QPixmap", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(
                c, "grabGesture", _n_grabGesture0, None, Compiled,
                qt_QWidget_grabGesture_void_QWidget_int_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "gesture", "int"),
                new Param(c, "flags", "int", Value((int)Qt::GestureFlags())),
                End),
            new Function(c, "grabKeyboard", _n_grabKeyboard0, None, Compiled,
                         qt_QWidget_grabKeyboard_void_QWidget, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "grabMouse", _n_grabMouse0, None, Compiled,
                         qt_QWidget_grabMouse_void_QWidget, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "grabMouse", _n_grabMouse1, None, Compiled,
                         qt_QWidget_grabMouse_void_QWidget_QCursor, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "cursor", "qt.QCursor"), End),
            new Function(
                c, "grabShortcut", _n_grabShortcut0, None, Compiled,
                qt_QWidget_grabShortcut_int_QWidget_QKeySequence_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "key", "qt.QKeySequence"),
                new Param(c, "context", "int", Value((int)Qt::WindowShortcut)),
                End),
            // MISSING: graphicsEffect ("QGraphicsEffect *"; QWidget this)
            // MISSING: graphicsProxyWidget ("QGraphicsProxyWidget *"; QWidget
            // this) PROP: hasFocus (bool; QWidget this)
            _func[0] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QWidget_hasHeightForWidth_bool_QWidget, Return, "bool",
                Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: hasMouseTracking (bool; QWidget this)
            // PROP: height (int; QWidget this)
            _func[1] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QWidget_heightForWidth_int_QWidget_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "w", "int"), End),
            // PROP: inputMethodHints (flags Qt::InputMethodHints; QWidget this)
            _func[2] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QWidget_inputMethodQuery_QVariant_QWidget_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "query", "int"), End),
            new Function(c, "insertAction", _n_insertAction0, None, Compiled,
                         qt_QWidget_insertAction_void_QWidget_QAction_QAction,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "before", "qt.QAction"),
                         new Param(c, "action", "qt.QAction"), End),
            // MISSING: insertActions (void; QWidget this, QAction before,
            // "QList<QAction * >" actions) PROP: isActiveWindow (bool; QWidget
            // this)
            new Function(c, "isAncestorOf", _n_isAncestorOf0, None, Compiled,
                         qt_QWidget_isAncestorOf_bool_QWidget_QWidget, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "child", "qt.QWidget"), End),
            // PROP: isEnabled (bool; QWidget this)
            new Function(c, "isEnabledTo", _n_isEnabledTo0, None, Compiled,
                         qt_QWidget_isEnabledTo_bool_QWidget_QWidget, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "ancestor", "qt.QWidget"), End),
            // PROP: isFullScreen (bool; QWidget this)
            new Function(c, "isHidden", _n_isHidden0, None, Compiled,
                         qt_QWidget_isHidden_bool_QWidget, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: isMaximized (bool; QWidget this)
            // PROP: isMinimized (bool; QWidget this)
            // PROP: isModal (bool; QWidget this)
            // PROP: isVisible (bool; QWidget this)
            new Function(c, "isVisibleTo", _n_isVisibleTo0, None, Compiled,
                         qt_QWidget_isVisibleTo_bool_QWidget_QWidget, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "ancestor", "qt.QWidget"), End),
            new Function(c, "isWindow", _n_isWindow0, None, Compiled,
                         qt_QWidget_isWindow_bool_QWidget, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: isWindowModified (bool; QWidget this)
            new Function(c, "layout", _n_layout0, None, Compiled,
                         qt_QWidget_layout_QLayout_QWidget, Return,
                         "qt.QLayout", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: layoutDirection (flags Qt::LayoutDirection; QWidget this)
            // MISSING: locale ("QLocale"; QWidget this)
            new Function(c, "mapFrom", _n_mapFrom0, None, Compiled,
                         qt_QWidget_mapFrom_QPoint_QWidget_QWidget_QPoint,
                         Return, "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "parent", "qt.QWidget"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "mapFromGlobal", _n_mapFromGlobal0, None, Compiled,
                         qt_QWidget_mapFromGlobal_QPoint_QWidget_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "mapFromParent", _n_mapFromParent0, None, Compiled,
                         qt_QWidget_mapFromParent_QPoint_QWidget_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "mapTo", _n_mapTo0, None, Compiled,
                         qt_QWidget_mapTo_QPoint_QWidget_QWidget_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "parent", "qt.QWidget"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "mapToGlobal", _n_mapToGlobal0, None, Compiled,
                         qt_QWidget_mapToGlobal_QPoint_QWidget_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "mapToParent", _n_mapToParent0, None, Compiled,
                         qt_QWidget_mapToParent_QPoint_QWidget_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "mask", _n_mask0, None, Compiled,
                         qt_QWidget_mask_QRegion_QWidget, Return, "qt.QRegion",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: maximumHeight (int; QWidget this)
            // PROP: maximumSize (QSize; QWidget this)
            // PROP: maximumWidth (int; QWidget this)
            // PROP: minimumHeight (int; QWidget this)
            // PROP: minimumSize (QSize; QWidget this)
            _func[3] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QWidget_minimumSizeHint_QSize_QWidget, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: minimumWidth (int; QWidget this)
            // PROP: move (void; QWidget this, QPoint _p15)
            new Function(c, "move", _n_move1, None, Compiled,
                         qt_QWidget_move_void_QWidget_int_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         End),
            new Function(c, "nativeParentWidget", _n_nativeParentWidget0, None,
                         Compiled,
                         qt_QWidget_nativeParentWidget_QWidget_QWidget, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "nextInFocusChain", _n_nextInFocusChain0, None,
                         Compiled, qt_QWidget_nextInFocusChain_QWidget_QWidget,
                         Return, "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: normalGeometry (QRect; QWidget this)
            new Function(
                c, "overrideWindowFlags", _n_overrideWindowFlags0, None,
                Compiled, qt_QWidget_overrideWindowFlags_void_QWidget_int,
                Return, "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "flags", "int"), End),
            // PROP: palette (QPalette; QWidget this)
            new Function(c, "parentWidget", _n_parentWidget0, None, Compiled,
                         qt_QWidget_parentWidget_QWidget_QWidget, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: pos (QPoint; QWidget this)
            new Function(c, "previousInFocusChain", _n_previousInFocusChain0,
                         None, Compiled,
                         qt_QWidget_previousInFocusChain_QWidget_QWidget,
                         Return, "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: rect (QRect; QWidget this)
            new Function(c, "releaseKeyboard", _n_releaseKeyboard0, None,
                         Compiled, qt_QWidget_releaseKeyboard_void_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "releaseMouse", _n_releaseMouse0, None, Compiled,
                         qt_QWidget_releaseMouse_void_QWidget, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "releaseShortcut", _n_releaseShortcut0, None,
                         Compiled, qt_QWidget_releaseShortcut_void_QWidget_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "id", "int"), End),
            new Function(c, "removeAction", _n_removeAction0, None, Compiled,
                         qt_QWidget_removeAction_void_QWidget_QAction, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "action", "qt.QAction"), End),
            new Function(
                c, "repaint", _n_repaint0, None, Compiled,
                qt_QWidget_repaint_void_QWidget_int_int_int_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "x", "int"), new Param(c, "y", "int"),
                new Param(c, "w", "int"), new Param(c, "h", "int"), End),
            new Function(c, "repaint", _n_repaint1, None, Compiled,
                         qt_QWidget_repaint_void_QWidget_QRect, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "rect", "qt.QRect"), End),
            new Function(c, "repaint", _n_repaint2, None, Compiled,
                         qt_QWidget_repaint_void_QWidget_QRegion, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "rgn", "qt.QRegion"), End),
            // PROP: resize (void; QWidget this, QSize _p14)
            new Function(c, "resize", _n_resize1, None, Compiled,
                         qt_QWidget_resize_void_QWidget_int_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "w", "int"), new Param(c, "h", "int"),
                         End),
            new Function(
                c, "restoreGeometry", _n_restoreGeometry0, None, Compiled,
                qt_QWidget_restoreGeometry_bool_QWidget_QByteArray, Return,
                "bool", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "geometry", "qt.QByteArray"), End),
            new Function(c, "saveGeometry", _n_saveGeometry0, None, Compiled,
                         qt_QWidget_saveGeometry_QByteArray_QWidget, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "scroll", _n_scroll0, None, Compiled,
                         qt_QWidget_scroll_void_QWidget_int_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "dx", "int"), new Param(c, "dy", "int"),
                         End),
            new Function(c, "scroll", _n_scroll1, None, Compiled,
                         qt_QWidget_scroll_void_QWidget_int_int_QRect, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "dx", "int"), new Param(c, "dy", "int"),
                         new Param(c, "r", "qt.QRect"), End),
            // PROP: setAcceptDrops (void; QWidget this, bool on)
            // PROP: setAccessibleDescription (void; QWidget this, string
            // description) PROP: setAccessibleName (void; QWidget this, string
            // name)
            new Function(c, "setAttribute", _n_setAttribute0, None, Compiled,
                         qt_QWidget_setAttribute_void_QWidget_int_bool, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "attribute", "int"),
                         new Param(c, "on", "bool"), End),
            // PROP: setAutoFillBackground (void; QWidget this, bool enabled)
            new Function(c, "setBackgroundRole", _n_setBackgroundRole0, None,
                         Compiled,
                         qt_QWidget_setBackgroundRole_void_QWidget_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "role", "int"), End),
            // PROP: setBaseSize (void; QWidget this, QSize _p14)
            new Function(c, "setBaseSize", _n_setBaseSize1, None, Compiled,
                         qt_QWidget_setBaseSize_void_QWidget_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "basew", "int"),
                         new Param(c, "baseh", "int"), End),
            // PROP: setContextMenuPolicy (void; QWidget this, flags
            // Qt::ContextMenuPolicy policy) PROP: setCursor (void; QWidget
            // this, QCursor _p16)
            new Function(c, "setFixedHeight", _n_setFixedHeight0, None,
                         Compiled, qt_QWidget_setFixedHeight_void_QWidget_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "h", "int"), End),
            new Function(c, "setFixedSize", _n_setFixedSize0, None, Compiled,
                         qt_QWidget_setFixedSize_void_QWidget_QSize, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "s", "qt.QSize"), End),
            new Function(c, "setFixedSize", _n_setFixedSize1, None, Compiled,
                         qt_QWidget_setFixedSize_void_QWidget_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "w", "int"), new Param(c, "h", "int"),
                         End),
            new Function(c, "setFixedWidth", _n_setFixedWidth0, None, Compiled,
                         qt_QWidget_setFixedWidth_void_QWidget_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "w", "int"), End),
            new Function(c, "setFocus", _n_setFocus0, None, Compiled,
                         qt_QWidget_setFocus_void_QWidget_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "reason", "int"), End),
            // PROP: setFocusPolicy (void; QWidget this, flags Qt::FocusPolicy
            // policy)
            new Function(c, "setFocusProxy", _n_setFocusProxy0, None, Compiled,
                         qt_QWidget_setFocusProxy_void_QWidget_QWidget, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "w", "qt.QWidget"), End),
            // PROP: setFont (void; QWidget this, QFont _p14)
            new Function(c, "setForegroundRole", _n_setForegroundRole0, None,
                         Compiled,
                         qt_QWidget_setForegroundRole_void_QWidget_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "role", "int"), End),
            // PROP: setGeometry (void; QWidget this, QRect _p14)
            new Function(
                c, "setGeometry", _n_setGeometry1, None, Compiled,
                qt_QWidget_setGeometry_void_QWidget_int_int_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "x", "int"), new Param(c, "y", "int"),
                new Param(c, "w", "int"), new Param(c, "h", "int"), End),
            // MISSING: setGraphicsEffect (void; QWidget this, "QGraphicsEffect
            // *" effect) PROP: setInputMethodHints (void; QWidget this, flags
            // Qt::InputMethodHints hints)
            new Function(c, "setLayout", _n_setLayout0, None, Compiled,
                         qt_QWidget_setLayout_void_QWidget_QLayout, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "layout", "qt.QLayout"), End),
            // PROP: setLayoutDirection (void; QWidget this, flags
            // Qt::LayoutDirection direction) MISSING: setLocale (void; QWidget
            // this, "const QLocale &" locale)
            new Function(c, "setMask", _n_setMask0, None, Compiled,
                         qt_QWidget_setMask_void_QWidget_QBitmap, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "bitmap", "qt.QBitmap"), End),
            new Function(c, "setMask", _n_setMask1, None, Compiled,
                         qt_QWidget_setMask_void_QWidget_QRegion, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "region", "qt.QRegion"), End),
            // PROP: setMaximumHeight (void; QWidget this, int maxh)
            // PROP: setMaximumSize (void; QWidget this, QSize _p14)
            new Function(
                c, "setMaximumSize", _n_setMaximumSize1, None, Compiled,
                qt_QWidget_setMaximumSize_void_QWidget_int_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "maxw", "int"), new Param(c, "maxh", "int"), End),
            // PROP: setMaximumWidth (void; QWidget this, int maxw)
            // PROP: setMinimumHeight (void; QWidget this, int minh)
            // PROP: setMinimumSize (void; QWidget this, QSize _p14)
            new Function(
                c, "setMinimumSize", _n_setMinimumSize1, None, Compiled,
                qt_QWidget_setMinimumSize_void_QWidget_int_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "minw", "int"), new Param(c, "minh", "int"), End),
            // PROP: setMinimumWidth (void; QWidget this, int minw)
            // PROP: setMouseTracking (void; QWidget this, bool enable)
            // PROP: setPalette (void; QWidget this, QPalette _p17)
            new Function(c, "setParent", _n_setParent0, None, Compiled,
                         qt_QWidget_setParent_void_QWidget_QWidget, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "setParent", _n_setParent1, None, Compiled,
                         qt_QWidget_setParent_void_QWidget_QWidget_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "parent", "qt.QWidget"),
                         new Param(c, "f", "int"), End),
            new Function(
                c, "setShortcutAutoRepeat", _n_setShortcutAutoRepeat0, None,
                Compiled,
                qt_QWidget_setShortcutAutoRepeat_void_QWidget_int_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "id", "int"), new Param(c, "enable", "bool"), End),
            new Function(
                c, "setShortcutEnabled", _n_setShortcutEnabled0, None, Compiled,
                qt_QWidget_setShortcutEnabled_void_QWidget_int_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "id", "int"), new Param(c, "enable", "bool"), End),
            // PROP: setSizeIncrement (void; QWidget this, QSize _p14)
            new Function(
                c, "setSizeIncrement", _n_setSizeIncrement1, None, Compiled,
                qt_QWidget_setSizeIncrement_void_QWidget_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "w", "int"), new Param(c, "h", "int"), End),
            // MISSING: setSizePolicy (void; QWidget this, "QSizePolicy" _p12)
            new Function(c, "setSizePolicy", _n_setSizePolicy1, None, Compiled,
                         qt_QWidget_setSizePolicy_void_QWidget_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "horizontal", "int"),
                         new Param(c, "vertical", "int"), End),
            // PROP: setStatusTip (void; QWidget this, string _p16)
            // MISSING: setStyle (void; QWidget this, "QStyle *" style)
            // PROP: setToolTip (void; QWidget this, string _p16)
            // PROP: setToolTipDuration (void; QWidget this, int msec)
            // PROP: setUpdatesEnabled (void; QWidget this, bool enable)
            // PROP: setWhatsThis (void; QWidget this, string _p16)
            // PROP: setWindowFilePath (void; QWidget this, string filePath)
            // PROP: setWindowFlags (void; QWidget this, flags Qt::WindowFlags
            // type) PROP: setWindowIcon (void; QWidget this, QIcon icon) PROP:
            // setWindowModality (void; QWidget this, flags Qt::WindowModality
            // windowModality) PROP: setWindowOpacity (void; QWidget this,
            // double level)
            new Function(c, "setWindowRole", _n_setWindowRole0, None, Compiled,
                         qt_QWidget_setWindowRole_void_QWidget_string, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "role", "string"), End),
            new Function(c, "setWindowState", _n_setWindowState0, None,
                         Compiled, qt_QWidget_setWindowState_void_QWidget_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"),
                         new Param(c, "windowState", "int"), End),
            // PROP: size (QSize; QWidget this)
            _func[4] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QWidget_sizeHint_QSize_QWidget, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: sizeIncrement (QSize; QWidget this)
            // MISSING: sizePolicy ("QSizePolicy"; QWidget this)
            new Function(c, "stackUnder", _n_stackUnder0, None, Compiled,
                         qt_QWidget_stackUnder_void_QWidget_QWidget, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "w", "qt.QWidget"), End),
            // PROP: statusTip (string; QWidget this)
            // MISSING: style ("QStyle *"; QWidget this)
            // PROP: styleSheet (string; QWidget this)
            new Function(c, "testAttribute", _n_testAttribute0, None, Compiled,
                         qt_QWidget_testAttribute_bool_QWidget_int, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "attribute", "int"), End),
            // PROP: toolTip (string; QWidget this)
            // PROP: toolTipDuration (int; QWidget this)
            new Function(c, "underMouse", _n_underMouse0, None, Compiled,
                         qt_QWidget_underMouse_bool_QWidget, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "ungrabGesture", _n_ungrabGesture0, None, Compiled,
                         qt_QWidget_ungrabGesture_void_QWidget_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "gesture", "int"), End),
            // PROP: unsetCursor (void; QWidget this)
            // PROP: unsetLayoutDirection (void; QWidget this)
            // PROP: unsetLocale (void; QWidget this)
            new Function(c, "update", _n_update0, None, Compiled,
                         qt_QWidget_update_void_QWidget_int_int_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "w", "int"), new Param(c, "h", "int"),
                         End),
            new Function(c, "update", _n_update1, None, Compiled,
                         qt_QWidget_update_void_QWidget_QRect, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "rect", "qt.QRect"), End),
            new Function(c, "update", _n_update2, None, Compiled,
                         qt_QWidget_update_void_QWidget_QRegion, Return, "void",
                         Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "rgn", "qt.QRegion"), End),
            new Function(c, "updateGeometry", _n_updateGeometry0, None,
                         Compiled, qt_QWidget_updateGeometry_void_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: updatesEnabled (bool; QWidget this)
            new Function(c, "visibleRegion", _n_visibleRegion0, None, Compiled,
                         qt_QWidget_visibleRegion_QRegion_QWidget, Return,
                         "qt.QRegion", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: whatsThis (string; QWidget this)
            // PROP: width (int; QWidget this)
            // MISSING: winId ("WId"; QWidget this)
            new Function(c, "window", _n_window0, None, Compiled,
                         qt_QWidget_window_QWidget_QWidget, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            // PROP: windowFilePath (string; QWidget this)
            // PROP: windowFlags (flags Qt::WindowFlags; QWidget this)
            // MISSING: windowHandle ("QWindow *"; QWidget this)
            // PROP: windowIcon (QIcon; QWidget this)
            // PROP: windowModality (flags Qt::WindowModality; QWidget this)
            // PROP: windowOpacity (double; QWidget this)
            new Function(c, "windowRole", _n_windowRole0, None, Compiled,
                         qt_QWidget_windowRole_string_QWidget, Return, "string",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            new Function(c, "windowState", _n_windowState0, None, Compiled,
                         qt_QWidget_windowState_int_QWidget, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: windowTitle (string; QWidget this)
            new Function(c, "windowType", _n_windowType0, None, Compiled,
                         qt_QWidget_windowType_int_QWidget, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWidget"), End),
            // PROP: x (int; QWidget this)
            // PROP: y (int; QWidget this)
            // MISSING: paintEngine ("QPaintEngine *"; QWidget this)
            // MISSING: actionEvent (void; QWidget this, "QActionEvent *" event)
            // // protected
            _func[5] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QWidget_changeEvent_void_QWidget_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[6] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QWidget_closeEvent_void_QWidget_QCloseEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[7] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QWidget_contextMenuEvent_void_QWidget_QContextMenuEvent,
                Return, "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            // MISSING: create (void; QWidget this, "WId" window, bool
            // initializeWindow, bool destroyOldWindow) // protected
            new Function(c, "destroy", _n_destroy0, None, Compiled,
                         qt_QWidget_destroy_void_QWidget_bool_bool, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "destroyWindow", "bool"),
                         new Param(c, "destroySubWindows", "bool"), End),
            _func[8] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QWidget_dragEnterEvent_void_QWidget_QDragEnterEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[9] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QWidget_dragLeaveEvent_void_QWidget_QDragLeaveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[10] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QWidget_dragMoveEvent_void_QWidget_QDragMoveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[11] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QWidget_dropEvent_void_QWidget_QDropEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[12] = new MemberFunction(
                c, "enterEvent", _n_enterEvent0, None, Compiled,
                qt_QWidget_enterEvent_void_QWidget_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[13] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QWidget_focusInEvent_void_QWidget_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            new Function(c, "focusNextChild", _n_focusNextChild0, None,
                         Compiled, qt_QWidget_focusNextChild_bool_QWidget,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            _func[14] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QWidget_focusNextPrevChild_bool_QWidget_bool, Return, "bool",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "next", "bool"), End),
            _func[15] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QWidget_focusOutEvent_void_QWidget_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            new Function(c, "focusPreviousChild", _n_focusPreviousChild0, None,
                         Compiled, qt_QWidget_focusPreviousChild_bool_QWidget,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),
            _func[16] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QWidget_hideEvent_void_QWidget_QHideEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QHideEvent"), End),
            // MISSING: inputMethodEvent (void; QWidget this, "QInputMethodEvent
            // *" event) // protected
            _func[17] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QWidget_keyPressEvent_void_QWidget_QKeyEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[18] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QWidget_keyReleaseEvent_void_QWidget_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[19] = new MemberFunction(
                c, "leaveEvent", _n_leaveEvent0, None, Compiled,
                qt_QWidget_leaveEvent_void_QWidget_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[20] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QWidget_mouseDoubleClickEvent_void_QWidget_QMouseEvent,
                Return, "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[21] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QWidget_mouseMoveEvent_void_QWidget_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[22] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QWidget_mousePressEvent_void_QWidget_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[23] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QWidget_mouseReleaseEvent_void_QWidget_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[24] = new MemberFunction(
                c, "moveEvent", _n_moveEvent0, None, Compiled,
                qt_QWidget_moveEvent_void_QWidget_QMoveEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QMoveEvent"), End),
            // MISSING: nativeEvent (bool; QWidget this, QByteArray eventType,
            // "void *" message, "long *" result) // protected
            _func[25] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QWidget_paintEvent_void_QWidget_QPaintEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[26] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QWidget_resizeEvent_void_QWidget_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[27] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QWidget_showEvent_void_QWidget_QShowEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QShowEvent"), End),
            _func[28] = new MemberFunction(
                c, "tabletEvent", _n_tabletEvent0, None, Compiled,
                qt_QWidget_tabletEvent_void_QWidget_QTabletEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QTabletEvent"), End),
            _func[29] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QWidget_wheelEvent_void_QWidget_QWheelEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QWheelEvent"), End),
            _func[30] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QWidget_event_bool_QWidget_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event_", "qt.QEvent"), End),
            // MISSING: initPainter (void; QWidget this, "QPainter *" painter)
            // // protected
            _func[31] = new MemberFunction(
                c, "metric", _n_metric0, None, Compiled,
                qt_QWidget_metric_int_QWidget_int, Return, "int", Parameters,
                new Param(c, "this", "qt.QWidget"), new Param(c, "m", "int"),
                End),
            _func[32] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QWidget_eventFilter_bool_QWidget_QObject_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QWidget this)
            // MISSING: childEvent (void; QWidget this, "QChildEvent *" event)
            // // protected MISSING: connectNotify (void; QWidget this, "const
            // QMetaMethod &" signal) // protected
            _func[33] = new MemberFunction(
                c, "customEvent", _n_customEvent0, None, Compiled,
                qt_QWidget_customEvent_void_QWidget_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: disconnectNotify (void; QWidget this, "const QMetaMethod
            // &" signal) // protected
            _func[34] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QWidget_timerEvent_void_QWidget_QTimerEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QWidget"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            // static functions
            // MISSING: createWindowContainer (QWidget; "QWindow *" window,
            // QWidget parent, flags Qt::WindowFlags flags) MISSING: find
            // (QWidget; "WId" id)
            new Function(c, "keyboardGrabber", _n_keyboardGrabber0, None,
                         Compiled, qt_QWidget_keyboardGrabber_QWidget, Return,
                         "qt.QWidget", End),
            new Function(c, "mouseGrabber", _n_mouseGrabber0, None, Compiled,
                         qt_QWidget_mouseGrabber_QWidget, Return, "qt.QWidget",
                         End),
            new Function(c, "setTabOrder", _n_setTabOrder0, None, Compiled,
                         qt_QWidget_setTabOrder_void_QWidget_QWidget, Return,
                         "void", Parameters,
                         new Param(c, "first", "qt.QWidget"),
                         new Param(c, "second", "qt.QWidget"), End),
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        //
        //  For some reason the window flags is not showing up in the
        //  metaObject system.
        //

        c->arrayType(c->stringType(), 1, 0);
        Context::TypeVector ttypes(4);
        ttypes[0] = c->intType();
        ttypes[1] = ttypes[0];
        ttypes[2] = ttypes[0];
        ttypes[3] = ttypes[0];
        c->tupleType(ttypes);

        addSymbols(

            new Function(c, "windowFlags", _n_QWidget_windowFlags_int, None,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),

            new Function(c, "setWindowFlags",
                         _n_QWidget_setWindowFlags_void_int, None, Return,
                         "void", Parameters, new Param(c, "this", "qt.QWidget"),
                         new Param(c, "windowFlags", "int"), End),

            new Function(c, "getContentsMargins", _n_QWidget_getContentsMargins,
                         None, Return, "(int,int,int,int)", Parameters,
                         new Param(c, "this", "qt.QWidget"), End),

            EndArguments);

        const char* propExclusions[] = {"minimumSizeHint", "sizeHint",
                                        "setVisible", 0};

        populate(this, QWidget::staticMetaObject, propExclusions);
    }

} // namespace Mu
