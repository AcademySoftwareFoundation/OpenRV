//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTabletEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QPointType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QTabletEventType::QTabletEventType(Context* c, const char* name,
                                       Class* super)
        : Class(c, name, super)
    {
    }

    QTabletEventType::~QTabletEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    int qt_QTabletEvent_button_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return int(arg0->button());
    }

    int qt_QTabletEvent_buttons_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return int(arg0->buttons());
    }

    int qt_QTabletEvent_device_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return int(arg0->device());
    }

    Pointer
    qt_QTabletEvent_globalPos_QPoint_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->globalPos(), "qt.QPoint");
    }

    Pointer
    qt_QTabletEvent_globalPosF_QPointF_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->globalPosF(), "qt.QPointF");
    }

    int qt_QTabletEvent_globalX_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->globalX();
    }

    int qt_QTabletEvent_globalY_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->globalY();
    }

    double
    qt_QTabletEvent_hiResGlobalX_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->hiResGlobalX();
    }

    double
    qt_QTabletEvent_hiResGlobalY_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->hiResGlobalY();
    }

    int qt_QTabletEvent_pointerType_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return int(arg0->pointerType());
    }

    Pointer qt_QTabletEvent_pos_QPoint_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->pos(), "qt.QPoint");
    }

    Pointer qt_QTabletEvent_posF_QPointF_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->posF(), "qt.QPointF");
    }

    double qt_QTabletEvent_pressure_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->pressure();
    }

    double qt_QTabletEvent_rotation_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->rotation();
    }

    double qt_QTabletEvent_tangentialPressure_double_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->tangentialPressure();
    }

    int64 qt_QTabletEvent_uniqueId_int64_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->uniqueId();
    }

    int qt_QTabletEvent_x_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->x();
    }

    int qt_QTabletEvent_xTilt_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->xTilt();
    }

    int qt_QTabletEvent_y_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->y();
    }

    int qt_QTabletEvent_yTilt_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->yTilt();
    }

    int qt_QTabletEvent_z_int_QTabletEvent(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->z();
    }

    static NODE_IMPLEMENTATION(_n_button0, int)
    {
        NODE_RETURN(qt_QTabletEvent_button_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_buttons0, int)
    {
        NODE_RETURN(qt_QTabletEvent_buttons_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_device0, int)
    {
        NODE_RETURN(qt_QTabletEvent_device_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalPos0, Pointer)
    {
        NODE_RETURN(qt_QTabletEvent_globalPos_QPoint_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalPosF0, Pointer)
    {
        NODE_RETURN(qt_QTabletEvent_globalPosF_QPointF_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalX0, int)
    {
        NODE_RETURN(qt_QTabletEvent_globalX_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalY0, int)
    {
        NODE_RETURN(qt_QTabletEvent_globalY_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hiResGlobalX0, double)
    {
        NODE_RETURN(qt_QTabletEvent_hiResGlobalX_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hiResGlobalY0, double)
    {
        NODE_RETURN(qt_QTabletEvent_hiResGlobalY_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pointerType0, int)
    {
        NODE_RETURN(qt_QTabletEvent_pointerType_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pos0, Pointer)
    {
        NODE_RETURN(qt_QTabletEvent_pos_QPoint_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_posF0, Pointer)
    {
        NODE_RETURN(qt_QTabletEvent_posF_QPointF_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pressure0, double)
    {
        NODE_RETURN(qt_QTabletEvent_pressure_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rotation0, double)
    {
        NODE_RETURN(qt_QTabletEvent_rotation_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_tangentialPressure0, double)
    {
        NODE_RETURN(qt_QTabletEvent_tangentialPressure_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_uniqueId0, int64)
    {
        NODE_RETURN(qt_QTabletEvent_uniqueId_int64_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_x0, int)
    {
        NODE_RETURN(qt_QTabletEvent_x_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_xTilt0, int)
    {
        NODE_RETURN(qt_QTabletEvent_xTilt_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_y0, int)
    {
        NODE_RETURN(qt_QTabletEvent_y_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_yTilt0, int)
    {
        NODE_RETURN(qt_QTabletEvent_yTilt_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_z0, int)
    {
        NODE_RETURN(qt_QTabletEvent_z_int_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QTabletEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(
            new Alias(c, "PointerType", "int"),
            new SymbolicConstant(c, "UnknownPointer", "int",
                                 Value(int(QTabletEvent::UnknownPointer))),
            new SymbolicConstant(c, "Pen", "int",
                                 Value(int(QTabletEvent::Pen))),
            new SymbolicConstant(c, "Cursor", "int",
                                 Value(int(QTabletEvent::Cursor))),
            new SymbolicConstant(c, "Eraser", "int",
                                 Value(int(QTabletEvent::Eraser))),
            new Alias(c, "TabletDevice", "int"),
            new SymbolicConstant(c, "NoDevice", "int",
                                 Value(int(QTabletEvent::NoDevice))),
            new SymbolicConstant(c, "Puck", "int",
                                 Value(int(QTabletEvent::Puck))),
            new SymbolicConstant(c, "Stylus", "int",
                                 Value(int(QTabletEvent::Stylus))),
            new SymbolicConstant(c, "Airbrush", "int",
                                 Value(int(QTabletEvent::Airbrush))),
            new SymbolicConstant(c, "FourDMouse", "int",
                                 Value(int(QTabletEvent::FourDMouse))),
            new SymbolicConstant(c, "RotationStylus", "int",
                                 Value(int(QTabletEvent::RotationStylus))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            // MISSING: QTabletEvent (QTabletEvent; QTabletEvent this, "Type"
            // type, QPointF pos, QPointF globalPos, int device, int
            // pointerType, double pressure, int xTilt, int yTilt, double
            // tangentialPressure, double rotation, int z, flags
            // Qt::KeyboardModifiers keyState, int64 uniqueID, flags
            // Qt::MouseButton button, flags Qt::MouseButtons buttons)
            new Function(c, "button", _n_button0, None, Compiled,
                         qt_QTabletEvent_button_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            new Function(c, "buttons", _n_buttons0, None, Compiled,
                         qt_QTabletEvent_buttons_int_QTabletEvent, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "device", _n_device0, None, Compiled,
                         qt_QTabletEvent_device_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            new Function(c, "globalPos", _n_globalPos0, None, Compiled,
                         qt_QTabletEvent_globalPos_QPoint_QTabletEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "globalPosF", _n_globalPosF0, None, Compiled,
                         qt_QTabletEvent_globalPosF_QPointF_QTabletEvent,
                         Return, "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "globalX", _n_globalX0, None, Compiled,
                         qt_QTabletEvent_globalX_int_QTabletEvent, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "globalY", _n_globalY0, None, Compiled,
                         qt_QTabletEvent_globalY_int_QTabletEvent, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "hiResGlobalX", _n_hiResGlobalX0, None, Compiled,
                         qt_QTabletEvent_hiResGlobalX_double_QTabletEvent,
                         Return, "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "hiResGlobalY", _n_hiResGlobalY0, None, Compiled,
                         qt_QTabletEvent_hiResGlobalY_double_QTabletEvent,
                         Return, "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "pointerType", _n_pointerType0, None, Compiled,
                         qt_QTabletEvent_pointerType_int_QTabletEvent, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "pos", _n_pos0, None, Compiled,
                         qt_QTabletEvent_pos_QPoint_QTabletEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "posF", _n_posF0, None, Compiled,
                         qt_QTabletEvent_posF_QPointF_QTabletEvent, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "pressure", _n_pressure0, None, Compiled,
                         qt_QTabletEvent_pressure_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "rotation", _n_rotation0, None, Compiled,
                         qt_QTabletEvent_rotation_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "tangentialPressure", _n_tangentialPressure0, None,
                         Compiled,
                         qt_QTabletEvent_tangentialPressure_double_QTabletEvent,
                         Return, "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "uniqueId", _n_uniqueId0, None, Compiled,
                         qt_QTabletEvent_uniqueId_int64_QTabletEvent, Return,
                         "int64", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "x", _n_x0, None, Compiled,
                         qt_QTabletEvent_x_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            new Function(c, "xTilt", _n_xTilt0, None, Compiled,
                         qt_QTabletEvent_xTilt_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            new Function(c, "y", _n_y0, None, Compiled,
                         qt_QTabletEvent_y_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            new Function(c, "yTilt", _n_yTilt0, None, Compiled,
                         qt_QTabletEvent_yTilt_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            new Function(c, "z", _n_z0, None, Compiled,
                         qt_QTabletEvent_z_int_QTabletEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTabletEvent"),
                         End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
