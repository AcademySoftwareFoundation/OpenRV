//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef __MuQt5__QTableViewType__h__
#define __MuQt5__QTableViewType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/MuProcess.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtNetwork/QtNetwork>
#include <QtWebEngine/QtWebEngine>
#include <QtWebEngineWidgets/QtWebEngineWidgets>
#include <QtQml/QtQml>
#include <QtQuick/QtQuick>
#include <QtQuickWidgets/QtQuickWidgets>
#include <QtSvg/QtSvg>
#include <MuQt5/Bridge.h>

namespace Mu
{
    class MuQt_QTableView;

    //
    //  NOTE: file generated by qt2mu.py
    //

    class QTableViewType : public Class
    {
    public:
        typedef MuQt_QTableView MuQtType;
        typedef QTableView QtType;

        //
        //  Constructors
        //

        QTableViewType(Context* context, const char* name,
                       Class* superClass = 0, Class* superClass2 = 0);

        virtual ~QTableViewType();

        static bool isInheritable() { return true; }

        static inline ClassInstance* cachedInstance(const MuQtType*);

        //
        //  Class API
        //

        virtual void load();

        MemberFunction* _func[40];
    };

    // Inheritable object

    class MuQt_QTableView : public QTableView
    {
    public:
        virtual ~MuQt_QTableView();
        MuQt_QTableView(Pointer muobj, const CallEnvironment*, QWidget* parent);
        virtual QModelIndex indexAt(const QPoint& pos) const;
        virtual void setModel(QAbstractItemModel* model);
        virtual void setRootIndex(const QModelIndex& index);
        virtual void setSelectionModel(QItemSelectionModel* selectionModel);

    protected:
        virtual void currentChanged(const QModelIndex& current,
                                    const QModelIndex& previous);
        virtual int horizontalOffset() const;
        virtual bool isIndexHidden(const QModelIndex& index) const;
        virtual void paintEvent(QPaintEvent* event);
        virtual QModelIndexList selectedIndexes() const;
        virtual void selectionChanged(const QItemSelection& selected,
                                      const QItemSelection& deselected);
        virtual void setSelection(const QRect& rect,
                                  QItemSelectionModel::SelectionFlags flags);
        virtual int sizeHintForColumn(int column) const;
        virtual int sizeHintForRow(int row) const;
        virtual void timerEvent(QTimerEvent* event);
        virtual void updateGeometries();
        virtual int verticalOffset() const;
        virtual QSize viewportSizeHint() const;

    public:
        virtual void keyboardSearch(const QString& search);
        virtual void scrollTo(const QModelIndex& index,
                              QAbstractItemView::ScrollHint hint);
        virtual QRect visualRect(const QModelIndex& index) const;
        virtual QVariant inputMethodQuery(Qt::InputMethodQuery query) const;

    protected:
        virtual bool edit(const QModelIndex& index,
                          QAbstractItemView::EditTrigger trigger,
                          QEvent* event);
        virtual QItemSelectionModel::SelectionFlags
        selectionCommand(const QModelIndex& index, const QEvent* event) const;
        virtual void startDrag(Qt::DropActions supportedActions);
        virtual QRegion
        visualRegionForSelection(const QItemSelection& selection) const;
        virtual void dragEnterEvent(QDragEnterEvent* event);
        virtual void dragLeaveEvent(QDragLeaveEvent* event);
        virtual void dragMoveEvent(QDragMoveEvent* event);
        virtual void dropEvent(QDropEvent* event);
        virtual bool event(QEvent* event_);
        virtual void focusInEvent(QFocusEvent* event);
        virtual bool focusNextPrevChild(bool next);
        virtual void focusOutEvent(QFocusEvent* event);
        virtual void keyPressEvent(QKeyEvent* event);
        virtual void mouseDoubleClickEvent(QMouseEvent* event);
        virtual void mouseMoveEvent(QMouseEvent* event);
        virtual void mousePressEvent(QMouseEvent* event);
        virtual void mouseReleaseEvent(QMouseEvent* event);
        virtual void resizeEvent(QResizeEvent* event);
        virtual bool viewportEvent(QEvent* event);

    public:
        void currentChanged_pub(const QModelIndex& current,
                                const QModelIndex& previous)
        {
            currentChanged(current, previous);
        }

        void currentChanged_pub_parent(const QModelIndex& current,
                                       const QModelIndex& previous)
        {
            QTableView::currentChanged(current, previous);
        }

        int horizontalOffset_pub() const { return horizontalOffset(); }

        int horizontalOffset_pub_parent() const
        {
            return QTableView::horizontalOffset();
        }

        bool isIndexHidden_pub(const QModelIndex& index) const
        {
            return isIndexHidden(index);
        }

        bool isIndexHidden_pub_parent(const QModelIndex& index) const
        {
            return QTableView::isIndexHidden(index);
        }

        void paintEvent_pub(QPaintEvent* event) { paintEvent(event); }

        void paintEvent_pub_parent(QPaintEvent* event)
        {
            QTableView::paintEvent(event);
        }

        QModelIndexList selectedIndexes_pub() const
        {
            return selectedIndexes();
        }

        QModelIndexList selectedIndexes_pub_parent() const
        {
            return QTableView::selectedIndexes();
        }

        void selectionChanged_pub(const QItemSelection& selected,
                                  const QItemSelection& deselected)
        {
            selectionChanged(selected, deselected);
        }

        void selectionChanged_pub_parent(const QItemSelection& selected,
                                         const QItemSelection& deselected)
        {
            QTableView::selectionChanged(selected, deselected);
        }

        void setSelection_pub(const QRect& rect,
                              QItemSelectionModel::SelectionFlags flags)
        {
            setSelection(rect, flags);
        }

        void setSelection_pub_parent(const QRect& rect,
                                     QItemSelectionModel::SelectionFlags flags)
        {
            QTableView::setSelection(rect, flags);
        }

        int sizeHintForColumn_pub(int column) const
        {
            return sizeHintForColumn(column);
        }

        int sizeHintForColumn_pub_parent(int column) const
        {
            return QTableView::sizeHintForColumn(column);
        }

        int sizeHintForRow_pub(int row) const { return sizeHintForRow(row); }

        int sizeHintForRow_pub_parent(int row) const
        {
            return QTableView::sizeHintForRow(row);
        }

        void timerEvent_pub(QTimerEvent* event) { timerEvent(event); }

        void timerEvent_pub_parent(QTimerEvent* event)
        {
            QTableView::timerEvent(event);
        }

        void updateGeometries_pub() { updateGeometries(); }

        void updateGeometries_pub_parent() { QTableView::updateGeometries(); }

        int verticalOffset_pub() const { return verticalOffset(); }

        int verticalOffset_pub_parent() const
        {
            return QTableView::verticalOffset();
        }

        QSize viewportSizeHint_pub() const { return viewportSizeHint(); }

        QSize viewportSizeHint_pub_parent() const
        {
            return QTableView::viewportSizeHint();
        }

        bool edit_pub(const QModelIndex& index,
                      QAbstractItemView::EditTrigger trigger, QEvent* event)
        {
            return edit(index, trigger, event);
        }

        bool edit_pub_parent(const QModelIndex& index,
                             QAbstractItemView::EditTrigger trigger,
                             QEvent* event)
        {
            return QTableView::edit(index, trigger, event);
        }

        QItemSelectionModel::SelectionFlags
        selectionCommand_pub(const QModelIndex& index,
                             const QEvent* event) const
        {
            return selectionCommand(index, event);
        }

        QItemSelectionModel::SelectionFlags
        selectionCommand_pub_parent(const QModelIndex& index,
                                    const QEvent* event) const
        {
            return QTableView::selectionCommand(index, event);
        }

        void startDrag_pub(Qt::DropActions supportedActions)
        {
            startDrag(supportedActions);
        }

        void startDrag_pub_parent(Qt::DropActions supportedActions)
        {
            QTableView::startDrag(supportedActions);
        }

        QRegion
        visualRegionForSelection_pub(const QItemSelection& selection) const
        {
            return visualRegionForSelection(selection);
        }

        QRegion visualRegionForSelection_pub_parent(
            const QItemSelection& selection) const
        {
            return QTableView::visualRegionForSelection(selection);
        }

        void dragEnterEvent_pub(QDragEnterEvent* event)
        {
            dragEnterEvent(event);
        }

        void dragEnterEvent_pub_parent(QDragEnterEvent* event)
        {
            QTableView::dragEnterEvent(event);
        }

        void dragLeaveEvent_pub(QDragLeaveEvent* event)
        {
            dragLeaveEvent(event);
        }

        void dragLeaveEvent_pub_parent(QDragLeaveEvent* event)
        {
            QTableView::dragLeaveEvent(event);
        }

        void dragMoveEvent_pub(QDragMoveEvent* event) { dragMoveEvent(event); }

        void dragMoveEvent_pub_parent(QDragMoveEvent* event)
        {
            QTableView::dragMoveEvent(event);
        }

        void dropEvent_pub(QDropEvent* event) { dropEvent(event); }

        void dropEvent_pub_parent(QDropEvent* event)
        {
            QTableView::dropEvent(event);
        }

        bool event_pub(QEvent* event_) { return event(event_); }

        bool event_pub_parent(QEvent* event_)
        {
            return QTableView::event(event_);
        }

        void focusInEvent_pub(QFocusEvent* event) { focusInEvent(event); }

        void focusInEvent_pub_parent(QFocusEvent* event)
        {
            QTableView::focusInEvent(event);
        }

        bool focusNextPrevChild_pub(bool next)
        {
            return focusNextPrevChild(next);
        }

        bool focusNextPrevChild_pub_parent(bool next)
        {
            return QTableView::focusNextPrevChild(next);
        }

        void focusOutEvent_pub(QFocusEvent* event) { focusOutEvent(event); }

        void focusOutEvent_pub_parent(QFocusEvent* event)
        {
            QTableView::focusOutEvent(event);
        }

        void keyPressEvent_pub(QKeyEvent* event) { keyPressEvent(event); }

        void keyPressEvent_pub_parent(QKeyEvent* event)
        {
            QTableView::keyPressEvent(event);
        }

        void mouseDoubleClickEvent_pub(QMouseEvent* event)
        {
            mouseDoubleClickEvent(event);
        }

        void mouseDoubleClickEvent_pub_parent(QMouseEvent* event)
        {
            QTableView::mouseDoubleClickEvent(event);
        }

        void mouseMoveEvent_pub(QMouseEvent* event) { mouseMoveEvent(event); }

        void mouseMoveEvent_pub_parent(QMouseEvent* event)
        {
            QTableView::mouseMoveEvent(event);
        }

        void mousePressEvent_pub(QMouseEvent* event) { mousePressEvent(event); }

        void mousePressEvent_pub_parent(QMouseEvent* event)
        {
            QTableView::mousePressEvent(event);
        }

        void mouseReleaseEvent_pub(QMouseEvent* event)
        {
            mouseReleaseEvent(event);
        }

        void mouseReleaseEvent_pub_parent(QMouseEvent* event)
        {
            QTableView::mouseReleaseEvent(event);
        }

        void resizeEvent_pub(QResizeEvent* event) { resizeEvent(event); }

        void resizeEvent_pub_parent(QResizeEvent* event)
        {
            QTableView::resizeEvent(event);
        }

        bool viewportEvent_pub(QEvent* event) { return viewportEvent(event); }

        bool viewportEvent_pub_parent(QEvent* event)
        {
            return QTableView::viewportEvent(event);
        }

    public:
        const QTableViewType* _baseType;
        ClassInstance* _obj;
        const CallEnvironment* _env;
    };

    inline ClassInstance*
    QTableViewType::cachedInstance(const QTableViewType::MuQtType* obj)
    {
        return obj->_obj;
    }

} // namespace Mu

#endif // __MuQt__QTableViewType__h__
