//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef __MuQt5__QSplitterType__h__
#define __MuQt5__QSplitterType__h__
#include <iostream>
#include <Mu/Class.h>
#include <Mu/MuProcess.h>
#include <QtCore/QtCore>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtNetwork/QtNetwork>
#include <QtWebEngine/QtWebEngine>
#include <QtWebEngineWidgets/QtWebEngineWidgets>
#include <QtQml/QtQml>
#include <QtQuick/QtQuick>
#include <QtQuickWidgets/QtQuickWidgets>
#include <QtSvg/QtSvg>
#include <MuQt5/Bridge.h>

namespace Mu
{
    class MuQt_QSplitter;

    //
    //  NOTE: file generated by qt2mu.py
    //

    class QSplitterType : public Class
    {
    public:
        typedef MuQt_QSplitter MuQtType;
        typedef QSplitter QtType;

        //
        //  Constructors
        //

        QSplitterType(Context* context, const char* name, Class* superClass = 0,
                      Class* superClass2 = 0);

        virtual ~QSplitterType();

        static bool isInheritable() { return true; }

        static inline ClassInstance* cachedInstance(const MuQtType*);

        //
        //  Class API
        //

        virtual void load();

        MemberFunction* _func[6];
    };

    // Inheritable object

    class MuQt_QSplitter : public QSplitter
    {
    public:
        virtual ~MuQt_QSplitter();
        MuQt_QSplitter(Pointer muobj, const CallEnvironment*, QWidget* parent);
        MuQt_QSplitter(Pointer muobj, const CallEnvironment*,
                       Qt::Orientation orientation, QWidget* parent);
        virtual QSize minimumSizeHint() const;
        virtual QSize sizeHint() const;

    protected:
        virtual void changeEvent(QEvent* ev);
        virtual bool event(QEvent* e);
        virtual void resizeEvent(QResizeEvent* _p15);
        virtual void paintEvent(QPaintEvent* _p14);

    public:
        int closestLegalPosition_pub(int pos, int index)
        {
            return closestLegalPosition(pos, index);
        }

        int closestLegalPosition_pub_parent(int pos, int index)
        {
            return QSplitter::closestLegalPosition(pos, index);
        }

        void moveSplitter_pub(int pos, int index) { moveSplitter(pos, index); }

        void moveSplitter_pub_parent(int pos, int index)
        {
            QSplitter::moveSplitter(pos, index);
        }

        void setRubberBand_pub(int pos) { setRubberBand(pos); }

        void setRubberBand_pub_parent(int pos)
        {
            QSplitter::setRubberBand(pos);
        }

        void changeEvent_pub(QEvent* ev) { changeEvent(ev); }

        void changeEvent_pub_parent(QEvent* ev) { QSplitter::changeEvent(ev); }

        bool event_pub(QEvent* e) { return event(e); }

        bool event_pub_parent(QEvent* e) { return QSplitter::event(e); }

        void resizeEvent_pub(QResizeEvent* _p15) { resizeEvent(_p15); }

        void resizeEvent_pub_parent(QResizeEvent* _p15)
        {
            QSplitter::resizeEvent(_p15);
        }

        void paintEvent_pub(QPaintEvent* _p14) { paintEvent(_p14); }

        void paintEvent_pub_parent(QPaintEvent* _p14)
        {
            QSplitter::paintEvent(_p14);
        }

    public:
        const QSplitterType* _baseType;
        ClassInstance* _obj;
        const CallEnvironment* _env;
    };

    inline ClassInstance*
    QSplitterType::cachedInstance(const QSplitterType::MuQtType* obj)
    {
        return obj->_obj;
    }

} // namespace Mu

#endif // __MuQt__QSplitterType__h__
