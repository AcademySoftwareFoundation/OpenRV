//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QScrollAreaType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QDragEnterEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QScrollArea::~MuQt_QScrollArea()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QScrollArea::MuQt_QScrollArea(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent)
        : QScrollArea(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QScrollAreaType>(
            c->internName("qt.QScrollArea"));
    }

    bool MuQt_QScrollArea::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QScrollArea::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QScrollArea::focusNextPrevChild(next);
        }
    }

    QSize MuQt_QScrollArea::sizeHint() const
    {
        if (!_env)
            return QScrollArea::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QScrollArea::sizeHint();
        }
    }

    bool MuQt_QScrollArea::event(QEvent* e)
    {
        if (!_env)
            return QScrollArea::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QScrollArea::event(e);
        }
    }

    bool MuQt_QScrollArea::eventFilter(QObject* o, QEvent* e)
    {
        if (!_env)
            return QScrollArea::eventFilter(o, e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QObjectType>(c, o, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QScrollArea::eventFilter(o, e);
        }
    }

    void MuQt_QScrollArea::resizeEvent(QResizeEvent* _p15)
    {
        if (!_env)
        {
            QScrollArea::resizeEvent(_p15);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, _p15, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::resizeEvent(_p15);
        }
    }

    void MuQt_QScrollArea::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QScrollArea::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::scrollContentsBy(dx, dy);
        }
    }

    QSize MuQt_QScrollArea::viewportSizeHint() const
    {
        if (!_env)
            return QScrollArea::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QScrollArea::viewportSizeHint();
        }
    }

    void MuQt_QScrollArea::setupViewport(QWidget* viewport)
    {
        if (!_env)
        {
            QScrollArea::setupViewport(viewport);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QWidgetType>(c, viewport, "qt.QWidget"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::setupViewport(viewport);
        }
    }

    QSize MuQt_QScrollArea::minimumSizeHint() const
    {
        if (!_env)
            return QScrollArea::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QScrollArea::minimumSizeHint();
        }
    }

    bool MuQt_QScrollArea::viewportEvent(QEvent* event)
    {
        if (!_env)
            return QScrollArea::viewportEvent(event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QScrollArea::viewportEvent(event);
        }
    }

    void MuQt_QScrollArea::contextMenuEvent(QContextMenuEvent* e)
    {
        if (!_env)
        {
            QScrollArea::contextMenuEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, e, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::contextMenuEvent(e);
        }
    }

    void MuQt_QScrollArea::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QScrollArea::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::dragEnterEvent(event);
        }
    }

    void MuQt_QScrollArea::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QScrollArea::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::dragLeaveEvent(event);
        }
    }

    void MuQt_QScrollArea::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QScrollArea::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::dragMoveEvent(event);
        }
    }

    void MuQt_QScrollArea::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QScrollArea::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::dropEvent(event);
        }
    }

    void MuQt_QScrollArea::keyPressEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QScrollArea::keyPressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::keyPressEvent(e);
        }
    }

    void MuQt_QScrollArea::mouseDoubleClickEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QScrollArea::mouseDoubleClickEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::mouseDoubleClickEvent(e);
        }
    }

    void MuQt_QScrollArea::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QScrollArea::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::mouseMoveEvent(e);
        }
    }

    void MuQt_QScrollArea::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QScrollArea::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::mousePressEvent(e);
        }
    }

    void MuQt_QScrollArea::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QScrollArea::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::mouseReleaseEvent(e);
        }
    }

    void MuQt_QScrollArea::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QScrollArea::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::paintEvent(event);
        }
    }

    void MuQt_QScrollArea::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QScrollArea::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QScrollArea::wheelEvent(e);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QScrollAreaType::QScrollAreaType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QScrollAreaType::~QScrollAreaType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QScrollArea_QScrollArea_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QScrollArea* w = object<QScrollArea>(widget))
        {
            QScrollAreaType* type =
                c->findSymbolOfTypeByQualifiedName<QScrollAreaType>(
                    c->internName("qt.QScrollArea"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QScrollArea_QScrollArea_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QScrollArea_QScrollArea_QScrollArea_QScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QScrollArea(param_this,
                                       NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QScrollArea_ensureVisible_void_QScrollArea_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y,
        int param_xmargin, int param_ymargin)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_xmargin);
        int arg4 = (int)(param_ymargin);
        arg0->ensureVisible(arg1, arg2, arg3, arg4);
    }

    void qt_QScrollArea_ensureWidgetVisible_void_QScrollArea_QWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_childWidget,
        int param_xmargin, int param_ymargin)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_childWidget);
        int arg2 = (int)(param_xmargin);
        int arg3 = (int)(param_ymargin);
        arg0->ensureWidgetVisible(arg1, arg2, arg3);
    }

    void qt_QScrollArea_setWidget_void_QScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        arg0->setWidget(arg1);
    }

    Pointer
    qt_QScrollArea_takeWidget_QWidget_QScrollArea(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        return makeinstance<QWidgetType>(c, arg0->takeWidget(), "qt.QWidget");
    }

    Pointer qt_QScrollArea_widget_QWidget_QScrollArea(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        return makeinstance<QWidgetType>(c, arg0->widget(), "qt.QWidget");
    }

    bool qt_QScrollArea_focusNextPrevChild_bool_QScrollArea_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0) ? arg0->QScrollArea::focusNextPrevChild(arg1)
                                  : arg0->focusNextPrevChild(arg1);
    }

    Pointer qt_QScrollArea_sizeHint_QSize_QScrollArea(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QScrollArea::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    bool qt_QScrollArea_event_bool_QScrollArea_QEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QScrollArea*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QScrollArea*)arg0)->event_pub(arg1);
    }

    bool qt_QScrollArea_eventFilter_bool_QScrollArea_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_o,
        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QObject* arg1 = object<QObject>(param_o);
        QEvent* arg2 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QScrollArea*)arg0)
                         ->eventFilter_pub_parent(arg1, arg2)
                   : ((MuQt_QScrollArea*)arg0)->eventFilter_pub(arg1, arg2);
    }

    void qt_QScrollArea_resizeEvent_void_QScrollArea_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p15)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param__p15);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QScrollArea_scrollContentsBy_void_QScrollArea_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QScrollArea*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    Pointer
    qt_QScrollArea_viewportSizeHint_QSize_QScrollArea(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QScrollArea*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QScrollArea*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    void qt_QScrollArea_setupViewport_void_QScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_viewport)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_viewport);
        if (isMuQtObject(arg0))
            arg0->QScrollArea::setupViewport(arg1);
        else
            arg0->setupViewport(arg1);
    }

    Pointer
    qt_QScrollArea_minimumSizeHint_QSize_QScrollArea(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QScrollArea::minimumSizeHint(), "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    bool qt_QScrollArea_viewportEvent_bool_QScrollArea_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QScrollArea*)arg0)->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QScrollArea*)arg0)->viewportEvent_pub(arg1);
    }

    void qt_QScrollArea_contextMenuEvent_void_QScrollArea_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QContextMenuEvent* arg1 = getqpointer<QContextMenuEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QScrollArea_dragEnterEvent_void_QScrollArea_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QScrollArea_dragLeaveEvent_void_QScrollArea_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QScrollArea_dragMoveEvent_void_QScrollArea_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QScrollArea_dropEvent_void_QScrollArea_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QScrollArea_keyPressEvent_void_QScrollArea_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QScrollArea_mouseDoubleClickEvent_void_QScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QScrollArea_mouseMoveEvent_void_QScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QScrollArea_mousePressEvent_void_QScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QScrollArea_mouseReleaseEvent_void_QScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QScrollArea_paintEvent_void_QScrollArea_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QScrollArea_wheelEvent_void_QScrollArea_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QScrollArea* arg0 = object<QScrollArea>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QScrollArea*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QScrollArea*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QScrollArea0, Pointer)
    {
        NODE_RETURN(qt_QScrollArea_QScrollArea_QScrollArea_QScrollArea_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_ensureVisible0, void)
    {
        qt_QScrollArea_ensureVisible_void_QScrollArea_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_ensureWidgetVisible0, void)
    {
        qt_QScrollArea_ensureWidgetVisible_void_QScrollArea_QWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_setWidget0, void)
    {
        qt_QScrollArea_setWidget_void_QScrollArea_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_takeWidget0, Pointer)
    {
        NODE_RETURN(qt_QScrollArea_takeWidget_QWidget_QScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_widget0, Pointer)
    {
        NODE_RETURN(qt_QScrollArea_widget_QWidget_QScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QScrollArea_focusNextPrevChild_bool_QScrollArea_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QScrollArea_sizeHint_QSize_QScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QScrollArea_event_bool_QScrollArea_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(qt_QScrollArea_eventFilter_bool_QScrollArea_QObject_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QScrollArea_resizeEvent_void_QScrollArea_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QScrollArea_scrollContentsBy_void_QScrollArea_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QScrollArea_viewportSizeHint_QSize_QScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setupViewport0, void)
    {
        qt_QScrollArea_setupViewport_void_QScrollArea_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QScrollArea_minimumSizeHint_QSize_QScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(qt_QScrollArea_viewportEvent_bool_QScrollArea_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QScrollArea_contextMenuEvent_void_QScrollArea_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QScrollArea_dragEnterEvent_void_QScrollArea_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QScrollArea_dragLeaveEvent_void_QScrollArea_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QScrollArea_dragMoveEvent_void_QScrollArea_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QScrollArea_dropEvent_void_QScrollArea_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QScrollArea_keyPressEvent_void_QScrollArea_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QScrollArea_mouseDoubleClickEvent_void_QScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QScrollArea_mouseMoveEvent_void_QScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QScrollArea_mousePressEvent_void_QScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QScrollArea_mouseReleaseEvent_void_QScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QScrollArea_paintEvent_void_QScrollArea_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QScrollArea_wheelEvent_void_QScrollArea_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QScrollAreaType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QScrollArea_QScrollArea_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QScrollArea", _n_QScrollArea0, None, Compiled,
                qt_QScrollArea_QScrollArea_QScrollArea_QScrollArea_QWidget,
                Return, "qt.QScrollArea", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "parent", "qt.QWidget"), End),
            // PROP: alignment (flags Qt::Alignment; QScrollArea this)
            new Function(
                c, "ensureVisible", _n_ensureVisible0, None, Compiled,
                qt_QScrollArea_ensureVisible_void_QScrollArea_int_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "x", "int"), new Param(c, "y", "int"),
                new Param(c, "xmargin", "int", Value((int)50)),
                new Param(c, "ymargin", "int", Value((int)50)), End),
            new Function(
                c, "ensureWidgetVisible", _n_ensureWidgetVisible0, None,
                Compiled,
                qt_QScrollArea_ensureWidgetVisible_void_QScrollArea_QWidget_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "childWidget", "qt.QWidget"),
                new Param(c, "xmargin", "int", Value((int)50)),
                new Param(c, "ymargin", "int", Value((int)50)), End),
            // PROP: setAlignment (void; QScrollArea this, flags Qt::Alignment
            // _p14)
            new Function(c, "setWidget", _n_setWidget0, None, Compiled,
                         qt_QScrollArea_setWidget_void_QScrollArea_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QScrollArea"),
                         new Param(c, "widget", "qt.QWidget"), End),
            // PROP: setWidgetResizable (void; QScrollArea this, bool resizable)
            new Function(c, "takeWidget", _n_takeWidget0, None, Compiled,
                         qt_QScrollArea_takeWidget_QWidget_QScrollArea, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QScrollArea"), End),
            new Function(c, "widget", _n_widget0, None, Compiled,
                         qt_QScrollArea_widget_QWidget_QScrollArea, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QScrollArea"), End),
            // PROP: widgetResizable (bool; QScrollArea this)
            _func[0] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QScrollArea_focusNextPrevChild_bool_QScrollArea_bool, Return,
                "bool", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "next", "bool"), End),
            _func[1] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QScrollArea_sizeHint_QSize_QScrollArea, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QScrollArea"), End),
            _func[2] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QScrollArea_event_bool_QScrollArea_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[3] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QScrollArea_eventFilter_bool_QScrollArea_QObject_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "o", "qt.QObject"), new Param(c, "e", "qt.QEvent"),
                End),
            _func[4] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QScrollArea_resizeEvent_void_QScrollArea_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "_p15", "qt.QResizeEvent"), End),
            _func[5] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QScrollArea_scrollContentsBy_void_QScrollArea_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[6] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QScrollArea_viewportSizeHint_QSize_QScrollArea, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QScrollArea"),
                End),
            _func[7] = new MemberFunction(
                c, "setupViewport", _n_setupViewport0, None, Compiled,
                qt_QScrollArea_setupViewport_void_QScrollArea_QWidget, Return,
                "void", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "viewport", "qt.QWidget"), End),
            _func[8] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QScrollArea_minimumSizeHint_QSize_QScrollArea, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QScrollArea"),
                End),
            _func[9] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QScrollArea_viewportEvent_bool_QScrollArea_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[10] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QScrollArea_contextMenuEvent_void_QScrollArea_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QContextMenuEvent"), End),
            _func[11] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QScrollArea_dragEnterEvent_void_QScrollArea_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[12] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QScrollArea_dragLeaveEvent_void_QScrollArea_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[13] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QScrollArea_dragMoveEvent_void_QScrollArea_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[14] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QScrollArea_dropEvent_void_QScrollArea_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[15] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QScrollArea_keyPressEvent_void_QScrollArea_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[16] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QScrollArea_mouseDoubleClickEvent_void_QScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[17] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QScrollArea_mouseMoveEvent_void_QScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[18] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QScrollArea_mousePressEvent_void_QScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[19] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QScrollArea_mouseReleaseEvent_void_QScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[20] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QScrollArea_paintEvent_void_QScrollArea_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[21] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QScrollArea_wheelEvent_void_QScrollArea_QWheelEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QScrollArea"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QScrollArea::staticMetaObject, propExclusions);
    }

} // namespace Mu
