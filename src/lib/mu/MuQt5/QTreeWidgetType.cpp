//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTreeWidgetType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QMimeDataType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QItemSelectionType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QTreeWidgetItemType.h>
#include <MuQt5/QItemSelectionModelType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QTreeWidget::~MuQt_QTreeWidget()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QTreeWidget::MuQt_QTreeWidget(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent)
        : QTreeWidget(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTreeWidgetType>(
            c->internName("qt.QTreeWidget"));
    }

    void
    MuQt_QTreeWidget::setSelectionModel(QItemSelectionModel* selectionModel)
    {
        if (!_env)
        {
            QTreeWidget::setSelectionModel(selectionModel);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QItemSelectionModelType>(
                c, selectionModel, "qt.QItemSelectionModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::setSelectionModel(selectionModel);
        }
    }

    bool MuQt_QTreeWidget::dropMimeData(QTreeWidgetItem* parent, int index,
                                        const QMimeData* data,
                                        Qt::DropAction action)
    {
        if (!_env)
            return QTreeWidget::dropMimeData(parent, index, data, action);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(5);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QTreeWidgetItemType>(
                c, parent, "qt.QTreeWidgetItem"));
            args[2] = Value(index);
            args[3] =
                Value(makeinstance<QMimeDataType>(c, data, "qt.QMimeData"));
            args[4] = Value(int(action));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeWidget::dropMimeData(parent, index, data, action);
        }
    }

    QMimeData*
    MuQt_QTreeWidget::mimeData(const QList<QTreeWidgetItem*>& items) const
    {
        if (!_env)
            return QTreeWidget::mimeData(items);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointerlist<QTreeWidgetItemType>(
                c, items, "qt.QTreeWidgetItem"));
            Value rval = _env->call(F, args);
            return object<QMimeData>(rval._Pointer);
        }
        else
        {
            return QTreeWidget::mimeData(items);
        }
    }

    QStringList MuQt_QTreeWidget::mimeTypes() const
    {
        if (!_env)
            return QTreeWidget::mimeTypes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qstringlist(rval._Pointer);
        }
        else
        {
            return QTreeWidget::mimeTypes();
        }
    }

    Qt::DropActions MuQt_QTreeWidget::supportedDropActions() const
    {
        if (!_env)
            return QTreeWidget::supportedDropActions();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (Qt::DropActions)(rval._int);
        }
        else
        {
            return QTreeWidget::supportedDropActions();
        }
    }

    void MuQt_QTreeWidget::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::dropEvent(event);
        }
    }

    bool MuQt_QTreeWidget::event(QEvent* e)
    {
        if (!_env)
            return QTreeWidget::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeWidget::event(e);
        }
    }

    QModelIndex MuQt_QTreeWidget::indexAt(const QPoint& point) const
    {
        if (!_env)
            return QTreeWidget::indexAt(point);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QPointType>(c, point, "qt.QPoint"));
            Value rval = _env->call(F, args);
            return getqtype<QModelIndexType>(rval._Pointer);
        }
        else
        {
            return QTreeWidget::indexAt(point);
        }
    }

    void MuQt_QTreeWidget::keyboardSearch(const QString& search)
    {
        if (!_env)
        {
            QTreeWidget::keyboardSearch(search);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makestring(c, search));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::keyboardSearch(search);
        }
    }

    void MuQt_QTreeWidget::reset()
    {
        if (!_env)
        {
            QTreeWidget::reset();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::reset();
        }
    }

    void MuQt_QTreeWidget::selectAll()
    {
        if (!_env)
        {
            QTreeWidget::selectAll();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::selectAll();
        }
    }

    void MuQt_QTreeWidget::setRootIndex(const QModelIndex& index)
    {
        if (!_env)
        {
            QTreeWidget::setRootIndex(index);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::setRootIndex(index);
        }
    }

    QRect MuQt_QTreeWidget::visualRect(const QModelIndex& index) const
    {
        if (!_env)
            return QTreeWidget::visualRect(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return getqtype<QRectType>(rval._Pointer);
        }
        else
        {
            return QTreeWidget::visualRect(index);
        }
    }

    void MuQt_QTreeWidget::currentChanged(const QModelIndex& current,
                                          const QModelIndex& previous)
    {
        if (!_env)
        {
            QTreeWidget::currentChanged(current, previous);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, current, "qt.QModelIndex"));
            args[2] = Value(
                makeqtype<QModelIndexType>(c, previous, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::currentChanged(current, previous);
        }
    }

    void MuQt_QTreeWidget::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::dragMoveEvent(event);
        }
    }

    int MuQt_QTreeWidget::horizontalOffset() const
    {
        if (!_env)
            return QTreeWidget::horizontalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeWidget::horizontalOffset();
        }
    }

    bool MuQt_QTreeWidget::isIndexHidden(const QModelIndex& index) const
    {
        if (!_env)
            return QTreeWidget::isIndexHidden(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeWidget::isIndexHidden(index);
        }
    }

    void MuQt_QTreeWidget::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::keyPressEvent(event);
        }
    }

    void MuQt_QTreeWidget::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QTreeWidget::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::mouseMoveEvent(event);
        }
    }

    void MuQt_QTreeWidget::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::mousePressEvent(event);
        }
    }

    void MuQt_QTreeWidget::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::mouseReleaseEvent(event);
        }
    }

    void MuQt_QTreeWidget::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::paintEvent(event);
        }
    }

    void MuQt_QTreeWidget::rowsAboutToBeRemoved(const QModelIndex& parent,
                                                int start, int end)
    {
        if (!_env)
        {
            QTreeWidget::rowsAboutToBeRemoved(parent, start, end);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, parent, "qt.QModelIndex"));
            args[2] = Value(start);
            args[3] = Value(end);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::rowsAboutToBeRemoved(parent, start, end);
        }
    }

    void MuQt_QTreeWidget::rowsInserted(const QModelIndex& parent, int start,
                                        int end)
    {
        if (!_env)
        {
            QTreeWidget::rowsInserted(parent, start, end);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, parent, "qt.QModelIndex"));
            args[2] = Value(start);
            args[3] = Value(end);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::rowsInserted(parent, start, end);
        }
    }

    void MuQt_QTreeWidget::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QTreeWidget::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::scrollContentsBy(dx, dy);
        }
    }

    QModelIndexList MuQt_QTreeWidget::selectedIndexes() const
    {
        if (!_env)
            return QTreeWidget::selectedIndexes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qmodelindexlist(rval._Pointer);
        }
        else
        {
            return QTreeWidget::selectedIndexes();
        }
    }

    void MuQt_QTreeWidget::selectionChanged(const QItemSelection& selected,
                                            const QItemSelection& deselected)
    {
        if (!_env)
        {
            QTreeWidget::selectionChanged(selected, deselected);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selected,
                                                          "qt.QItemSelection"));
            args[2] = Value(makeqtype<QItemSelectionType>(c, deselected,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::selectionChanged(selected, deselected);
        }
    }

    void
    MuQt_QTreeWidget::setSelection(const QRect& rect,
                                   QItemSelectionModel::SelectionFlags command)
    {
        if (!_env)
        {
            QTreeWidget::setSelection(rect, command);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            args[2] = Value(int(command));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::setSelection(rect, command);
        }
    }

    int MuQt_QTreeWidget::sizeHintForColumn(int column) const
    {
        if (!_env)
            return QTreeWidget::sizeHintForColumn(column);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(column);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeWidget::sizeHintForColumn(column);
        }
    }

    void MuQt_QTreeWidget::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QTreeWidget::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::timerEvent(event);
        }
    }

    void MuQt_QTreeWidget::updateGeometries()
    {
        if (!_env)
        {
            QTreeWidget::updateGeometries();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeWidget::updateGeometries();
        }
    }

    int MuQt_QTreeWidget::verticalOffset() const
    {
        if (!_env)
            return QTreeWidget::verticalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeWidget::verticalOffset();
        }
    }

    bool MuQt_QTreeWidget::viewportEvent(QEvent* event)
    {
        if (!_env)
            return QTreeWidget::viewportEvent(event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeWidget::viewportEvent(event);
        }
    }

    QSize MuQt_QTreeWidget::viewportSizeHint() const
    {
        if (!_env)
            return QTreeWidget::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[34];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTreeWidget::viewportSizeHint();
        }
    }

    QRegion MuQt_QTreeWidget::visualRegionForSelection(
        const QItemSelection& selection) const
    {
        if (!_env)
            return QTreeWidget::visualRegionForSelection(selection);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[35];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selection,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
            return getqtype<QRegionType>(rval._Pointer);
        }
        else
        {
            return QTreeWidget::visualRegionForSelection(selection);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTreeWidgetType::QTreeWidgetType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTreeWidgetType::~QTreeWidgetType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTreeWidget_QTreeWidget_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTreeWidget* w = object<QTreeWidget>(widget))
        {
            QTreeWidgetType* type =
                c->findSymbolOfTypeByQualifiedName<QTreeWidgetType>(
                    c->internName("qt.QTreeWidget"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QTreeWidget_QTreeWidget_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTreeWidget_QTreeWidget_QTreeWidget_QTreeWidget_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QTreeWidget(param_this,
                                       NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QTreeWidget_addTopLevelItem_void_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        arg0->addTopLevelItem(arg1);
    }

    void
    qt_QTreeWidget_addTopLevelItems_void_QTreeWidget_qt__QTreeWidgetItemBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_items)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QList<QTreeWidgetItem*> arg1 =
            qpointerlist<QTreeWidgetItemType>(param_items);
        arg0->addTopLevelItems(arg1);
    }

    void
    qt_QTreeWidget_closePersistentEditor_void_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        arg0->closePersistentEditor(arg1, arg2);
    }

    int qt_QTreeWidget_currentColumn_int_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return arg0->currentColumn();
    }

    Pointer qt_QTreeWidget_currentItem_QTreeWidgetItem_QTreeWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->currentItem(),
                                                 "qt.QTreeWidgetItem");
    }

    void qt_QTreeWidget_editItem_void_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        arg0->editItem(arg1, arg2);
    }

    Pointer
    qt_QTreeWidget_findItems_qt__QTreeWidgetItemBSB_ESB__QTreeWidget_string_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        int param_flags, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QString arg1 = qstring(param_text);
        Qt::MatchFlags arg2 = (Qt::MatchFlags)(param_flags);
        int arg3 = (int)(param_column);
        return makeqpointerlist<QTreeWidgetItemType>(
            c, arg0->findItems(arg1, arg2, arg3), "qt.QTreeWidgetItem");
    }

    Pointer qt_QTreeWidget_headerItem_QTreeWidgetItem_QTreeWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->headerItem(),
                                                 "qt.QTreeWidgetItem");
    }

    int qt_QTreeWidget_indexOfTopLevelItem_int_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        return arg0->indexOfTopLevelItem(arg1);
    }

    void qt_QTreeWidget_insertTopLevelItem_void_QTreeWidget_int_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_index);
        QTreeWidgetItem* arg2 = getqpointer<QTreeWidgetItemType>(param_item);
        arg0->insertTopLevelItem(arg1, arg2);
    }

    void
    qt_QTreeWidget_insertTopLevelItems_void_QTreeWidget_int_qt__QTreeWidgetItemBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_items)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_index);
        const QList<QTreeWidgetItem*> arg2 =
            qpointerlist<QTreeWidgetItemType>(param_items);
        arg0->insertTopLevelItems(arg1, arg2);
    }

    Pointer qt_QTreeWidget_invisibleRootItem_QTreeWidgetItem_QTreeWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->invisibleRootItem(),
                                                 "qt.QTreeWidgetItem");
    }

    bool
    qt_QTreeWidget_isFirstItemColumnSpanned_bool_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QTreeWidgetItem* arg1 =
            getqpointer<QTreeWidgetItemType>(param_item);
        return arg0->isFirstItemColumnSpanned(arg1);
    }

    Pointer
    qt_QTreeWidget_itemAbove_QTreeWidgetItem_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QTreeWidgetItem* arg1 =
            getqpointer<QTreeWidgetItemType>(param_item);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->itemAbove(arg1),
                                                 "qt.QTreeWidgetItem");
    }

    Pointer qt_QTreeWidget_itemAt_QTreeWidgetItem_QTreeWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_p);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->itemAt(arg1),
                                                 "qt.QTreeWidgetItem");
    }

    Pointer qt_QTreeWidget_itemAt_QTreeWidgetItem_QTreeWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->itemAt(arg1, arg2),
                                                 "qt.QTreeWidgetItem");
    }

    Pointer
    qt_QTreeWidget_itemBelow_QTreeWidgetItem_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QTreeWidgetItem* arg1 =
            getqpointer<QTreeWidgetItemType>(param_item);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->itemBelow(arg1),
                                                 "qt.QTreeWidgetItem");
    }

    Pointer qt_QTreeWidget_itemWidget_QWidget_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        return makeinstance<QWidgetType>(c, arg0->itemWidget(arg1, arg2),
                                         "qt.QWidget");
    }

    void
    qt_QTreeWidget_openPersistentEditor_void_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        arg0->openPersistentEditor(arg1, arg2);
    }

    void qt_QTreeWidget_removeItemWidget_void_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        arg0->removeItemWidget(arg1, arg2);
    }

    Pointer
    qt_QTreeWidget_selectedItems_qt__QTreeWidgetItemBSB_ESB__QTreeWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return makeqpointerlist<QTreeWidgetItemType>(c, arg0->selectedItems(),
                                                     "qt.QTreeWidgetItem");
    }

    void qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        arg0->setCurrentItem(arg1);
    }

    void qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        arg0->setCurrentItem(arg1, arg2);
    }

    void qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column, int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        QItemSelectionModel::SelectionFlags arg3 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        arg0->setCurrentItem(arg1, arg2, arg3);
    }

    void
    qt_QTreeWidget_setFirstItemColumnSpanned_void_QTreeWidget_QTreeWidgetItem_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        bool param_span)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QTreeWidgetItem* arg1 =
            getqpointer<QTreeWidgetItemType>(param_item);
        bool arg2 = (bool)(param_span);
        arg0->setFirstItemColumnSpanned(arg1, arg2);
    }

    void qt_QTreeWidget_setHeaderItem_void_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        arg0->setHeaderItem(arg1);
    }

    void qt_QTreeWidget_setHeaderLabel_void_QTreeWidget_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_label)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QString arg1 = qstring(param_label);
        arg0->setHeaderLabel(arg1);
    }

    void qt_QTreeWidget_setHeaderLabels_void_QTreeWidget_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_labels)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QStringList arg1 = qstringlist(param_labels);
        arg0->setHeaderLabels(arg1);
    }

    void
    qt_QTreeWidget_setItemWidget_void_QTreeWidget_QTreeWidgetItem_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        QWidget* arg3 = object<QWidget>(param_widget);
        arg0->setItemWidget(arg1, arg2, arg3);
    }

    int qt_QTreeWidget_sortColumn_int_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return arg0->sortColumn();
    }

    void qt_QTreeWidget_sortItems_void_QTreeWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        int param_order)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_column);
        Qt::SortOrder arg2 = (Qt::SortOrder)(param_order);
        arg0->sortItems(arg1, arg2);
    }

    Pointer qt_QTreeWidget_takeTopLevelItem_QTreeWidgetItem_QTreeWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_index);
        return makeqpointer<QTreeWidgetItemType>(
            c, arg0->takeTopLevelItem(arg1), "qt.QTreeWidgetItem");
    }

    Pointer qt_QTreeWidget_topLevelItem_QTreeWidgetItem_QTreeWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_index);
        return makeqpointer<QTreeWidgetItemType>(c, arg0->topLevelItem(arg1),
                                                 "qt.QTreeWidgetItem");
    }

    Pointer qt_QTreeWidget_visualItemRect_QRect_QTreeWidget_QTreeWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QTreeWidgetItem* arg1 =
            getqpointer<QTreeWidgetItemType>(param_item);
        return makeqtype<QRectType>(c, arg0->visualItemRect(arg1), "qt.QRect");
    }

    void qt_QTreeWidget_setSelectionModel_void_QTreeWidget_QItemSelectionModel(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_selectionModel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QItemSelectionModel* arg1 =
            object<QItemSelectionModel>(param_selectionModel);
        if (isMuQtObject(arg0))
            arg0->QTreeWidget::setSelectionModel(arg1);
        else
            arg0->setSelectionModel(arg1);
    }

    bool
    qt_QTreeWidget_dropMimeData_bool_QTreeWidget_QTreeWidgetItem_int_QMimeData_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_index, Pointer param_data, int param_action)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_parent);
        int arg2 = (int)(param_index);
        const QMimeData* arg3 = object<QMimeData>(param_data);
        Qt::DropAction arg4 = (Qt::DropAction)(param_action);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)
                         ->dropMimeData_pub_parent(arg1, arg2, arg3, arg4)
                   : ((MuQt_QTreeWidget*)arg0)
                         ->dropMimeData_pub(arg1, arg2, arg3, arg4);
    }

    Pointer
    qt_QTreeWidget_indexFromItem_QModelIndex_QTreeWidget_QTreeWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTreeWidgetItem* arg1 = getqpointer<QTreeWidgetItemType>(param_item);
        int arg2 = (int)(param_column);
        return makeqtype<QModelIndexType>(
            c, ((MuQt_QTreeWidget*)arg0)->indexFromItem_pub(arg1, arg2),
            "qt.QModelIndex");
    }

    Pointer
    qt_QTreeWidget_itemFromIndex_QTreeWidgetItem_QTreeWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqpointer<QTreeWidgetItemType>(
            c, ((MuQt_QTreeWidget*)arg0)->itemFromIndex_pub(arg1),
            "qt.QTreeWidgetItem");
    }

    Pointer
    qt_QTreeWidget_mimeData_QMimeData_QTreeWidget_qt__QTreeWidgetItemBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_items)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QList<QTreeWidgetItem*> arg1 =
            qpointerlist<QTreeWidgetItemType>(param_items);
        return isMuQtObject(arg0)
                   ? makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QTreeWidget*)arg0)->mimeData_pub_parent(arg1),
                         "qt.QMimeData")
                   : makeinstance<QMimeDataType>(
                         c, ((MuQt_QTreeWidget*)arg0)->mimeData_pub(arg1),
                         "qt.QMimeData");
    }

    Pointer
    qt_QTreeWidget_mimeTypes_stringBSB_ESB__QTreeWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makestringlist(
                         c, ((MuQt_QTreeWidget*)arg0)->mimeTypes_pub_parent())
                   : makestringlist(c,
                                    ((MuQt_QTreeWidget*)arg0)->mimeTypes_pub());
    }

    int
    qt_QTreeWidget_supportedDropActions_int_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return isMuQtObject(arg0)
                   ? int(((MuQt_QTreeWidget*)arg0)
                             ->supportedDropActions_pub_parent())
                   : int(((MuQt_QTreeWidget*)arg0)->supportedDropActions_pub());
    }

    void qt_QTreeWidget_dropEvent_void_QTreeWidget_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->dropEvent_pub(arg1);
    }

    bool qt_QTreeWidget_event_bool_QTreeWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QTreeWidget*)arg0)->event_pub(arg1);
    }

    Pointer qt_QTreeWidget_indexAt_QModelIndex_QTreeWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return isMuQtObject(arg0)
                   ? makeqtype<QModelIndexType>(
                         c, arg0->QTreeWidget::indexAt(arg1), "qt.QModelIndex")
                   : makeqtype<QModelIndexType>(c, arg0->indexAt(arg1),
                                                "qt.QModelIndex");
    }

    void qt_QTreeWidget_keyboardSearch_void_QTreeWidget_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_search)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QString arg1 = qstring(param_search);
        if (isMuQtObject(arg0))
            arg0->QTreeWidget::keyboardSearch(arg1);
        else
            arg0->keyboardSearch(arg1);
    }

    void qt_QTreeWidget_reset_void_QTreeWidget(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTreeWidget::reset();
        else
            arg0->reset();
    }

    void qt_QTreeWidget_selectAll_void_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTreeWidget::selectAll();
        else
            arg0->selectAll();
    }

    void qt_QTreeWidget_setRootIndex_void_QTreeWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        if (isMuQtObject(arg0))
            arg0->QTreeWidget::setRootIndex(arg1);
        else
            arg0->setRootIndex(arg1);
    }

    Pointer qt_QTreeWidget_visualRect_QRect_QTreeWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? makeqtype<QRectType>(
                         c, arg0->QTreeWidget::visualRect(arg1), "qt.QRect")
                   : makeqtype<QRectType>(c, arg0->visualRect(arg1),
                                          "qt.QRect");
    }

    void qt_QTreeWidget_currentChanged_void_QTreeWidget_QModelIndex_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_current,
        Pointer param_previous)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_current);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_previous);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->currentChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeWidget*)arg0)->currentChanged_pub(arg1, arg2);
    }

    void qt_QTreeWidget_dragMoveEvent_void_QTreeWidget_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->dragMoveEvent_pub(arg1);
    }

    int qt_QTreeWidget_horizontalOffset_int_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)->horizontalOffset_pub_parent()
                   : ((MuQt_QTreeWidget*)arg0)->horizontalOffset_pub();
    }

    bool qt_QTreeWidget_isIndexHidden_bool_QTreeWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)->isIndexHidden_pub_parent(arg1)
                   : ((MuQt_QTreeWidget*)arg0)->isIndexHidden_pub(arg1);
    }

    void qt_QTreeWidget_keyPressEvent_void_QTreeWidget_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QTreeWidget_mouseDoubleClickEvent_void_QTreeWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QTreeWidget_mouseMoveEvent_void_QTreeWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QTreeWidget_mousePressEvent_void_QTreeWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QTreeWidget_mouseReleaseEvent_void_QTreeWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QTreeWidget_paintEvent_void_QTreeWidget_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->paintEvent_pub(arg1);
    }

    void
    qt_QTreeWidget_rowsAboutToBeRemoved_void_QTreeWidget_QModelIndex_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_start, int param_end)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_parent);
        int arg2 = (int)(param_start);
        int arg3 = (int)(param_end);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)
                ->rowsAboutToBeRemoved_pub_parent(arg1, arg2, arg3);
        else
            ((MuQt_QTreeWidget*)arg0)
                ->rowsAboutToBeRemoved_pub(arg1, arg2, arg3);
    }

    void qt_QTreeWidget_rowsInserted_void_QTreeWidget_QModelIndex_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_start, int param_end)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_parent);
        int arg2 = (int)(param_start);
        int arg3 = (int)(param_end);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)
                ->rowsInserted_pub_parent(arg1, arg2, arg3);
        else
            ((MuQt_QTreeWidget*)arg0)->rowsInserted_pub(arg1, arg2, arg3);
    }

    void qt_QTreeWidget_scrollContentsBy_void_QTreeWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeWidget*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    Pointer qt_QTreeWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QTreeWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqmodelindexlist(c, ((MuQt_QTreeWidget*)arg0)
                                                ->selectedIndexes_pub_parent())
                   : makeqmodelindexlist(
                         c, ((MuQt_QTreeWidget*)arg0)->selectedIndexes_pub());
    }

    void
    qt_QTreeWidget_selectionChanged_void_QTreeWidget_QItemSelection_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selected,
        Pointer param_deselected)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selected);
        const QItemSelection arg2 =
            getqtype<QItemSelectionType>(param_deselected);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->selectionChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeWidget*)arg0)->selectionChanged_pub(arg1, arg2);
    }

    void qt_QTreeWidget_setSelection_void_QTreeWidget_QRect_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect,
        int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->setSelection_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeWidget*)arg0)->setSelection_pub(arg1, arg2);
    }

    int qt_QTreeWidget_sizeHintForColumn_int_QTreeWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        int arg1 = (int)(param_column);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)
                         ->sizeHintForColumn_pub_parent(arg1)
                   : ((MuQt_QTreeWidget*)arg0)->sizeHintForColumn_pub(arg1);
    }

    void qt_QTreeWidget_timerEvent_void_QTreeWidget_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeWidget*)arg0)->timerEvent_pub(arg1);
    }

    void
    qt_QTreeWidget_updateGeometries_void_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeWidget*)arg0)->updateGeometries_pub_parent();
        else
            ((MuQt_QTreeWidget*)arg0)->updateGeometries_pub();
    }

    int qt_QTreeWidget_verticalOffset_int_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)->verticalOffset_pub_parent()
                   : ((MuQt_QTreeWidget*)arg0)->verticalOffset_pub();
    }

    bool qt_QTreeWidget_viewportEvent_bool_QTreeWidget_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeWidget*)arg0)->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QTreeWidget*)arg0)->viewportEvent_pub(arg1);
    }

    Pointer
    qt_QTreeWidget_viewportSizeHint_QSize_QTreeWidget(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QTreeWidget*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QTreeWidget*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    Pointer
    qt_QTreeWidget_visualRegionForSelection_QRegion_QTreeWidget_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selection)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeWidget* arg0 = object<QTreeWidget>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selection);
        return isMuQtObject(arg0)
                   ? makeqtype<QRegionType>(
                         c,
                         ((MuQt_QTreeWidget*)arg0)
                             ->visualRegionForSelection_pub_parent(arg1),
                         "qt.QRegion")
                   : makeqtype<QRegionType>(
                         c,
                         ((MuQt_QTreeWidget*)arg0)
                             ->visualRegionForSelection_pub(arg1),
                         "qt.QRegion");
    }

    static NODE_IMPLEMENTATION(_n_QTreeWidget0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_QTreeWidget_QTreeWidget_QTreeWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addTopLevelItem0, void)
    {
        qt_QTreeWidget_addTopLevelItem_void_QTreeWidget_QTreeWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addTopLevelItems0, void)
    {
        qt_QTreeWidget_addTopLevelItems_void_QTreeWidget_qt__QTreeWidgetItemBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_closePersistentEditor0, void)
    {
        qt_QTreeWidget_closePersistentEditor_void_QTreeWidget_QTreeWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_currentColumn0, int)
    {
        NODE_RETURN(qt_QTreeWidget_currentColumn_int_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentItem0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_currentItem_QTreeWidgetItem_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_editItem0, void)
    {
        qt_QTreeWidget_editItem_void_QTreeWidget_QTreeWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_findItems0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_findItems_qt__QTreeWidgetItemBSB_ESB__QTreeWidget_string_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_headerItem0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_headerItem_QTreeWidgetItem_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexOfTopLevelItem0, int)
    {
        NODE_RETURN(
            qt_QTreeWidget_indexOfTopLevelItem_int_QTreeWidget_QTreeWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertTopLevelItem0, void)
    {
        qt_QTreeWidget_insertTopLevelItem_void_QTreeWidget_int_QTreeWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertTopLevelItems0, void)
    {
        qt_QTreeWidget_insertTopLevelItems_void_QTreeWidget_int_qt__QTreeWidgetItemBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_invisibleRootItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_invisibleRootItem_QTreeWidgetItem_QTreeWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isFirstItemColumnSpanned0, bool)
    {
        NODE_RETURN(
            qt_QTreeWidget_isFirstItemColumnSpanned_bool_QTreeWidget_QTreeWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemAbove0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_itemAbove_QTreeWidgetItem_QTreeWidget_QTreeWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemAt0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_itemAt_QTreeWidgetItem_QTreeWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemAt1, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_itemAt_QTreeWidgetItem_QTreeWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemBelow0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_itemBelow_QTreeWidgetItem_QTreeWidget_QTreeWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemWidget0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_itemWidget_QWidget_QTreeWidget_QTreeWidgetItem_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_openPersistentEditor0, void)
    {
        qt_QTreeWidget_openPersistentEditor_void_QTreeWidget_QTreeWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_removeItemWidget0, void)
    {
        qt_QTreeWidget_removeItemWidget_void_QTreeWidget_QTreeWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_selectedItems0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_selectedItems_qt__QTreeWidgetItemBSB_ESB__QTreeWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem0, void)
    {
        qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem1, void)
    {
        qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem2, void)
    {
        qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_setFirstItemColumnSpanned0, void)
    {
        qt_QTreeWidget_setFirstItemColumnSpanned_void_QTreeWidget_QTreeWidgetItem_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setHeaderItem0, void)
    {
        qt_QTreeWidget_setHeaderItem_void_QTreeWidget_QTreeWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setHeaderLabel0, void)
    {
        qt_QTreeWidget_setHeaderLabel_void_QTreeWidget_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setHeaderLabels0, void)
    {
        qt_QTreeWidget_setHeaderLabels_void_QTreeWidget_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setItemWidget0, void)
    {
        qt_QTreeWidget_setItemWidget_void_QTreeWidget_QTreeWidgetItem_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sortColumn0, int)
    {
        NODE_RETURN(qt_QTreeWidget_sortColumn_int_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sortItems0, void)
    {
        qt_QTreeWidget_sortItems_void_QTreeWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_takeTopLevelItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_takeTopLevelItem_QTreeWidgetItem_QTreeWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_topLevelItem0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_topLevelItem_QTreeWidgetItem_QTreeWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_visualItemRect0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_visualItemRect_QRect_QTreeWidget_QTreeWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setSelectionModel0, void)
    {
        qt_QTreeWidget_setSelectionModel_void_QTreeWidget_QItemSelectionModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropMimeData0, bool)
    {
        NODE_RETURN(
            qt_QTreeWidget_dropMimeData_bool_QTreeWidget_QTreeWidgetItem_int_QMimeData_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, Pointer), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_indexFromItem0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_indexFromItem_QModelIndex_QTreeWidget_QTreeWidgetItem_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemFromIndex0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_itemFromIndex_QTreeWidgetItem_QTreeWidget_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mimeData0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_mimeData_QMimeData_QTreeWidget_qt__QTreeWidgetItemBSB_ESB_(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mimeTypes0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_mimeTypes_stringBSB_ESB__QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_supportedDropActions0, int)
    {
        NODE_RETURN(qt_QTreeWidget_supportedDropActions_int_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QTreeWidget_dropEvent_void_QTreeWidget_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QTreeWidget_event_bool_QTreeWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexAt0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_indexAt_QModelIndex_QTreeWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyboardSearch0, void)
    {
        qt_QTreeWidget_keyboardSearch_void_QTreeWidget_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_reset0, void)
    {
        qt_QTreeWidget_reset_void_QTreeWidget(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectAll0, void)
    {
        qt_QTreeWidget_selectAll_void_QTreeWidget(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setRootIndex0, void)
    {
        qt_QTreeWidget_setRootIndex_void_QTreeWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_visualRect0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_visualRect_QRect_QTreeWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentChanged0, void)
    {
        qt_QTreeWidget_currentChanged_void_QTreeWidget_QModelIndex_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QTreeWidget_dragMoveEvent_void_QTreeWidget_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_horizontalOffset0, int)
    {
        NODE_RETURN(qt_QTreeWidget_horizontalOffset_int_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIndexHidden0, bool)
    {
        NODE_RETURN(qt_QTreeWidget_isIndexHidden_bool_QTreeWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QTreeWidget_keyPressEvent_void_QTreeWidget_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QTreeWidget_mouseDoubleClickEvent_void_QTreeWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QTreeWidget_mouseMoveEvent_void_QTreeWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QTreeWidget_mousePressEvent_void_QTreeWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QTreeWidget_mouseReleaseEvent_void_QTreeWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QTreeWidget_paintEvent_void_QTreeWidget_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_rowsAboutToBeRemoved0, void)
    {
        qt_QTreeWidget_rowsAboutToBeRemoved_void_QTreeWidget_QModelIndex_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_rowsInserted0, void)
    {
        qt_QTreeWidget_rowsInserted_void_QTreeWidget_QModelIndex_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QTreeWidget_scrollContentsBy_void_QTreeWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_selectedIndexes0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QTreeWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionChanged0, void)
    {
        qt_QTreeWidget_selectionChanged_void_QTreeWidget_QItemSelection_QItemSelection(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QTreeWidget_setSelection_void_QTreeWidget_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForColumn0, int)
    {
        NODE_RETURN(qt_QTreeWidget_sizeHintForColumn_int_QTreeWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QTreeWidget_timerEvent_void_QTreeWidget_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_updateGeometries0, void)
    {
        qt_QTreeWidget_updateGeometries_void_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_verticalOffset0, int)
    {
        NODE_RETURN(qt_QTreeWidget_verticalOffset_int_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(qt_QTreeWidget_viewportEvent_bool_QTreeWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTreeWidget_viewportSizeHint_QSize_QTreeWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualRegionForSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeWidget_visualRegionForSelection_QRegion_QTreeWidget_QItemSelection(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    void QTreeWidgetType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTreeWidget_QTreeWidget_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QTreeWidget", _n_QTreeWidget0, None, Compiled,
                qt_QTreeWidget_QTreeWidget_QTreeWidget_QTreeWidget_QWidget,
                Return, "qt.QTreeWidget", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "addTopLevelItem", _n_addTopLevelItem0, None, Compiled,
                qt_QTreeWidget_addTopLevelItem_void_QTreeWidget_QTreeWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "addTopLevelItems", _n_addTopLevelItems0, None, Compiled,
                qt_QTreeWidget_addTopLevelItems_void_QTreeWidget_qt__QTreeWidgetItemBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "items", "qt.QTreeWidgetItem[]"), End),
            new Function(
                c, "closePersistentEditor", _n_closePersistentEditor0, None,
                Compiled,
                qt_QTreeWidget_closePersistentEditor_void_QTreeWidget_QTreeWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int", Value((int)0)), End),
            // PROP: columnCount (int; QTreeWidget this)
            new Function(c, "currentColumn", _n_currentColumn0, None, Compiled,
                         qt_QTreeWidget_currentColumn_int_QTreeWidget, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTreeWidget"), End),
            new Function(c, "currentItem", _n_currentItem0, None, Compiled,
                         qt_QTreeWidget_currentItem_QTreeWidgetItem_QTreeWidget,
                         Return, "qt.QTreeWidgetItem", Parameters,
                         new Param(c, "this", "qt.QTreeWidget"), End),
            new Function(
                c, "editItem", _n_editItem0, None, Compiled,
                qt_QTreeWidget_editItem_void_QTreeWidget_QTreeWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int", Value((int)0)), End),
            new Function(
                c, "findItems", _n_findItems0, None, Compiled,
                qt_QTreeWidget_findItems_qt__QTreeWidgetItemBSB_ESB__QTreeWidget_string_int_int,
                Return, "qt.QTreeWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "text", "string"), new Param(c, "flags", "int"),
                new Param(c, "column", "int", Value((int)0)), End),
            new Function(c, "headerItem", _n_headerItem0, None, Compiled,
                         qt_QTreeWidget_headerItem_QTreeWidgetItem_QTreeWidget,
                         Return, "qt.QTreeWidgetItem", Parameters,
                         new Param(c, "this", "qt.QTreeWidget"), End),
            new Function(
                c, "indexOfTopLevelItem", _n_indexOfTopLevelItem0, None,
                Compiled,
                qt_QTreeWidget_indexOfTopLevelItem_int_QTreeWidget_QTreeWidgetItem,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "insertTopLevelItem", _n_insertTopLevelItem0, None, Compiled,
                qt_QTreeWidget_insertTopLevelItem_void_QTreeWidget_int_QTreeWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "int"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "insertTopLevelItems", _n_insertTopLevelItems0, None,
                Compiled,
                qt_QTreeWidget_insertTopLevelItems_void_QTreeWidget_int_qt__QTreeWidgetItemBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "int"),
                new Param(c, "items", "qt.QTreeWidgetItem[]"), End),
            new Function(
                c, "invisibleRootItem", _n_invisibleRootItem0, None, Compiled,
                qt_QTreeWidget_invisibleRootItem_QTreeWidgetItem_QTreeWidget,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"), End),
            new Function(
                c, "isFirstItemColumnSpanned", _n_isFirstItemColumnSpanned0,
                None, Compiled,
                qt_QTreeWidget_isFirstItemColumnSpanned_bool_QTreeWidget_QTreeWidgetItem,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "itemAbove", _n_itemAbove0, None, Compiled,
                qt_QTreeWidget_itemAbove_QTreeWidgetItem_QTreeWidget_QTreeWidgetItem,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "itemAt", _n_itemAt0, None, Compiled,
                qt_QTreeWidget_itemAt_QTreeWidgetItem_QTreeWidget_QPoint,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "p", "qt.QPoint"), End),
            new Function(
                c, "itemAt", _n_itemAt1, None, Compiled,
                qt_QTreeWidget_itemAt_QTreeWidgetItem_QTreeWidget_int_int,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "x", "int"), new Param(c, "y", "int"), End),
            new Function(
                c, "itemBelow", _n_itemBelow0, None, Compiled,
                qt_QTreeWidget_itemBelow_QTreeWidgetItem_QTreeWidget_QTreeWidgetItem,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "itemWidget", _n_itemWidget0, None, Compiled,
                qt_QTreeWidget_itemWidget_QWidget_QTreeWidget_QTreeWidgetItem_int,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int"), End),
            new Function(
                c, "openPersistentEditor", _n_openPersistentEditor0, None,
                Compiled,
                qt_QTreeWidget_openPersistentEditor_void_QTreeWidget_QTreeWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int", Value((int)0)), End),
            new Function(
                c, "removeItemWidget", _n_removeItemWidget0, None, Compiled,
                qt_QTreeWidget_removeItemWidget_void_QTreeWidget_QTreeWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int"), End),
            new Function(
                c, "selectedItems", _n_selectedItems0, None, Compiled,
                qt_QTreeWidget_selectedItems_qt__QTreeWidgetItemBSB_ESB__QTreeWidget,
                Return, "qt.QTreeWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QTreeWidget"), End),
            // PROP: setColumnCount (void; QTreeWidget this, int columns)
            new Function(
                c, "setCurrentItem", _n_setCurrentItem0, None, Compiled,
                qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "setCurrentItem", _n_setCurrentItem1, None, Compiled,
                qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int"), End),
            new Function(
                c, "setCurrentItem", _n_setCurrentItem2, None, Compiled,
                qt_QTreeWidget_setCurrentItem_void_QTreeWidget_QTreeWidgetItem_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int"), new Param(c, "command", "int"),
                End),
            new Function(
                c, "setFirstItemColumnSpanned", _n_setFirstItemColumnSpanned0,
                None, Compiled,
                qt_QTreeWidget_setFirstItemColumnSpanned_void_QTreeWidget_QTreeWidgetItem_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "span", "bool"), End),
            new Function(
                c, "setHeaderItem", _n_setHeaderItem0, None, Compiled,
                qt_QTreeWidget_setHeaderItem_void_QTreeWidget_QTreeWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            new Function(
                c, "setHeaderLabel", _n_setHeaderLabel0, None, Compiled,
                qt_QTreeWidget_setHeaderLabel_void_QTreeWidget_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "label", "string"), End),
            new Function(
                c, "setHeaderLabels", _n_setHeaderLabels0, None, Compiled,
                qt_QTreeWidget_setHeaderLabels_void_QTreeWidget_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "labels", "string[]"), End),
            new Function(
                c, "setItemWidget", _n_setItemWidget0, None, Compiled,
                qt_QTreeWidget_setItemWidget_void_QTreeWidget_QTreeWidgetItem_int_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int"),
                new Param(c, "widget", "qt.QWidget"), End),
            new Function(c, "sortColumn", _n_sortColumn0, None, Compiled,
                         qt_QTreeWidget_sortColumn_int_QTreeWidget, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTreeWidget"), End),
            new Function(c, "sortItems", _n_sortItems0, None, Compiled,
                         qt_QTreeWidget_sortItems_void_QTreeWidget_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTreeWidget"),
                         new Param(c, "column", "int"),
                         new Param(c, "order", "int"), End),
            new Function(
                c, "takeTopLevelItem", _n_takeTopLevelItem0, None, Compiled,
                qt_QTreeWidget_takeTopLevelItem_QTreeWidgetItem_QTreeWidget_int,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "int"), End),
            new Function(
                c, "topLevelItem", _n_topLevelItem0, None, Compiled,
                qt_QTreeWidget_topLevelItem_QTreeWidgetItem_QTreeWidget_int,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "int"), End),
            // PROP: topLevelItemCount (int; QTreeWidget this)
            new Function(
                c, "visualItemRect", _n_visualItemRect0, None, Compiled,
                qt_QTreeWidget_visualItemRect_QRect_QTreeWidget_QTreeWidgetItem,
                Return, "qt.QRect", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"), End),
            _func[0] = new MemberFunction(
                c, "setSelectionModel", _n_setSelectionModel0, None, Compiled,
                qt_QTreeWidget_setSelectionModel_void_QTreeWidget_QItemSelectionModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "selectionModel", "qt.QItemSelectionModel"), End),
            _func[1] = new MemberFunction(
                c, "dropMimeData", _n_dropMimeData0, None, Compiled,
                qt_QTreeWidget_dropMimeData_bool_QTreeWidget_QTreeWidgetItem_int_QMimeData_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "parent", "qt.QTreeWidgetItem"),
                new Param(c, "index", "int"),
                new Param(c, "data", "qt.QMimeData"),
                new Param(c, "action", "int"), End),
            new Function(
                c, "indexFromItem", _n_indexFromItem0, None, Compiled,
                qt_QTreeWidget_indexFromItem_QModelIndex_QTreeWidget_QTreeWidgetItem_int,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "item", "qt.QTreeWidgetItem"),
                new Param(c, "column", "int", Value((int)0)), End),
            new Function(
                c, "itemFromIndex", _n_itemFromIndex0, None, Compiled,
                qt_QTreeWidget_itemFromIndex_QTreeWidgetItem_QTreeWidget_QModelIndex,
                Return, "qt.QTreeWidgetItem", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[2] = new MemberFunction(
                c, "mimeData", _n_mimeData0, None, Compiled,
                qt_QTreeWidget_mimeData_QMimeData_QTreeWidget_qt__QTreeWidgetItemBSB_ESB_,
                Return, "qt.QMimeData", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "items", "qt.QTreeWidgetItem[]"), End),
            _func[3] = new MemberFunction(
                c, "mimeTypes", _n_mimeTypes0, None, Compiled,
                qt_QTreeWidget_mimeTypes_stringBSB_ESB__QTreeWidget, Return,
                "string[]", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                End),
            _func[4] = new MemberFunction(
                c, "supportedDropActions", _n_supportedDropActions0, None,
                Compiled, qt_QTreeWidget_supportedDropActions_int_QTreeWidget,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QTreeWidget"), End),
            _func[5] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QTreeWidget_dropEvent_void_QTreeWidget_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[6] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QTreeWidget_event_bool_QTreeWidget_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "e", "qt.QEvent"), End),
            // MISSING: dataChanged (void; QTreeWidget this, QModelIndex
            // topLeft, QModelIndex bottomRight, "const QVector<int> &" roles)
            _func[7] = new MemberFunction(
                c, "indexAt", _n_indexAt0, None, Compiled,
                qt_QTreeWidget_indexAt_QModelIndex_QTreeWidget_QPoint, Return,
                "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "point", "qt.QPoint"), End),
            _func[8] = new MemberFunction(
                c, "keyboardSearch", _n_keyboardSearch0, None, Compiled,
                qt_QTreeWidget_keyboardSearch_void_QTreeWidget_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "search", "string"), End),
            _func[9] = new MemberFunction(
                c, "reset", _n_reset0, None, Compiled,
                qt_QTreeWidget_reset_void_QTreeWidget, Return, "void",
                Parameters, new Param(c, "this", "qt.QTreeWidget"), End),
            // MISSING: scrollTo (void; QTreeWidget this, QModelIndex index,
            // "ScrollHint" hint)
            _func[10] = new MemberFunction(
                c, "selectAll", _n_selectAll0, None, Compiled,
                qt_QTreeWidget_selectAll_void_QTreeWidget, Return, "void",
                Parameters, new Param(c, "this", "qt.QTreeWidget"), End),
            _func[11] = new MemberFunction(
                c, "setRootIndex", _n_setRootIndex0, None, Compiled,
                qt_QTreeWidget_setRootIndex_void_QTreeWidget_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[12] = new MemberFunction(
                c, "visualRect", _n_visualRect0, None, Compiled,
                qt_QTreeWidget_visualRect_QRect_QTreeWidget_QModelIndex, Return,
                "qt.QRect", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            // MISSING: drawBranches (void; QTreeWidget this, "QPainter *"
            // painter, QRect rect, QModelIndex index) // protected MISSING:
            // drawRow (void; QTreeWidget this, "QPainter *" painter, "const
            // QStyleOptionViewItem &" option, QModelIndex index) // protected
            _func[13] = new MemberFunction(
                c, "currentChanged", _n_currentChanged0, None, Compiled,
                qt_QTreeWidget_currentChanged_void_QTreeWidget_QModelIndex_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "current", "qt.QModelIndex"),
                new Param(c, "previous", "qt.QModelIndex"), End),
            _func[14] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QTreeWidget_dragMoveEvent_void_QTreeWidget_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[15] = new MemberFunction(
                c, "horizontalOffset", _n_horizontalOffset0, None, Compiled,
                qt_QTreeWidget_horizontalOffset_int_QTreeWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QTreeWidget"), End),
            _func[16] = new MemberFunction(
                c, "isIndexHidden", _n_isIndexHidden0, None, Compiled,
                qt_QTreeWidget_isIndexHidden_bool_QTreeWidget_QModelIndex,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[17] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QTreeWidget_keyPressEvent_void_QTreeWidget_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[18] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QTreeWidget_mouseDoubleClickEvent_void_QTreeWidget_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[19] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QTreeWidget_mouseMoveEvent_void_QTreeWidget_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[20] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QTreeWidget_mousePressEvent_void_QTreeWidget_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[21] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QTreeWidget_mouseReleaseEvent_void_QTreeWidget_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            // MISSING: moveCursor (QModelIndex; QTreeWidget this,
            // "CursorAction" cursorAction, flags Qt::KeyboardModifiers
            // modifiers) // protected
            _func[22] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QTreeWidget_paintEvent_void_QTreeWidget_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[23] = new MemberFunction(
                c, "rowsAboutToBeRemoved", _n_rowsAboutToBeRemoved0, None,
                Compiled,
                qt_QTreeWidget_rowsAboutToBeRemoved_void_QTreeWidget_QModelIndex_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "start", "int"), new Param(c, "end", "int"), End),
            _func[24] = new MemberFunction(
                c, "rowsInserted", _n_rowsInserted0, None, Compiled,
                qt_QTreeWidget_rowsInserted_void_QTreeWidget_QModelIndex_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "start", "int"), new Param(c, "end", "int"), End),
            _func[25] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QTreeWidget_scrollContentsBy_void_QTreeWidget_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[26] = new MemberFunction(
                c, "selectedIndexes", _n_selectedIndexes0, None, Compiled,
                qt_QTreeWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QTreeWidget,
                Return, "qt.QModelIndex[]", Parameters,
                new Param(c, "this", "qt.QTreeWidget"), End),
            _func[27] = new MemberFunction(
                c, "selectionChanged", _n_selectionChanged0, None, Compiled,
                qt_QTreeWidget_selectionChanged_void_QTreeWidget_QItemSelection_QItemSelection,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "selected", "qt.QItemSelection"),
                new Param(c, "deselected", "qt.QItemSelection"), End),
            _func[28] = new MemberFunction(
                c, "setSelection", _n_setSelection0, None, Compiled,
                qt_QTreeWidget_setSelection_void_QTreeWidget_QRect_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "rect", "qt.QRect"),
                new Param(c, "command", "int"), End),
            _func[29] = new MemberFunction(
                c, "sizeHintForColumn", _n_sizeHintForColumn0, None, Compiled,
                qt_QTreeWidget_sizeHintForColumn_int_QTreeWidget_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "column", "int"), End),
            _func[30] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QTreeWidget_timerEvent_void_QTreeWidget_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[31] = new MemberFunction(
                c, "updateGeometries", _n_updateGeometries0, None, Compiled,
                qt_QTreeWidget_updateGeometries_void_QTreeWidget, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                End),
            _func[32] = new MemberFunction(
                c, "verticalOffset", _n_verticalOffset0, None, Compiled,
                qt_QTreeWidget_verticalOffset_int_QTreeWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QTreeWidget"), End),
            _func[33] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QTreeWidget_viewportEvent_bool_QTreeWidget_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[34] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QTreeWidget_viewportSizeHint_QSize_QTreeWidget, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QTreeWidget"),
                End),
            _func[35] = new MemberFunction(
                c, "visualRegionForSelection", _n_visualRegionForSelection0,
                None, Compiled,
                qt_QTreeWidget_visualRegionForSelection_QRegion_QTreeWidget_QItemSelection,
                Return, "qt.QRegion", Parameters,
                new Param(c, "this", "qt.QTreeWidget"),
                new Param(c, "selection", "qt.QItemSelection"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QTreeWidget::staticMetaObject, propExclusions);
    }

} // namespace Mu
