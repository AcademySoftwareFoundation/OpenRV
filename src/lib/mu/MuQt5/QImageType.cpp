//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QImageType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QColorType.h>
#include <MuQt5/QMatrixType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QTransformType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QVariantType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QImageType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QImageType::QImageType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QImageType::~QImageType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QImageType::Instance* i =
            new QImageType::Instance((Class*)NODE_THIS.type());
        QImageType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QImageType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QImageType::finalizer, 0, 0, 0);
    }

    void QImageType::finalizer(void* obj, void* data)
    {
        QImageType::Instance* i = reinterpret_cast<QImageType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QImage_QImage_QImage_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setpaintdevice(param_this, QImage());
        return param_this;
    }

    Pointer qt_QImage_QImage_QImage_QImage_QSize_int(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_size,
                                                     int param_format)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QSize arg1 = getqtype<QSizeType>(param_size);
        QImage::Format arg2 = (QImage::Format)(param_format);
        setpaintdevice(param_this, QImage(arg1, arg2));
        return param_this;
    }

    Pointer qt_QImage_QImage_QImage_QImage_int_int_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_width,
                                                       int param_height,
                                                       int param_format)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg1 = (int)(param_width);
        int arg2 = (int)(param_height);
        QImage::Format arg3 = (QImage::Format)(param_format);
        setpaintdevice(param_this, QImage(arg1, arg2, arg3));
        return param_this;
    }

    bool qt_QImage_allGray_bool_QImage(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.allGray();
    }

    int qt_QImage_bitPlaneCount_int_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.bitPlaneCount();
    }

    int qt_QImage_byteCount_int_QImage(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.byteCount();
    }

    int qt_QImage_bytesPerLine_int_QImage(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.bytesPerLine();
    }

    int64 qt_QImage_cacheKey_int64_QImage(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.cacheKey();
    }

    int qt_QImage_color_int_QImage_int(Mu::Thread& NODE_THREAD,
                                       Pointer param_this, int param_i)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_i);
        return arg0.color(arg1);
    }

    int qt_QImage_colorCount_int_QImage(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.colorCount();
    }

    Pointer qt_QImage_convertToFormat_QImage_QImage_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_format,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        QImage::Format arg1 = (QImage::Format)(param_format);
        Qt::ImageConversionFlags arg2 = (Qt::ImageConversionFlags)(param_flags);
        return makeqtype<QImageType>(c, arg0.convertToFormat(arg1, arg2),
                                     "qt.QImage");
    }

    Pointer qt_QImage_copy_QImage_QImage_QRect(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QImageType>(c, arg0.copy(arg1), "qt.QImage");
    }

    Pointer qt_QImage_copy_QImage_QImage_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y,
        int param_width, int param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        int arg3 = (int)(param_width);
        int arg4 = (int)(param_height);
        return makeqtype<QImageType>(c, arg0.copy(arg1, arg2, arg3, arg4),
                                     "qt.QImage");
    }

    Pointer qt_QImage_createAlphaMask_QImage_QImage_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        Qt::ImageConversionFlags arg1 = (Qt::ImageConversionFlags)(param_flags);
        return makeqtype<QImageType>(c, arg0.createAlphaMask(arg1),
                                     "qt.QImage");
    }

    Pointer qt_QImage_createHeuristicMask_QImage_QImage_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_clipTight)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        bool arg1 = (bool)(param_clipTight);
        return makeqtype<QImageType>(c, arg0.createHeuristicMask(arg1),
                                     "qt.QImage");
    }

    Pointer qt_QImage_createMaskFromColor_QImage_QImage_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_color,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        QRgb arg1 = (int)(param_color);
        Qt::MaskMode arg2 = (Qt::MaskMode)(param_mode);
        return makeqtype<QImageType>(c, arg0.createMaskFromColor(arg1, arg2),
                                     "qt.QImage");
    }

    int qt_QImage_depth_int_QImage(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.depth();
    }

    double qt_QImage_devicePixelRatio_double_QImage(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.devicePixelRatio();
    }

    int qt_QImage_dotsPerMeterX_int_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.dotsPerMeterX();
    }

    int qt_QImage_dotsPerMeterY_int_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.dotsPerMeterY();
    }

    void qt_QImage_fill_void_QImage_int(Mu::Thread& NODE_THREAD,
                                        Pointer param_this,
                                        int param_pixelValue)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        uint arg1 = (int)(param_pixelValue);
        arg0.fill(arg1);
    }

    void qt_QImage_fill_void_QImage_QColor(Mu::Thread& NODE_THREAD,
                                           Pointer param_this,
                                           Pointer param_color)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        const QColor arg1 = getqtype<QColorType>(param_color);
        arg0.fill(arg1);
    }

    int qt_QImage_format_int_QImage(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return int(arg0.format());
    }

    bool qt_QImage_hasAlphaChannel_bool_QImage(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.hasAlphaChannel();
    }

    int qt_QImage_height_int_QImage(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.height();
    }

    void qt_QImage_invertPixels_void_QImage_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        QImage::InvertMode arg1 = (QImage::InvertMode)(param_mode);
        arg0.invertPixels(arg1);
    }

    bool qt_QImage_isGrayscale_bool_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.isGrayscale();
    }

    bool qt_QImage_isNull_bool_QImage(Mu::Thread& NODE_THREAD,
                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.isNull();
    }

    Pointer qt_QImage_mirrored_QImage_QImage_bool_bool(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       bool param_horizontal,
                                                       bool param_vertical)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        bool arg1 = (bool)(param_horizontal);
        bool arg2 = (bool)(param_vertical);
        return makeqtype<QImageType>(c, arg0.mirrored(arg1, arg2), "qt.QImage");
    }

    Pointer qt_QImage_offset_QPoint_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return makeqtype<QPointType>(c, arg0.offset(), "qt.QPoint");
    }

    int qt_QImage_pixel_int_QImage_QPoint(Mu::Thread& NODE_THREAD,
                                          Pointer param_this,
                                          Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        return arg0.pixel(arg1);
    }

    int qt_QImage_pixel_int_QImage_int_int(Mu::Thread& NODE_THREAD,
                                           Pointer param_this, int param_x,
                                           int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return arg0.pixel(arg1, arg2);
    }

    Pointer qt_QImage_pixelColor_QColor_QImage_QPoint(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        return makeqtype<QColorType>(c, arg0.pixelColor(arg1), "qt.QColor");
    }

    Pointer qt_QImage_pixelColor_QColor_QImage_int_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_x, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return makeqtype<QColorType>(c, arg0.pixelColor(arg1, arg2),
                                     "qt.QColor");
    }

    int qt_QImage_pixelIndex_int_QImage_QPoint(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        return arg0.pixelIndex(arg1);
    }

    int qt_QImage_pixelIndex_int_QImage_int_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this, int param_x,
                                                int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return arg0.pixelIndex(arg1, arg2);
    }

    Pointer qt_QImage_rect_QRect_QImage(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return makeqtype<QRectType>(c, arg0.rect(), "qt.QRect");
    }

    Pointer qt_QImage_rgbSwapped_QImage_QImage(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return makeqtype<QImageType>(c, arg0.rgbSwapped(), "qt.QImage");
    }

    Pointer qt_QImage_scaled_QImage_QImage_QSize_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_size,
        int param_aspectRatioMode, int param_transformMode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QSize arg1 = getqtype<QSizeType>(param_size);
        Qt::AspectRatioMode arg2 = (Qt::AspectRatioMode)(param_aspectRatioMode);
        Qt::TransformationMode arg3 =
            (Qt::TransformationMode)(param_transformMode);
        return makeqtype<QImageType>(c, arg0.scaled(arg1, arg2, arg3),
                                     "qt.QImage");
    }

    Pointer qt_QImage_scaled_QImage_QImage_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_width,
        int param_height, int param_aspectRatioMode, int param_transformMode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_width);
        int arg2 = (int)(param_height);
        Qt::AspectRatioMode arg3 = (Qt::AspectRatioMode)(param_aspectRatioMode);
        Qt::TransformationMode arg4 =
            (Qt::TransformationMode)(param_transformMode);
        return makeqtype<QImageType>(c, arg0.scaled(arg1, arg2, arg3, arg4),
                                     "qt.QImage");
    }

    Pointer qt_QImage_scaledToHeight_QImage_QImage_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_height,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_height);
        Qt::TransformationMode arg2 = (Qt::TransformationMode)(param_mode);
        return makeqtype<QImageType>(c, arg0.scaledToHeight(arg1, arg2),
                                     "qt.QImage");
    }

    Pointer qt_QImage_scaledToWidth_QImage_QImage_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_width,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_width);
        Qt::TransformationMode arg2 = (Qt::TransformationMode)(param_mode);
        return makeqtype<QImageType>(c, arg0.scaledToWidth(arg1, arg2),
                                     "qt.QImage");
    }

    void qt_QImage_setColor_void_QImage_int_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                int param_index,
                                                int param_colorValue)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_index);
        QRgb arg2 = (int)(param_colorValue);
        arg0.setColor(arg1, arg2);
    }

    void qt_QImage_setColorCount_void_QImage_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_colorCount)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_colorCount);
        arg0.setColorCount(arg1);
    }

    void qt_QImage_setDevicePixelRatio_void_QImage_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_scaleFactor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        qreal arg1 = (double)(param_scaleFactor);
        arg0.setDevicePixelRatio(arg1);
    }

    void qt_QImage_setDotsPerMeterX_void_QImage_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        arg0.setDotsPerMeterX(arg1);
    }

    void qt_QImage_setDotsPerMeterY_void_QImage_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_y);
        arg0.setDotsPerMeterY(arg1);
    }

    void qt_QImage_setOffset_void_QImage_QPoint(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_offset)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_offset);
        arg0.setOffset(arg1);
    }

    void qt_QImage_setPixel_void_QImage_QPoint_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_position,
                                                   int param_index_or_rgb)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        uint arg2 = (int)(param_index_or_rgb);
        arg0.setPixel(arg1, arg2);
    }

    void qt_QImage_setPixel_void_QImage_int_int_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_x, int param_y,
                                                    int param_index_or_rgb)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        uint arg3 = (int)(param_index_or_rgb);
        arg0.setPixel(arg1, arg2, arg3);
    }

    void qt_QImage_setPixelColor_void_QImage_QPoint_QColor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_position,
        Pointer param_color)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        const QColor arg2 = getqtype<QColorType>(param_color);
        arg0.setPixelColor(arg1, arg2);
    }

    void qt_QImage_setPixelColor_void_QImage_int_int_QColor(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y,
        Pointer param_color)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        const QColor arg3 = getqtype<QColorType>(param_color);
        arg0.setPixelColor(arg1, arg2, arg3);
    }

    void qt_QImage_setText_void_QImage_string_string(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_key,
                                                     Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        const QString arg1 = qstring(param_key);
        const QString arg2 = qstring(param_text);
        arg0.setText(arg1, arg2);
    }

    Pointer qt_QImage_size_QSize_QImage(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return makeqtype<QSizeType>(c, arg0.size(), "qt.QSize");
    }

    void qt_QImage_swap_void_QImage_QImage(Mu::Thread& NODE_THREAD,
                                           Pointer param_this,
                                           Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage& arg0 = getqtype<QImageType>(param_this);
        QImage arg1 = getqtype<QImageType>(param_other);
        arg0.swap(arg1);
    }

    Pointer qt_QImage_text_string_QImage_string(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_key)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QString arg1 = qstring(param_key);
        return makestring(c, arg0.text(arg1));
    }

    Pointer qt_QImage_textKeys_stringBSB_ESB__QImage(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return makestringlist(c, arg0.textKeys());
    }

    Pointer qt_QImage_transformed_QImage_QImage_QMatrix_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        Qt::TransformationMode arg2 = (Qt::TransformationMode)(param_mode);
        return makeqtype<QImageType>(c, arg0.transformed(arg1, arg2),
                                     "qt.QImage");
    }

    Pointer qt_QImage_transformed_QImage_QImage_QTransform_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        Qt::TransformationMode arg2 = (Qt::TransformationMode)(param_mode);
        return makeqtype<QImageType>(c, arg0.transformed(arg1, arg2),
                                     "qt.QImage");
    }

    bool qt_QImage_valid_bool_QImage_QPoint(Mu::Thread& NODE_THREAD,
                                            Pointer param_this,
                                            Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return arg0.valid(arg1);
    }

    bool qt_QImage_valid_bool_QImage_int_int(Mu::Thread& NODE_THREAD,
                                             Pointer param_this, int param_x,
                                             int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return arg0.valid(arg1, arg2);
    }

    int qt_QImage_width_int_QImage(Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        return arg0.width();
    }

    bool qt_QImage_operatorBang_EQ__bool_QImage_QImage(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_image)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QImage arg1 = getqtype<QImageType>(param_image);
        return arg0.operator!=(arg1);
    }

    bool qt_QImage_operatorEQ_EQ__bool_QImage_QImage(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_image)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QImage& arg0 = getqtype<QImageType>(param_this);
        const QImage arg1 = getqtype<QImageType>(param_image);
        return arg0.operator==(arg1);
    }

    Pointer qt_QImage_trueMatrix_QMatrix_QMatrix_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_matrix, int param_width,
        int param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QMatrix arg0 = getqtype<QMatrixType>(param_matrix);
        int arg1 = (int)(param_width);
        int arg2 = (int)(param_height);
        return makeqtype<QMatrixType>(c, QImage::trueMatrix(arg0, arg1, arg2),
                                      "qt.QMatrix");
    }

    Pointer qt_QImage_trueMatrix_QTransform_QTransform_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_matrix, int param_width,
        int param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QTransform arg0 = getqtype<QTransformType>(param_matrix);
        int arg1 = (int)(param_width);
        int arg2 = (int)(param_height);
        return makeqtype<QTransformType>(
            c, QImage::trueMatrix(arg0, arg1, arg2), "qt.QTransform");
    }

    Pointer qt_QImage_QVariant_QVariant_QVariant_QImage(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QImage arg1 = getqtype<QImageType>(param_from);
        setqtype<QVariantType>(param_this, QVariant(arg1));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QImage0, Pointer)
    {
        NODE_RETURN(qt_QImage_QImage_QImage_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QImage1, Pointer)
    {
        NODE_RETURN(qt_QImage_QImage_QImage_QImage_QSize_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_QImage2, Pointer)
    {
        NODE_RETURN(qt_QImage_QImage_QImage_QImage_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_allGray0, bool)
    {
        NODE_RETURN(qt_QImage_allGray_bool_QImage(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bitPlaneCount0, int)
    {
        NODE_RETURN(qt_QImage_bitPlaneCount_int_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_byteCount0, int)
    {
        NODE_RETURN(qt_QImage_byteCount_int_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesPerLine0, int)
    {
        NODE_RETURN(qt_QImage_bytesPerLine_int_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cacheKey0, int64)
    {
        NODE_RETURN(qt_QImage_cacheKey_int64_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_color0, int)
    {
        NODE_RETURN(qt_QImage_color_int_QImage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_colorCount0, int)
    {
        NODE_RETURN(qt_QImage_colorCount_int_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_convertToFormat0, Pointer)
    {
        NODE_RETURN(qt_QImage_convertToFormat_QImage_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_copy0, Pointer)
    {
        NODE_RETURN(qt_QImage_copy_QImage_QImage_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_copy1, Pointer)
    {
        NODE_RETURN(qt_QImage_copy_QImage_QImage_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_createAlphaMask0, Pointer)
    {
        NODE_RETURN(qt_QImage_createAlphaMask_QImage_QImage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_createHeuristicMask0, Pointer)
    {
        NODE_RETURN(qt_QImage_createHeuristicMask_QImage_QImage_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_createMaskFromColor0, Pointer)
    {
        NODE_RETURN(qt_QImage_createMaskFromColor_QImage_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_depth0, int)
    {
        NODE_RETURN(qt_QImage_depth_int_QImage(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_devicePixelRatio0, double)
    {
        NODE_RETURN(qt_QImage_devicePixelRatio_double_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dotsPerMeterX0, int)
    {
        NODE_RETURN(qt_QImage_dotsPerMeterX_int_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dotsPerMeterY0, int)
    {
        NODE_RETURN(qt_QImage_dotsPerMeterY_int_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_fill0, void)
    {
        qt_QImage_fill_void_QImage_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                                       NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_fill1, void)
    {
        qt_QImage_fill_void_QImage_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_format0, int)
    {
        NODE_RETURN(qt_QImage_format_int_QImage(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hasAlphaChannel0, bool)
    {
        NODE_RETURN(qt_QImage_hasAlphaChannel_bool_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_height0, int)
    {
        NODE_RETURN(qt_QImage_height_int_QImage(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_invertPixels0, void)
    {
        qt_QImage_invertPixels_void_QImage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_isGrayscale0, bool)
    {
        NODE_RETURN(qt_QImage_isGrayscale_bool_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isNull0, bool)
    {
        NODE_RETURN(qt_QImage_isNull_bool_QImage(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mirrored0, Pointer)
    {
        NODE_RETURN(qt_QImage_mirrored_QImage_QImage_bool_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool),
            NODE_ARG(2, bool)));
    }

    static NODE_IMPLEMENTATION(_n_offset0, Pointer)
    {
        NODE_RETURN(qt_QImage_offset_QPoint_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pixel0, int)
    {
        NODE_RETURN(qt_QImage_pixel_int_QImage_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pixel1, int)
    {
        NODE_RETURN(qt_QImage_pixel_int_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_pixelColor0, Pointer)
    {
        NODE_RETURN(qt_QImage_pixelColor_QColor_QImage_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pixelColor1, Pointer)
    {
        NODE_RETURN(qt_QImage_pixelColor_QColor_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_pixelIndex0, int)
    {
        NODE_RETURN(qt_QImage_pixelIndex_int_QImage_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pixelIndex1, int)
    {
        NODE_RETURN(qt_QImage_pixelIndex_int_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_rect0, Pointer)
    {
        NODE_RETURN(qt_QImage_rect_QRect_QImage(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rgbSwapped0, Pointer)
    {
        NODE_RETURN(qt_QImage_rgbSwapped_QImage_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_scaled0, Pointer)
    {
        NODE_RETURN(qt_QImage_scaled_QImage_QImage_QSize_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_scaled1, Pointer)
    {
        NODE_RETURN(qt_QImage_scaled_QImage_QImage_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_scaledToHeight0, Pointer)
    {
        NODE_RETURN(qt_QImage_scaledToHeight_QImage_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_scaledToWidth0, Pointer)
    {
        NODE_RETURN(qt_QImage_scaledToWidth_QImage_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_setColor0, void)
    {
        qt_QImage_setColor_void_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setColorCount0, void)
    {
        qt_QImage_setColorCount_void_QImage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setDevicePixelRatio0, void)
    {
        qt_QImage_setDevicePixelRatio_void_QImage_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setDotsPerMeterX0, void)
    {
        qt_QImage_setDotsPerMeterX_void_QImage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setDotsPerMeterY0, void)
    {
        qt_QImage_setDotsPerMeterY_void_QImage_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setOffset0, void)
    {
        qt_QImage_setOffset_void_QImage_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setPixel0, void)
    {
        qt_QImage_setPixel_void_QImage_QPoint_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setPixel1, void)
    {
        qt_QImage_setPixel_void_QImage_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_setPixelColor0, void)
    {
        qt_QImage_setPixelColor_void_QImage_QPoint_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setPixelColor1, void)
    {
        qt_QImage_setPixelColor_void_QImage_int_int_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setText0, void)
    {
        qt_QImage_setText_void_QImage_string_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_size0, Pointer)
    {
        NODE_RETURN(qt_QImage_size_QSize_QImage(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_swap0, void)
    {
        qt_QImage_swap_void_QImage_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_text0, Pointer)
    {
        NODE_RETURN(qt_QImage_text_string_QImage_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_textKeys0, Pointer)
    {
        NODE_RETURN(qt_QImage_textKeys_stringBSB_ESB__QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_transformed0, Pointer)
    {
        NODE_RETURN(qt_QImage_transformed_QImage_QImage_QMatrix_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_transformed1, Pointer)
    {
        NODE_RETURN(qt_QImage_transformed_QImage_QImage_QTransform_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_valid0, bool)
    {
        NODE_RETURN(qt_QImage_valid_bool_QImage_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_valid1, bool)
    {
        NODE_RETURN(qt_QImage_valid_bool_QImage_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_width0, int)
    {
        NODE_RETURN(qt_QImage_width_int_QImage(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(qt_QImage_operatorBang_EQ__bool_QImage_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt_QImage_operatorEQ_EQ__bool_QImage_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_trueMatrix0, Pointer)
    {
        NODE_RETURN(qt_QImage_trueMatrix_QMatrix_QMatrix_int_int(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_trueMatrix1, Pointer)
    {
        NODE_RETURN(qt_QImage_trueMatrix_QTransform_QTransform_int_int(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_co_n_QVariant0, Pointer)
    {
        NODE_RETURN(qt_QImage_QVariant_QVariant_QVariant_QImage(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static Pointer QImage_QImage_QImage_QImage_string_string(
        Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName,
        Pointer param_format)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_fileName);
        const char* arg2 =
            param_format
                ? reinterpret_cast<StringType::String*>(param_format)->c_str()
                : 0;
        setqtype<QImageType>(param_this, QImage(arg1, arg2));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QImage8, Pointer)
    {
        return QImage_QImage_QImage_QImage_string_string(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    void QImageType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(new Alias(c, "Format", "int"),
                   new SymbolicConstant(c, "Format_Invalid", "int",
                                        Value(int(QImage::Format_Invalid))),
                   new SymbolicConstant(c, "Format_Mono", "int",
                                        Value(int(QImage::Format_Mono))),
                   new SymbolicConstant(c, "Format_MonoLSB", "int",
                                        Value(int(QImage::Format_MonoLSB))),
                   new SymbolicConstant(c, "Format_Indexed8", "int",
                                        Value(int(QImage::Format_Indexed8))),
                   new SymbolicConstant(c, "Format_RGB32", "int",
                                        Value(int(QImage::Format_RGB32))),
                   new SymbolicConstant(c, "Format_ARGB32", "int",
                                        Value(int(QImage::Format_ARGB32))),
                   new SymbolicConstant(
                       c, "Format_ARGB32_Premultiplied", "int",
                       Value(int(QImage::Format_ARGB32_Premultiplied))),
                   new SymbolicConstant(c, "Format_RGB16", "int",
                                        Value(int(QImage::Format_RGB16))),
                   new SymbolicConstant(
                       c, "Format_ARGB8565_Premultiplied", "int",
                       Value(int(QImage::Format_ARGB8565_Premultiplied))),
                   new SymbolicConstant(c, "Format_RGB666", "int",
                                        Value(int(QImage::Format_RGB666))),
                   new SymbolicConstant(
                       c, "Format_ARGB6666_Premultiplied", "int",
                       Value(int(QImage::Format_ARGB6666_Premultiplied))),
                   new SymbolicConstant(c, "Format_RGB555", "int",
                                        Value(int(QImage::Format_RGB555))),
                   new SymbolicConstant(
                       c, "Format_ARGB8555_Premultiplied", "int",
                       Value(int(QImage::Format_ARGB8555_Premultiplied))),
                   new SymbolicConstant(c, "Format_RGB888", "int",
                                        Value(int(QImage::Format_RGB888))),
                   new SymbolicConstant(c, "Format_RGB444", "int",
                                        Value(int(QImage::Format_RGB444))),
                   new SymbolicConstant(
                       c, "Format_ARGB4444_Premultiplied", "int",
                       Value(int(QImage::Format_ARGB4444_Premultiplied))),
                   new SymbolicConstant(c, "Format_RGBX8888", "int",
                                        Value(int(QImage::Format_RGBX8888))),
                   new SymbolicConstant(c, "Format_RGBA8888", "int",
                                        Value(int(QImage::Format_RGBA8888))),
                   new SymbolicConstant(
                       c, "Format_RGBA8888_Premultiplied", "int",
                       Value(int(QImage::Format_RGBA8888_Premultiplied))),
                   new SymbolicConstant(c, "Format_BGR30", "int",
                                        Value(int(QImage::Format_BGR30))),
                   new SymbolicConstant(
                       c, "Format_A2BGR30_Premultiplied", "int",
                       Value(int(QImage::Format_A2BGR30_Premultiplied))),
                   new SymbolicConstant(c, "Format_RGB30", "int",
                                        Value(int(QImage::Format_RGB30))),
                   new SymbolicConstant(
                       c, "Format_A2RGB30_Premultiplied", "int",
                       Value(int(QImage::Format_A2RGB30_Premultiplied))),
                   new SymbolicConstant(c, "Format_Alpha8", "int",
                                        Value(int(QImage::Format_Alpha8))),
                   new SymbolicConstant(c, "Format_Grayscale8", "int",
                                        Value(int(QImage::Format_Grayscale8))),
                   new Alias(c, "InvertMode", "int"),
                   new SymbolicConstant(c, "InvertRgb", "int",
                                        Value(int(QImage::InvertRgb))),
                   new SymbolicConstant(c, "InvertRgba", "int",
                                        Value(int(QImage::InvertRgba))),
                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QImage", _n_QImage0, None, Compiled,
                         qt_QImage_QImage_QImage_QImage, Return, "qt.QImage",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "QImage", _n_QImage1, None, Compiled,
                         qt_QImage_QImage_QImage_QImage_QSize_int, Return,
                         "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "size", "qt.QSize"),
                         new Param(c, "format", "int"), End),
            new Function(
                c, "QImage", _n_QImage2, None, Compiled,
                qt_QImage_QImage_QImage_QImage_int_int_int, Return, "qt.QImage",
                Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "width", "int"), new Param(c, "height", "int"),
                new Param(c, "format", "int"), End),
            // MISSING: QImage (QImage; QImage this, "uchar *" data, int width,
            // int height, flags QImage::Format format, "QImageCleanupFunction"
            // cleanupFunction, "void *" cleanupInfo) MISSING: QImage (QImage;
            // QImage this, "const uchar *" data, int width, int height, flags
            // QImage::Format format, "QImageCleanupFunction" cleanupFunction,
            // "void *" cleanupInfo) MISSING: QImage (QImage; QImage this,
            // "uchar *" data, int width, int height, int bytesPerLine, flags
            // QImage::Format format, "QImageCleanupFunction" cleanupFunction,
            // "void *" cleanupInfo) MISSING: QImage (QImage; QImage this,
            // "const uchar *" data, int width, int height, int bytesPerLine,
            // flags QImage::Format format, "QImageCleanupFunction"
            // cleanupFunction, "void *" cleanupInfo) MISSING: QImage (QImage;
            // QImage this, "const char * const[]" xpm) MISSING: QImage (QImage;
            // QImage this, string fileName, "const char *" format) MISSING:
            // QImage (QImage; QImage this, QImage image) MISSING: QImage
            // (QImage; QImage this, QImage other)
            new Function(c, "allGray", _n_allGray0, None, Compiled,
                         qt_QImage_allGray_bool_QImage, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "bitPlaneCount", _n_bitPlaneCount0, None, Compiled,
                         qt_QImage_bitPlaneCount_int_QImage, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            // MISSING: bits ("uchar *"; QImage this)
            // MISSING: bits ("const uchar *"; QImage this)
            new Function(c, "byteCount", _n_byteCount0, None, Compiled,
                         qt_QImage_byteCount_int_QImage, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "bytesPerLine", _n_bytesPerLine0, None, Compiled,
                         qt_QImage_bytesPerLine_int_QImage, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "cacheKey", _n_cacheKey0, None, Compiled,
                         qt_QImage_cacheKey_int64_QImage, Return, "int64",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "color", _n_color0, None, Compiled,
                         qt_QImage_color_int_QImage_int, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "i", "int"), End),
            new Function(c, "colorCount", _n_colorCount0, None, Compiled,
                         qt_QImage_colorCount_int_QImage, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            // MISSING: colorTable ("QVector<QRgb>"; QImage this)
            // MISSING: constBits ("const uchar *"; QImage this)
            // MISSING: constScanLine ("const uchar *"; QImage this, int i)
            new Function(
                c, "convertToFormat", _n_convertToFormat0, None, Compiled,
                qt_QImage_convertToFormat_QImage_QImage_int_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "format", "int"),
                new Param(c, "flags", "int", Value((int)Qt::AutoColor)), End),
            // MISSING: convertToFormat (QImage; QImage this, flags
            // QImage::Format format, "const QVector<QRgb> &" colorTable, flags
            // Qt::ImageConversionFlags flags)
            new Function(c, "copy", _n_copy0, None, Compiled,
                         qt_QImage_copy_QImage_QImage_QRect, Return,
                         "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(c, "copy", _n_copy1, None, Compiled,
                         qt_QImage_copy_QImage_QImage_int_int_int_int, Return,
                         "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "width", "int"),
                         new Param(c, "height", "int"), End),
            new Function(
                c, "createAlphaMask", _n_createAlphaMask0, None, Compiled,
                qt_QImage_createAlphaMask_QImage_QImage_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "flags", "int", Value((int)Qt::AutoColor)), End),
            new Function(c, "createHeuristicMask", _n_createHeuristicMask0,
                         None, Compiled,
                         qt_QImage_createHeuristicMask_QImage_QImage_bool,
                         Return, "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "clipTight", "bool"), End),
            new Function(
                c, "createMaskFromColor", _n_createMaskFromColor0, None,
                Compiled, qt_QImage_createMaskFromColor_QImage_QImage_int_int,
                Return, "qt.QImage", Parameters,
                new Param(c, "this", "qt.QImage"), new Param(c, "color", "int"),
                new Param(c, "mode", "int", Value((int)Qt::MaskInColor)), End),
            new Function(c, "depth", _n_depth0, None, Compiled,
                         qt_QImage_depth_int_QImage, Return, "int", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            new Function(c, "devicePixelRatio", _n_devicePixelRatio0, None,
                         Compiled, qt_QImage_devicePixelRatio_double_QImage,
                         Return, "double", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            new Function(c, "dotsPerMeterX", _n_dotsPerMeterX0, None, Compiled,
                         qt_QImage_dotsPerMeterX_int_QImage, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "dotsPerMeterY", _n_dotsPerMeterY0, None, Compiled,
                         qt_QImage_dotsPerMeterY_int_QImage, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "fill", _n_fill0, None, Compiled,
                         qt_QImage_fill_void_QImage_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "pixelValue", "int"), End),
            new Function(c, "fill", _n_fill1, None, Compiled,
                         qt_QImage_fill_void_QImage_QColor, Return, "void",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "color", "qt.QColor"), End),
            // MISSING: fill (void; QImage this, flags Qt::GlobalColor color)
            new Function(c, "format", _n_format0, None, Compiled,
                         qt_QImage_format_int_QImage, Return, "int", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            new Function(c, "hasAlphaChannel", _n_hasAlphaChannel0, None,
                         Compiled, qt_QImage_hasAlphaChannel_bool_QImage,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            new Function(c, "height", _n_height0, None, Compiled,
                         qt_QImage_height_int_QImage, Return, "int", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            new Function(
                c, "invertPixels", _n_invertPixels0, None, Compiled,
                qt_QImage_invertPixels_void_QImage_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "mode", "int", Value((int)QImage::InvertRgb)),
                End),
            new Function(c, "isGrayscale", _n_isGrayscale0, None, Compiled,
                         qt_QImage_isGrayscale_bool_QImage, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "isNull", _n_isNull0, None, Compiled,
                         qt_QImage_isNull_bool_QImage, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            // MISSING: load (bool; QImage this, string fileName, "const char *"
            // format) MISSING: load (bool; QImage this, QIODevice device,
            // "const char *" format) MISSING: loadFromData (bool; QImage this,
            // "const uchar *" data, int len, "const char *" format) MISSING:
            // loadFromData (bool; QImage this, QByteArray data, "const char *"
            // format)
            new Function(c, "mirrored", _n_mirrored0, None, Compiled,
                         qt_QImage_mirrored_QImage_QImage_bool_bool, Return,
                         "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "horizontal", "bool"),
                         new Param(c, "vertical", "bool"), End),
            new Function(c, "offset", _n_offset0, None, Compiled,
                         qt_QImage_offset_QPoint_QImage, Return, "qt.QPoint",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "pixel", _n_pixel0, None, Compiled,
                         qt_QImage_pixel_int_QImage_QPoint, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "pixel", _n_pixel1, None, Compiled,
                         qt_QImage_pixel_int_QImage_int_int, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         End),
            new Function(c, "pixelColor", _n_pixelColor0, None, Compiled,
                         qt_QImage_pixelColor_QColor_QImage_QPoint, Return,
                         "qt.QColor", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(
                c, "pixelColor", _n_pixelColor1, None, Compiled,
                qt_QImage_pixelColor_QColor_QImage_int_int, Return, "qt.QColor",
                Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "x", "int"), new Param(c, "y", "int"), End),
            // MISSING: pixelFormat ("QPixelFormat"; QImage this)
            new Function(c, "pixelIndex", _n_pixelIndex0, None, Compiled,
                         qt_QImage_pixelIndex_int_QImage_QPoint, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "position", "qt.QPoint"), End),
            new Function(c, "pixelIndex", _n_pixelIndex1, None, Compiled,
                         qt_QImage_pixelIndex_int_QImage_int_int, Return, "int",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         End),
            new Function(c, "rect", _n_rect0, None, Compiled,
                         qt_QImage_rect_QRect_QImage, Return, "qt.QRect",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "rgbSwapped", _n_rgbSwapped0, None, Compiled,
                         qt_QImage_rgbSwapped_QImage_QImage, Return,
                         "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            // MISSING: save (bool; QImage this, string fileName, "const char *"
            // format, int quality) MISSING: save (bool; QImage this, QIODevice
            // device, "const char *" format, int quality)
            new Function(c, "scaled", _n_scaled0, None, Compiled,
                         qt_QImage_scaled_QImage_QImage_QSize_int_int, Return,
                         "qt.QImage", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "size", "qt.QSize"),
                         new Param(c, "aspectRatioMode", "int",
                                   Value((int)Qt::IgnoreAspectRatio)),
                         new Param(c, "transformMode", "int",
                                   Value((int)Qt::FastTransformation)),
                         End),
            new Function(
                c, "scaled", _n_scaled1, None, Compiled,
                qt_QImage_scaled_QImage_QImage_int_int_int_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "width", "int"), new Param(c, "height", "int"),
                new Param(c, "aspectRatioMode", "int",
                          Value((int)Qt::IgnoreAspectRatio)),
                new Param(c, "transformMode", "int",
                          Value((int)Qt::FastTransformation)),
                End),
            new Function(
                c, "scaledToHeight", _n_scaledToHeight0, None, Compiled,
                qt_QImage_scaledToHeight_QImage_QImage_int_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "height", "int"),
                new Param(c, "mode", "int", Value((int)Qt::FastTransformation)),
                End),
            new Function(
                c, "scaledToWidth", _n_scaledToWidth0, None, Compiled,
                qt_QImage_scaledToWidth_QImage_QImage_int_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "width", "int"),
                new Param(c, "mode", "int", Value((int)Qt::FastTransformation)),
                End),
            // MISSING: scanLine ("uchar *"; QImage this, int i)
            // MISSING: scanLine ("const uchar *"; QImage this, int i)
            new Function(c, "setColor", _n_setColor0, None, Compiled,
                         qt_QImage_setColor_void_QImage_int_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "index", "int"),
                         new Param(c, "colorValue", "int"), End),
            new Function(c, "setColorCount", _n_setColorCount0, None, Compiled,
                         qt_QImage_setColorCount_void_QImage_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "colorCount", "int"), End),
            // MISSING: setColorTable (void; QImage this, "const QVector<QRgb>
            // &" colors)
            new Function(
                c, "setDevicePixelRatio", _n_setDevicePixelRatio0, None,
                Compiled, qt_QImage_setDevicePixelRatio_void_QImage_double,
                Return, "void", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "scaleFactor", "double"), End),
            new Function(c, "setDotsPerMeterX", _n_setDotsPerMeterX0, None,
                         Compiled, qt_QImage_setDotsPerMeterX_void_QImage_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), End),
            new Function(c, "setDotsPerMeterY", _n_setDotsPerMeterY0, None,
                         Compiled, qt_QImage_setDotsPerMeterY_void_QImage_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "y", "int"), End),
            new Function(c, "setOffset", _n_setOffset0, None, Compiled,
                         qt_QImage_setOffset_void_QImage_QPoint, Return, "void",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "offset", "qt.QPoint"), End),
            new Function(c, "setPixel", _n_setPixel0, None, Compiled,
                         qt_QImage_setPixel_void_QImage_QPoint_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "position", "qt.QPoint"),
                         new Param(c, "index_or_rgb", "int"), End),
            new Function(c, "setPixel", _n_setPixel1, None, Compiled,
                         qt_QImage_setPixel_void_QImage_int_int_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "index_or_rgb", "int"), End),
            new Function(c, "setPixelColor", _n_setPixelColor0, None, Compiled,
                         qt_QImage_setPixelColor_void_QImage_QPoint_QColor,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "position", "qt.QPoint"),
                         new Param(c, "color", "qt.QColor"), End),
            new Function(c, "setPixelColor", _n_setPixelColor1, None, Compiled,
                         qt_QImage_setPixelColor_void_QImage_int_int_QColor,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         new Param(c, "color", "qt.QColor"), End),
            new Function(c, "setText", _n_setText0, None, Compiled,
                         qt_QImage_setText_void_QImage_string_string, Return,
                         "void", Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "key", "string"),
                         new Param(c, "text", "string"), End),
            new Function(c, "size", _n_size0, None, Compiled,
                         qt_QImage_size_QSize_QImage, Return, "qt.QSize",
                         Parameters, new Param(c, "this", "qt.QImage"), End),
            new Function(c, "swap", _n_swap0, None, Compiled,
                         qt_QImage_swap_void_QImage_QImage, Return, "void",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "other", "qt.QImage"), End),
            new Function(c, "text", _n_text0, None, Compiled,
                         qt_QImage_text_string_QImage_string, Return, "string",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "key", "string"), End),
            new Function(c, "textKeys", _n_textKeys0, None, Compiled,
                         qt_QImage_textKeys_stringBSB_ESB__QImage, Return,
                         "string[]", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            new Function(
                c, "transformed", _n_transformed0, None, Compiled,
                qt_QImage_transformed_QImage_QImage_QMatrix_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "matrix", "qt.QMatrix"),
                new Param(c, "mode", "int", Value((int)Qt::FastTransformation)),
                End),
            new Function(
                c, "transformed", _n_transformed1, None, Compiled,
                qt_QImage_transformed_QImage_QImage_QTransform_int, Return,
                "qt.QImage", Parameters, new Param(c, "this", "qt.QImage"),
                new Param(c, "matrix", "qt.QTransform"),
                new Param(c, "mode", "int", Value((int)Qt::FastTransformation)),
                End),
            new Function(c, "valid", _n_valid0, None, Compiled,
                         qt_QImage_valid_bool_QImage_QPoint, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "pos", "qt.QPoint"), End),
            new Function(c, "valid", _n_valid1, None, Compiled,
                         qt_QImage_valid_bool_QImage_int_int, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "x", "int"), new Param(c, "y", "int"),
                         End),
            new Function(c, "width", _n_width0, None, Compiled,
                         qt_QImage_width_int_QImage, Return, "int", Parameters,
                         new Param(c, "this", "qt.QImage"), End),
            // static functions
            // MISSING: fromData (QImage; "const uchar *" data, int size, "const
            // char *" format) MISSING: fromData (QImage; QByteArray data,
            // "const char *" format) MISSING: toImageFormat (flags
            // QImage::Format; "QPixelFormat" format) MISSING: toPixelFormat
            // ("QPixelFormat"; flags QImage::Format format)
            new Function(c, "trueMatrix", _n_trueMatrix0, None, Compiled,
                         qt_QImage_trueMatrix_QMatrix_QMatrix_int_int, Return,
                         "qt.QMatrix", Parameters,
                         new Param(c, "matrix", "qt.QMatrix"),
                         new Param(c, "width", "int"),
                         new Param(c, "height", "int"), End),
            new Function(c, "trueMatrix", _n_trueMatrix1, None, Compiled,
                         qt_QImage_trueMatrix_QTransform_QTransform_int_int,
                         Return, "qt.QTransform", Parameters,
                         new Param(c, "matrix", "qt.QTransform"),
                         new Param(c, "width", "int"),
                         new Param(c, "height", "int"), End),
            EndArguments);
        globalScope()->addSymbols(
            new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                         qt_QImage_operatorBang_EQ__bool_QImage_QImage, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "image", "qt.QImage"), End),
            // MISSING: = (QImage; QImage this, QImage image)
            // MISSING: = (QImage; QImage this, QImage other)
            new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                         qt_QImage_operatorEQ_EQ__bool_QImage_QImage, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QImage"),
                         new Param(c, "image", "qt.QImage"), End),
            EndArguments);
        scope()->addSymbols(
            new Function(c, "QVariant", _co_n_QVariant0, Cast, Compiled,
                         qt_QImage_QVariant_QVariant_QVariant_QImage, Return,
                         "qt.QVariant", Parameters,
                         new Param(c, "this", "qt.QVariant"),
                         new Param(c, "from", "qt.QImage"), End),
            EndArguments);

        // MISSING: QImage (QImage; QImage this, string fileName, "const char *"
        // format)

        addSymbol(new Function(c, "QImage", _n_QImage8, None, Compiled,
                               QImage_QImage_QImage_QImage_string_string,
                               Return, "qt.QImage", Parameters,
                               new Param(c, "this", "qt.QImage"),
                               new Param(c, "fileName", "string"),
                               new Param(c, "format", "string"), End));
    }

} // namespace Mu
