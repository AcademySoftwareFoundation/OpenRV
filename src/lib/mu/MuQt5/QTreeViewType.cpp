//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTreeViewType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QAbstractItemModelType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QHeaderViewType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QItemSelectionType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QItemSelectionModelType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QTreeView::~MuQt_QTreeView()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QTreeView::MuQt_QTreeView(Pointer muobj, const CallEnvironment* ce,
                                   QWidget* parent)
        : QTreeView(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QTreeViewType>(
            c->internName("qt.QTreeView"));
    }

    QModelIndex MuQt_QTreeView::indexAt(const QPoint& point) const
    {
        if (!_env)
            return QTreeView::indexAt(point);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QPointType>(c, point, "qt.QPoint"));
            Value rval = _env->call(F, args);
            return getqtype<QModelIndexType>(rval._Pointer);
        }
        else
        {
            return QTreeView::indexAt(point);
        }
    }

    void MuQt_QTreeView::keyboardSearch(const QString& search)
    {
        if (!_env)
        {
            QTreeView::keyboardSearch(search);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makestring(c, search));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::keyboardSearch(search);
        }
    }

    void MuQt_QTreeView::reset()
    {
        if (!_env)
        {
            QTreeView::reset();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::reset();
        }
    }

    void MuQt_QTreeView::selectAll()
    {
        if (!_env)
        {
            QTreeView::selectAll();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::selectAll();
        }
    }

    void MuQt_QTreeView::setModel(QAbstractItemModel* model)
    {
        if (!_env)
        {
            QTreeView::setModel(model);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QAbstractItemModelType>(
                c, model, "qt.QAbstractItemModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::setModel(model);
        }
    }

    void MuQt_QTreeView::setRootIndex(const QModelIndex& index)
    {
        if (!_env)
        {
            QTreeView::setRootIndex(index);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::setRootIndex(index);
        }
    }

    void MuQt_QTreeView::setSelectionModel(QItemSelectionModel* selectionModel)
    {
        if (!_env)
        {
            QTreeView::setSelectionModel(selectionModel);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QItemSelectionModelType>(
                c, selectionModel, "qt.QItemSelectionModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::setSelectionModel(selectionModel);
        }
    }

    QRect MuQt_QTreeView::visualRect(const QModelIndex& index) const
    {
        if (!_env)
            return QTreeView::visualRect(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return getqtype<QRectType>(rval._Pointer);
        }
        else
        {
            return QTreeView::visualRect(index);
        }
    }

    void MuQt_QTreeView::currentChanged(const QModelIndex& current,
                                        const QModelIndex& previous)
    {
        if (!_env)
        {
            QTreeView::currentChanged(current, previous);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, current, "qt.QModelIndex"));
            args[2] = Value(
                makeqtype<QModelIndexType>(c, previous, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::currentChanged(current, previous);
        }
    }

    void MuQt_QTreeView::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QTreeView::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::dragMoveEvent(event);
        }
    }

    int MuQt_QTreeView::horizontalOffset() const
    {
        if (!_env)
            return QTreeView::horizontalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeView::horizontalOffset();
        }
    }

    bool MuQt_QTreeView::isIndexHidden(const QModelIndex& index) const
    {
        if (!_env)
            return QTreeView::isIndexHidden(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeView::isIndexHidden(index);
        }
    }

    void MuQt_QTreeView::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QTreeView::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::keyPressEvent(event);
        }
    }

    void MuQt_QTreeView::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeView::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QTreeView::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeView::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::mouseMoveEvent(event);
        }
    }

    void MuQt_QTreeView::mousePressEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeView::mousePressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::mousePressEvent(event);
        }
    }

    void MuQt_QTreeView::mouseReleaseEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QTreeView::mouseReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::mouseReleaseEvent(event);
        }
    }

    void MuQt_QTreeView::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QTreeView::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::paintEvent(event);
        }
    }

    void MuQt_QTreeView::rowsAboutToBeRemoved(const QModelIndex& parent,
                                              int start, int end)
    {
        if (!_env)
        {
            QTreeView::rowsAboutToBeRemoved(parent, start, end);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, parent, "qt.QModelIndex"));
            args[2] = Value(start);
            args[3] = Value(end);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::rowsAboutToBeRemoved(parent, start, end);
        }
    }

    void MuQt_QTreeView::rowsInserted(const QModelIndex& parent, int start,
                                      int end)
    {
        if (!_env)
        {
            QTreeView::rowsInserted(parent, start, end);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, parent, "qt.QModelIndex"));
            args[2] = Value(start);
            args[3] = Value(end);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::rowsInserted(parent, start, end);
        }
    }

    void MuQt_QTreeView::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QTreeView::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::scrollContentsBy(dx, dy);
        }
    }

    QModelIndexList MuQt_QTreeView::selectedIndexes() const
    {
        if (!_env)
            return QTreeView::selectedIndexes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qmodelindexlist(rval._Pointer);
        }
        else
        {
            return QTreeView::selectedIndexes();
        }
    }

    void MuQt_QTreeView::selectionChanged(const QItemSelection& selected,
                                          const QItemSelection& deselected)
    {
        if (!_env)
        {
            QTreeView::selectionChanged(selected, deselected);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selected,
                                                          "qt.QItemSelection"));
            args[2] = Value(makeqtype<QItemSelectionType>(c, deselected,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::selectionChanged(selected, deselected);
        }
    }

    void
    MuQt_QTreeView::setSelection(const QRect& rect,
                                 QItemSelectionModel::SelectionFlags command)
    {
        if (!_env)
        {
            QTreeView::setSelection(rect, command);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            args[2] = Value(int(command));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::setSelection(rect, command);
        }
    }

    int MuQt_QTreeView::sizeHintForColumn(int column) const
    {
        if (!_env)
            return QTreeView::sizeHintForColumn(column);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(column);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeView::sizeHintForColumn(column);
        }
    }

    void MuQt_QTreeView::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QTreeView::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::timerEvent(event);
        }
    }

    void MuQt_QTreeView::updateGeometries()
    {
        if (!_env)
        {
            QTreeView::updateGeometries();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::updateGeometries();
        }
    }

    int MuQt_QTreeView::verticalOffset() const
    {
        if (!_env)
            return QTreeView::verticalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeView::verticalOffset();
        }
    }

    bool MuQt_QTreeView::viewportEvent(QEvent* event)
    {
        if (!_env)
            return QTreeView::viewportEvent(event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeView::viewportEvent(event);
        }
    }

    QSize MuQt_QTreeView::viewportSizeHint() const
    {
        if (!_env)
            return QTreeView::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QTreeView::viewportSizeHint();
        }
    }

    QRegion MuQt_QTreeView::visualRegionForSelection(
        const QItemSelection& selection) const
    {
        if (!_env)
            return QTreeView::visualRegionForSelection(selection);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selection,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
            return getqtype<QRegionType>(rval._Pointer);
        }
        else
        {
            return QTreeView::visualRegionForSelection(selection);
        }
    }

    int MuQt_QTreeView::sizeHintForRow(int row) const
    {
        if (!_env)
            return QTreeView::sizeHintForRow(row);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(row);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QTreeView::sizeHintForRow(row);
        }
    }

    QVariant MuQt_QTreeView::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QTreeView::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QTreeView::inputMethodQuery(query);
        }
    }

    bool MuQt_QTreeView::edit(const QModelIndex& index,
                              QAbstractItemView::EditTrigger trigger,
                              QEvent* event)
    {
        if (!_env)
            return QTreeView::edit(index, trigger, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(int(trigger));
            args[3] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeView::edit(index, trigger, event);
        }
    }

    QItemSelectionModel::SelectionFlags
    MuQt_QTreeView::selectionCommand(const QModelIndex& index,
                                     const QEvent* event) const
    {
        if (!_env)
            return QTreeView::selectionCommand(index, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[34];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (QItemSelectionModel::SelectionFlags)(rval._int);
        }
        else
        {
            return QTreeView::selectionCommand(index, event);
        }
    }

    void MuQt_QTreeView::startDrag(Qt::DropActions supportedActions)
    {
        if (!_env)
        {
            QTreeView::startDrag(supportedActions);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[35];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(supportedActions));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::startDrag(supportedActions);
        }
    }

    void MuQt_QTreeView::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QTreeView::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[36];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::dragEnterEvent(event);
        }
    }

    void MuQt_QTreeView::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QTreeView::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[37];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::dragLeaveEvent(event);
        }
    }

    void MuQt_QTreeView::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QTreeView::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[38];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::dropEvent(event);
        }
    }

    bool MuQt_QTreeView::event(QEvent* event_)
    {
        if (!_env)
            return QTreeView::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[39];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeView::event(event_);
        }
    }

    void MuQt_QTreeView::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QTreeView::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[40];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::focusInEvent(event);
        }
    }

    bool MuQt_QTreeView::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QTreeView::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[41];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QTreeView::focusNextPrevChild(next);
        }
    }

    void MuQt_QTreeView::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QTreeView::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[42];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::focusOutEvent(event);
        }
    }

    void MuQt_QTreeView::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QTreeView::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[43];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QTreeView::resizeEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QTreeViewType::QTreeViewType(Context* c, const char* name, Class* super,
                                 Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QTreeViewType::~QTreeViewType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QTreeView_QTreeView_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QTreeView* w = object<QTreeView>(widget))
        {
            QTreeViewType* type =
                c->findSymbolOfTypeByQualifiedName<QTreeViewType>(
                    c->internName("qt.QTreeView"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QTreeView_QTreeView_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QTreeView_QTreeView_QTreeView_QTreeView_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QTreeView(param_this,
                                     NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    int qt_QTreeView_columnAt_int_QTreeView_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this, int param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_x);
        return arg0->columnAt(arg1);
    }

    int qt_QTreeView_columnViewportPosition_int_QTreeView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        return arg0->columnViewportPosition(arg1);
    }

    int qt_QTreeView_columnWidth_int_QTreeView_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        return arg0->columnWidth(arg1);
    }

    Pointer qt_QTreeView_header_QHeaderView_QTreeView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        return makeinstance<QHeaderViewType>(c, arg0->header(),
                                             "qt.QHeaderView");
    }

    Pointer qt_QTreeView_indexAbove_QModelIndex_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqtype<QModelIndexType>(c, arg0->indexAbove(arg1),
                                          "qt.QModelIndex");
    }

    Pointer qt_QTreeView_indexBelow_QModelIndex_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqtype<QModelIndexType>(c, arg0->indexBelow(arg1),
                                          "qt.QModelIndex");
    }

    bool qt_QTreeView_isColumnHidden_bool_QTreeView_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        return arg0->isColumnHidden(arg1);
    }

    bool qt_QTreeView_isExpanded_bool_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return arg0->isExpanded(arg1);
    }

    bool qt_QTreeView_isFirstColumnSpanned_bool_QTreeView_int_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_row);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_parent);
        return arg0->isFirstColumnSpanned(arg1, arg2);
    }

    bool qt_QTreeView_isRowHidden_bool_QTreeView_int_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_row);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_parent);
        return arg0->isRowHidden(arg1, arg2);
    }

    void qt_QTreeView_setColumnHidden_void_QTreeView_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        bool param_hide)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        bool arg2 = (bool)(param_hide);
        arg0->setColumnHidden(arg1, arg2);
    }

    void qt_QTreeView_setColumnWidth_void_QTreeView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        int param_width)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        int arg2 = (int)(param_width);
        arg0->setColumnWidth(arg1, arg2);
    }

    void qt_QTreeView_setExpanded_void_QTreeView_QModelIndex_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        bool param_expanded)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        bool arg2 = (bool)(param_expanded);
        arg0->setExpanded(arg1, arg2);
    }

    void qt_QTreeView_setFirstColumnSpanned_void_QTreeView_int_QModelIndex_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_parent, bool param_span)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_row);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_parent);
        bool arg3 = (bool)(param_span);
        arg0->setFirstColumnSpanned(arg1, arg2, arg3);
    }

    void qt_QTreeView_setHeader_void_QTreeView_QHeaderView(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_header)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QHeaderView* arg1 = object<QHeaderView>(param_header);
        arg0->setHeader(arg1);
    }

    void qt_QTreeView_setRowHidden_void_QTreeView_int_QModelIndex_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_parent, bool param_hide)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_row);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_parent);
        bool arg3 = (bool)(param_hide);
        arg0->setRowHidden(arg1, arg2, arg3);
    }

    void qt_QTreeView_setTreePosition_void_QTreeView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_index);
        arg0->setTreePosition(arg1);
    }

    void qt_QTreeView_sortByColumn_void_QTreeView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column,
        int param_order)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        Qt::SortOrder arg2 = (Qt::SortOrder)(param_order);
        arg0->sortByColumn(arg1, arg2);
    }

    int qt_QTreeView_treePosition_int_QTreeView(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        return arg0->treePosition();
    }

    Pointer qt_QTreeView_indexAt_QModelIndex_QTreeView_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return isMuQtObject(arg0)
                   ? makeqtype<QModelIndexType>(
                         c, arg0->QTreeView::indexAt(arg1), "qt.QModelIndex")
                   : makeqtype<QModelIndexType>(c, arg0->indexAt(arg1),
                                                "qt.QModelIndex");
    }

    void qt_QTreeView_keyboardSearch_void_QTreeView_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_search)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QString arg1 = qstring(param_search);
        if (isMuQtObject(arg0))
            arg0->QTreeView::keyboardSearch(arg1);
        else
            arg0->keyboardSearch(arg1);
    }

    void qt_QTreeView_reset_void_QTreeView(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTreeView::reset();
        else
            arg0->reset();
    }

    void qt_QTreeView_selectAll_void_QTreeView(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        if (isMuQtObject(arg0))
            arg0->QTreeView::selectAll();
        else
            arg0->selectAll();
    }

    void qt_QTreeView_setModel_void_QTreeView_QAbstractItemModel(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_model)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QAbstractItemModel* arg1 = object<QAbstractItemModel>(param_model);
        if (isMuQtObject(arg0))
            arg0->QTreeView::setModel(arg1);
        else
            arg0->setModel(arg1);
    }

    void qt_QTreeView_setRootIndex_void_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        if (isMuQtObject(arg0))
            arg0->QTreeView::setRootIndex(arg1);
        else
            arg0->setRootIndex(arg1);
    }

    void qt_QTreeView_setSelectionModel_void_QTreeView_QItemSelectionModel(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_selectionModel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QItemSelectionModel* arg1 =
            object<QItemSelectionModel>(param_selectionModel);
        if (isMuQtObject(arg0))
            arg0->QTreeView::setSelectionModel(arg1);
        else
            arg0->setSelectionModel(arg1);
    }

    Pointer qt_QTreeView_visualRect_QRect_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? makeqtype<QRectType>(c, arg0->QTreeView::visualRect(arg1),
                                          "qt.QRect")
                   : makeqtype<QRectType>(c, arg0->visualRect(arg1),
                                          "qt.QRect");
    }

    int qt_QTreeView_indexRowSizeHint_int_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return ((MuQt_QTreeView*)arg0)->indexRowSizeHint_pub(arg1);
    }

    int qt_QTreeView_rowHeight_int_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return ((MuQt_QTreeView*)arg0)->rowHeight_pub(arg1);
    }

    void qt_QTreeView_currentChanged_void_QTreeView_QModelIndex_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_current,
        Pointer param_previous)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_current);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_previous);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->currentChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeView*)arg0)->currentChanged_pub(arg1, arg2);
    }

    void qt_QTreeView_dragMoveEvent_void_QTreeView_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->dragMoveEvent_pub(arg1);
    }

    int qt_QTreeView_horizontalOffset_int_QTreeView(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->horizontalOffset_pub_parent()
                   : ((MuQt_QTreeView*)arg0)->horizontalOffset_pub();
    }

    bool qt_QTreeView_isIndexHidden_bool_QTreeView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->isIndexHidden_pub_parent(arg1)
                   : ((MuQt_QTreeView*)arg0)->isIndexHidden_pub(arg1);
    }

    void qt_QTreeView_keyPressEvent_void_QTreeView_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QTreeView_mouseDoubleClickEvent_void_QTreeView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QTreeView_mouseMoveEvent_void_QTreeView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QTreeView_mousePressEvent_void_QTreeView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QTreeView_mouseReleaseEvent_void_QTreeView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QTreeView_paintEvent_void_QTreeView_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QTreeView_rowsAboutToBeRemoved_void_QTreeView_QModelIndex_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_start, int param_end)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_parent);
        int arg2 = (int)(param_start);
        int arg3 = (int)(param_end);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)
                ->rowsAboutToBeRemoved_pub_parent(arg1, arg2, arg3);
        else
            ((MuQt_QTreeView*)arg0)->rowsAboutToBeRemoved_pub(arg1, arg2, arg3);
    }

    void qt_QTreeView_rowsInserted_void_QTreeView_QModelIndex_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_start, int param_end)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_parent);
        int arg2 = (int)(param_start);
        int arg3 = (int)(param_end);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->rowsInserted_pub_parent(arg1, arg2, arg3);
        else
            ((MuQt_QTreeView*)arg0)->rowsInserted_pub(arg1, arg2, arg3);
    }

    void qt_QTreeView_scrollContentsBy_void_QTreeView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeView*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    Pointer qt_QTreeView_selectedIndexes_qt__QModelIndexBSB_ESB__QTreeView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqmodelindexlist(
                         c,
                         ((MuQt_QTreeView*)arg0)->selectedIndexes_pub_parent())
                   : makeqmodelindexlist(
                         c, ((MuQt_QTreeView*)arg0)->selectedIndexes_pub());
    }

    void
    qt_QTreeView_selectionChanged_void_QTreeView_QItemSelection_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selected,
        Pointer param_deselected)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selected);
        const QItemSelection arg2 =
            getqtype<QItemSelectionType>(param_deselected);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->selectionChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeView*)arg0)->selectionChanged_pub(arg1, arg2);
    }

    void qt_QTreeView_setSelection_void_QTreeView_QRect_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect,
        int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->setSelection_pub_parent(arg1, arg2);
        else
            ((MuQt_QTreeView*)arg0)->setSelection_pub(arg1, arg2);
    }

    int qt_QTreeView_sizeHintForColumn_int_QTreeView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_column);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->sizeHintForColumn_pub_parent(arg1)
                   : ((MuQt_QTreeView*)arg0)->sizeHintForColumn_pub(arg1);
    }

    void qt_QTreeView_timerEvent_void_QTreeView_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->timerEvent_pub(arg1);
    }

    void qt_QTreeView_updateGeometries_void_QTreeView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->updateGeometries_pub_parent();
        else
            ((MuQt_QTreeView*)arg0)->updateGeometries_pub();
    }

    int qt_QTreeView_verticalOffset_int_QTreeView(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->verticalOffset_pub_parent()
                   : ((MuQt_QTreeView*)arg0)->verticalOffset_pub();
    }

    bool qt_QTreeView_viewportEvent_bool_QTreeView_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QTreeView*)arg0)->viewportEvent_pub(arg1);
    }

    Pointer
    qt_QTreeView_viewportSizeHint_QSize_QTreeView(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c,
                         ((MuQt_QTreeView*)arg0)->viewportSizeHint_pub_parent(),
                         "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QTreeView*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    Pointer
    qt_QTreeView_visualRegionForSelection_QRegion_QTreeView_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selection)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selection);
        return isMuQtObject(arg0)
                   ? makeqtype<QRegionType>(
                         c,
                         ((MuQt_QTreeView*)arg0)
                             ->visualRegionForSelection_pub_parent(arg1),
                         "qt.QRegion")
                   : makeqtype<QRegionType>(
                         c,
                         ((MuQt_QTreeView*)arg0)
                             ->visualRegionForSelection_pub(arg1),
                         "qt.QRegion");
    }

    int qt_QTreeView_sizeHintForRow_int_QTreeView_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        int arg1 = (int)(param_row);
        return isMuQtObject(arg0) ? arg0->QTreeView::sizeHintForRow(arg1)
                                  : arg0->sizeHintForRow(arg1);
    }

    Pointer qt_QTreeView_inputMethodQuery_QVariant_QTreeView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QTreeView::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    bool qt_QTreeView_edit_bool_QTreeView_QModelIndex_int_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        int param_trigger, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        QAbstractItemView::EditTrigger arg2 =
            (QAbstractItemView::EditTrigger)(param_trigger);
        QEvent* arg3 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->edit_pub_parent(arg1, arg2, arg3)
                   : ((MuQt_QTreeView*)arg0)->edit_pub(arg1, arg2, arg3);
    }

    int qt_QTreeView_selectionCommand_int_QTreeView_QModelIndex_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        const QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? int(((MuQt_QTreeView*)arg0)
                             ->selectionCommand_pub_parent(arg1, arg2))
                   : int(((MuQt_QTreeView*)arg0)
                             ->selectionCommand_pub(arg1, arg2));
    }

    void qt_QTreeView_startDrag_void_QTreeView_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_supportedActions)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        Qt::DropActions arg1 = (Qt::DropActions)(param_supportedActions);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->startDrag_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->startDrag_pub(arg1);
    }

    void qt_QTreeView_dragEnterEvent_void_QTreeView_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QTreeView_dragLeaveEvent_void_QTreeView_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QTreeView_dropEvent_void_QTreeView_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->dropEvent_pub(arg1);
    }

    bool qt_QTreeView_event_bool_QTreeView_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QTreeView*)arg0)->event_pub(arg1);
    }

    void qt_QTreeView_focusInEvent_void_QTreeView_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QTreeView_focusNextPrevChild_bool_QTreeView_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QTreeView*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QTreeView*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QTreeView_focusOutEvent_void_QTreeView_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QTreeView_resizeEvent_void_QTreeView_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTreeView* arg0 = object<QTreeView>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QTreeView*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QTreeView*)arg0)->resizeEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QTreeView0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_QTreeView_QTreeView_QTreeView_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_columnAt0, int)
    {
        NODE_RETURN(qt_QTreeView_columnAt_int_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_columnViewportPosition0, int)
    {
        NODE_RETURN(qt_QTreeView_columnViewportPosition_int_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_columnWidth0, int)
    {
        NODE_RETURN(qt_QTreeView_columnWidth_int_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_header0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_header_QHeaderView_QTreeView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexAbove0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_indexAbove_QModelIndex_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexBelow0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_indexBelow_QModelIndex_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isColumnHidden0, bool)
    {
        NODE_RETURN(qt_QTreeView_isColumnHidden_bool_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_isExpanded0, bool)
    {
        NODE_RETURN(qt_QTreeView_isExpanded_bool_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isFirstColumnSpanned0, bool)
    {
        NODE_RETURN(
            qt_QTreeView_isFirstColumnSpanned_bool_QTreeView_int_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isRowHidden0, bool)
    {
        NODE_RETURN(qt_QTreeView_isRowHidden_bool_QTreeView_int_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setColumnHidden0, void)
    {
        qt_QTreeView_setColumnHidden_void_QTreeView_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setColumnWidth0, void)
    {
        qt_QTreeView_setColumnWidth_void_QTreeView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setExpanded0, void)
    {
        qt_QTreeView_setExpanded_void_QTreeView_QModelIndex_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setFirstColumnSpanned0, void)
    {
        qt_QTreeView_setFirstColumnSpanned_void_QTreeView_int_QModelIndex_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, bool));
    }

    static NODE_IMPLEMENTATION(_n_setHeader0, void)
    {
        qt_QTreeView_setHeader_void_QTreeView_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setRowHidden0, void)
    {
        qt_QTreeView_setRowHidden_void_QTreeView_int_QModelIndex_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, bool));
    }

    static NODE_IMPLEMENTATION(_n_setTreePosition0, void)
    {
        qt_QTreeView_setTreePosition_void_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_sortByColumn0, void)
    {
        qt_QTreeView_sortByColumn_void_QTreeView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_treePosition0, int)
    {
        NODE_RETURN(qt_QTreeView_treePosition_int_QTreeView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexAt0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_indexAt_QModelIndex_QTreeView_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyboardSearch0, void)
    {
        qt_QTreeView_keyboardSearch_void_QTreeView_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_reset0, void)
    {
        qt_QTreeView_reset_void_QTreeView(NODE_THREAD,
                                          NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectAll0, void)
    {
        qt_QTreeView_selectAll_void_QTreeView(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setModel0, void)
    {
        qt_QTreeView_setModel_void_QTreeView_QAbstractItemModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setRootIndex0, void)
    {
        qt_QTreeView_setRootIndex_void_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelectionModel0, void)
    {
        qt_QTreeView_setSelectionModel_void_QTreeView_QItemSelectionModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_visualRect0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_visualRect_QRect_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexRowSizeHint0, int)
    {
        NODE_RETURN(qt_QTreeView_indexRowSizeHint_int_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rowHeight0, int)
    {
        NODE_RETURN(qt_QTreeView_rowHeight_int_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentChanged0, void)
    {
        qt_QTreeView_currentChanged_void_QTreeView_QModelIndex_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QTreeView_dragMoveEvent_void_QTreeView_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_horizontalOffset0, int)
    {
        NODE_RETURN(qt_QTreeView_horizontalOffset_int_QTreeView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIndexHidden0, bool)
    {
        NODE_RETURN(qt_QTreeView_isIndexHidden_bool_QTreeView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QTreeView_keyPressEvent_void_QTreeView_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QTreeView_mouseDoubleClickEvent_void_QTreeView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QTreeView_mouseMoveEvent_void_QTreeView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QTreeView_mousePressEvent_void_QTreeView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QTreeView_mouseReleaseEvent_void_QTreeView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QTreeView_paintEvent_void_QTreeView_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_rowsAboutToBeRemoved0, void)
    {
        qt_QTreeView_rowsAboutToBeRemoved_void_QTreeView_QModelIndex_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_rowsInserted0, void)
    {
        qt_QTreeView_rowsInserted_void_QTreeView_QModelIndex_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QTreeView_scrollContentsBy_void_QTreeView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_selectedIndexes0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeView_selectedIndexes_qt__QModelIndexBSB_ESB__QTreeView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionChanged0, void)
    {
        qt_QTreeView_selectionChanged_void_QTreeView_QItemSelection_QItemSelection(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QTreeView_setSelection_void_QTreeView_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForColumn0, int)
    {
        NODE_RETURN(qt_QTreeView_sizeHintForColumn_int_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QTreeView_timerEvent_void_QTreeView_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_updateGeometries0, void)
    {
        qt_QTreeView_updateGeometries_void_QTreeView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_verticalOffset0, int)
    {
        NODE_RETURN(qt_QTreeView_verticalOffset_int_QTreeView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(qt_QTreeView_viewportEvent_bool_QTreeView_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_viewportSizeHint_QSize_QTreeView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualRegionForSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QTreeView_visualRegionForSelection_QRegion_QTreeView_QItemSelection(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForRow0, int)
    {
        NODE_RETURN(qt_QTreeView_sizeHintForRow_int_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QTreeView_inputMethodQuery_QVariant_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_edit0, bool)
    {
        NODE_RETURN(qt_QTreeView_edit_bool_QTreeView_QModelIndex_int_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionCommand0, int)
    {
        NODE_RETURN(
            qt_QTreeView_selectionCommand_int_QTreeView_QModelIndex_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_startDrag0, void)
    {
        qt_QTreeView_startDrag_void_QTreeView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QTreeView_dragEnterEvent_void_QTreeView_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QTreeView_dragLeaveEvent_void_QTreeView_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QTreeView_dropEvent_void_QTreeView_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QTreeView_event_bool_QTreeView_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QTreeView_focusInEvent_void_QTreeView_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QTreeView_focusNextPrevChild_bool_QTreeView_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QTreeView_focusOutEvent_void_QTreeView_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QTreeView_resizeEvent_void_QTreeView_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QTreeViewType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QTreeView_QTreeView_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QTreeView", _n_QTreeView0, None, Compiled,
                         qt_QTreeView_QTreeView_QTreeView_QTreeView_QWidget,
                         Return, "qt.QTreeView", Parameters,
                         new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "parent", "qt.QWidget"), End),
            // PROP: allColumnsShowFocus (bool; QTreeView this)
            // PROP: autoExpandDelay (int; QTreeView this)
            new Function(c, "columnAt", _n_columnAt0, None, Compiled,
                         qt_QTreeView_columnAt_int_QTreeView_int, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "x", "int"), End),
            new Function(
                c, "columnViewportPosition", _n_columnViewportPosition0, None,
                Compiled, qt_QTreeView_columnViewportPosition_int_QTreeView_int,
                Return, "int", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "column", "int"), End),
            new Function(c, "columnWidth", _n_columnWidth0, None, Compiled,
                         qt_QTreeView_columnWidth_int_QTreeView_int, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "column", "int"), End),
            // PROP: expandsOnDoubleClick (bool; QTreeView this)
            new Function(c, "header", _n_header0, None, Compiled,
                         qt_QTreeView_header_QHeaderView_QTreeView, Return,
                         "qt.QHeaderView", Parameters,
                         new Param(c, "this", "qt.QTreeView"), End),
            // PROP: indentation (int; QTreeView this)
            new Function(
                c, "indexAbove", _n_indexAbove0, None, Compiled,
                qt_QTreeView_indexAbove_QModelIndex_QTreeView_QModelIndex,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            new Function(
                c, "indexBelow", _n_indexBelow0, None, Compiled,
                qt_QTreeView_indexBelow_QModelIndex_QTreeView_QModelIndex,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            // PROP: isAnimated (bool; QTreeView this)
            new Function(
                c, "isColumnHidden", _n_isColumnHidden0, None, Compiled,
                qt_QTreeView_isColumnHidden_bool_QTreeView_int, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "column", "int"), End),
            new Function(c, "isExpanded", _n_isExpanded0, None, Compiled,
                         qt_QTreeView_isExpanded_bool_QTreeView_QModelIndex,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "index", "qt.QModelIndex"), End),
            new Function(
                c, "isFirstColumnSpanned", _n_isFirstColumnSpanned0, None,
                Compiled,
                qt_QTreeView_isFirstColumnSpanned_bool_QTreeView_int_QModelIndex,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "row", "int"),
                new Param(c, "parent", "qt.QModelIndex"), End),
            // PROP: isHeaderHidden (bool; QTreeView this)
            new Function(
                c, "isRowHidden", _n_isRowHidden0, None, Compiled,
                qt_QTreeView_isRowHidden_bool_QTreeView_int_QModelIndex, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "row", "int"),
                new Param(c, "parent", "qt.QModelIndex"), End),
            // PROP: isSortingEnabled (bool; QTreeView this)
            // PROP: itemsExpandable (bool; QTreeView this)
            // PROP: resetIndentation (void; QTreeView this)
            // PROP: rootIsDecorated (bool; QTreeView this)
            // PROP: setAllColumnsShowFocus (void; QTreeView this, bool enable)
            // PROP: setAnimated (void; QTreeView this, bool enable)
            // PROP: setAutoExpandDelay (void; QTreeView this, int delay)
            new Function(
                c, "setColumnHidden", _n_setColumnHidden0, None, Compiled,
                qt_QTreeView_setColumnHidden_void_QTreeView_int_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "column", "int"), new Param(c, "hide", "bool"),
                End),
            new Function(
                c, "setColumnWidth", _n_setColumnWidth0, None, Compiled,
                qt_QTreeView_setColumnWidth_void_QTreeView_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "column", "int"), new Param(c, "width", "int"),
                End),
            new Function(
                c, "setExpanded", _n_setExpanded0, None, Compiled,
                qt_QTreeView_setExpanded_void_QTreeView_QModelIndex_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "expanded", "bool"), End),
            // PROP: setExpandsOnDoubleClick (void; QTreeView this, bool enable)
            new Function(
                c, "setFirstColumnSpanned", _n_setFirstColumnSpanned0, None,
                Compiled,
                qt_QTreeView_setFirstColumnSpanned_void_QTreeView_int_QModelIndex_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "row", "int"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "span", "bool"), End),
            new Function(c, "setHeader", _n_setHeader0, None, Compiled,
                         qt_QTreeView_setHeader_void_QTreeView_QHeaderView,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "header", "qt.QHeaderView"), End),
            // PROP: setHeaderHidden (void; QTreeView this, bool hide)
            // PROP: setIndentation (void; QTreeView this, int i)
            // PROP: setItemsExpandable (void; QTreeView this, bool enable)
            // PROP: setRootIsDecorated (void; QTreeView this, bool show)
            new Function(
                c, "setRowHidden", _n_setRowHidden0, None, Compiled,
                qt_QTreeView_setRowHidden_void_QTreeView_int_QModelIndex_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "row", "int"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "hide", "bool"), End),
            // PROP: setSortingEnabled (void; QTreeView this, bool enable)
            new Function(
                c, "setTreePosition", _n_setTreePosition0, None, Compiled,
                qt_QTreeView_setTreePosition_void_QTreeView_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "int"), End),
            // PROP: setUniformRowHeights (void; QTreeView this, bool uniform)
            // PROP: setWordWrap (void; QTreeView this, bool on)
            new Function(c, "sortByColumn", _n_sortByColumn0, None, Compiled,
                         qt_QTreeView_sortByColumn_void_QTreeView_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "column", "int"),
                         new Param(c, "order", "int"), End),
            new Function(c, "treePosition", _n_treePosition0, None, Compiled,
                         qt_QTreeView_treePosition_int_QTreeView, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTreeView"), End),
            // PROP: uniformRowHeights (bool; QTreeView this)
            // PROP: wordWrap (bool; QTreeView this)
            // MISSING: dataChanged (void; QTreeView this, QModelIndex topLeft,
            // QModelIndex bottomRight, "const QVector<int> &" roles)
            _func[0] = new MemberFunction(
                c, "indexAt", _n_indexAt0, None, Compiled,
                qt_QTreeView_indexAt_QModelIndex_QTreeView_QPoint, Return,
                "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "point", "qt.QPoint"), End),
            _func[1] = new MemberFunction(
                c, "keyboardSearch", _n_keyboardSearch0, None, Compiled,
                qt_QTreeView_keyboardSearch_void_QTreeView_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "search", "string"), End),
            _func[2] = new MemberFunction(
                c, "reset", _n_reset0, None, Compiled,
                qt_QTreeView_reset_void_QTreeView, Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"), End),
            // MISSING: scrollTo (void; QTreeView this, QModelIndex index,
            // "ScrollHint" hint)
            _func[3] = new MemberFunction(
                c, "selectAll", _n_selectAll0, None, Compiled,
                qt_QTreeView_selectAll_void_QTreeView, Return, "void",
                Parameters, new Param(c, "this", "qt.QTreeView"), End),
            _func[4] = new MemberFunction(
                c, "setModel", _n_setModel0, None, Compiled,
                qt_QTreeView_setModel_void_QTreeView_QAbstractItemModel, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "model", "qt.QAbstractItemModel"), End),
            _func[5] = new MemberFunction(
                c, "setRootIndex", _n_setRootIndex0, None, Compiled,
                qt_QTreeView_setRootIndex_void_QTreeView_QModelIndex, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[6] = new MemberFunction(
                c, "setSelectionModel", _n_setSelectionModel0, None, Compiled,
                qt_QTreeView_setSelectionModel_void_QTreeView_QItemSelectionModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "selectionModel", "qt.QItemSelectionModel"), End),
            _func[7] = new MemberFunction(
                c, "visualRect", _n_visualRect0, None, Compiled,
                qt_QTreeView_visualRect_QRect_QTreeView_QModelIndex, Return,
                "qt.QRect", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            // MISSING: drawBranches (void; QTreeView this, "QPainter *"
            // painter, QRect rect, QModelIndex index) // protected MISSING:
            // drawRow (void; QTreeView this, "QPainter *" painter, "const
            // QStyleOptionViewItem &" option, QModelIndex index) // protected
            // MISSING: drawTree (void; QTreeView this, "QPainter *" painter,
            // QRegion region) // protected
            new Function(
                c, "indexRowSizeHint", _n_indexRowSizeHint0, None, Compiled,
                qt_QTreeView_indexRowSizeHint_int_QTreeView_QModelIndex, Return,
                "int", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            new Function(c, "rowHeight", _n_rowHeight0, None, Compiled,
                         qt_QTreeView_rowHeight_int_QTreeView_QModelIndex,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QTreeView"),
                         new Param(c, "index", "qt.QModelIndex"), End),
            _func[8] = new MemberFunction(
                c, "currentChanged", _n_currentChanged0, None, Compiled,
                qt_QTreeView_currentChanged_void_QTreeView_QModelIndex_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "current", "qt.QModelIndex"),
                new Param(c, "previous", "qt.QModelIndex"), End),
            _func[9] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QTreeView_dragMoveEvent_void_QTreeView_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[10] = new MemberFunction(
                c, "horizontalOffset", _n_horizontalOffset0, None, Compiled,
                qt_QTreeView_horizontalOffset_int_QTreeView, Return, "int",
                Parameters, new Param(c, "this", "qt.QTreeView"), End),
            _func[11] = new MemberFunction(
                c, "isIndexHidden", _n_isIndexHidden0, None, Compiled,
                qt_QTreeView_isIndexHidden_bool_QTreeView_QModelIndex, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[12] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QTreeView_keyPressEvent_void_QTreeView_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[13] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QTreeView_mouseDoubleClickEvent_void_QTreeView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QTreeView_mouseMoveEvent_void_QTreeView_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[15] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QTreeView_mousePressEvent_void_QTreeView_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[16] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QTreeView_mouseReleaseEvent_void_QTreeView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            // MISSING: moveCursor (QModelIndex; QTreeView this, "CursorAction"
            // cursorAction, flags Qt::KeyboardModifiers modifiers) // protected
            _func[17] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QTreeView_paintEvent_void_QTreeView_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[18] = new MemberFunction(
                c, "rowsAboutToBeRemoved", _n_rowsAboutToBeRemoved0, None,
                Compiled,
                qt_QTreeView_rowsAboutToBeRemoved_void_QTreeView_QModelIndex_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "start", "int"), new Param(c, "end", "int"), End),
            _func[19] = new MemberFunction(
                c, "rowsInserted", _n_rowsInserted0, None, Compiled,
                qt_QTreeView_rowsInserted_void_QTreeView_QModelIndex_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "start", "int"), new Param(c, "end", "int"), End),
            _func[20] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QTreeView_scrollContentsBy_void_QTreeView_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[21] = new MemberFunction(
                c, "selectedIndexes", _n_selectedIndexes0, None, Compiled,
                qt_QTreeView_selectedIndexes_qt__QModelIndexBSB_ESB__QTreeView,
                Return, "qt.QModelIndex[]", Parameters,
                new Param(c, "this", "qt.QTreeView"), End),
            _func[22] = new MemberFunction(
                c, "selectionChanged", _n_selectionChanged0, None, Compiled,
                qt_QTreeView_selectionChanged_void_QTreeView_QItemSelection_QItemSelection,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "selected", "qt.QItemSelection"),
                new Param(c, "deselected", "qt.QItemSelection"), End),
            _func[23] = new MemberFunction(
                c, "setSelection", _n_setSelection0, None, Compiled,
                qt_QTreeView_setSelection_void_QTreeView_QRect_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "rect", "qt.QRect"),
                new Param(c, "command", "int"), End),
            _func[24] = new MemberFunction(
                c, "sizeHintForColumn", _n_sizeHintForColumn0, None, Compiled,
                qt_QTreeView_sizeHintForColumn_int_QTreeView_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "column", "int"), End),
            _func[25] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QTreeView_timerEvent_void_QTreeView_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[26] = new MemberFunction(
                c, "updateGeometries", _n_updateGeometries0, None, Compiled,
                qt_QTreeView_updateGeometries_void_QTreeView, Return, "void",
                Parameters, new Param(c, "this", "qt.QTreeView"), End),
            _func[27] = new MemberFunction(
                c, "verticalOffset", _n_verticalOffset0, None, Compiled,
                qt_QTreeView_verticalOffset_int_QTreeView, Return, "int",
                Parameters, new Param(c, "this", "qt.QTreeView"), End),
            _func[28] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QTreeView_viewportEvent_bool_QTreeView_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[29] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QTreeView_viewportSizeHint_QSize_QTreeView, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QTreeView"),
                End),
            _func[30] = new MemberFunction(
                c, "visualRegionForSelection", _n_visualRegionForSelection0,
                None, Compiled,
                qt_QTreeView_visualRegionForSelection_QRegion_QTreeView_QItemSelection,
                Return, "qt.QRegion", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "selection", "qt.QItemSelection"), End),
            _func[31] = new MemberFunction(
                c, "sizeHintForRow", _n_sizeHintForRow0, None, Compiled,
                qt_QTreeView_sizeHintForRow_int_QTreeView_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "row", "int"), End),
            _func[32] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QTreeView_inputMethodQuery_QVariant_QTreeView_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "query", "int"), End),
            _func[33] = new MemberFunction(
                c, "edit", _n_edit0, None,
                Compiled,
                qt_QTreeView_edit_bool_QTreeView_QModelIndex_int_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "trigger", "int"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[34] = new MemberFunction(
                c, "selectionCommand", _n_selectionCommand0, None, Compiled,
                qt_QTreeView_selectionCommand_int_QTreeView_QModelIndex_QEvent,
                Return, "int", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[35] = new MemberFunction(
                c, "startDrag", _n_startDrag0, None, Compiled,
                qt_QTreeView_startDrag_void_QTreeView_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "supportedActions", "int"), End),
            // MISSING: viewOptions ("QStyleOptionViewItem"; QTreeView this) //
            // protected
            _func[36] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QTreeView_dragEnterEvent_void_QTreeView_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[37] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QTreeView_dragLeaveEvent_void_QTreeView_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[38] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QTreeView_dropEvent_void_QTreeView_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[39] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QTreeView_event_bool_QTreeView_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event_", "qt.QEvent"), End),
            _func[40] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QTreeView_focusInEvent_void_QTreeView_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[41] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QTreeView_focusNextPrevChild_bool_QTreeView_bool, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "next", "bool"), End),
            _func[42] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QTreeView_focusOutEvent_void_QTreeView_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QTreeView this,
            // "QInputMethodEvent *" event) // protected
            _func[43] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QTreeView_resizeEvent_void_QTreeView_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QTreeView"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QTreeView::staticMetaObject, propExclusions);
    }

} // namespace Mu
