//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QComboBoxType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QAbstractItemModelType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QCompleterType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QIconType.h>
#include <MuQt5/QLineEditType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QTabletEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QHideEventType.h>
#include <MuQt5/QMoveEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QAbstractItemViewType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QVariantType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QComboBox::~MuQt_QComboBox()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QComboBox::MuQt_QComboBox(Pointer muobj, const CallEnvironment* ce,
                                   QWidget* parent)
        : QComboBox(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QComboBoxType>(
            c->internName("qt.QComboBox"));
    }

    void MuQt_QComboBox::hidePopup()
    {
        if (!_env)
        {
            QComboBox::hidePopup();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::hidePopup();
        }
    }

    void MuQt_QComboBox::showPopup()
    {
        if (!_env)
        {
            QComboBox::showPopup();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::showPopup();
        }
    }

    bool MuQt_QComboBox::event(QEvent* event_)
    {
        if (!_env)
            return QComboBox::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QComboBox::event(event_);
        }
    }

    QVariant MuQt_QComboBox::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QComboBox::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QComboBox::inputMethodQuery(query);
        }
    }

    QSize MuQt_QComboBox::minimumSizeHint() const
    {
        if (!_env)
            return QComboBox::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QComboBox::minimumSizeHint();
        }
    }

    QSize MuQt_QComboBox::sizeHint() const
    {
        if (!_env)
            return QComboBox::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QComboBox::sizeHint();
        }
    }

    void MuQt_QComboBox::changeEvent(QEvent* e)
    {
        if (!_env)
        {
            QComboBox::changeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::changeEvent(e);
        }
    }

    void MuQt_QComboBox::contextMenuEvent(QContextMenuEvent* e)
    {
        if (!_env)
        {
            QComboBox::contextMenuEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, e, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::contextMenuEvent(e);
        }
    }

    void MuQt_QComboBox::focusInEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QComboBox::focusInEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::focusInEvent(e);
        }
    }

    void MuQt_QComboBox::focusOutEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QComboBox::focusOutEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::focusOutEvent(e);
        }
    }

    void MuQt_QComboBox::hideEvent(QHideEvent* e)
    {
        if (!_env)
        {
            QComboBox::hideEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, e, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::hideEvent(e);
        }
    }

    void MuQt_QComboBox::keyPressEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QComboBox::keyPressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::keyPressEvent(e);
        }
    }

    void MuQt_QComboBox::keyReleaseEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QComboBox::keyReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::keyReleaseEvent(e);
        }
    }

    void MuQt_QComboBox::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QComboBox::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::mousePressEvent(e);
        }
    }

    void MuQt_QComboBox::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QComboBox::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::mouseReleaseEvent(e);
        }
    }

    void MuQt_QComboBox::paintEvent(QPaintEvent* e)
    {
        if (!_env)
        {
            QComboBox::paintEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, e, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::paintEvent(e);
        }
    }

    void MuQt_QComboBox::resizeEvent(QResizeEvent* e)
    {
        if (!_env)
        {
            QComboBox::resizeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QResizeEventType>(c, e, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::resizeEvent(e);
        }
    }

    void MuQt_QComboBox::showEvent(QShowEvent* e)
    {
        if (!_env)
        {
            QComboBox::showEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, e, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::showEvent(e);
        }
    }

    void MuQt_QComboBox::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QComboBox::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::wheelEvent(e);
        }
    }

    bool MuQt_QComboBox::hasHeightForWidth() const
    {
        if (!_env)
            return QComboBox::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QComboBox::hasHeightForWidth();
        }
    }

    int MuQt_QComboBox::heightForWidth(int w) const
    {
        if (!_env)
            return QComboBox::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QComboBox::heightForWidth(w);
        }
    }

    void MuQt_QComboBox::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QComboBox::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::closeEvent(event);
        }
    }

    void MuQt_QComboBox::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QComboBox::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::dragEnterEvent(event);
        }
    }

    void MuQt_QComboBox::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QComboBox::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::dragLeaveEvent(event);
        }
    }

    void MuQt_QComboBox::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QComboBox::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::dragMoveEvent(event);
        }
    }

    void MuQt_QComboBox::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QComboBox::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::dropEvent(event);
        }
    }

    void MuQt_QComboBox::enterEvent(QEvent* event)
    {
        if (!_env)
        {
            QComboBox::enterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::enterEvent(event);
        }
    }

    bool MuQt_QComboBox::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QComboBox::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QComboBox::focusNextPrevChild(next);
        }
    }

    void MuQt_QComboBox::leaveEvent(QEvent* event)
    {
        if (!_env)
        {
            QComboBox::leaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::leaveEvent(event);
        }
    }

    void MuQt_QComboBox::mouseDoubleClickEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QComboBox::mouseDoubleClickEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::mouseDoubleClickEvent(event);
        }
    }

    void MuQt_QComboBox::mouseMoveEvent(QMouseEvent* event)
    {
        if (!_env)
        {
            QComboBox::mouseMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QMouseEventType>(c, event, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::mouseMoveEvent(event);
        }
    }

    void MuQt_QComboBox::moveEvent(QMoveEvent* event)
    {
        if (!_env)
        {
            QComboBox::moveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMoveEventType>(c, event, "qt.QMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::moveEvent(event);
        }
    }

    void MuQt_QComboBox::tabletEvent(QTabletEvent* event)
    {
        if (!_env)
        {
            QComboBox::tabletEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTabletEventType>(c, event, "qt.QTabletEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QComboBox::tabletEvent(event);
        }
    }

    int MuQt_QComboBox::metric(PaintDeviceMetric m) const
    {
        if (!_env)
            return QComboBox::metric(m);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(m);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QComboBox::metric(m);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QComboBoxType::QComboBoxType(Context* c, const char* name, Class* super,
                                 Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QComboBoxType::~QComboBoxType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QComboBox_QComboBox_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QComboBox* w = object<QComboBox>(widget))
        {
            QComboBoxType* type =
                c->findSymbolOfTypeByQualifiedName<QComboBoxType>(
                    c->internName("qt.QComboBox"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QComboBox_QComboBox_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QComboBox_QComboBox_QComboBox_QComboBox_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QComboBox(param_this,
                                     NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QComboBox_addItem_void_QComboBox_string_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        Pointer param_userData)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        const QString arg1 = qstring(param_text);
        const QVariant arg2 = getqtype<QVariantType>(param_userData);
        arg0->addItem(arg1, arg2);
    }

    void qt_QComboBox_addItem_void_QComboBox_QIcon_string_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_icon,
        Pointer param_text, Pointer param_userData)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        const QIcon arg1 = getqtype<QIconType>(param_icon);
        const QString arg2 = qstring(param_text);
        const QVariant arg3 = getqtype<QVariantType>(param_userData);
        arg0->addItem(arg1, arg2, arg3);
    }

    void qt_QComboBox_addItems_void_QComboBox_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_texts)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        const QStringList arg1 = qstringlist(param_texts);
        arg0->addItems(arg1);
    }

    Pointer qt_QComboBox_completer_QCompleter_QComboBox(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return makeinstance<QCompleterType>(c, arg0->completer(),
                                            "qt.QCompleter");
    }

    int qt_QComboBox_findData_int_QComboBox_QVariant_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data,
        int param_role, int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        const QVariant arg1 = getqtype<QVariantType>(param_data);
        int arg2 = (int)(param_role);
        Qt::MatchFlags arg3 = (Qt::MatchFlags)(param_flags);
        return arg0->findData(arg1, arg2, arg3);
    }

    int qt_QComboBox_findText_int_QComboBox_string_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_text,
                                                       int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        const QString arg1 = qstring(param_text);
        Qt::MatchFlags arg2 = (Qt::MatchFlags)(param_flags);
        return arg0->findText(arg1, arg2);
    }

    void qt_QComboBox_hidePopup_void_QComboBox(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        if (isMuQtObject(arg0))
            arg0->QComboBox::hidePopup();
        else
            arg0->hidePopup();
    }

    void qt_QComboBox_insertItem_void_QComboBox_int_string_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_text, Pointer param_userData)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        const QString arg2 = qstring(param_text);
        const QVariant arg3 = getqtype<QVariantType>(param_userData);
        arg0->insertItem(arg1, arg2, arg3);
    }

    void qt_QComboBox_insertItem_void_QComboBox_int_QIcon_string_QVariant(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_icon, Pointer param_text, Pointer param_userData)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        const QIcon arg2 = getqtype<QIconType>(param_icon);
        const QString arg3 = qstring(param_text);
        const QVariant arg4 = getqtype<QVariantType>(param_userData);
        arg0->insertItem(arg1, arg2, arg3, arg4);
    }

    void qt_QComboBox_insertItems_void_QComboBox_int_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_list)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        const QStringList arg2 = qstringlist(param_list);
        arg0->insertItems(arg1, arg2);
    }

    void qt_QComboBox_insertSeparator_void_QComboBox_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        arg0->insertSeparator(arg1);
    }

    Pointer qt_QComboBox_itemData_QVariant_QComboBox_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        int arg2 = (int)(param_role);
        return makeqtype<QVariantType>(c, arg0->itemData(arg1, arg2),
                                       "qt.QVariant");
    }

    Pointer qt_QComboBox_itemIcon_QIcon_QComboBox_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        return makeqtype<QIconType>(c, arg0->itemIcon(arg1), "qt.QIcon");
    }

    Pointer qt_QComboBox_itemText_string_QComboBox_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        return makestring(c, arg0->itemText(arg1));
    }

    Pointer qt_QComboBox_lineEdit_QLineEdit_QComboBox(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return makeinstance<QLineEditType>(c, arg0->lineEdit(), "qt.QLineEdit");
    }

    Pointer
    qt_QComboBox_model_QAbstractItemModel_QComboBox(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return makeinstance<QAbstractItemModelType>(c, arg0->model(),
                                                    "qt.QAbstractItemModel");
    }

    void qt_QComboBox_removeItem_void_QComboBox_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        arg0->removeItem(arg1);
    }

    Pointer
    qt_QComboBox_rootModelIndex_QModelIndex_QComboBox(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return makeqtype<QModelIndexType>(c, arg0->rootModelIndex(),
                                          "qt.QModelIndex");
    }

    void qt_QComboBox_setCompleter_void_QComboBox_QCompleter(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_completer)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QCompleter* arg1 = object<QCompleter>(param_completer);
        arg0->setCompleter(arg1);
    }

    void qt_QComboBox_setItemData_void_QComboBox_int_QVariant_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_value, int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        const QVariant arg2 = getqtype<QVariantType>(param_value);
        int arg3 = (int)(param_role);
        arg0->setItemData(arg1, arg2, arg3);
    }

    void qt_QComboBox_setItemIcon_void_QComboBox_int_QIcon(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_icon)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        const QIcon arg2 = getqtype<QIconType>(param_icon);
        arg0->setItemIcon(arg1, arg2);
    }

    void qt_QComboBox_setItemText_void_QComboBox_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_index);
        const QString arg2 = qstring(param_text);
        arg0->setItemText(arg1, arg2);
    }

    void qt_QComboBox_setLineEdit_void_QComboBox_QLineEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_edit)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QLineEdit* arg1 = object<QLineEdit>(param_edit);
        arg0->setLineEdit(arg1);
    }

    void qt_QComboBox_setModel_void_QComboBox_QAbstractItemModel(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_model)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QAbstractItemModel* arg1 = object<QAbstractItemModel>(param_model);
        arg0->setModel(arg1);
    }

    void qt_QComboBox_setRootModelIndex_void_QComboBox_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        arg0->setRootModelIndex(arg1);
    }

    void qt_QComboBox_setView_void_QComboBox_QAbstractItemView(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_itemView)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QAbstractItemView* arg1 = object<QAbstractItemView>(param_itemView);
        arg0->setView(arg1);
    }

    void qt_QComboBox_showPopup_void_QComboBox(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        if (isMuQtObject(arg0))
            arg0->QComboBox::showPopup();
        else
            arg0->showPopup();
    }

    Pointer
    qt_QComboBox_view_QAbstractItemView_QComboBox(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return makeinstance<QAbstractItemViewType>(c, arg0->view(),
                                                   "qt.QAbstractItemView");
    }

    bool qt_QComboBox_event_bool_QComboBox_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0) ? arg0->QComboBox::event(arg1)
                                  : arg0->event(arg1);
    }

    Pointer qt_QComboBox_inputMethodQuery_QVariant_QComboBox_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QComboBox::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer
    qt_QComboBox_minimumSizeHint_QSize_QComboBox(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QComboBox::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QComboBox_sizeHint_QSize_QComboBox(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QComboBox::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QComboBox_changeEvent_void_QComboBox_QEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QComboBox_contextMenuEvent_void_QComboBox_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QContextMenuEvent* arg1 = getqpointer<QContextMenuEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QComboBox_focusInEvent_void_QComboBox_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->focusInEvent_pub(arg1);
    }

    void qt_QComboBox_focusOutEvent_void_QComboBox_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QComboBox_hideEvent_void_QComboBox_QHideEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QComboBox_keyPressEvent_void_QComboBox_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QComboBox_keyReleaseEvent_void_QComboBox_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QComboBox_mousePressEvent_void_QComboBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QComboBox_mouseReleaseEvent_void_QComboBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QComboBox_paintEvent_void_QComboBox_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QComboBox_resizeEvent_void_QComboBox_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QComboBox_showEvent_void_QComboBox_QShowEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->showEvent_pub(arg1);
    }

    void qt_QComboBox_wheelEvent_void_QComboBox_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->wheelEvent_pub(arg1);
    }

    bool qt_QComboBox_hasHeightForWidth_bool_QComboBox(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        return isMuQtObject(arg0) ? arg0->QComboBox::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QComboBox_heightForWidth_int_QComboBox_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QComboBox::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    void qt_QComboBox_closeEvent_void_QComboBox_QCloseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QComboBox_dragEnterEvent_void_QComboBox_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QComboBox_dragLeaveEvent_void_QComboBox_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QComboBox_dragMoveEvent_void_QComboBox_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QComboBox_dropEvent_void_QComboBox_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QComboBox_enterEvent_void_QComboBox_QEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->enterEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->enterEvent_pub(arg1);
    }

    bool qt_QComboBox_focusNextPrevChild_bool_QComboBox_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QComboBox*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QComboBox*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QComboBox_leaveEvent_void_QComboBox_QEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->leaveEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->leaveEvent_pub(arg1);
    }

    void qt_QComboBox_mouseDoubleClickEvent_void_QComboBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QComboBox_mouseMoveEvent_void_QComboBox_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QComboBox_moveEvent_void_QComboBox_QMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QMoveEvent* arg1 = getqpointer<QMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->moveEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->moveEvent_pub(arg1);
    }

    void qt_QComboBox_tabletEvent_void_QComboBox_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QTabletEvent* arg1 = getqpointer<QTabletEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QComboBox*)arg0)->tabletEvent_pub_parent(arg1);
        else
            ((MuQt_QComboBox*)arg0)->tabletEvent_pub(arg1);
    }

    int qt_QComboBox_metric_int_QComboBox_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this, int param_m)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QComboBox* arg0 = object<QComboBox>(param_this);
        QPaintDevice::PaintDeviceMetric arg1 =
            (QPaintDevice::PaintDeviceMetric)(param_m);
        return isMuQtObject(arg0)
                   ? ((MuQt_QComboBox*)arg0)->metric_pub_parent(arg1)
                   : ((MuQt_QComboBox*)arg0)->metric_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QComboBox0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_QComboBox_QComboBox_QComboBox_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addItem0, void)
    {
        qt_QComboBox_addItem_void_QComboBox_string_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addItem1, void)
    {
        qt_QComboBox_addItem_void_QComboBox_QIcon_string_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addItems0, void)
    {
        qt_QComboBox_addItems_void_QComboBox_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_completer0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_completer_QCompleter_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_findData0, int)
    {
        NODE_RETURN(qt_QComboBox_findData_int_QComboBox_QVariant_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_findText0, int)
    {
        NODE_RETURN(qt_QComboBox_findText_int_QComboBox_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_hidePopup0, void)
    {
        qt_QComboBox_hidePopup_void_QComboBox(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertItem0, void)
    {
        qt_QComboBox_insertItem_void_QComboBox_int_string_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertItem1, void)
    {
        qt_QComboBox_insertItem_void_QComboBox_int_QIcon_string_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer), NODE_ARG(4, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertItems0, void)
    {
        qt_QComboBox_insertItems_void_QComboBox_int_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertSeparator0, void)
    {
        qt_QComboBox_insertSeparator_void_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_itemData0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_itemData_QVariant_QComboBox_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemIcon0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_itemIcon_QIcon_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemText0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_itemText_string_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_lineEdit0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_lineEdit_QLineEdit_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_model0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_model_QAbstractItemModel_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_removeItem0, void)
    {
        qt_QComboBox_removeItem_void_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_rootModelIndex0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_rootModelIndex_QModelIndex_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCompleter0, void)
    {
        qt_QComboBox_setCompleter_void_QComboBox_QCompleter(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setItemData0, void)
    {
        qt_QComboBox_setItemData_void_QComboBox_int_QVariant_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_setItemIcon0, void)
    {
        qt_QComboBox_setItemIcon_void_QComboBox_int_QIcon(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setItemText0, void)
    {
        qt_QComboBox_setItemText_void_QComboBox_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setLineEdit0, void)
    {
        qt_QComboBox_setLineEdit_void_QComboBox_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setModel0, void)
    {
        qt_QComboBox_setModel_void_QComboBox_QAbstractItemModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setRootModelIndex0, void)
    {
        qt_QComboBox_setRootModelIndex_void_QComboBox_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setView0, void)
    {
        qt_QComboBox_setView_void_QComboBox_QAbstractItemView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showPopup0, void)
    {
        qt_QComboBox_showPopup_void_QComboBox(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_view0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_view_QAbstractItemView_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QComboBox_event_bool_QComboBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_inputMethodQuery_QVariant_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_minimumSizeHint_QSize_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QComboBox_sizeHint_QSize_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QComboBox_changeEvent_void_QComboBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QComboBox_contextMenuEvent_void_QComboBox_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QComboBox_focusInEvent_void_QComboBox_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QComboBox_focusOutEvent_void_QComboBox_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QComboBox_hideEvent_void_QComboBox_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QComboBox_keyPressEvent_void_QComboBox_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QComboBox_keyReleaseEvent_void_QComboBox_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QComboBox_mousePressEvent_void_QComboBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QComboBox_mouseReleaseEvent_void_QComboBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QComboBox_paintEvent_void_QComboBox_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QComboBox_resizeEvent_void_QComboBox_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QComboBox_showEvent_void_QComboBox_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QComboBox_wheelEvent_void_QComboBox_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QComboBox_hasHeightForWidth_bool_QComboBox(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QComboBox_heightForWidth_int_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QComboBox_closeEvent_void_QComboBox_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QComboBox_dragEnterEvent_void_QComboBox_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QComboBox_dragLeaveEvent_void_QComboBox_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QComboBox_dragMoveEvent_void_QComboBox_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QComboBox_dropEvent_void_QComboBox_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_enterEvent0, void)
    {
        qt_QComboBox_enterEvent_void_QComboBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QComboBox_focusNextPrevChild_bool_QComboBox_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
    {
        qt_QComboBox_leaveEvent_void_QComboBox_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QComboBox_mouseDoubleClickEvent_void_QComboBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QComboBox_mouseMoveEvent_void_QComboBox_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveEvent0, void)
    {
        qt_QComboBox_moveEvent_void_QComboBox_QMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
    {
        qt_QComboBox_tabletEvent_void_QComboBox_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_metric0, int)
    {
        NODE_RETURN(qt_QComboBox_metric_int_QComboBox_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    void QComboBoxType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QComboBox_QComboBox_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QComboBox", _n_QComboBox0, None, Compiled,
                         qt_QComboBox_QComboBox_QComboBox_QComboBox_QWidget,
                         Return, "qt.QComboBox", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "addItem", _n_addItem0, None, Compiled,
                         qt_QComboBox_addItem_void_QComboBox_string_QVariant,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "text", "string"),
                         new Param(c, "userData", "qt.QVariant"), End),
            new Function(
                c, "addItem", _n_addItem1, None, Compiled,
                qt_QComboBox_addItem_void_QComboBox_QIcon_string_QVariant,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "icon", "qt.QIcon"),
                new Param(c, "text", "string"),
                new Param(c, "userData", "qt.QVariant"), End),
            new Function(c, "addItems", _n_addItems0, None, Compiled,
                         qt_QComboBox_addItems_void_QComboBox_stringBSB_ESB_,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "texts", "string[]"), End),
            new Function(c, "completer", _n_completer0, None, Compiled,
                         qt_QComboBox_completer_QCompleter_QComboBox, Return,
                         "qt.QCompleter", Parameters,
                         new Param(c, "this", "qt.QComboBox"), End),
            // PROP: count (int; QComboBox this)
            // PROP: currentData (QVariant; QComboBox this, int role)
            // PROP: currentIndex (int; QComboBox this)
            // PROP: currentText (string; QComboBox this)
            // PROP: duplicatesEnabled (bool; QComboBox this)
            new Function(
                c, "findData", _n_findData0, None, Compiled,
                qt_QComboBox_findData_int_QComboBox_QVariant_int_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "data", "qt.QVariant"),
                new Param(c, "role", "int", Value((int)Qt::UserRole)),
                new Param(c, "flags", "int",
                          Value((int)static_cast<Qt::MatchFlags>(
                              Qt::MatchExactly | Qt::MatchCaseSensitive))),
                End),
            new Function(
                c, "findText", _n_findText0, None, Compiled,
                qt_QComboBox_findText_int_QComboBox_string_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "text", "string"),
                new Param(c, "flags", "int",
                          Value((int)static_cast<Qt::MatchFlags>(
                              Qt::MatchExactly | Qt::MatchCaseSensitive))),
                End),
            // PROP: hasFrame (bool; QComboBox this)
            _func[0] = new MemberFunction(
                c, "hidePopup", _n_hidePopup0, None, Compiled,
                qt_QComboBox_hidePopup_void_QComboBox, Return, "void",
                Parameters, new Param(c, "this", "qt.QComboBox"), End),
            // PROP: iconSize (QSize; QComboBox this)
            new Function(
                c, "insertItem", _n_insertItem0, None, Compiled,
                qt_QComboBox_insertItem_void_QComboBox_int_string_QVariant,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "int"), new Param(c, "text", "string"),
                new Param(c, "userData", "qt.QVariant"), End),
            new Function(
                c, "insertItem", _n_insertItem1, None, Compiled,
                qt_QComboBox_insertItem_void_QComboBox_int_QIcon_string_QVariant,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "int"), new Param(c, "icon", "qt.QIcon"),
                new Param(c, "text", "string"),
                new Param(c, "userData", "qt.QVariant"), End),
            new Function(
                c, "insertItems", _n_insertItems0, None, Compiled,
                qt_QComboBox_insertItems_void_QComboBox_int_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "int"), new Param(c, "list", "string[]"),
                End),
            // PROP: insertPolicy (flags QComboBox::InsertPolicy; QComboBox
            // this)
            new Function(
                c, "insertSeparator", _n_insertSeparator0, None, Compiled,
                qt_QComboBox_insertSeparator_void_QComboBox_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "int"), End),
            // PROP: isEditable (bool; QComboBox this)
            new Function(
                c, "itemData", _n_itemData0, None, Compiled,
                qt_QComboBox_itemData_QVariant_QComboBox_int_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "int"),
                new Param(c, "role", "int", Value((int)Qt::UserRole)), End),
            // MISSING: itemDelegate ("QAbstractItemDelegate *"; QComboBox this)
            new Function(c, "itemIcon", _n_itemIcon0, None, Compiled,
                         qt_QComboBox_itemIcon_QIcon_QComboBox_int, Return,
                         "qt.QIcon", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "index", "int"), End),
            new Function(c, "itemText", _n_itemText0, None, Compiled,
                         qt_QComboBox_itemText_string_QComboBox_int, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "index", "int"), End),
            new Function(c, "lineEdit", _n_lineEdit0, None, Compiled,
                         qt_QComboBox_lineEdit_QLineEdit_QComboBox, Return,
                         "qt.QLineEdit", Parameters,
                         new Param(c, "this", "qt.QComboBox"), End),
            // PROP: maxCount (int; QComboBox this)
            // PROP: maxVisibleItems (int; QComboBox this)
            // PROP: minimumContentsLength (int; QComboBox this)
            new Function(c, "model", _n_model0, None, Compiled,
                         qt_QComboBox_model_QAbstractItemModel_QComboBox,
                         Return, "qt.QAbstractItemModel", Parameters,
                         new Param(c, "this", "qt.QComboBox"), End),
            // PROP: modelColumn (int; QComboBox this)
            new Function(c, "removeItem", _n_removeItem0, None, Compiled,
                         qt_QComboBox_removeItem_void_QComboBox_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "index", "int"), End),
            new Function(c, "rootModelIndex", _n_rootModelIndex0, None,
                         Compiled,
                         qt_QComboBox_rootModelIndex_QModelIndex_QComboBox,
                         Return, "qt.QModelIndex", Parameters,
                         new Param(c, "this", "qt.QComboBox"), End),
            new Function(c, "setCompleter", _n_setCompleter0, None, Compiled,
                         qt_QComboBox_setCompleter_void_QComboBox_QCompleter,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "completer", "qt.QCompleter"), End),
            // PROP: setDuplicatesEnabled (void; QComboBox this, bool enable)
            // PROP: setEditable (void; QComboBox this, bool editable)
            // PROP: setFrame (void; QComboBox this, bool _p5)
            // PROP: setIconSize (void; QComboBox this, QSize size)
            // PROP: setInsertPolicy (void; QComboBox this, flags
            // QComboBox::InsertPolicy policy)
            new Function(
                c, "setItemData", _n_setItemData0, None, Compiled,
                qt_QComboBox_setItemData_void_QComboBox_int_QVariant_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "int"),
                new Param(c, "value", "qt.QVariant"),
                new Param(c, "role", "int", Value((int)Qt::UserRole)), End),
            // MISSING: setItemDelegate (void; QComboBox this,
            // "QAbstractItemDelegate *" delegate)
            new Function(c, "setItemIcon", _n_setItemIcon0, None, Compiled,
                         qt_QComboBox_setItemIcon_void_QComboBox_int_QIcon,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "index", "int"),
                         new Param(c, "icon", "qt.QIcon"), End),
            new Function(c, "setItemText", _n_setItemText0, None, Compiled,
                         qt_QComboBox_setItemText_void_QComboBox_int_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "index", "int"),
                         new Param(c, "text", "string"), End),
            new Function(c, "setLineEdit", _n_setLineEdit0, None, Compiled,
                         qt_QComboBox_setLineEdit_void_QComboBox_QLineEdit,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "edit", "qt.QLineEdit"), End),
            // PROP: setMaxCount (void; QComboBox this, int max)
            // PROP: setMaxVisibleItems (void; QComboBox this, int maxItems)
            // PROP: setMinimumContentsLength (void; QComboBox this, int
            // characters)
            new Function(
                c, "setModel", _n_setModel0, None, Compiled,
                qt_QComboBox_setModel_void_QComboBox_QAbstractItemModel, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "model", "qt.QAbstractItemModel"), End),
            // PROP: setModelColumn (void; QComboBox this, int visibleColumn)
            new Function(
                c, "setRootModelIndex", _n_setRootModelIndex0, None, Compiled,
                qt_QComboBox_setRootModelIndex_void_QComboBox_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "index", "qt.QModelIndex"), End),
            // PROP: setSizeAdjustPolicy (void; QComboBox this, flags
            // QComboBox::SizeAdjustPolicy policy) MISSING: setValidator (void;
            // QComboBox this, "const QValidator *" validator)
            new Function(c, "setView", _n_setView0, None, Compiled,
                         qt_QComboBox_setView_void_QComboBox_QAbstractItemView,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QComboBox"),
                         new Param(c, "itemView", "qt.QAbstractItemView"), End),
            _func[1] = new MemberFunction(
                c, "showPopup", _n_showPopup0, None, Compiled,
                qt_QComboBox_showPopup_void_QComboBox, Return, "void",
                Parameters, new Param(c, "this", "qt.QComboBox"), End),
            // PROP: sizeAdjustPolicy (flags QComboBox::SizeAdjustPolicy;
            // QComboBox this) MISSING: validator ("const QValidator *";
            // QComboBox this)
            new Function(c, "view", _n_view0, None, Compiled,
                         qt_QComboBox_view_QAbstractItemView_QComboBox, Return,
                         "qt.QAbstractItemView", Parameters,
                         new Param(c, "this", "qt.QComboBox"), End),
            _func[2] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QComboBox_event_bool_QComboBox_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event_", "qt.QEvent"), End),
            _func[3] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QComboBox_inputMethodQuery_QVariant_QComboBox_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "query", "int"), End),
            _func[4] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QComboBox_minimumSizeHint_QSize_QComboBox, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QComboBox"),
                End),
            _func[5] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QComboBox_sizeHint_QSize_QComboBox, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QComboBox"), End),
            // MISSING: initStyleOption (void; QComboBox this,
            // "QStyleOptionComboBox *" option) // protected
            _func[6] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QComboBox_changeEvent_void_QComboBox_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[7] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QComboBox_contextMenuEvent_void_QComboBox_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QContextMenuEvent"), End),
            _func[8] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QComboBox_focusInEvent_void_QComboBox_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            _func[9] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QComboBox_focusOutEvent_void_QComboBox_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            _func[10] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QComboBox_hideEvent_void_QComboBox_QHideEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QHideEvent"), End),
            // MISSING: inputMethodEvent (void; QComboBox this,
            // "QInputMethodEvent *" e) // protected
            _func[11] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QComboBox_keyPressEvent_void_QComboBox_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[12] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QComboBox_keyReleaseEvent_void_QComboBox_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[13] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QComboBox_mousePressEvent_void_QComboBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QComboBox_mouseReleaseEvent_void_QComboBox_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[15] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QComboBox_paintEvent_void_QComboBox_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QPaintEvent"), End),
            _func[16] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QComboBox_resizeEvent_void_QComboBox_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QResizeEvent"), End),
            _func[17] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QComboBox_showEvent_void_QComboBox_QShowEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QShowEvent"), End),
            _func[18] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QComboBox_wheelEvent_void_QComboBox_QWheelEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            _func[19] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QComboBox_hasHeightForWidth_bool_QComboBox, Return, "bool",
                Parameters, new Param(c, "this", "qt.QComboBox"), End),
            _func[20] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QComboBox_heightForWidth_int_QComboBox_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "w", "int"), End),
            // MISSING: paintEngine ("QPaintEngine *"; QComboBox this)
            // MISSING: actionEvent (void; QComboBox this, "QActionEvent *"
            // event) // protected
            _func[21] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QComboBox_closeEvent_void_QComboBox_QCloseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[22] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QComboBox_dragEnterEvent_void_QComboBox_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[23] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QComboBox_dragLeaveEvent_void_QComboBox_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[24] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QComboBox_dragMoveEvent_void_QComboBox_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[25] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QComboBox_dropEvent_void_QComboBox_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[26] = new MemberFunction(
                c, "enterEvent", _n_enterEvent0, None, Compiled,
                qt_QComboBox_enterEvent_void_QComboBox_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[27] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QComboBox_focusNextPrevChild_bool_QComboBox_bool, Return,
                "bool", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "next", "bool"), End),
            _func[28] = new MemberFunction(
                c, "leaveEvent", _n_leaveEvent0, None, Compiled,
                qt_QComboBox_leaveEvent_void_QComboBox_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[29] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QComboBox_mouseDoubleClickEvent_void_QComboBox_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[30] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QComboBox_mouseMoveEvent_void_QComboBox_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QMouseEvent"), End),
            _func[31] = new MemberFunction(
                c, "moveEvent", _n_moveEvent0, None, Compiled,
                qt_QComboBox_moveEvent_void_QComboBox_QMoveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QMoveEvent"), End),
            // MISSING: nativeEvent (bool; QComboBox this, QByteArray eventType,
            // "void *" message, "long *" result) // protected
            _func[32] = new MemberFunction(
                c, "tabletEvent", _n_tabletEvent0, None, Compiled,
                qt_QComboBox_tabletEvent_void_QComboBox_QTabletEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "event", "qt.QTabletEvent"), End),
            // MISSING: initPainter (void; QComboBox this, "QPainter *" painter)
            // // protected
            _func[33] = new MemberFunction(
                c, "metric", _n_metric0, None, Compiled,
                qt_QComboBox_metric_int_QComboBox_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QComboBox"),
                new Param(c, "m", "int"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QComboBox::staticMetaObject, propExclusions);
    }

} // namespace Mu
