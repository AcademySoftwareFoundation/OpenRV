//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QActionType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QKeySequenceType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionGroupType.h>
#include <MuQt5/QIconType.h>
#include <MuQt5/QMenuType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QTimerEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QAction::~MuQt_QAction()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QAction::MuQt_QAction(Pointer muobj, const CallEnvironment* ce,
                               QObject* parent)
        : QAction(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QActionType>(
            c->internName("qt.QAction"));
    }

    MuQt_QAction::MuQt_QAction(Pointer muobj, const CallEnvironment* ce,
                               const QString& text, QObject* parent)
        : QAction(text, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QActionType>(
            c->internName("qt.QAction"));
    }

    MuQt_QAction::MuQt_QAction(Pointer muobj, const CallEnvironment* ce,
                               const QIcon& icon, const QString& text,
                               QObject* parent)
        : QAction(icon, text, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QActionType>(
            c->internName("qt.QAction"));
    }

    bool MuQt_QAction::event(QEvent* e)
    {
        if (!_env)
            return QAction::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAction::event(e);
        }
    }

    bool MuQt_QAction::eventFilter(QObject* watched, QEvent* event)
    {
        if (!_env)
            return QAction::eventFilter(watched, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QObjectType>(c, watched, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAction::eventFilter(watched, event);
        }
    }

    void MuQt_QAction::customEvent(QEvent* event)
    {
        if (!_env)
        {
            QAction::customEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAction::customEvent(event);
        }
    }

    void MuQt_QAction::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QAction::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAction::timerEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QActionType::QActionType(Context* c, const char* name, Class* super,
                             Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QActionType::~QActionType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QAction_QAction_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QAction* w = object<QAction>(widget))
        {
            QActionType* type = c->findSymbolOfTypeByQualifiedName<QActionType>(
                c->internName("qt.QAction"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QAction_QAction_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QAction_QAction_QAction_QAction_QObject(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QAction(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1));
        return param_this;
    }

    Pointer qt_QAction_QAction_QAction_QAction_string_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_text);
        QObject* arg2 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QAction(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1, arg2));
        return param_this;
    }

    Pointer qt_QAction_QAction_QAction_QAction_QIcon_string_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_icon,
        Pointer param_text, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QIcon arg1 = getqtype<QIconType>(param_icon);
        const QString arg2 = qstring(param_text);
        QObject* arg3 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QAction(param_this, NODE_THREAD.process()->callEnv(),
                                   arg1, arg2, arg3));
        return param_this;
    }

    Pointer qt_QAction_actionGroup_QActionGroup_QAction(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        return makeinstance<QActionGroupType>(c, arg0->actionGroup(),
                                              "qt.QActionGroup");
    }

    void qt_QAction_activate_void_QAction_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              int param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QAction::ActionEvent arg1 = (QAction::ActionEvent)(param_event);
        arg0->activate(arg1);
    }

    Pointer qt_QAction_data_QVariant_QAction(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        return makeqtype<QVariantType>(c, arg0->data(), "qt.QVariant");
    }

    bool qt_QAction_isSeparator_bool_QAction(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        return arg0->isSeparator();
    }

    Pointer qt_QAction_menu_QMenu_QAction(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        return makeinstance<QMenuType>(c, arg0->menu(), "qt.QMenu");
    }

    Pointer qt_QAction_parentWidget_QWidget_QAction(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        return makeinstance<QWidgetType>(c, arg0->parentWidget(), "qt.QWidget");
    }

    void qt_QAction_setActionGroup_void_QAction_QActionGroup(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_group)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QActionGroup* arg1 = object<QActionGroup>(param_group);
        arg0->setActionGroup(arg1);
    }

    void qt_QAction_setData_void_QAction_QVariant(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_userData)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        const QVariant arg1 = getqtype<QVariantType>(param_userData);
        arg0->setData(arg1);
    }

    void qt_QAction_setMenu_void_QAction_QMenu(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_menu)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QMenu* arg1 = object<QMenu>(param_menu);
        arg0->setMenu(arg1);
    }

    void qt_QAction_setSeparator_void_QAction_bool(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   bool param_b)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        bool arg1 = (bool)(param_b);
        arg0->setSeparator(arg1);
    }

    void qt_QAction_setShortcuts_void_QAction_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_key)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QKeySequence::StandardKey arg1 = (QKeySequence::StandardKey)(param_key);
        arg0->setShortcuts(arg1);
    }

    Pointer qt_QAction_shortcut_QKeySequence_QAction(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        return makeqtype<QKeySequenceType>(c, arg0->shortcut(),
                                           "qt.QKeySequence");
    }

    bool qt_QAction_showStatusText_bool_QAction_QWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        return arg0->showStatusText(arg1);
    }

    bool qt_QAction_event_bool_QAction_QEvent(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QAction*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QAction*)arg0)->event_pub(arg1);
    }

    bool qt_QAction_eventFilter_bool_QAction_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0) ? arg0->QAction::eventFilter(arg1, arg2)
                                  : arg0->eventFilter(arg1, arg2);
    }

    void qt_QAction_customEvent_void_QAction_QEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAction*)arg0)->customEvent_pub_parent(arg1);
        else
            ((MuQt_QAction*)arg0)->customEvent_pub(arg1);
    }

    void qt_QAction_timerEvent_void_QAction_QTimerEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAction* arg0 = object<QAction>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAction*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QAction*)arg0)->timerEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QAction0, Pointer)
    {
        NODE_RETURN(qt_QAction_QAction_QAction_QAction_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QAction1, Pointer)
    {
        NODE_RETURN(qt_QAction_QAction_QAction_QAction_string_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QAction2, Pointer)
    {
        NODE_RETURN(qt_QAction_QAction_QAction_QAction_QIcon_string_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_actionGroup0, Pointer)
    {
        NODE_RETURN(qt_QAction_actionGroup_QActionGroup_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_activate0, void)
    {
        qt_QAction_activate_void_QAction_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_data0, Pointer)
    {
        NODE_RETURN(qt_QAction_data_QVariant_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isSeparator0, bool)
    {
        NODE_RETURN(qt_QAction_isSeparator_bool_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_menu0, Pointer)
    {
        NODE_RETURN(qt_QAction_menu_QMenu_QAction(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_parentWidget0, Pointer)
    {
        NODE_RETURN(qt_QAction_parentWidget_QWidget_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setActionGroup0, void)
    {
        qt_QAction_setActionGroup_void_QAction_QActionGroup(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setData0, void)
    {
        qt_QAction_setData_void_QAction_QVariant(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setMenu0, void)
    {
        qt_QAction_setMenu_void_QAction_QMenu(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSeparator0, void)
    {
        qt_QAction_setSeparator_void_QAction_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_setShortcuts1, void)
    {
        qt_QAction_setShortcuts_void_QAction_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_shortcut0, Pointer)
    {
        NODE_RETURN(qt_QAction_shortcut_QKeySequence_QAction(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_showStatusText0, bool)
    {
        NODE_RETURN(qt_QAction_showStatusText_bool_QAction_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QAction_event_bool_QAction_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(qt_QAction_eventFilter_bool_QAction_QObject_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_customEvent0, void)
    {
        qt_QAction_customEvent_void_QAction_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QAction_timerEvent_void_QAction_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QActionType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QAction_QAction_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QAction", _n_QAction0, None, Compiled,
                         qt_QAction_QAction_QAction_QAction_QObject, Return,
                         "qt.QAction", Parameters,
                         new Param(c, "this", "qt.QAction"),
                         new Param(c, "parent", "qt.QObject"), End),
            new Function(c, "QAction", _n_QAction1, None, Compiled,
                         qt_QAction_QAction_QAction_QAction_string_QObject,
                         Return, "qt.QAction", Parameters,
                         new Param(c, "this", "qt.QAction"),
                         new Param(c, "text", "string"),
                         new Param(c, "parent", "qt.QObject"), End),
            new Function(
                c, "QAction", _n_QAction2, None, Compiled,
                qt_QAction_QAction_QAction_QAction_QIcon_string_QObject, Return,
                "qt.QAction", Parameters, new Param(c, "this", "qt.QAction"),
                new Param(c, "icon", "qt.QIcon"),
                new Param(c, "text", "string"),
                new Param(c, "parent", "qt.QObject"), End),
            new Function(c, "actionGroup", _n_actionGroup0, None, Compiled,
                         qt_QAction_actionGroup_QActionGroup_QAction, Return,
                         "qt.QActionGroup", Parameters,
                         new Param(c, "this", "qt.QAction"), End),
            new Function(c, "activate", _n_activate0, None, Compiled,
                         qt_QAction_activate_void_QAction_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QAction"),
                         new Param(c, "event", "int"), End),
            // MISSING: associatedGraphicsWidgets ("QList<QGraphicsWidget * >";
            // QAction this) MISSING: associatedWidgets ("QList<QWidget * >";
            // QAction this) PROP: autoRepeat (bool; QAction this)
            new Function(c, "data", _n_data0, None, Compiled,
                         qt_QAction_data_QVariant_QAction, Return,
                         "qt.QVariant", Parameters,
                         new Param(c, "this", "qt.QAction"), End),
            // PROP: font (QFont; QAction this)
            // PROP: icon (QIcon; QAction this)
            // PROP: iconText (string; QAction this)
            // PROP: isCheckable (bool; QAction this)
            // PROP: isChecked (bool; QAction this)
            // PROP: isEnabled (bool; QAction this)
            // PROP: isIconVisibleInMenu (bool; QAction this)
            new Function(c, "isSeparator", _n_isSeparator0, None, Compiled,
                         qt_QAction_isSeparator_bool_QAction, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QAction"), End),
            // PROP: isVisible (bool; QAction this)
            new Function(c, "menu", _n_menu0, None, Compiled,
                         qt_QAction_menu_QMenu_QAction, Return, "qt.QMenu",
                         Parameters, new Param(c, "this", "qt.QAction"), End),
            // PROP: menuRole (flags QAction::MenuRole; QAction this)
            new Function(c, "parentWidget", _n_parentWidget0, None, Compiled,
                         qt_QAction_parentWidget_QWidget_QAction, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QAction"), End),
            // PROP: priority (flags QAction::Priority; QAction this)
            new Function(
                c, "setActionGroup", _n_setActionGroup0, None, Compiled,
                qt_QAction_setActionGroup_void_QAction_QActionGroup, Return,
                "void", Parameters, new Param(c, "this", "qt.QAction"),
                new Param(c, "group", "qt.QActionGroup"), End),
            // PROP: setAutoRepeat (void; QAction this, bool _p5)
            // PROP: setCheckable (void; QAction this, bool _p5)
            new Function(c, "setData", _n_setData0, None, Compiled,
                         qt_QAction_setData_void_QAction_QVariant, Return,
                         "void", Parameters, new Param(c, "this", "qt.QAction"),
                         new Param(c, "userData", "qt.QVariant"), End),
            // PROP: setFont (void; QAction this, QFont font)
            // PROP: setIcon (void; QAction this, QIcon icon)
            // PROP: setIconText (void; QAction this, string text)
            // PROP: setIconVisibleInMenu (void; QAction this, bool visible)
            new Function(c, "setMenu", _n_setMenu0, None, Compiled,
                         qt_QAction_setMenu_void_QAction_QMenu, Return, "void",
                         Parameters, new Param(c, "this", "qt.QAction"),
                         new Param(c, "menu", "qt.QMenu"), End),
            // PROP: setMenuRole (void; QAction this, flags QAction::MenuRole
            // menuRole) PROP: setPriority (void; QAction this, flags
            // QAction::Priority priority)
            new Function(c, "setSeparator", _n_setSeparator0, None, Compiled,
                         qt_QAction_setSeparator_void_QAction_bool, Return,
                         "void", Parameters, new Param(c, "this", "qt.QAction"),
                         new Param(c, "b", "bool"), End),
            // PROP: setShortcut (void; QAction this, QKeySequence shortcut)
            // PROP: setShortcutContext (void; QAction this, flags
            // Qt::ShortcutContext context) MISSING: setShortcuts (void; QAction
            // this, "const QList<QKeySequence> &" shortcuts)
            new Function(c, "setShortcuts", _n_setShortcuts1, None, Compiled,
                         qt_QAction_setShortcuts_void_QAction_int, Return,
                         "void", Parameters, new Param(c, "this", "qt.QAction"),
                         new Param(c, "key", "int"), End),
            // PROP: setStatusTip (void; QAction this, string statusTip)
            // PROP: setText (void; QAction this, string text)
            // PROP: setToolTip (void; QAction this, string tip)
            // PROP: setWhatsThis (void; QAction this, string what)
            new Function(c, "shortcut", _n_shortcut0, None, Compiled,
                         qt_QAction_shortcut_QKeySequence_QAction, Return,
                         "qt.QKeySequence", Parameters,
                         new Param(c, "this", "qt.QAction"), End),
            // PROP: shortcutContext (flags Qt::ShortcutContext; QAction this)
            // MISSING: shortcuts ("QList<QKeySequence>"; QAction this)
            new Function(c, "showStatusText", _n_showStatusText0, None,
                         Compiled,
                         qt_QAction_showStatusText_bool_QAction_QWidget, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QAction"),
                         new Param(c, "widget", "qt.QWidget"), End),
            // PROP: statusTip (string; QAction this)
            // PROP: text (string; QAction this)
            // PROP: toolTip (string; QAction this)
            // PROP: whatsThis (string; QAction this)
            _func[0] = new MemberFunction(c, "event", _n_event0, None, Compiled,
                                          qt_QAction_event_bool_QAction_QEvent,
                                          Return, "bool", Parameters,
                                          new Param(c, "this", "qt.QAction"),
                                          new Param(c, "e", "qt.QEvent"), End),
            _func[1] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QAction_eventFilter_bool_QAction_QObject_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QAction"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QAction this)
            // MISSING: childEvent (void; QAction this, "QChildEvent *" event)
            // // protected MISSING: connectNotify (void; QAction this, "const
            // QMetaMethod &" signal) // protected
            _func[2] = new MemberFunction(
                c, "customEvent", _n_customEvent0, None, Compiled,
                qt_QAction_customEvent_void_QAction_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QAction"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: disconnectNotify (void; QAction this, "const QMetaMethod
            // &" signal) // protected
            _func[3] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QAction_timerEvent_void_QAction_QTimerEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QAction"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QAction::staticMetaObject, propExclusions);
    }

} // namespace Mu
