//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QPlainTextEditType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QTextDocumentType.h>
#include <MuQt5/QMenuType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QMimeDataType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QTextCursorType.h>
#include <MuQt5/QUrlType.h>
#include <MuQt5/QRegExpType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QRectFType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QTextBlockType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QResizeEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QPlainTextEdit::~MuQt_QPlainTextEdit()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QPlainTextEdit::MuQt_QPlainTextEdit(Pointer muobj,
                                             const CallEnvironment* ce,
                                             QWidget* parent)
        : QPlainTextEdit(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QPlainTextEditType>(
            c->internName("qt.QPlainTextEdit"));
    }

    MuQt_QPlainTextEdit::MuQt_QPlainTextEdit(Pointer muobj,
                                             const CallEnvironment* ce,
                                             const QString& text,
                                             QWidget* parent)
        : QPlainTextEdit(text, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QPlainTextEditType>(
            c->internName("qt.QPlainTextEdit"));
    }

    QVariant MuQt_QPlainTextEdit::loadResource(int type, const QUrl& name)
    {
        if (!_env)
            return QPlainTextEdit::loadResource(type, name);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(type);
            args[2] = Value(makeqtype<QUrlType>(c, name, "qt.QUrl"));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QPlainTextEdit::loadResource(type, name);
        }
    }

    QVariant
    MuQt_QPlainTextEdit::inputMethodQuery(Qt::InputMethodQuery property) const
    {
        if (!_env)
            return QPlainTextEdit::inputMethodQuery(property);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(property));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QPlainTextEdit::inputMethodQuery(property);
        }
    }

    bool
    MuQt_QPlainTextEdit::canInsertFromMimeData(const QMimeData* source) const
    {
        if (!_env)
            return QPlainTextEdit::canInsertFromMimeData(source);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QMimeDataType>(c, source, "qt.QMimeData"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QPlainTextEdit::canInsertFromMimeData(source);
        }
    }

    QMimeData* MuQt_QPlainTextEdit::createMimeDataFromSelection() const
    {
        if (!_env)
            return QPlainTextEdit::createMimeDataFromSelection();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return object<QMimeData>(rval._Pointer);
        }
        else
        {
            return QPlainTextEdit::createMimeDataFromSelection();
        }
    }

    void MuQt_QPlainTextEdit::insertFromMimeData(const QMimeData* source)
    {
        if (!_env)
        {
            QPlainTextEdit::insertFromMimeData(source);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QMimeDataType>(c, source, "qt.QMimeData"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::insertFromMimeData(source);
        }
    }

    void MuQt_QPlainTextEdit::changeEvent(QEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::changeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::changeEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QPlainTextEdit::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::contextMenuEvent(event);
        }
    }

    void MuQt_QPlainTextEdit::dragEnterEvent(QDragEnterEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::dragEnterEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragEnterEventType>(c, e, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::dragEnterEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::dragLeaveEvent(QDragLeaveEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::dragLeaveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragLeaveEventType>(c, e, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::dragLeaveEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::dragMoveEvent(QDragMoveEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::dragMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragMoveEventType>(c, e, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::dragMoveEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::dropEvent(QDropEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::dropEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, e, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::dropEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::focusInEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::focusInEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::focusInEvent(e);
        }
    }

    bool MuQt_QPlainTextEdit::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QPlainTextEdit::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QPlainTextEdit::focusNextPrevChild(next);
        }
    }

    void MuQt_QPlainTextEdit::focusOutEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::focusOutEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::focusOutEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::keyPressEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::keyPressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::keyPressEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::keyReleaseEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::keyReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::keyReleaseEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::mouseDoubleClickEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::mouseDoubleClickEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::mouseDoubleClickEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::mouseMoveEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::mousePressEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::mouseReleaseEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::paintEvent(QPaintEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::paintEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, e, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::paintEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::resizeEvent(QResizeEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::resizeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QResizeEventType>(c, e, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::resizeEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QPlainTextEdit::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::scrollContentsBy(dx, dy);
        }
    }

    void MuQt_QPlainTextEdit::showEvent(QShowEvent* _p13)
    {
        if (!_env)
        {
            QPlainTextEdit::showEvent(_p13);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, _p13, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::showEvent(_p13);
        }
    }

    void MuQt_QPlainTextEdit::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QPlainTextEdit::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::wheelEvent(e);
        }
    }

    void MuQt_QPlainTextEdit::setupViewport(QWidget* viewport)
    {
        if (!_env)
        {
            QPlainTextEdit::setupViewport(viewport);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QWidgetType>(c, viewport, "qt.QWidget"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QPlainTextEdit::setupViewport(viewport);
        }
    }

    QSize MuQt_QPlainTextEdit::minimumSizeHint() const
    {
        if (!_env)
            return QPlainTextEdit::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QPlainTextEdit::minimumSizeHint();
        }
    }

    QSize MuQt_QPlainTextEdit::sizeHint() const
    {
        if (!_env)
            return QPlainTextEdit::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QPlainTextEdit::sizeHint();
        }
    }

    bool MuQt_QPlainTextEdit::viewportEvent(QEvent* event)
    {
        if (!_env)
            return QPlainTextEdit::viewportEvent(event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QPlainTextEdit::viewportEvent(event);
        }
    }

    QSize MuQt_QPlainTextEdit::viewportSizeHint() const
    {
        if (!_env)
            return QPlainTextEdit::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QPlainTextEdit::viewportSizeHint();
        }
    }

    bool MuQt_QPlainTextEdit::event(QEvent* event_)
    {
        if (!_env)
            return QPlainTextEdit::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QPlainTextEdit::event(event_);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QPlainTextEditType::QPlainTextEditType(Context* c, const char* name,
                                           Class* super, Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QPlainTextEditType::~QPlainTextEditType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QPlainTextEdit_QPlainTextEdit_QObject(Thread& NODE_THREAD,
                                                         Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QPlainTextEdit* w = object<QPlainTextEdit>(widget))
        {
            QPlainTextEditType* type =
                c->findSymbolOfTypeByQualifiedName<QPlainTextEditType>(
                    c->internName("qt.QPlainTextEdit"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QPlainTextEdit_QPlainTextEdit_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer
    qt_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QPlainTextEdit(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_string_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_text);
        QWidget* arg2 = object<QWidget>(param_parent);
        setobject(param_this, new MuQt_QPlainTextEdit(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    Pointer qt_QPlainTextEdit_anchorAt_string_QPlainTextEdit_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return makestring(c, arg0->anchorAt(arg1));
    }

    bool qt_QPlainTextEdit_canPaste_bool_QPlainTextEdit(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return arg0->canPaste();
    }

    Pointer qt_QPlainTextEdit_createStandardContextMenu_QMenu_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makeinstance<QMenuType>(c, arg0->createStandardContextMenu(),
                                       "qt.QMenu");
    }

    Pointer
    qt_QPlainTextEdit_createStandardContextMenu_QMenu_QPlainTextEdit_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_position);
        return makeinstance<QMenuType>(c, arg0->createStandardContextMenu(arg1),
                                       "qt.QMenu");
    }

    Pointer
    qt_QPlainTextEdit_cursorForPosition_QTextCursor_QPlainTextEdit_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return makeqtype<QTextCursorType>(c, arg0->cursorForPosition(arg1),
                                          "qt.QTextCursor");
    }

    Pointer qt_QPlainTextEdit_cursorRect_QRect_QPlainTextEdit_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cursor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_cursor);
        return makeqtype<QRectType>(c, arg0->cursorRect(arg1), "qt.QRect");
    }

    Pointer
    qt_QPlainTextEdit_cursorRect_QRect_QPlainTextEdit(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makeqtype<QRectType>(c, arg0->cursorRect(), "qt.QRect");
    }

    Pointer qt_QPlainTextEdit_document_QTextDocument_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makeinstance<QTextDocumentType>(c, arg0->document(),
                                               "qt.QTextDocument");
    }

    void qt_QPlainTextEdit_ensureCursorVisible_void_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        arg0->ensureCursorVisible();
    }

    bool qt_QPlainTextEdit_find_bool_QPlainTextEdit_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_exp,
        int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QString arg1 = qstring(param_exp);
        QTextDocument::FindFlags arg2 =
            (QTextDocument::FindFlags)(param_options);
        return arg0->find(arg1, arg2);
    }

    bool qt_QPlainTextEdit_find_bool_QPlainTextEdit_QRegExp_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_exp,
        int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QRegExp arg1 = getqtype<QRegExpType>(param_exp);
        QTextDocument::FindFlags arg2 =
            (QTextDocument::FindFlags)(param_options);
        return arg0->find(arg1, arg2);
    }

    Pointer qt_QPlainTextEdit_loadResource_QVariant_QPlainTextEdit_int_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_type,
        Pointer param_name)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        int arg1 = (int)(param_type);
        const QUrl arg2 = getqtype<QUrlType>(param_name);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QPlainTextEdit::loadResource(arg1, arg2),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->loadResource(arg1, arg2),
                                             "qt.QVariant");
    }

    void qt_QPlainTextEdit_moveCursor_void_QPlainTextEdit_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_operation,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QTextCursor::MoveOperation arg1 =
            (QTextCursor::MoveOperation)(param_operation);
        QTextCursor::MoveMode arg2 = (QTextCursor::MoveMode)(param_mode);
        arg0->moveCursor(arg1, arg2);
    }

    void qt_QPlainTextEdit_setDocument_void_QPlainTextEdit_QTextDocument(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_document)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QTextDocument* arg1 = object<QTextDocument>(param_document);
        arg0->setDocument(arg1);
    }

    void qt_QPlainTextEdit_setTextCursor_void_QPlainTextEdit_QTextCursor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_cursor)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QTextCursor arg1 = getqtype<QTextCursorType>(param_cursor);
        arg0->setTextCursor(arg1);
    }

    Pointer qt_QPlainTextEdit_textCursor_QTextCursor_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makeqtype<QTextCursorType>(c, arg0->textCursor(),
                                          "qt.QTextCursor");
    }

    Pointer
    qt_QPlainTextEdit_toPlainText_string_QPlainTextEdit(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makestring(c, arg0->toPlainText());
    }

    Pointer qt_QPlainTextEdit_inputMethodQuery_QVariant_QPlainTextEdit_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_property)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_property);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QPlainTextEdit::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer
    qt_QPlainTextEdit_blockBoundingGeometry_QRectF_QPlainTextEdit_QTextBlock(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_block)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QTextBlock arg1 = getqtype<QTextBlockType>(param_block);
        return makeqtype<QRectFType>(
            c, ((MuQt_QPlainTextEdit*)arg0)->blockBoundingGeometry_pub(arg1),
            "qt.QRectF");
    }

    Pointer
    qt_QPlainTextEdit_blockBoundingRect_QRectF_QPlainTextEdit_QTextBlock(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_block)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QTextBlock arg1 = getqtype<QTextBlockType>(param_block);
        return makeqtype<QRectFType>(
            c, ((MuQt_QPlainTextEdit*)arg0)->blockBoundingRect_pub(arg1),
            "qt.QRectF");
    }

    bool qt_QPlainTextEdit_canInsertFromMimeData_bool_QPlainTextEdit_QMimeData(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_source)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QMimeData* arg1 = object<QMimeData>(param_source);
        return isMuQtObject(arg0) ? ((MuQt_QPlainTextEdit*)arg0)
                                        ->canInsertFromMimeData_pub_parent(arg1)
                                  : ((MuQt_QPlainTextEdit*)arg0)
                                        ->canInsertFromMimeData_pub(arg1);
    }

    Pointer qt_QPlainTextEdit_contentOffset_QPointF_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makeqtype<QPointFType>(
            c, ((MuQt_QPlainTextEdit*)arg0)->contentOffset_pub(), "qt.QPointF");
    }

    Pointer
    qt_QPlainTextEdit_createMimeDataFromSelection_QMimeData_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return isMuQtObject(arg0)
                   ? makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QPlainTextEdit*)arg0)
                             ->createMimeDataFromSelection_pub_parent(),
                         "qt.QMimeData")
                   : makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QPlainTextEdit*)arg0)
                             ->createMimeDataFromSelection_pub(),
                         "qt.QMimeData");
    }

    Pointer qt_QPlainTextEdit_firstVisibleBlock_QTextBlock_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return makeqtype<QTextBlockType>(
            c, ((MuQt_QPlainTextEdit*)arg0)->firstVisibleBlock_pub(),
            "qt.QTextBlock");
    }

    void qt_QPlainTextEdit_insertFromMimeData_void_QPlainTextEdit_QMimeData(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_source)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        const QMimeData* arg1 = object<QMimeData>(param_source);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->insertFromMimeData_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->insertFromMimeData_pub(arg1);
    }

    void qt_QPlainTextEdit_changeEvent_void_QPlainTextEdit_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->changeEvent_pub(arg1);
    }

    void
    qt_QPlainTextEdit_contextMenuEvent_void_QPlainTextEdit_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_dragEnterEvent_void_QPlainTextEdit_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_dragLeaveEvent_void_QPlainTextEdit_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_dragMoveEvent_void_QPlainTextEdit_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_dropEvent_void_QPlainTextEdit_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_focusInEvent_void_QPlainTextEdit_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QPlainTextEdit_focusNextPrevChild_bool_QPlainTextEdit_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QPlainTextEdit*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QPlainTextEdit*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QPlainTextEdit_focusOutEvent_void_QPlainTextEdit_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_keyPressEvent_void_QPlainTextEdit_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_keyReleaseEvent_void_QPlainTextEdit_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void
    qt_QPlainTextEdit_mouseDoubleClickEvent_void_QPlainTextEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)
                ->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_mouseMoveEvent_void_QPlainTextEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_mousePressEvent_void_QPlainTextEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_mouseReleaseEvent_void_QPlainTextEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_paintEvent_void_QPlainTextEdit_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_resizeEvent_void_QPlainTextEdit_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_scrollContentsBy_void_QPlainTextEdit_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)
                ->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QPlainTextEdit*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    void qt_QPlainTextEdit_showEvent_void_QPlainTextEdit_QShowEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p13)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param__p13);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->showEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_wheelEvent_void_QPlainTextEdit_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QPlainTextEdit*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QPlainTextEdit*)arg0)->wheelEvent_pub(arg1);
    }

    void qt_QPlainTextEdit_setupViewport_void_QPlainTextEdit_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_viewport)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QWidget* arg1 = object<QWidget>(param_viewport);
        if (isMuQtObject(arg0))
            arg0->QPlainTextEdit::setupViewport(arg1);
        else
            arg0->setupViewport(arg1);
    }

    Pointer qt_QPlainTextEdit_minimumSizeHint_QSize_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QPlainTextEdit::minimumSizeHint(), "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer
    qt_QPlainTextEdit_sizeHint_QSize_QPlainTextEdit(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QPlainTextEdit::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    bool qt_QPlainTextEdit_viewportEvent_bool_QPlainTextEdit_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QPlainTextEdit*)arg0)
                         ->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QPlainTextEdit*)arg0)->viewportEvent_pub(arg1);
    }

    Pointer qt_QPlainTextEdit_viewportSizeHint_QSize_QPlainTextEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QPlainTextEdit*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(
                         c,
                         ((MuQt_QPlainTextEdit*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    bool qt_QPlainTextEdit_event_bool_QPlainTextEdit_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPlainTextEdit* arg0 = object<QPlainTextEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QPlainTextEdit*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QPlainTextEdit*)arg0)->event_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QPlainTextEdit0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QPlainTextEdit1, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_string_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_anchorAt0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_anchorAt_string_QPlainTextEdit_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_canPaste0, bool)
    {
        NODE_RETURN(qt_QPlainTextEdit_canPaste_bool_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_createStandardContextMenu0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_createStandardContextMenu_QMenu_QPlainTextEdit(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_createStandardContextMenu1, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_createStandardContextMenu_QMenu_QPlainTextEdit_QPoint(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cursorForPosition0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_cursorForPosition_QTextCursor_QPlainTextEdit_QPoint(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cursorRect0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_cursorRect_QRect_QPlainTextEdit_QTextCursor(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cursorRect1, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_cursorRect_QRect_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_document0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_document_QTextDocument_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_ensureCursorVisible0, void)
    {
        qt_QPlainTextEdit_ensureCursorVisible_void_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_find0, bool)
    {
        NODE_RETURN(qt_QPlainTextEdit_find_bool_QPlainTextEdit_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_find1, bool)
    {
        NODE_RETURN(qt_QPlainTextEdit_find_bool_QPlainTextEdit_QRegExp_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_loadResource0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_loadResource_QVariant_QPlainTextEdit_int_QUrl(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_moveCursor0, void)
    {
        qt_QPlainTextEdit_moveCursor_void_QPlainTextEdit_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setDocument0, void)
    {
        qt_QPlainTextEdit_setDocument_void_QPlainTextEdit_QTextDocument(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTextCursor0, void)
    {
        qt_QPlainTextEdit_setTextCursor_void_QPlainTextEdit_QTextCursor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_textCursor0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_textCursor_QTextCursor_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toPlainText0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_toPlainText_string_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_inputMethodQuery_QVariant_QPlainTextEdit_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_blockBoundingGeometry0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_blockBoundingGeometry_QRectF_QPlainTextEdit_QTextBlock(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_blockBoundingRect0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_blockBoundingRect_QRectF_QPlainTextEdit_QTextBlock(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_canInsertFromMimeData0, bool)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_canInsertFromMimeData_bool_QPlainTextEdit_QMimeData(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contentOffset0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_contentOffset_QPointF_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_createMimeDataFromSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_createMimeDataFromSelection_QMimeData_QPlainTextEdit(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_firstVisibleBlock0, Pointer)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_firstVisibleBlock_QTextBlock_QPlainTextEdit(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insertFromMimeData0, void)
    {
        qt_QPlainTextEdit_insertFromMimeData_void_QPlainTextEdit_QMimeData(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QPlainTextEdit_changeEvent_void_QPlainTextEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QPlainTextEdit_contextMenuEvent_void_QPlainTextEdit_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QPlainTextEdit_dragEnterEvent_void_QPlainTextEdit_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QPlainTextEdit_dragLeaveEvent_void_QPlainTextEdit_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QPlainTextEdit_dragMoveEvent_void_QPlainTextEdit_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QPlainTextEdit_dropEvent_void_QPlainTextEdit_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QPlainTextEdit_focusInEvent_void_QPlainTextEdit_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(
            qt_QPlainTextEdit_focusNextPrevChild_bool_QPlainTextEdit_bool(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QPlainTextEdit_focusOutEvent_void_QPlainTextEdit_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QPlainTextEdit_keyPressEvent_void_QPlainTextEdit_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QPlainTextEdit_keyReleaseEvent_void_QPlainTextEdit_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QPlainTextEdit_mouseDoubleClickEvent_void_QPlainTextEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QPlainTextEdit_mouseMoveEvent_void_QPlainTextEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QPlainTextEdit_mousePressEvent_void_QPlainTextEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QPlainTextEdit_mouseReleaseEvent_void_QPlainTextEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QPlainTextEdit_paintEvent_void_QPlainTextEdit_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QPlainTextEdit_resizeEvent_void_QPlainTextEdit_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QPlainTextEdit_scrollContentsBy_void_QPlainTextEdit_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QPlainTextEdit_showEvent_void_QPlainTextEdit_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QPlainTextEdit_wheelEvent_void_QPlainTextEdit_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setupViewport0, void)
    {
        qt_QPlainTextEdit_setupViewport_void_QPlainTextEdit_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_minimumSizeHint_QSize_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_sizeHint_QSize_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(qt_QPlainTextEdit_viewportEvent_bool_QPlainTextEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QPlainTextEdit_viewportSizeHint_QSize_QPlainTextEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QPlainTextEdit_event_bool_QPlainTextEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QPlainTextEditType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QPlainTextEdit_QPlainTextEdit_QObject, Return,
                                ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QPlainTextEdit", _n_QPlainTextEdit0, None, Compiled,
                qt_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QWidget,
                Return, "qt.QPlainTextEdit", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "QPlainTextEdit", _n_QPlainTextEdit1, None, Compiled,
                qt_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_QPlainTextEdit_string_QWidget,
                Return, "qt.QPlainTextEdit", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "text", "string"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "anchorAt", _n_anchorAt0, None, Compiled,
                qt_QPlainTextEdit_anchorAt_string_QPlainTextEdit_QPoint, Return,
                "string", Parameters, new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "pos", "qt.QPoint"), End),
            // PROP: backgroundVisible (bool; QPlainTextEdit this)
            // PROP: blockCount (int; QPlainTextEdit this)
            new Function(c, "canPaste", _n_canPaste0, None, Compiled,
                         qt_QPlainTextEdit_canPaste_bool_QPlainTextEdit, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QPlainTextEdit"), End),
            // PROP: centerOnScroll (bool; QPlainTextEdit this)
            new Function(
                c, "createStandardContextMenu", _n_createStandardContextMenu0,
                None, Compiled,
                qt_QPlainTextEdit_createStandardContextMenu_QMenu_QPlainTextEdit,
                Return, "qt.QMenu", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            new Function(
                c, "createStandardContextMenu", _n_createStandardContextMenu1,
                None, Compiled,
                qt_QPlainTextEdit_createStandardContextMenu_QMenu_QPlainTextEdit_QPoint,
                Return, "qt.QMenu", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "position", "qt.QPoint"), End),
            // MISSING: currentCharFormat ("QTextCharFormat"; QPlainTextEdit
            // this)
            new Function(
                c, "cursorForPosition", _n_cursorForPosition0, None, Compiled,
                qt_QPlainTextEdit_cursorForPosition_QTextCursor_QPlainTextEdit_QPoint,
                Return, "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "pos", "qt.QPoint"), End),
            new Function(
                c, "cursorRect", _n_cursorRect0, None, Compiled,
                qt_QPlainTextEdit_cursorRect_QRect_QPlainTextEdit_QTextCursor,
                Return, "qt.QRect", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "cursor", "qt.QTextCursor"), End),
            new Function(c, "cursorRect", _n_cursorRect1, None, Compiled,
                         qt_QPlainTextEdit_cursorRect_QRect_QPlainTextEdit,
                         Return, "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QPlainTextEdit"), End),
            // PROP: cursorWidth (int; QPlainTextEdit this)
            new Function(
                c, "document", _n_document0, None, Compiled,
                qt_QPlainTextEdit_document_QTextDocument_QPlainTextEdit, Return,
                "qt.QTextDocument", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            // PROP: documentTitle (string; QPlainTextEdit this)
            new Function(
                c, "ensureCursorVisible", _n_ensureCursorVisible0, None,
                Compiled,
                qt_QPlainTextEdit_ensureCursorVisible_void_QPlainTextEdit,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            new Function(c, "find", _n_find0, None, Compiled,
                         qt_QPlainTextEdit_find_bool_QPlainTextEdit_string_int,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QPlainTextEdit"),
                         new Param(c, "exp", "string"),
                         new Param(c, "options", "int",
                                   Value((int)QTextDocument::FindFlags())),
                         End),
            new Function(c, "find", _n_find1, None, Compiled,
                         qt_QPlainTextEdit_find_bool_QPlainTextEdit_QRegExp_int,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QPlainTextEdit"),
                         new Param(c, "exp", "qt.QRegExp"),
                         new Param(c, "options", "int",
                                   Value((int)QTextDocument::FindFlags())),
                         End),
            // PROP: isReadOnly (bool; QPlainTextEdit this)
            // PROP: isUndoRedoEnabled (bool; QPlainTextEdit this)
            // PROP: lineWrapMode (flags QPlainTextEdit::LineWrapMode;
            // QPlainTextEdit this)
            _func[0] = new MemberFunction(
                c, "loadResource", _n_loadResource0, None, Compiled,
                qt_QPlainTextEdit_loadResource_QVariant_QPlainTextEdit_int_QUrl,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "type", "int"), new Param(c, "name", "qt.QUrl"),
                End),
            // PROP: maximumBlockCount (int; QPlainTextEdit this)
            // MISSING: mergeCurrentCharFormat (void; QPlainTextEdit this,
            // "const QTextCharFormat &" modifier)
            new Function(
                c, "moveCursor", _n_moveCursor0, None, Compiled,
                qt_QPlainTextEdit_moveCursor_void_QPlainTextEdit_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "operation", "int"),
                new Param(c, "mode", "int",
                          Value((int)QTextCursor::MoveAnchor)),
                End),
            // PROP: overwriteMode (bool; QPlainTextEdit this)
            // PROP: placeholderText (string; QPlainTextEdit this)
            // MISSING: print (void; QPlainTextEdit this, "QPagedPaintDevice *"
            // printer) PROP: setBackgroundVisible (void; QPlainTextEdit this,
            // bool visible) PROP: setCenterOnScroll (void; QPlainTextEdit this,
            // bool enabled) MISSING: setCurrentCharFormat (void; QPlainTextEdit
            // this, "const QTextCharFormat &" format) PROP: setCursorWidth
            // (void; QPlainTextEdit this, int width)
            new Function(
                c, "setDocument", _n_setDocument0, None, Compiled,
                qt_QPlainTextEdit_setDocument_void_QPlainTextEdit_QTextDocument,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "document", "qt.QTextDocument"), End),
            // PROP: setDocumentTitle (void; QPlainTextEdit this, string title)
            // PROP: setLineWrapMode (void; QPlainTextEdit this, flags
            // QPlainTextEdit::LineWrapMode mode) PROP: setMaximumBlockCount
            // (void; QPlainTextEdit this, int maximum) PROP: setOverwriteMode
            // (void; QPlainTextEdit this, bool overwrite) PROP:
            // setPlaceholderText (void; QPlainTextEdit this, string
            // placeholderText) PROP: setReadOnly (void; QPlainTextEdit this,
            // bool ro) PROP: setTabChangesFocus (void; QPlainTextEdit this,
            // bool b) PROP: setTabStopWidth (void; QPlainTextEdit this, int
            // width)
            new Function(
                c, "setTextCursor", _n_setTextCursor0, None, Compiled,
                qt_QPlainTextEdit_setTextCursor_void_QPlainTextEdit_QTextCursor,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "cursor", "qt.QTextCursor"), End),
            // PROP: setTextInteractionFlags (void; QPlainTextEdit this, flags
            // Qt::TextInteractionFlags flags) PROP: setUndoRedoEnabled (void;
            // QPlainTextEdit this, bool enable) PROP: setWordWrapMode (void;
            // QPlainTextEdit this, flags QTextOption::WrapMode policy) PROP:
            // tabChangesFocus (bool; QPlainTextEdit this) PROP: tabStopWidth
            // (int; QPlainTextEdit this)
            new Function(
                c, "textCursor", _n_textCursor0, None, Compiled,
                qt_QPlainTextEdit_textCursor_QTextCursor_QPlainTextEdit, Return,
                "qt.QTextCursor", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            // PROP: textInteractionFlags (flags Qt::TextInteractionFlags;
            // QPlainTextEdit this)
            new Function(c, "toPlainText", _n_toPlainText0, None, Compiled,
                         qt_QPlainTextEdit_toPlainText_string_QPlainTextEdit,
                         Return, "string", Parameters,
                         new Param(c, "this", "qt.QPlainTextEdit"), End),
            // PROP: wordWrapMode (flags QTextOption::WrapMode; QPlainTextEdit
            // this)
            _func[1] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QPlainTextEdit_inputMethodQuery_QVariant_QPlainTextEdit_int,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "property", "int"), End),
            new Function(
                c, "blockBoundingGeometry", _n_blockBoundingGeometry0, None,
                Compiled,
                qt_QPlainTextEdit_blockBoundingGeometry_QRectF_QPlainTextEdit_QTextBlock,
                Return, "qt.QRectF", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "block", "qt.QTextBlock"), End),
            new Function(
                c, "blockBoundingRect", _n_blockBoundingRect0, None, Compiled,
                qt_QPlainTextEdit_blockBoundingRect_QRectF_QPlainTextEdit_QTextBlock,
                Return, "qt.QRectF", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "block", "qt.QTextBlock"), End),
            _func[2] = new MemberFunction(
                c, "canInsertFromMimeData", _n_canInsertFromMimeData0, None,
                Compiled,
                qt_QPlainTextEdit_canInsertFromMimeData_bool_QPlainTextEdit_QMimeData,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "source", "qt.QMimeData"), End),
            new Function(c, "contentOffset", _n_contentOffset0, None, Compiled,
                         qt_QPlainTextEdit_contentOffset_QPointF_QPlainTextEdit,
                         Return, "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QPlainTextEdit"), End),
            _func[3] = new MemberFunction(
                c, "createMimeDataFromSelection",
                _n_createMimeDataFromSelection0, None, Compiled,
                qt_QPlainTextEdit_createMimeDataFromSelection_QMimeData_QPlainTextEdit,
                Return, "qt.QMimeData", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            new Function(
                c, "firstVisibleBlock", _n_firstVisibleBlock0, None, Compiled,
                qt_QPlainTextEdit_firstVisibleBlock_QTextBlock_QPlainTextEdit,
                Return, "qt.QTextBlock", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            _func[4] = new MemberFunction(
                c, "insertFromMimeData", _n_insertFromMimeData0, None, Compiled,
                qt_QPlainTextEdit_insertFromMimeData_void_QPlainTextEdit_QMimeData,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "source", "qt.QMimeData"), End),
            _func[5] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QPlainTextEdit_changeEvent_void_QPlainTextEdit_QEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[6] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QPlainTextEdit_contextMenuEvent_void_QPlainTextEdit_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[7] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QPlainTextEdit_dragEnterEvent_void_QPlainTextEdit_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QDragEnterEvent"), End),
            _func[8] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QPlainTextEdit_dragLeaveEvent_void_QPlainTextEdit_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QDragLeaveEvent"), End),
            _func[9] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QPlainTextEdit_dragMoveEvent_void_QPlainTextEdit_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QDragMoveEvent"), End),
            _func[10] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QPlainTextEdit_dropEvent_void_QPlainTextEdit_QDropEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QDropEvent"), End),
            _func[11] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QPlainTextEdit_focusInEvent_void_QPlainTextEdit_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            _func[12] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QPlainTextEdit_focusNextPrevChild_bool_QPlainTextEdit_bool,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "next", "bool"), End),
            _func[13] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QPlainTextEdit_focusOutEvent_void_QPlainTextEdit_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QPlainTextEdit this,
            // "QInputMethodEvent *" e) // protected
            _func[14] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QPlainTextEdit_keyPressEvent_void_QPlainTextEdit_QKeyEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[15] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QPlainTextEdit_keyReleaseEvent_void_QPlainTextEdit_QKeyEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[16] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QPlainTextEdit_mouseDoubleClickEvent_void_QPlainTextEdit_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[17] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QPlainTextEdit_mouseMoveEvent_void_QPlainTextEdit_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[18] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QPlainTextEdit_mousePressEvent_void_QPlainTextEdit_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[19] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QPlainTextEdit_mouseReleaseEvent_void_QPlainTextEdit_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[20] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QPlainTextEdit_paintEvent_void_QPlainTextEdit_QPaintEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QPaintEvent"), End),
            _func[21] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QPlainTextEdit_resizeEvent_void_QPlainTextEdit_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QResizeEvent"), End),
            _func[22] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QPlainTextEdit_scrollContentsBy_void_QPlainTextEdit_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            _func[23] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QPlainTextEdit_showEvent_void_QPlainTextEdit_QShowEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "_p13", "qt.QShowEvent"), End),
            _func[24] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QPlainTextEdit_wheelEvent_void_QPlainTextEdit_QWheelEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            _func[25] = new MemberFunction(
                c, "setupViewport", _n_setupViewport0, None, Compiled,
                qt_QPlainTextEdit_setupViewport_void_QPlainTextEdit_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "viewport", "qt.QWidget"), End),
            _func[26] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QPlainTextEdit_minimumSizeHint_QSize_QPlainTextEdit, Return,
                "qt.QSize", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            _func[27] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QPlainTextEdit_sizeHint_QSize_QPlainTextEdit, Return,
                "qt.QSize", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            _func[28] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QPlainTextEdit_viewportEvent_bool_QPlainTextEdit_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[29] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QPlainTextEdit_viewportSizeHint_QSize_QPlainTextEdit, Return,
                "qt.QSize", Parameters,
                new Param(c, "this", "qt.QPlainTextEdit"), End),
            _func[30] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QPlainTextEdit_event_bool_QPlainTextEdit_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QPlainTextEdit"),
                new Param(c, "event_", "qt.QEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QPlainTextEdit::staticMetaObject, propExclusions);
    }

} // namespace Mu
