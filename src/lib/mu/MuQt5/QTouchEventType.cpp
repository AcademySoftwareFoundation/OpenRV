//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTouchEventType.h>
#include <QtGui/QtGui>
#include <QtSvg/QtSvg>
#include <QtWebKit/QtWebKit>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QTouchEventType::QTouchEventType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QTouchEventType::~QTouchEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    int qt_QTouchEvent_deviceType_int_QTouchEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTouchEvent* arg0 = getqpointer<QTouchEventType>(param_this);
        return arg0->deviceType();
    }

    int qt_QTouchEvent_touchPointStates_int_QTouchEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTouchEvent* arg0 = getqpointer<QTouchEventType>(param_this);
        return arg0->touchPointStates();
    }

    int qt_QTouchEvent_touchPoints_int_QTouchEvent(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTouchEvent* arg0 = getqpointer<QTouchEventType>(param_this);
        return makeqpointerlist<QTouchEvent::TouchPoiType>(
            c, arg0->touchPoints(), "qt.QTouchEvent::TouchPoi");
    }

    Pointer qt_QTouchEvent_widget_QWidget_QTouchEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTouchEvent* arg0 = getqpointer<QTouchEventType>(param_this);
        return makeinstance(c, arg0->widget(), "qt.QWidget");
    }

    static NODE_IMPLEMENTATION(_n_deviceType0, int)
    {
        NODE_RETURN(qt_QTouchEvent_deviceType_int_QTouchEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_touchPointStates0, int)
    {
        NODE_RETURN(qt_QTouchEvent_touchPointStates_int_QTouchEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_touchPoints0, int)
    {
        NODE_RETURN(qt_QTouchEvent_touchPoints_int_QTouchEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_widget0, Pointer)
    {
        NODE_RETURN(qt_QTouchEvent_widget_QWidget_QTouchEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QTouchEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(new Alias(c, "DeviceType", "int"),
                   new SymbolicConstant(c, "TouchScreen", "int",
                                        Value(int(QTouchEvent::TouchScreen))),
                   new SymbolicConstant(c, "TouchPad", "int",
                                        Value(int(QTouchEvent::TouchPad))),
                   EndArguments);
        addSymbols(
            // enums
            // member functions
            // new Function(c, "QTouchEvent", _n_QTouchEvent0, None, Compiled,
            // qt_QTouchEvent_QTouchEvent_QTouchEvent_QTouchEvent_int_int_int_int_int,
            // Return, "qt.QTouchEvent", Parameters, new Param(c, "this",
            // "qt.QTouchEvent"), new Param(c, "eventType", "int"), new Param(c,
            // "deviceType", "int"), new Param(c, "modifiers", "int"), new
            // Param(c, "touchPointStates", "int"), new Param(c, "touchPoints",
            // "int"), End),
            new Function(c, "deviceType", _n_deviceType0, None, Compiled,
                         qt_QTouchEvent_deviceType_int_QTouchEvent, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTouchEvent"), End),
            new Function(
                c, "touchPointStates", _n_touchPointStates0, None, Compiled,
                qt_QTouchEvent_touchPointStates_int_QTouchEvent, Return, "int",
                Parameters, new Param(c, "this", "qt.QTouchEvent"), End),
            new Function(c, "touchPoints", _n_touchPoints0, None, Compiled,
                         qt_QTouchEvent_touchPoints_int_QTouchEvent, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QTouchEvent"), End),
            new Function(c, "widget", _n_widget0, None, Compiled,
                         qt_QTouchEvent_widget_QWidget_QTouchEvent, Return,
                         "qt.QWidget", Parameters,
                         new Param(c, "this", "qt.QTouchEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
    }

} // namespace Mu
