//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QFormLayoutType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QLayoutItemType.h>
#include <MuQt5/QLayoutType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QFormLayout::~MuQt_QFormLayout()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QFormLayout::MuQt_QFormLayout(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent)
        : QFormLayout(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QFormLayoutType>(
            c->internName("qt.QFormLayout"));
    }

    void MuQt_QFormLayout::addItem(QLayoutItem* item)
    {
        if (!_env)
        {
            QFormLayout::addItem(item);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makelayoutitem<QLayoutItemType>(c, item, "qt.QLayoutItem"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFormLayout::addItem(item);
        }
    }

    int MuQt_QFormLayout::count() const
    {
        if (!_env)
            return QFormLayout::count();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QFormLayout::count();
        }
    }

    Qt::Orientations MuQt_QFormLayout::expandingDirections() const
    {
        if (!_env)
            return QFormLayout::expandingDirections();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (Qt::Orientations)(rval._int);
        }
        else
        {
            return QFormLayout::expandingDirections();
        }
    }

    bool MuQt_QFormLayout::hasHeightForWidth() const
    {
        if (!_env)
            return QFormLayout::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFormLayout::hasHeightForWidth();
        }
    }

    int MuQt_QFormLayout::heightForWidth(int width) const
    {
        if (!_env)
            return QFormLayout::heightForWidth(width);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(width);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QFormLayout::heightForWidth(width);
        }
    }

    void MuQt_QFormLayout::invalidate()
    {
        if (!_env)
        {
            QFormLayout::invalidate();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFormLayout::invalidate();
        }
    }

    QLayoutItem* MuQt_QFormLayout::itemAt(int index) const
    {
        if (!_env)
            return QFormLayout::itemAt(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
            return layoutitem<QLayoutItem>(rval._Pointer);
        }
        else
        {
            return QFormLayout::itemAt(index);
        }
    }

    QSize MuQt_QFormLayout::minimumSize() const
    {
        if (!_env)
            return QFormLayout::minimumSize();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFormLayout::minimumSize();
        }
    }

    void MuQt_QFormLayout::setGeometry(const QRect& rect)
    {
        if (!_env)
        {
            QFormLayout::setGeometry(rect);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFormLayout::setGeometry(rect);
        }
    }

    QSize MuQt_QFormLayout::sizeHint() const
    {
        if (!_env)
            return QFormLayout::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFormLayout::sizeHint();
        }
    }

    QLayoutItem* MuQt_QFormLayout::takeAt(int index)
    {
        if (!_env)
            return QFormLayout::takeAt(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            Value rval = _env->call(F, args);
            return layoutitem<QLayoutItem>(rval._Pointer);
        }
        else
        {
            return QFormLayout::takeAt(index);
        }
    }

    int MuQt_QFormLayout::indexOf(QWidget* widget) const
    {
        if (!_env)
            return QFormLayout::indexOf(widget);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QWidgetType>(c, widget, "qt.QWidget"));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QFormLayout::indexOf(widget);
        }
    }

    QSizePolicy::ControlTypes MuQt_QFormLayout::controlTypes() const
    {
        if (!_env)
            return QFormLayout::controlTypes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (QSizePolicy::ControlTypes)(rval._int);
        }
        else
        {
            return QFormLayout::controlTypes();
        }
    }

    QRect MuQt_QFormLayout::geometry() const
    {
        if (!_env)
            return QFormLayout::geometry();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QRectType>(rval._Pointer);
        }
        else
        {
            return QFormLayout::geometry();
        }
    }

    bool MuQt_QFormLayout::isEmpty() const
    {
        if (!_env)
            return QFormLayout::isEmpty();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFormLayout::isEmpty();
        }
    }

    QLayout* MuQt_QFormLayout::layout()
    {
        if (!_env)
            return QFormLayout::layout();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return object<QLayout>(rval._Pointer);
        }
        else
        {
            return QFormLayout::layout();
        }
    }

    QSize MuQt_QFormLayout::maximumSize() const
    {
        if (!_env)
            return QFormLayout::maximumSize();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFormLayout::maximumSize();
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QFormLayoutType::QFormLayoutType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QFormLayoutType::~QFormLayoutType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QFormLayout_QFormLayout_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QFormLayout* w = object<QFormLayout>(widget))
        {
            QFormLayoutType* type =
                c->findSymbolOfTypeByQualifiedName<QFormLayoutType>(
                    c->internName("qt.QFormLayout"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QFormLayout_QFormLayout_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QFormLayout_QFormLayout_QFormLayout_QFormLayout_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QFormLayout(param_this,
                                       NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QFormLayout_addRow_void_QFormLayout_QWidget_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_label,
        Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_label);
        QWidget* arg2 = object<QWidget>(param_field);
        arg0->addRow(arg1, arg2);
    }

    void qt_QFormLayout_addRow_void_QFormLayout_QWidget_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_label,
        Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_label);
        QLayout* arg2 = object<QLayout>(param_field);
        arg0->addRow(arg1, arg2);
    }

    void qt_QFormLayout_addRow_void_QFormLayout_string_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_labelText,
        Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        const QString arg1 = qstring(param_labelText);
        QWidget* arg2 = object<QWidget>(param_field);
        arg0->addRow(arg1, arg2);
    }

    void qt_QFormLayout_addRow_void_QFormLayout_string_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_labelText,
        Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        const QString arg1 = qstring(param_labelText);
        QLayout* arg2 = object<QLayout>(param_field);
        arg0->addRow(arg1, arg2);
    }

    void qt_QFormLayout_addRow_void_QFormLayout_QWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        arg0->addRow(arg1);
    }

    void qt_QFormLayout_addRow_void_QFormLayout_QLayout(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_layout)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QLayout* arg1 = object<QLayout>(param_layout);
        arg0->addRow(arg1);
    }

    void qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_label, Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QWidget* arg2 = object<QWidget>(param_label);
        QWidget* arg3 = object<QWidget>(param_field);
        arg0->insertRow(arg1, arg2, arg3);
    }

    void qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_label, Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QWidget* arg2 = object<QWidget>(param_label);
        QLayout* arg3 = object<QLayout>(param_field);
        arg0->insertRow(arg1, arg2, arg3);
    }

    void qt_QFormLayout_insertRow_void_QFormLayout_int_string_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_labelText, Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        const QString arg2 = qstring(param_labelText);
        QWidget* arg3 = object<QWidget>(param_field);
        arg0->insertRow(arg1, arg2, arg3);
    }

    void qt_QFormLayout_insertRow_void_QFormLayout_int_string_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_labelText, Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        const QString arg2 = qstring(param_labelText);
        QLayout* arg3 = object<QLayout>(param_field);
        arg0->insertRow(arg1, arg2, arg3);
    }

    void qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QWidget* arg2 = object<QWidget>(param_widget);
        arg0->insertRow(arg1, arg2);
    }

    void qt_QFormLayout_insertRow_void_QFormLayout_int_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_layout)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QLayout* arg2 = object<QLayout>(param_layout);
        arg0->insertRow(arg1, arg2);
    }

    Pointer qt_QFormLayout_itemAt_QLayoutItem_QFormLayout_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QFormLayout::ItemRole arg2 = (QFormLayout::ItemRole)(param_role);
        return makelayoutitem<QLayoutItemType>(c, arg0->itemAt(arg1, arg2),
                                               "qt.QLayoutItem");
    }

    Pointer qt_QFormLayout_labelForField_QWidget_QFormLayout_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_field);
        return makeinstance<QWidgetType>(c, arg0->labelForField(arg1),
                                         "qt.QWidget");
    }

    Pointer qt_QFormLayout_labelForField_QWidget_QFormLayout_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_field)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QLayout* arg1 = object<QLayout>(param_field);
        return makeinstance<QWidgetType>(c, arg0->labelForField(arg1),
                                         "qt.QWidget");
    }

    int qt_QFormLayout_rowCount_int_QFormLayout(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return arg0->rowCount();
    }

    void qt_QFormLayout_setItem_void_QFormLayout_int_int_QLayoutItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_role, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QFormLayout::ItemRole arg2 = (QFormLayout::ItemRole)(param_role);
        QLayoutItem* arg3 = layoutitem<QLayoutItem>(param_item);
        arg0->setItem(arg1, arg2, arg3);
    }

    void qt_QFormLayout_setLayout_void_QFormLayout_int_int_QLayout(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_role, Pointer param_layout)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QFormLayout::ItemRole arg2 = (QFormLayout::ItemRole)(param_role);
        QLayout* arg3 = object<QLayout>(param_layout);
        arg0->setLayout(arg1, arg2, arg3);
    }

    void qt_QFormLayout_setSpacing_void_QFormLayout_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_spacing)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_spacing);
        arg0->setSpacing(arg1);
    }

    void qt_QFormLayout_setWidget_void_QFormLayout_int_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_role, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_row);
        QFormLayout::ItemRole arg2 = (QFormLayout::ItemRole)(param_role);
        QWidget* arg3 = object<QWidget>(param_widget);
        arg0->setWidget(arg1, arg2, arg3);
    }

    int qt_QFormLayout_spacing_int_QFormLayout(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return arg0->spacing();
    }

    void qt_QFormLayout_addItem_void_QFormLayout_QLayoutItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QLayoutItem* arg1 = layoutitem<QLayoutItem>(param_item);
        if (isMuQtObject(arg0))
            arg0->QFormLayout::addItem(arg1);
        else
            arg0->addItem(arg1);
    }

    int qt_QFormLayout_count_int_QFormLayout(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0) ? arg0->QFormLayout::count() : arg0->count();
    }

    int
    qt_QFormLayout_expandingDirections_int_QFormLayout(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0)
                   ? int(arg0->QFormLayout::expandingDirections())
                   : int(arg0->expandingDirections());
    }

    bool
    qt_QFormLayout_hasHeightForWidth_bool_QFormLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0) ? arg0->QFormLayout::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QFormLayout_heightForWidth_int_QFormLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_width)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_width);
        return isMuQtObject(arg0) ? arg0->QFormLayout::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    void qt_QFormLayout_invalidate_void_QFormLayout(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        if (isMuQtObject(arg0))
            arg0->QFormLayout::invalidate();
        else
            arg0->invalidate();
    }

    Pointer qt_QFormLayout_itemAt_QLayoutItem_QFormLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_index);
        return isMuQtObject(arg0)
                   ? makelayoutitem<QLayoutItemType>(
                         c, arg0->QFormLayout::itemAt(arg1), "qt.QLayoutItem")
                   : makelayoutitem<QLayoutItemType>(c, arg0->itemAt(arg1),
                                                     "qt.QLayoutItem");
    }

    Pointer
    qt_QFormLayout_minimumSize_QSize_QFormLayout(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QFormLayout::minimumSize(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSize(), "qt.QSize");
    }

    void qt_QFormLayout_setGeometry_void_QFormLayout_QRect(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        if (isMuQtObject(arg0))
            arg0->QFormLayout::setGeometry(arg1);
        else
            arg0->setGeometry(arg1);
    }

    Pointer qt_QFormLayout_sizeHint_QSize_QFormLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QFormLayout::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    Pointer qt_QFormLayout_takeAt_QLayoutItem_QFormLayout_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        int arg1 = (int)(param_index);
        return isMuQtObject(arg0)
                   ? makelayoutitem<QLayoutItemType>(
                         c, arg0->QFormLayout::takeAt(arg1), "qt.QLayoutItem")
                   : makelayoutitem<QLayoutItemType>(c, arg0->takeAt(arg1),
                                                     "qt.QLayoutItem");
    }

    int qt_QFormLayout_indexOf_int_QFormLayout_QWidget(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        return isMuQtObject(arg0) ? arg0->QFormLayout::indexOf(arg1)
                                  : arg0->indexOf(arg1);
    }

    int qt_QFormLayout_controlTypes_int_QFormLayout(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0) ? int(arg0->QFormLayout::controlTypes())
                                  : int(arg0->controlTypes());
    }

    Pointer qt_QFormLayout_geometry_QRect_QFormLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QRectType>(c, arg0->QFormLayout::geometry(),
                                          "qt.QRect")
                   : makeqtype<QRectType>(c, arg0->geometry(), "qt.QRect");
    }

    bool qt_QFormLayout_isEmpty_bool_QFormLayout(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0) ? arg0->QFormLayout::isEmpty()
                                  : arg0->isEmpty();
    }

    Pointer qt_QFormLayout_layout_QLayout_QFormLayout(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeinstance<QLayoutType>(c, arg0->QFormLayout::layout(),
                                               "qt.QLayout")
                   : makeinstance<QLayoutType>(c, arg0->layout(), "qt.QLayout");
    }

    Pointer
    qt_QFormLayout_maximumSize_QSize_QFormLayout(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFormLayout* arg0 = object<QFormLayout>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QFormLayout::maximumSize(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->maximumSize(), "qt.QSize");
    }

    static NODE_IMPLEMENTATION(_n_QFormLayout0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_QFormLayout_QFormLayout_QFormLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addRow0, void)
    {
        qt_QFormLayout_addRow_void_QFormLayout_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addRow1, void)
    {
        qt_QFormLayout_addRow_void_QFormLayout_QWidget_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addRow2, void)
    {
        qt_QFormLayout_addRow_void_QFormLayout_string_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addRow3, void)
    {
        qt_QFormLayout_addRow_void_QFormLayout_string_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addRow4, void)
    {
        qt_QFormLayout_addRow_void_QFormLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addRow5, void)
    {
        qt_QFormLayout_addRow_void_QFormLayout_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertRow0, void)
    {
        qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertRow1, void)
    {
        qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertRow2, void)
    {
        qt_QFormLayout_insertRow_void_QFormLayout_int_string_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertRow3, void)
    {
        qt_QFormLayout_insertRow_void_QFormLayout_int_string_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertRow4, void)
    {
        qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertRow5, void)
    {
        qt_QFormLayout_insertRow_void_QFormLayout_int_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_itemAt0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_itemAt_QLayoutItem_QFormLayout_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_labelForField0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_labelForField_QWidget_QFormLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_labelForField1, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_labelForField_QWidget_QFormLayout_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rowCount0, int)
    {
        NODE_RETURN(qt_QFormLayout_rowCount_int_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setItem0, void)
    {
        qt_QFormLayout_setItem_void_QFormLayout_int_int_QLayoutItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setLayout0, void)
    {
        qt_QFormLayout_setLayout_void_QFormLayout_int_int_QLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSpacing0, void)
    {
        qt_QFormLayout_setSpacing_void_QFormLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setWidget0, void)
    {
        qt_QFormLayout_setWidget_void_QFormLayout_int_int_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_spacing0, int)
    {
        NODE_RETURN(qt_QFormLayout_spacing_int_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addItem0, void)
    {
        qt_QFormLayout_addItem_void_QFormLayout_QLayoutItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_count0, int)
    {
        NODE_RETURN(qt_QFormLayout_count_int_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_expandingDirections0, int)
    {
        NODE_RETURN(qt_QFormLayout_expandingDirections_int_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QFormLayout_hasHeightForWidth_bool_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QFormLayout_heightForWidth_int_QFormLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_invalidate0, void)
    {
        qt_QFormLayout_invalidate_void_QFormLayout(NODE_THREAD,
                                                   NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_itemAt1, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_itemAt_QLayoutItem_QFormLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSize0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_minimumSize_QSize_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setGeometry0, void)
    {
        qt_QFormLayout_setGeometry_void_QFormLayout_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_sizeHint_QSize_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_takeAt0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_takeAt_QLayoutItem_QFormLayout_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_indexOf0, int)
    {
        NODE_RETURN(qt_QFormLayout_indexOf_int_QFormLayout_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_controlTypes0, int)
    {
        NODE_RETURN(qt_QFormLayout_controlTypes_int_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_geometry0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_geometry_QRect_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
    {
        NODE_RETURN(qt_QFormLayout_isEmpty_bool_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_layout0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_layout_QLayout_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_maximumSize0, Pointer)
    {
        NODE_RETURN(qt_QFormLayout_maximumSize_QSize_QFormLayout(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QFormLayoutType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QFormLayout_QFormLayout_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QFormLayout", _n_QFormLayout0, None, Compiled,
                qt_QFormLayout_QFormLayout_QFormLayout_QFormLayout_QWidget,
                Return, "qt.QFormLayout", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "addRow", _n_addRow0, None, Compiled,
                         qt_QFormLayout_addRow_void_QFormLayout_QWidget_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "label", "qt.QWidget"),
                         new Param(c, "field", "qt.QWidget"), End),
            new Function(c, "addRow", _n_addRow1, None, Compiled,
                         qt_QFormLayout_addRow_void_QFormLayout_QWidget_QLayout,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "label", "qt.QWidget"),
                         new Param(c, "field", "qt.QLayout"), End),
            new Function(c, "addRow", _n_addRow2, None, Compiled,
                         qt_QFormLayout_addRow_void_QFormLayout_string_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "labelText", "string"),
                         new Param(c, "field", "qt.QWidget"), End),
            new Function(c, "addRow", _n_addRow3, None, Compiled,
                         qt_QFormLayout_addRow_void_QFormLayout_string_QLayout,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "labelText", "string"),
                         new Param(c, "field", "qt.QLayout"), End),
            new Function(c, "addRow", _n_addRow4, None, Compiled,
                         qt_QFormLayout_addRow_void_QFormLayout_QWidget, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "widget", "qt.QWidget"), End),
            new Function(c, "addRow", _n_addRow5, None, Compiled,
                         qt_QFormLayout_addRow_void_QFormLayout_QLayout, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "layout", "qt.QLayout"), End),
            // PROP: fieldGrowthPolicy (flags QFormLayout::FieldGrowthPolicy;
            // QFormLayout this) PROP: formAlignment (flags Qt::Alignment;
            // QFormLayout this) MISSING: getItemPosition (void; QFormLayout
            // this, int index, "int *" rowPtr, "ItemRole *" rolePtr) MISSING:
            // getLayoutPosition (void; QFormLayout this, QLayout layout, "int
            // *" rowPtr, "ItemRole *" rolePtr) MISSING: getWidgetPosition
            // (void; QFormLayout this, QWidget widget, "int *" rowPtr,
            // "ItemRole *" rolePtr) PROP: horizontalSpacing (int; QFormLayout
            // this)
            new Function(
                c, "insertRow", _n_insertRow0, None, Compiled,
                qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "label", "qt.QWidget"),
                new Param(c, "field", "qt.QWidget"), End),
            new Function(
                c, "insertRow", _n_insertRow1, None, Compiled,
                qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget_QLayout,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "label", "qt.QWidget"),
                new Param(c, "field", "qt.QLayout"), End),
            new Function(
                c, "insertRow", _n_insertRow2, None, Compiled,
                qt_QFormLayout_insertRow_void_QFormLayout_int_string_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "labelText", "string"),
                new Param(c, "field", "qt.QWidget"), End),
            new Function(
                c, "insertRow", _n_insertRow3, None, Compiled,
                qt_QFormLayout_insertRow_void_QFormLayout_int_string_QLayout,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "labelText", "string"),
                new Param(c, "field", "qt.QLayout"), End),
            new Function(c, "insertRow", _n_insertRow4, None, Compiled,
                         qt_QFormLayout_insertRow_void_QFormLayout_int_QWidget,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "row", "int"),
                         new Param(c, "widget", "qt.QWidget"), End),
            new Function(c, "insertRow", _n_insertRow5, None, Compiled,
                         qt_QFormLayout_insertRow_void_QFormLayout_int_QLayout,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "row", "int"),
                         new Param(c, "layout", "qt.QLayout"), End),
            new Function(c, "itemAt", _n_itemAt0, None, Compiled,
                         qt_QFormLayout_itemAt_QLayoutItem_QFormLayout_int_int,
                         Return, "qt.QLayoutItem", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "row", "int"),
                         new Param(c, "role", "int"), End),
            // PROP: labelAlignment (flags Qt::Alignment; QFormLayout this)
            new Function(
                c, "labelForField", _n_labelForField0, None, Compiled,
                qt_QFormLayout_labelForField_QWidget_QFormLayout_QWidget,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "field", "qt.QWidget"), End),
            new Function(
                c, "labelForField", _n_labelForField1, None, Compiled,
                qt_QFormLayout_labelForField_QWidget_QFormLayout_QLayout,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "field", "qt.QLayout"), End),
            new Function(c, "rowCount", _n_rowCount0, None, Compiled,
                         qt_QFormLayout_rowCount_int_QFormLayout, Return, "int",
                         Parameters, new Param(c, "this", "qt.QFormLayout"),
                         End),
            // PROP: rowWrapPolicy (flags QFormLayout::RowWrapPolicy;
            // QFormLayout this) PROP: setFieldGrowthPolicy (void; QFormLayout
            // this, flags QFormLayout::FieldGrowthPolicy policy) PROP:
            // setFormAlignment (void; QFormLayout this, flags Qt::Alignment
            // alignment) PROP: setHorizontalSpacing (void; QFormLayout this,
            // int spacing)
            new Function(
                c, "setItem", _n_setItem0, None, Compiled,
                qt_QFormLayout_setItem_void_QFormLayout_int_int_QLayoutItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "role", "int"),
                new Param(c, "item", "qt.QLayoutItem"), End),
            // PROP: setLabelAlignment (void; QFormLayout this, flags
            // Qt::Alignment alignment)
            new Function(
                c, "setLayout", _n_setLayout0, None, Compiled,
                qt_QFormLayout_setLayout_void_QFormLayout_int_int_QLayout,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "role", "int"),
                new Param(c, "layout", "qt.QLayout"), End),
            // PROP: setRowWrapPolicy (void; QFormLayout this, flags
            // QFormLayout::RowWrapPolicy policy)
            new Function(c, "setSpacing", _n_setSpacing0, None, Compiled,
                         qt_QFormLayout_setSpacing_void_QFormLayout_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QFormLayout"),
                         new Param(c, "spacing", "int"), End),
            // PROP: setVerticalSpacing (void; QFormLayout this, int spacing)
            new Function(
                c, "setWidget", _n_setWidget0, None, Compiled,
                qt_QFormLayout_setWidget_void_QFormLayout_int_int_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "row", "int"), new Param(c, "role", "int"),
                new Param(c, "widget", "qt.QWidget"), End),
            new Function(c, "spacing", _n_spacing0, None, Compiled,
                         qt_QFormLayout_spacing_int_QFormLayout, Return, "int",
                         Parameters, new Param(c, "this", "qt.QFormLayout"),
                         End),
            // PROP: verticalSpacing (int; QFormLayout this)
            _func[0] = new MemberFunction(
                c, "addItem", _n_addItem0, None, Compiled,
                qt_QFormLayout_addItem_void_QFormLayout_QLayoutItem, Return,
                "void", Parameters, new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "item", "qt.QLayoutItem"), End),
            _func[1] = new MemberFunction(
                c, "count", _n_count0, None, Compiled,
                qt_QFormLayout_count_int_QFormLayout, Return, "int", Parameters,
                new Param(c, "this", "qt.QFormLayout"), End),
            _func[2] = new MemberFunction(
                c, "expandingDirections", _n_expandingDirections0, None,
                Compiled, qt_QFormLayout_expandingDirections_int_QFormLayout,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QFormLayout"), End),
            _func[3] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QFormLayout_hasHeightForWidth_bool_QFormLayout, Return,
                "bool", Parameters, new Param(c, "this", "qt.QFormLayout"),
                End),
            _func[4] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QFormLayout_heightForWidth_int_QFormLayout_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "width", "int"), End),
            _func[5] = new MemberFunction(
                c, "invalidate", _n_invalidate0, None, Compiled,
                qt_QFormLayout_invalidate_void_QFormLayout, Return, "void",
                Parameters, new Param(c, "this", "qt.QFormLayout"), End),
            _func[6] = new MemberFunction(
                c, "itemAt", _n_itemAt1, None, Compiled,
                qt_QFormLayout_itemAt_QLayoutItem_QFormLayout_int, Return,
                "qt.QLayoutItem", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "index", "int"), End),
            _func[7] = new MemberFunction(
                c, "minimumSize", _n_minimumSize0, None, Compiled,
                qt_QFormLayout_minimumSize_QSize_QFormLayout, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QFormLayout"),
                End),
            _func[8] = new MemberFunction(
                c, "setGeometry", _n_setGeometry0, None, Compiled,
                qt_QFormLayout_setGeometry_void_QFormLayout_QRect, Return,
                "void", Parameters, new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "rect", "qt.QRect"), End),
            _func[9] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QFormLayout_sizeHint_QSize_QFormLayout, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QFormLayout"), End),
            _func[10] = new MemberFunction(
                c, "takeAt", _n_takeAt0, None, Compiled,
                qt_QFormLayout_takeAt_QLayoutItem_QFormLayout_int, Return,
                "qt.QLayoutItem", Parameters,
                new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "index", "int"), End),
            _func[11] = new MemberFunction(
                c, "indexOf", _n_indexOf0, None, Compiled,
                qt_QFormLayout_indexOf_int_QFormLayout_QWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QFormLayout"),
                new Param(c, "widget", "qt.QWidget"), End),
            _func[12] = new MemberFunction(
                c, "controlTypes", _n_controlTypes0, None, Compiled,
                qt_QFormLayout_controlTypes_int_QFormLayout, Return, "int",
                Parameters, new Param(c, "this", "qt.QFormLayout"), End),
            _func[13] = new MemberFunction(
                c, "geometry", _n_geometry0, None, Compiled,
                qt_QFormLayout_geometry_QRect_QFormLayout, Return, "qt.QRect",
                Parameters, new Param(c, "this", "qt.QFormLayout"), End),
            _func[14] = new MemberFunction(
                c, "isEmpty", _n_isEmpty0, None, Compiled,
                qt_QFormLayout_isEmpty_bool_QFormLayout, Return, "bool",
                Parameters, new Param(c, "this", "qt.QFormLayout"), End),
            _func[15] = new MemberFunction(
                c, "layout", _n_layout0, None, Compiled,
                qt_QFormLayout_layout_QLayout_QFormLayout, Return, "qt.QLayout",
                Parameters, new Param(c, "this", "qt.QFormLayout"), End),
            _func[16] = new MemberFunction(
                c, "maximumSize", _n_maximumSize0, None, Compiled,
                qt_QFormLayout_maximumSize_QSize_QFormLayout, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QFormLayout"),
                End),
            // MISSING: childEvent (void; QFormLayout this, "QChildEvent *" e)
            // // protected static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QFormLayout::staticMetaObject, propExclusions);
    }

} // namespace Mu
