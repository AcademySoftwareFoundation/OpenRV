//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QIODeviceType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QIODeviceType::QIODeviceType(Context* c, const char* name, Class* super,
                                 Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QIODeviceType::~QIODeviceType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QIODevice_QIODevice_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QIODevice* w = object<QIODevice>(widget))
        {
            QIODeviceType* type =
                c->findSymbolOfTypeByQualifiedName<QIODeviceType>(
                    c->internName("qt.QIODevice"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QIODevice_QIODevice_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    // NO FUNC: CLASS IS ABSTRACT: QIODevice (QIODevice; QIODevice this)
    // NO FUNC: CLASS IS ABSTRACT: QIODevice (QIODevice; QIODevice this, QObject
    // parent)
    bool qt_QIODevice_atEnd_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->atEnd();
    }

    int64 qt_QIODevice_bytesAvailable_int64_QIODevice(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->bytesAvailable();
    }

    int64 qt_QIODevice_bytesToWrite_int64_QIODevice(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->bytesToWrite();
    }

    bool qt_QIODevice_canReadLine_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->canReadLine();
    }

    void qt_QIODevice_close_void_QIODevice(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        arg0->close();
    }

    Pointer qt_QIODevice_errorString_string_QIODevice(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return makestring(c, arg0->errorString());
    }

    bool qt_QIODevice_isOpen_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->isOpen();
    }

    bool qt_QIODevice_isReadable_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->isReadable();
    }

    bool qt_QIODevice_isSequential_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->isSequential();
    }

    bool qt_QIODevice_isTextModeEnabled_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->isTextModeEnabled();
    }

    bool qt_QIODevice_isWritable_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->isWritable();
    }

    bool qt_QIODevice_open_bool_QIODevice_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        QIODevice::OpenMode arg1 = (QIODevice::OpenMode)(param_mode);
        return arg0->open(arg1);
    }

    int qt_QIODevice_openMode_int_QIODevice(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return int(arg0->openMode());
    }

    Pointer qt_QIODevice_peek_QByteArray_QIODevice_int64(
        Mu::Thread& NODE_THREAD, Pointer param_this, int64 param_maxSize)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        qint64 arg1 = (int64)(param_maxSize);
        return makeqtype<QByteArrayType>(c, arg0->peek(arg1), "qt.QByteArray");
    }

    int64 qt_QIODevice_pos_int64_QIODevice(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->pos();
    }

    Pointer qt_QIODevice_read_QByteArray_QIODevice_int64(
        Mu::Thread& NODE_THREAD, Pointer param_this, int64 param_maxSize)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        qint64 arg1 = (int64)(param_maxSize);
        return makeqtype<QByteArrayType>(c, arg0->read(arg1), "qt.QByteArray");
    }

    Pointer qt_QIODevice_readAll_QByteArray_QIODevice(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return makeqtype<QByteArrayType>(c, arg0->readAll(), "qt.QByteArray");
    }

    Pointer qt_QIODevice_readLine_QByteArray_QIODevice_int64(
        Mu::Thread& NODE_THREAD, Pointer param_this, int64 param_maxSize)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        qint64 arg1 = (int64)(param_maxSize);
        return makeqtype<QByteArrayType>(c, arg0->readLine(arg1),
                                         "qt.QByteArray");
    }

    bool qt_QIODevice_reset_bool_QIODevice(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->reset();
    }

    bool qt_QIODevice_seek_bool_QIODevice_int64(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                int64 param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        qint64 arg1 = (int64)(param_pos);
        return arg0->seek(arg1);
    }

    void qt_QIODevice_setTextModeEnabled_void_QIODevice_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_enabled)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        bool arg1 = (bool)(param_enabled);
        arg0->setTextModeEnabled(arg1);
    }

    int64 qt_QIODevice_size_int64_QIODevice(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        return arg0->size();
    }

    bool qt_QIODevice_waitForBytesWritten_bool_QIODevice_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        int arg1 = (int)(param_msecs);
        return arg0->waitForBytesWritten(arg1);
    }

    bool qt_QIODevice_waitForReadyRead_bool_QIODevice_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        int arg1 = (int)(param_msecs);
        return arg0->waitForReadyRead(arg1);
    }

    int64 qt_QIODevice_write_int64_QIODevice_QByteArray(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_byteArray)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_byteArray);
        return arg0->write(arg1);
    }

    bool qt_QIODevice_event_bool_QIODevice_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return arg0->event(arg1);
    }

    bool qt_QIODevice_eventFilter_bool_QIODevice_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QIODevice* arg0 = object<QIODevice>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return arg0->eventFilter(arg1, arg2);
    }

    // NO NODE: CLASS IS ABSTRACT: QIODevice (QIODevice; QIODevice this)
    // NO NODE: CLASS IS ABSTRACT: QIODevice (QIODevice; QIODevice this, QObject
    // parent)
    static NODE_IMPLEMENTATION(_n_atEnd0, bool)
    {
        NODE_RETURN(qt_QIODevice_atEnd_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesAvailable0, int64)
    {
        NODE_RETURN(qt_QIODevice_bytesAvailable_int64_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesToWrite0, int64)
    {
        NODE_RETURN(qt_QIODevice_bytesToWrite_int64_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_canReadLine0, bool)
    {
        NODE_RETURN(qt_QIODevice_canReadLine_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_close0, void)
    {
        qt_QIODevice_close_void_QIODevice(NODE_THREAD,
                                          NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_errorString0, Pointer)
    {
        NODE_RETURN(qt_QIODevice_errorString_string_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isOpen0, bool)
    {
        NODE_RETURN(qt_QIODevice_isOpen_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isReadable0, bool)
    {
        NODE_RETURN(qt_QIODevice_isReadable_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isSequential0, bool)
    {
        NODE_RETURN(qt_QIODevice_isSequential_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isTextModeEnabled0, bool)
    {
        NODE_RETURN(qt_QIODevice_isTextModeEnabled_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isWritable0, bool)
    {
        NODE_RETURN(qt_QIODevice_isWritable_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_open0, bool)
    {
        NODE_RETURN(qt_QIODevice_open_bool_QIODevice_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_openMode0, int)
    {
        NODE_RETURN(qt_QIODevice_openMode_int_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_peek1, Pointer)
    {
        NODE_RETURN(qt_QIODevice_peek_QByteArray_QIODevice_int64(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
    }

    static NODE_IMPLEMENTATION(_n_pos0, int64)
    {
        NODE_RETURN(qt_QIODevice_pos_int64_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_read1, Pointer)
    {
        NODE_RETURN(qt_QIODevice_read_QByteArray_QIODevice_int64(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
    }

    static NODE_IMPLEMENTATION(_n_readAll0, Pointer)
    {
        NODE_RETURN(qt_QIODevice_readAll_QByteArray_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_readLine1, Pointer)
    {
        NODE_RETURN(qt_QIODevice_readLine_QByteArray_QIODevice_int64(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
    }

    static NODE_IMPLEMENTATION(_n_reset0, bool)
    {
        NODE_RETURN(qt_QIODevice_reset_bool_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_seek0, bool)
    {
        NODE_RETURN(qt_QIODevice_seek_bool_QIODevice_int64(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
    }

    static NODE_IMPLEMENTATION(_n_setTextModeEnabled0, void)
    {
        qt_QIODevice_setTextModeEnabled_void_QIODevice_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_size0, int64)
    {
        NODE_RETURN(qt_QIODevice_size_int64_QIODevice(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_waitForBytesWritten0, bool)
    {
        NODE_RETURN(qt_QIODevice_waitForBytesWritten_bool_QIODevice_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForReadyRead0, bool)
    {
        NODE_RETURN(qt_QIODevice_waitForReadyRead_bool_QIODevice_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_write2, int64)
    {
        NODE_RETURN(qt_QIODevice_write_int64_QIODevice_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QIODevice_event_bool_QIODevice_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(qt_QIODevice_eventFilter_bool_QIODevice_QObject_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    void QIODeviceType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QIODevice_QIODevice_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            new Alias(c, "OpenModeFlag", "int"),
            new Alias(c, "OpenMode", "int"),
            new SymbolicConstant(c, "NotOpen", "int",
                                 Value(int(QIODevice::NotOpen))),
            new SymbolicConstant(c, "ReadOnly", "int",
                                 Value(int(QIODevice::ReadOnly))),
            new SymbolicConstant(c, "WriteOnly", "int",
                                 Value(int(QIODevice::WriteOnly))),
            new SymbolicConstant(c, "ReadWrite", "int",
                                 Value(int(QIODevice::ReadWrite))),
            new SymbolicConstant(c, "Append", "int",
                                 Value(int(QIODevice::Append))),
            new SymbolicConstant(c, "Truncate", "int",
                                 Value(int(QIODevice::Truncate))),
            new SymbolicConstant(c, "Text", "int", Value(int(QIODevice::Text))),
            new SymbolicConstant(c, "Unbuffered", "int",
                                 Value(int(QIODevice::Unbuffered))),
            // member functions
            // ABSTRACT CONSTRUCTOR: QIODevice (QIODevice; QIODevice this)
            // ABSTRACT CONSTRUCTOR: QIODevice (QIODevice; QIODevice this,
            // QObject parent)
            new MemberFunction(c, "atEnd", _n_atEnd0, None, Compiled,
                               qt_QIODevice_atEnd_bool_QIODevice, Return,
                               "bool", Parameters,
                               new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(
                c, "bytesAvailable", _n_bytesAvailable0, None, Compiled,
                qt_QIODevice_bytesAvailable_int64_QIODevice, Return, "int64",
                Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(
                c, "bytesToWrite", _n_bytesToWrite0, None, Compiled,
                qt_QIODevice_bytesToWrite_int64_QIODevice, Return, "int64",
                Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(
                c, "canReadLine", _n_canReadLine0, None, Compiled,
                qt_QIODevice_canReadLine_bool_QIODevice, Return, "bool",
                Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(c, "close", _n_close0, None, Compiled,
                               qt_QIODevice_close_void_QIODevice, Return,
                               "void", Parameters,
                               new Param(c, "this", "qt.QIODevice"), End),
            new Function(c, "errorString", _n_errorString0, None, Compiled,
                         qt_QIODevice_errorString_string_QIODevice, Return,
                         "string", Parameters,
                         new Param(c, "this", "qt.QIODevice"), End),
            // MISSING: getChar (bool; QIODevice this, "char *" c)
            new Function(c, "isOpen", _n_isOpen0, None, Compiled,
                         qt_QIODevice_isOpen_bool_QIODevice, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new Function(c, "isReadable", _n_isReadable0, None, Compiled,
                         qt_QIODevice_isReadable_bool_QIODevice, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(
                c, "isSequential", _n_isSequential0, None, Compiled,
                qt_QIODevice_isSequential_bool_QIODevice, Return, "bool",
                Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new Function(
                c, "isTextModeEnabled", _n_isTextModeEnabled0, None, Compiled,
                qt_QIODevice_isTextModeEnabled_bool_QIODevice, Return, "bool",
                Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new Function(c, "isWritable", _n_isWritable0, None, Compiled,
                         qt_QIODevice_isWritable_bool_QIODevice, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(c, "open", _n_open0, None, Compiled,
                               qt_QIODevice_open_bool_QIODevice_int, Return,
                               "bool", Parameters,
                               new Param(c, "this", "qt.QIODevice"),
                               new Param(c, "mode", "int"), End),
            new Function(c, "openMode", _n_openMode0, None, Compiled,
                         qt_QIODevice_openMode_int_QIODevice, Return, "int",
                         Parameters, new Param(c, "this", "qt.QIODevice"), End),
            // MISSING: peek (int64; QIODevice this, "char *" data, int64
            // maxSize)
            new Function(c, "peek", _n_peek1, None, Compiled,
                         qt_QIODevice_peek_QByteArray_QIODevice_int64, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QIODevice"),
                         new Param(c, "maxSize", "int64"), End),
            new MemberFunction(c, "pos", _n_pos0, None, Compiled,
                               qt_QIODevice_pos_int64_QIODevice, Return,
                               "int64", Parameters,
                               new Param(c, "this", "qt.QIODevice"), End),
            // MISSING: putChar (bool; QIODevice this, "char" c)
            // MISSING: read (int64; QIODevice this, "char *" data, int64
            // maxSize)
            new Function(c, "read", _n_read1, None, Compiled,
                         qt_QIODevice_read_QByteArray_QIODevice_int64, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QIODevice"),
                         new Param(c, "maxSize", "int64"), End),
            new Function(c, "readAll", _n_readAll0, None, Compiled,
                         qt_QIODevice_readAll_QByteArray_QIODevice, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QIODevice"), End),
            // MISSING: readLine (int64; QIODevice this, "char *" data, int64
            // maxSize)
            new Function(c, "readLine", _n_readLine1, None, Compiled,
                         qt_QIODevice_readLine_QByteArray_QIODevice_int64,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QIODevice"),
                         new Param(c, "maxSize", "int64"), End),
            new MemberFunction(c, "reset", _n_reset0, None, Compiled,
                               qt_QIODevice_reset_bool_QIODevice, Return,
                               "bool", Parameters,
                               new Param(c, "this", "qt.QIODevice"), End),
            new MemberFunction(c, "seek", _n_seek0, None, Compiled,
                               qt_QIODevice_seek_bool_QIODevice_int64, Return,
                               "bool", Parameters,
                               new Param(c, "this", "qt.QIODevice"),
                               new Param(c, "pos", "int64"), End),
            new Function(
                c, "setTextModeEnabled", _n_setTextModeEnabled0, None, Compiled,
                qt_QIODevice_setTextModeEnabled_void_QIODevice_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QIODevice"),
                new Param(c, "enabled", "bool"), End),
            new MemberFunction(c, "size", _n_size0, None, Compiled,
                               qt_QIODevice_size_int64_QIODevice, Return,
                               "int64", Parameters,
                               new Param(c, "this", "qt.QIODevice"), End),
            // MISSING: ungetChar (void; QIODevice this, "char" c)
            new MemberFunction(
                c, "waitForBytesWritten", _n_waitForBytesWritten0, None,
                Compiled, qt_QIODevice_waitForBytesWritten_bool_QIODevice_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QIODevice"),
                new Param(c, "msecs", "int"), End),
            new MemberFunction(
                c, "waitForReadyRead", _n_waitForReadyRead0, None, Compiled,
                qt_QIODevice_waitForReadyRead_bool_QIODevice_int, Return,
                "bool", Parameters, new Param(c, "this", "qt.QIODevice"),
                new Param(c, "msecs", "int"), End),
            // MISSING: write (int64; QIODevice this, "const char *" data, int64
            // maxSize) MISSING: write (int64; QIODevice this, "const char *"
            // data)
            new Function(c, "write", _n_write2, None, Compiled,
                         qt_QIODevice_write_int64_QIODevice_QByteArray, Return,
                         "int64", Parameters,
                         new Param(c, "this", "qt.QIODevice"),
                         new Param(c, "byteArray", "qt.QByteArray"), End),
            // MISSING: readData (int64; QIODevice this, "char *" data, int64
            // maxSize) // protected MISSING: readLineData (int64; QIODevice
            // this, "char *" data, int64 maxSize) // protected NOT INHERITABLE
            // PROTECTED: setErrorString (void; QIODevice this, string str) //
            // protected NOT INHERITABLE PROTECTED: setOpenMode (void; QIODevice
            // this, flags QIODevice::OpenMode openMode) // protected MISSING:
            // writeData (int64; QIODevice this, "const char *" data, int64
            // maxSize) // protected
            new MemberFunction(c, "event", _n_event0, None, Compiled,
                               qt_QIODevice_event_bool_QIODevice_QEvent, Return,
                               "bool", Parameters,
                               new Param(c, "this", "qt.QIODevice"),
                               new Param(c, "e", "qt.QEvent"), End),
            new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QIODevice_eventFilter_bool_QIODevice_QObject_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QIODevice"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QIODevice this)
            // MISSING: childEvent (void; QIODevice this, "QChildEvent *" event)
            // // protected MISSING: connectNotify (void; QIODevice this, "const
            // QMetaMethod &" signal) // protected NOT INHERITABLE PROTECTED:
            // customEvent (void; QIODevice this, QEvent event) // protected
            // MISSING: disconnectNotify (void; QIODevice this, "const
            // QMetaMethod &" signal) // protected NOT INHERITABLE PROTECTED:
            // timerEvent (void; QIODevice this, QTimerEvent event) // protected
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QIODevice::staticMetaObject, propExclusions);
    }

} // namespace Mu
