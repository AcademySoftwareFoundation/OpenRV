//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QFileDialogType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QObjectType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QDirType.h>
#include <MuQt5/QUrlType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QFileDialog::~MuQt_QFileDialog()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QFileDialog::MuQt_QFileDialog(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent, Qt::WindowFlags flags)
        : QFileDialog(parent, flags)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QFileDialogType>(
            c->internName("qt.QFileDialog"));
    }

    MuQt_QFileDialog::MuQt_QFileDialog(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent, const QString& caption,
                                       const QString& directory,
                                       const QString& filter)
        : QFileDialog(parent, caption, directory, filter)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QFileDialogType>(
            c->internName("qt.QFileDialog"));
    }

    void MuQt_QFileDialog::setVisible(bool visible)
    {
        if (!_env)
        {
            QFileDialog::setVisible(visible);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(visible);
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::setVisible(visible);
        }
    }

    void MuQt_QFileDialog::accept()
    {
        if (!_env)
        {
            QFileDialog::accept();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::accept();
        }
    }

    void MuQt_QFileDialog::changeEvent(QEvent* e)
    {
        if (!_env)
        {
            QFileDialog::changeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::changeEvent(e);
        }
    }

    void MuQt_QFileDialog::done(int result)
    {
        if (!_env)
        {
            QFileDialog::done(result);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(result);
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::done(result);
        }
    }

    QSize MuQt_QFileDialog::minimumSizeHint() const
    {
        if (!_env)
            return QFileDialog::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFileDialog::minimumSizeHint();
        }
    }

    QSize MuQt_QFileDialog::sizeHint() const
    {
        if (!_env)
            return QFileDialog::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QFileDialog::sizeHint();
        }
    }

    void MuQt_QFileDialog::closeEvent(QCloseEvent* e)
    {
        if (!_env)
        {
            QFileDialog::closeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QCloseEventType>(c, e, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::closeEvent(e);
        }
    }

    void MuQt_QFileDialog::contextMenuEvent(QContextMenuEvent* e)
    {
        if (!_env)
        {
            QFileDialog::contextMenuEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, e, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::contextMenuEvent(e);
        }
    }

    bool MuQt_QFileDialog::event(QEvent* e)
    {
        if (!_env)
            return QFileDialog::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFileDialog::event(e);
        }
    }

    bool MuQt_QFileDialog::eventFilter(QObject* o, QEvent* e)
    {
        if (!_env)
            return QFileDialog::eventFilter(o, e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QObjectType>(c, o, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QFileDialog::eventFilter(o, e);
        }
    }

    void MuQt_QFileDialog::keyPressEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QFileDialog::keyPressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::keyPressEvent(e);
        }
    }

    void MuQt_QFileDialog::resizeEvent(QResizeEvent* _p15)
    {
        if (!_env)
        {
            QFileDialog::resizeEvent(_p15);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, _p15, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::resizeEvent(_p15);
        }
    }

    void MuQt_QFileDialog::showEvent(QShowEvent* event)
    {
        if (!_env)
        {
            QFileDialog::showEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, event, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QFileDialog::showEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QFileDialogType::QFileDialogType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QFileDialogType::~QFileDialogType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QFileDialog_QFileDialog_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QFileDialog* w = object<QFileDialog>(widget))
        {
            QFileDialogType* type =
                c->findSymbolOfTypeByQualifiedName<QFileDialogType>(
                    c->internName("qt.QFileDialog"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QFileDialog_QFileDialog_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QFileDialog_QFileDialog_QFileDialog_QFileDialog_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        Qt::WindowFlags arg2 = (Qt::WindowFlags)(param_flags);
        setobject(param_this, new MuQt_QFileDialog(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    Pointer
    qt_QFileDialog_QFileDialog_QFileDialog_QFileDialog_QWidget_string_string_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        Pointer param_caption, Pointer param_directory, Pointer param_filter)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        const QString arg2 = qstring(param_caption);
        const QString arg3 = qstring(param_directory);
        const QString arg4 = qstring(param_filter);
        setobject(param_this, new MuQt_QFileDialog(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2, arg3, arg4));
        return param_this;
    }

    Pointer qt_QFileDialog_directory_QDir_QFileDialog(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makeqtype<QDirType>(c, arg0->directory(), "qt.QDir");
    }

    Pointer
    qt_QFileDialog_directoryUrl_QUrl_QFileDialog(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makeqtype<QUrlType>(c, arg0->directoryUrl(), "qt.QUrl");
    }

    int qt_QFileDialog_filter_int_QFileDialog(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return int(arg0->filter());
    }

    Pointer
    qt_QFileDialog_history_stringBSB_ESB__QFileDialog(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makestringlist(c, arg0->history());
    }

    Pointer qt_QFileDialog_labelText_string_QFileDialog_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_label)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QFileDialog::DialogLabel arg1 = (QFileDialog::DialogLabel)(param_label);
        return makestring(c, arg0->labelText(arg1));
    }

    Pointer qt_QFileDialog_mimeTypeFilters_stringBSB_ESB__QFileDialog(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makestringlist(c, arg0->mimeTypeFilters());
    }

    Pointer qt_QFileDialog_nameFilters_stringBSB_ESB__QFileDialog(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makestringlist(c, arg0->nameFilters());
    }

    bool qt_QFileDialog_restoreState_bool_QFileDialog_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_state)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_state);
        return arg0->restoreState(arg1);
    }

    Pointer
    qt_QFileDialog_saveState_QByteArray_QFileDialog(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makeqtype<QByteArrayType>(c, arg0->saveState(), "qt.QByteArray");
    }

    void qt_QFileDialog_selectFile_void_QFileDialog_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filename)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QString arg1 = qstring(param_filename);
        arg0->selectFile(arg1);
    }

    void qt_QFileDialog_selectMimeTypeFilter_void_QFileDialog_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filter)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QString arg1 = qstring(param_filter);
        arg0->selectMimeTypeFilter(arg1);
    }

    void qt_QFileDialog_selectNameFilter_void_QFileDialog_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filter)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QString arg1 = qstring(param_filter);
        arg0->selectNameFilter(arg1);
    }

    void qt_QFileDialog_selectUrl_void_QFileDialog_QUrl(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_url)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_url);
        arg0->selectUrl(arg1);
    }

    Pointer qt_QFileDialog_selectedFiles_stringBSB_ESB__QFileDialog(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makestringlist(c, arg0->selectedFiles());
    }

    Pointer qt_QFileDialog_selectedNameFilter_string_QFileDialog(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makestring(c, arg0->selectedNameFilter());
    }

    Pointer qt_QFileDialog_selectedUrls_qt__QUrlBSB_ESB__QFileDialog(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makeqtypelist<QUrl, QUrlType>(c, arg0->selectedUrls(),
                                             "qt.QUrl");
    }

    void qt_QFileDialog_setDirectory_void_QFileDialog_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_directory)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QString arg1 = qstring(param_directory);
        arg0->setDirectory(arg1);
    }

    void qt_QFileDialog_setDirectory_void_QFileDialog_QDir(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_directory)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QDir arg1 = getqtype<QDirType>(param_directory);
        arg0->setDirectory(arg1);
    }

    void qt_QFileDialog_setDirectoryUrl_void_QFileDialog_QUrl(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_directory)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QUrl arg1 = getqtype<QUrlType>(param_directory);
        arg0->setDirectoryUrl(arg1);
    }

    void qt_QFileDialog_setFilter_void_QFileDialog_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_filters)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QDir::Filters arg1 = (QDir::Filters)(param_filters);
        arg0->setFilter(arg1);
    }

    void qt_QFileDialog_setHistory_void_QFileDialog_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_paths)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QStringList arg1 = qstringlist(param_paths);
        arg0->setHistory(arg1);
    }

    void qt_QFileDialog_setLabelText_void_QFileDialog_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_label,
        Pointer param_text)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QFileDialog::DialogLabel arg1 = (QFileDialog::DialogLabel)(param_label);
        const QString arg2 = qstring(param_text);
        arg0->setLabelText(arg1, arg2);
    }

    void qt_QFileDialog_setMimeTypeFilters_void_QFileDialog_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filters)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QStringList arg1 = qstringlist(param_filters);
        arg0->setMimeTypeFilters(arg1);
    }

    void qt_QFileDialog_setNameFilter_void_QFileDialog_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filter)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QString arg1 = qstring(param_filter);
        arg0->setNameFilter(arg1);
    }

    void qt_QFileDialog_setNameFilters_void_QFileDialog_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_filters)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QStringList arg1 = qstringlist(param_filters);
        arg0->setNameFilters(arg1);
    }

    void qt_QFileDialog_setOption_void_QFileDialog_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_option,
        bool param_on)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QFileDialog::Option arg1 = (QFileDialog::Option)(param_option);
        bool arg2 = (bool)(param_on);
        arg0->setOption(arg1, arg2);
    }

    void qt_QFileDialog_setSidebarUrls_void_QFileDialog_qt__QUrlBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_urls)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        const QList<QUrl> arg1 = qtypelist<QUrl, QUrlType>(param_urls);
        arg0->setSidebarUrls(arg1);
    }

    Pointer qt_QFileDialog_sidebarUrls_qt__QUrlBSB_ESB__QFileDialog(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return makeqtypelist<QUrl, QUrlType>(c, arg0->sidebarUrls(), "qt.QUrl");
    }

    bool qt_QFileDialog_testOption_bool_QFileDialog_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_option)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QFileDialog::Option arg1 = (QFileDialog::Option)(param_option);
        return arg0->testOption(arg1);
    }

    void qt_QFileDialog_setVisible_void_QFileDialog_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_visible)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        bool arg1 = (bool)(param_visible);
        if (isMuQtObject(arg0))
            arg0->QFileDialog::setVisible(arg1);
        else
            arg0->setVisible(arg1);
    }

    void qt_QFileDialog_accept_void_QFileDialog(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->accept_pub_parent();
        else
            ((MuQt_QFileDialog*)arg0)->accept_pub();
    }

    void qt_QFileDialog_changeEvent_void_QFileDialog_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QFileDialog_done_void_QFileDialog_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_result)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        int arg1 = (int)(param_result);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->done_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->done_pub(arg1);
    }

    Pointer
    qt_QFileDialog_minimumSizeHint_QSize_QFileDialog(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QFileDialog::minimumSizeHint(), "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QFileDialog_sizeHint_QSize_QFileDialog(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QFileDialog::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void qt_QFileDialog_closeEvent_void_QFileDialog_QCloseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QFileDialog_contextMenuEvent_void_QFileDialog_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QContextMenuEvent* arg1 = getqpointer<QContextMenuEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->contextMenuEvent_pub(arg1);
    }

    bool qt_QFileDialog_event_bool_QFileDialog_QEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QFileDialog*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QFileDialog*)arg0)->event_pub(arg1);
    }

    bool qt_QFileDialog_eventFilter_bool_QFileDialog_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_o,
        Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QObject* arg1 = object<QObject>(param_o);
        QEvent* arg2 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QFileDialog*)arg0)
                         ->eventFilter_pub_parent(arg1, arg2)
                   : ((MuQt_QFileDialog*)arg0)->eventFilter_pub(arg1, arg2);
    }

    void qt_QFileDialog_keyPressEvent_void_QFileDialog_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QFileDialog_resizeEvent_void_QFileDialog_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p15)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param__p15);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QFileDialog_showEvent_void_QFileDialog_QShowEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QFileDialog* arg0 = object<QFileDialog>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QFileDialog*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QFileDialog*)arg0)->showEvent_pub(arg1);
    }

    Pointer
    qt_QFileDialog_getExistingDirectory_string_QWidget_string_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_parent, Pointer param_caption,
        Pointer param_dir, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg0 = object<QWidget>(param_parent);
        const QString arg1 = qstring(param_caption);
        const QString arg2 = qstring(param_dir);
        QFileDialog::Option arg3 = (QFileDialog::Option)(param_options);
        return makestring(
            c, QFileDialog::getExistingDirectory(arg0, arg1, arg2, arg3));
    }

    static NODE_IMPLEMENTATION(_n_QFileDialog0, Pointer)
    {
        NODE_RETURN(
            qt_QFileDialog_QFileDialog_QFileDialog_QFileDialog_QWidget_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_QFileDialog1, Pointer)
    {
        NODE_RETURN(
            qt_QFileDialog_QFileDialog_QFileDialog_QFileDialog_QWidget_string_string_string(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, Pointer),
                NODE_ARG(4, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_directory0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_directory_QDir_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_directoryUrl0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_directoryUrl_QUrl_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_filter0, int)
    {
        NODE_RETURN(qt_QFileDialog_filter_int_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_history0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_history_stringBSB_ESB__QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_labelText0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_labelText_string_QFileDialog_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_mimeTypeFilters0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_mimeTypeFilters_stringBSB_ESB__QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_nameFilters0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_nameFilters_stringBSB_ESB__QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_restoreState0, bool)
    {
        NODE_RETURN(qt_QFileDialog_restoreState_bool_QFileDialog_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_saveState0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_saveState_QByteArray_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectFile0, void)
    {
        qt_QFileDialog_selectFile_void_QFileDialog_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectMimeTypeFilter0, void)
    {
        qt_QFileDialog_selectMimeTypeFilter_void_QFileDialog_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectNameFilter0, void)
    {
        qt_QFileDialog_selectNameFilter_void_QFileDialog_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectUrl0, void)
    {
        qt_QFileDialog_selectUrl_void_QFileDialog_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectedFiles0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_selectedFiles_stringBSB_ESB__QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectedNameFilter0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_selectedNameFilter_string_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectedUrls0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_selectedUrls_qt__QUrlBSB_ESB__QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setDirectory0, void)
    {
        qt_QFileDialog_setDirectory_void_QFileDialog_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setDirectory1, void)
    {
        qt_QFileDialog_setDirectory_void_QFileDialog_QDir(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setDirectoryUrl0, void)
    {
        qt_QFileDialog_setDirectoryUrl_void_QFileDialog_QUrl(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setFilter0, void)
    {
        qt_QFileDialog_setFilter_void_QFileDialog_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setHistory0, void)
    {
        qt_QFileDialog_setHistory_void_QFileDialog_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setLabelText0, void)
    {
        qt_QFileDialog_setLabelText_void_QFileDialog_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setMimeTypeFilters0, void)
    {
        qt_QFileDialog_setMimeTypeFilters_void_QFileDialog_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setNameFilter0, void)
    {
        qt_QFileDialog_setNameFilter_void_QFileDialog_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setNameFilters0, void)
    {
        qt_QFileDialog_setNameFilters_void_QFileDialog_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setOption0, void)
    {
        qt_QFileDialog_setOption_void_QFileDialog_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setSidebarUrls0, void)
    {
        qt_QFileDialog_setSidebarUrls_void_QFileDialog_qt__QUrlBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sidebarUrls0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_sidebarUrls_qt__QUrlBSB_ESB__QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_testOption0, bool)
    {
        NODE_RETURN(qt_QFileDialog_testOption_bool_QFileDialog_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_setVisible0, void)
    {
        qt_QFileDialog_setVisible_void_QFileDialog_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_accept0, void)
    {
        qt_QFileDialog_accept_void_QFileDialog(NODE_THREAD,
                                               NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QFileDialog_changeEvent_void_QFileDialog_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_done0, void)
    {
        qt_QFileDialog_done_void_QFileDialog_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_minimumSizeHint_QSize_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QFileDialog_sizeHint_QSize_QFileDialog(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QFileDialog_closeEvent_void_QFileDialog_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QFileDialog_contextMenuEvent_void_QFileDialog_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QFileDialog_event_bool_QFileDialog_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(qt_QFileDialog_eventFilter_bool_QFileDialog_QObject_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QFileDialog_keyPressEvent_void_QFileDialog_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QFileDialog_resizeEvent_void_QFileDialog_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QFileDialog_showEvent_void_QFileDialog_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_getExistingDirectory0, Pointer)
    {
        NODE_RETURN(
            qt_QFileDialog_getExistingDirectory_string_QWidget_string_string_int(
                NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, int)));
    }

    void QFileDialogType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QFileDialog_QFileDialog_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QFileDialog", _n_QFileDialog0, None, Compiled,
                qt_QFileDialog_QFileDialog_QFileDialog_QFileDialog_QWidget_int,
                Return, "qt.QFileDialog", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "parent", "qt.QWidget"),
                new Param(c, "flags", "int"), End),
            new Function(
                c, "QFileDialog", _n_QFileDialog1, None, Compiled,
                qt_QFileDialog_QFileDialog_QFileDialog_QFileDialog_QWidget_string_string_string,
                Return, "qt.QFileDialog", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "parent", "qt.QWidget"),
                new Param(c, "caption", "string"),
                new Param(c, "directory", "string"),
                new Param(c, "filter", "string"), End),
            // PROP: acceptMode (flags QFileDialog::AcceptMode; QFileDialog
            // this) PROP: defaultSuffix (string; QFileDialog this)
            new Function(c, "directory", _n_directory0, None, Compiled,
                         qt_QFileDialog_directory_QDir_QFileDialog, Return,
                         "qt.QDir", Parameters,
                         new Param(c, "this", "qt.QFileDialog"), End),
            new Function(c, "directoryUrl", _n_directoryUrl0, None, Compiled,
                         qt_QFileDialog_directoryUrl_QUrl_QFileDialog, Return,
                         "qt.QUrl", Parameters,
                         new Param(c, "this", "qt.QFileDialog"), End),
            // PROP: fileMode (flags QFileDialog::FileMode; QFileDialog this)
            new Function(c, "filter", _n_filter0, None, Compiled,
                         qt_QFileDialog_filter_int_QFileDialog, Return, "int",
                         Parameters, new Param(c, "this", "qt.QFileDialog"),
                         End),
            new Function(c, "history", _n_history0, None, Compiled,
                         qt_QFileDialog_history_stringBSB_ESB__QFileDialog,
                         Return, "string[]", Parameters,
                         new Param(c, "this", "qt.QFileDialog"), End),
            // MISSING: iconProvider ("QFileIconProvider *"; QFileDialog this)
            // MISSING: itemDelegate ("QAbstractItemDelegate *"; QFileDialog
            // this)
            new Function(c, "labelText", _n_labelText0, None, Compiled,
                         qt_QFileDialog_labelText_string_QFileDialog_int,
                         Return, "string", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "label", "int"), End),
            new Function(
                c, "mimeTypeFilters", _n_mimeTypeFilters0, None, Compiled,
                qt_QFileDialog_mimeTypeFilters_stringBSB_ESB__QFileDialog,
                Return, "string[]", Parameters,
                new Param(c, "this", "qt.QFileDialog"), End),
            new Function(c, "nameFilters", _n_nameFilters0, None, Compiled,
                         qt_QFileDialog_nameFilters_stringBSB_ESB__QFileDialog,
                         Return, "string[]", Parameters,
                         new Param(c, "this", "qt.QFileDialog"), End),
            // MISSING: open (void; QFileDialog this, QObject receiver, "const
            // char *" member) PROP: options (flags QFileDialog::Options;
            // QFileDialog this) MISSING: proxyModel ("QAbstractProxyModel *";
            // QFileDialog this)
            new Function(
                c, "restoreState", _n_restoreState0, None, Compiled,
                qt_QFileDialog_restoreState_bool_QFileDialog_QByteArray, Return,
                "bool", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "state", "qt.QByteArray"), End),
            new Function(c, "saveState", _n_saveState0, None, Compiled,
                         qt_QFileDialog_saveState_QByteArray_QFileDialog,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QFileDialog"), End),
            new Function(c, "selectFile", _n_selectFile0, None, Compiled,
                         qt_QFileDialog_selectFile_void_QFileDialog_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "filename", "string"), End),
            new Function(
                c, "selectMimeTypeFilter", _n_selectMimeTypeFilter0, None,
                Compiled,
                qt_QFileDialog_selectMimeTypeFilter_void_QFileDialog_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "filter", "string"), End),
            new Function(
                c, "selectNameFilter", _n_selectNameFilter0, None, Compiled,
                qt_QFileDialog_selectNameFilter_void_QFileDialog_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "filter", "string"), End),
            new Function(c, "selectUrl", _n_selectUrl0, None, Compiled,
                         qt_QFileDialog_selectUrl_void_QFileDialog_QUrl, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "url", "qt.QUrl"), End),
            new Function(
                c, "selectedFiles", _n_selectedFiles0, None, Compiled,
                qt_QFileDialog_selectedFiles_stringBSB_ESB__QFileDialog, Return,
                "string[]", Parameters, new Param(c, "this", "qt.QFileDialog"),
                End),
            new Function(c, "selectedNameFilter", _n_selectedNameFilter0, None,
                         Compiled,
                         qt_QFileDialog_selectedNameFilter_string_QFileDialog,
                         Return, "string", Parameters,
                         new Param(c, "this", "qt.QFileDialog"), End),
            new Function(
                c, "selectedUrls", _n_selectedUrls0, None, Compiled,
                qt_QFileDialog_selectedUrls_qt__QUrlBSB_ESB__QFileDialog,
                Return, "qt.QUrl[]", Parameters,
                new Param(c, "this", "qt.QFileDialog"), End),
            // PROP: setAcceptMode (void; QFileDialog this, flags
            // QFileDialog::AcceptMode mode) PROP: setDefaultSuffix (void;
            // QFileDialog this, string suffix)
            new Function(c, "setDirectory", _n_setDirectory0, None, Compiled,
                         qt_QFileDialog_setDirectory_void_QFileDialog_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "directory", "string"), End),
            new Function(c, "setDirectory", _n_setDirectory1, None, Compiled,
                         qt_QFileDialog_setDirectory_void_QFileDialog_QDir,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "directory", "qt.QDir"), End),
            new Function(
                c, "setDirectoryUrl", _n_setDirectoryUrl0, None, Compiled,
                qt_QFileDialog_setDirectoryUrl_void_QFileDialog_QUrl, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "directory", "qt.QUrl"), End),
            // PROP: setFileMode (void; QFileDialog this, flags
            // QFileDialog::FileMode mode)
            new Function(c, "setFilter", _n_setFilter0, None, Compiled,
                         qt_QFileDialog_setFilter_void_QFileDialog_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "filters", "int"), End),
            new Function(
                c, "setHistory", _n_setHistory0, None, Compiled,
                qt_QFileDialog_setHistory_void_QFileDialog_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "paths", "string[]"), End),
            // MISSING: setIconProvider (void; QFileDialog this,
            // "QFileIconProvider *" provider) MISSING: setItemDelegate (void;
            // QFileDialog this, "QAbstractItemDelegate *" delegate)
            new Function(
                c, "setLabelText", _n_setLabelText0, None, Compiled,
                qt_QFileDialog_setLabelText_void_QFileDialog_int_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "label", "int"), new Param(c, "text", "string"),
                End),
            new Function(
                c, "setMimeTypeFilters", _n_setMimeTypeFilters0, None, Compiled,
                qt_QFileDialog_setMimeTypeFilters_void_QFileDialog_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "filters", "string[]"), End),
            new Function(c, "setNameFilter", _n_setNameFilter0, None, Compiled,
                         qt_QFileDialog_setNameFilter_void_QFileDialog_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "filter", "string"), End),
            new Function(
                c, "setNameFilters", _n_setNameFilters0, None, Compiled,
                qt_QFileDialog_setNameFilters_void_QFileDialog_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "filters", "string[]"), End),
            new Function(
                c, "setOption", _n_setOption0, None, Compiled,
                qt_QFileDialog_setOption_void_QFileDialog_int_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "option", "int"), new Param(c, "on", "bool"), End),
            // PROP: setOptions (void; QFileDialog this, flags
            // QFileDialog::Options options) MISSING: setProxyModel (void;
            // QFileDialog this, "QAbstractProxyModel *" proxyModel)
            new Function(
                c, "setSidebarUrls", _n_setSidebarUrls0, None, Compiled,
                qt_QFileDialog_setSidebarUrls_void_QFileDialog_qt__QUrlBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "urls", "qt.QUrl[]"), End),
            // PROP: setSupportedSchemes (void; QFileDialog this, string[]
            // schemes) PROP: setViewMode (void; QFileDialog this, flags
            // QFileDialog::ViewMode mode)
            new Function(
                c, "sidebarUrls", _n_sidebarUrls0, None, Compiled,
                qt_QFileDialog_sidebarUrls_qt__QUrlBSB_ESB__QFileDialog, Return,
                "qt.QUrl[]", Parameters, new Param(c, "this", "qt.QFileDialog"),
                End),
            // PROP: supportedSchemes (string[]; QFileDialog this)
            new Function(c, "testOption", _n_testOption0, None, Compiled,
                         qt_QFileDialog_testOption_bool_QFileDialog_int, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QFileDialog"),
                         new Param(c, "option", "int"), End),
            // PROP: viewMode (flags QFileDialog::ViewMode; QFileDialog this)
            _func[0] = new MemberFunction(
                c, "setVisible", _n_setVisible0, None, Compiled,
                qt_QFileDialog_setVisible_void_QFileDialog_bool, Return, "void",
                Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "visible", "bool"), End),
            _func[1] = new MemberFunction(
                c, "accept", _n_accept0, None, Compiled,
                qt_QFileDialog_accept_void_QFileDialog, Return, "void",
                Parameters, new Param(c, "this", "qt.QFileDialog"), End),
            _func[2] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QFileDialog_changeEvent_void_QFileDialog_QEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[3] = new MemberFunction(
                c, "done", _n_done0, None, Compiled,
                qt_QFileDialog_done_void_QFileDialog_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "result", "int"), End),
            _func[4] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QFileDialog_minimumSizeHint_QSize_QFileDialog, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QFileDialog"),
                End),
            _func[5] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QFileDialog_sizeHint_QSize_QFileDialog, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QFileDialog"), End),
            _func[6] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QFileDialog_closeEvent_void_QFileDialog_QCloseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "e", "qt.QCloseEvent"), End),
            _func[7] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QFileDialog_contextMenuEvent_void_QFileDialog_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "e", "qt.QContextMenuEvent"), End),
            _func[8] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QFileDialog_event_bool_QFileDialog_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[9] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QFileDialog_eventFilter_bool_QFileDialog_QObject_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "o", "qt.QObject"), new Param(c, "e", "qt.QEvent"),
                End),
            _func[10] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QFileDialog_keyPressEvent_void_QFileDialog_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[11] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QFileDialog_resizeEvent_void_QFileDialog_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "_p15", "qt.QResizeEvent"), End),
            _func[12] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QFileDialog_showEvent_void_QFileDialog_QShowEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QFileDialog"),
                new Param(c, "event", "qt.QShowEvent"), End),
            // static functions
            new Function(
                c, "getExistingDirectory", _n_getExistingDirectory0, None,
                Compiled,
                qt_QFileDialog_getExistingDirectory_string_QWidget_string_string_int,
                Return, "string", Parameters,
                new Param(c, "parent", "qt.QWidget"),
                new Param(c, "caption", "string"),
                new Param(c, "dir", "string"),
                new Param(c, "options", "int",
                          Value((int)QFileDialog::ShowDirsOnly)),
                End),
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QFileDialog::staticMetaObject, propExclusions);
    }

} // namespace Mu
