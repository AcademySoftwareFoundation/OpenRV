//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QRectFType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QRectType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QRectFType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QRectFType::QRectFType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QRectFType::~QRectFType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QRectFType::Instance* i =
            new QRectFType::Instance((Class*)NODE_THIS.type());
        QRectFType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QRectFType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QRectFType::finalizer, 0, 0, 0);
    }

    void QRectFType::finalizer(void* obj, void* data)
    {
        QRectFType::Instance* i = reinterpret_cast<QRectFType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QRectF_QRectF_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QRectFType>(param_this, QRectF());
        return param_this;
    }

    Pointer qt_QRectF_QRectF_QRectF_QRectF_QPointF_QPointF(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_topLeft,
        Pointer param_bottomRight)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg1 = getqtype<QPointFType>(param_topLeft);
        const QPointF arg2 = getqtype<QPointFType>(param_bottomRight);
        setqtype<QRectFType>(param_this, QRectF(arg1, arg2));
        return param_this;
    }

    Pointer qt_QRectF_QRectF_QRectF_QRectF_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_x,
        double param_y, double param_width, double param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg1 = (double)(param_x);
        qreal arg2 = (double)(param_y);
        qreal arg3 = (double)(param_width);
        qreal arg4 = (double)(param_height);
        setqtype<QRectFType>(param_this, QRectF(arg1, arg2, arg3, arg4));
        return param_this;
    }

    Pointer qt_QRectF_QRectF_QRectF_QRectF_QRect(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        setqtype<QRectFType>(param_this, QRectF(arg1));
        return param_this;
    }

    void qt_QRectF_adjust_void_QRectF_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_dx1,
        double param_dy1, double param_dx2, double param_dy2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_dx1);
        qreal arg2 = (double)(param_dy1);
        qreal arg3 = (double)(param_dx2);
        qreal arg4 = (double)(param_dy2);
        arg0.adjust(arg1, arg2, arg3, arg4);
        setqtype<QRectFType>(param_this, arg0);
    }

    Pointer qt_QRectF_adjusted_QRectF_QRectF_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_dx1,
        double param_dy1, double param_dx2, double param_dy2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_dx1);
        qreal arg2 = (double)(param_dy1);
        qreal arg3 = (double)(param_dx2);
        qreal arg4 = (double)(param_dy2);
        return makeqtype<QRectFType>(c, arg0.adjusted(arg1, arg2, arg3, arg4),
                                     "qt.QRectF");
    }

    double qt_QRectF_bottom_double_QRectF(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.bottom();
    }

    Pointer qt_QRectF_bottomLeft_QPointF_QRectF(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QPointFType>(c, arg0.bottomLeft(), "qt.QPointF");
    }

    Pointer qt_QRectF_bottomRight_QPointF_QRectF(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QPointFType>(c, arg0.bottomRight(), "qt.QPointF");
    }

    Pointer qt_QRectF_center_QPointF_QRectF(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QPointFType>(c, arg0.center(), "qt.QPointF");
    }

    bool qt_QRectF_contains_bool_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_point);
        return arg0.contains(arg1);
    }

    bool qt_QRectF_contains_bool_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return arg0.contains(arg1);
    }

    bool qt_QRectF_contains_bool_QRectF_double_double(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      double param_x,
                                                      double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        qreal arg2 = (double)(param_y);
        return arg0.contains(arg1, arg2);
    }

    double qt_QRectF_height_double_QRectF(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.height();
    }

    Pointer qt_QRectF_intersected_QRectF_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.intersected(arg1), "qt.QRectF");
    }

    bool qt_QRectF_intersects_bool_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return arg0.intersects(arg1);
    }

    bool qt_QRectF_isEmpty_bool_QRectF(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.isEmpty();
    }

    bool qt_QRectF_isNull_bool_QRectF(Mu::Thread& NODE_THREAD,
                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.isNull();
    }

    bool qt_QRectF_isValid_bool_QRectF(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.isValid();
    }

    double qt_QRectF_left_double_QRectF(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.left();
    }

    void qt_QRectF_moveBottom_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_y);
        arg0.moveBottom(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveBottomLeft_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.moveBottomLeft(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveBottomRight_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.moveBottomRight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveCenter_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.moveCenter(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveLeft_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               double param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        arg0.moveLeft(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveRight_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                double param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        arg0.moveRight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveTo_void_QRectF_double_double(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    double param_x,
                                                    double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        qreal arg2 = (double)(param_y);
        arg0.moveTo(arg1, arg2);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveTo_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.moveTo(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveTop_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_y);
        arg0.moveTop(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveTopLeft_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.moveTopLeft(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_moveTopRight_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.moveTopRight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    Pointer qt_QRectF_normalized_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QRectFType>(c, arg0.normalized(), "qt.QRectF");
    }

    double qt_QRectF_right_double_QRectF(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.right();
    }

    void qt_QRectF_setBottom_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_y);
        arg0.setBottom(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setBottomLeft_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.setBottomLeft(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setBottomRight_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.setBottomRight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setCoords_void_QRectF_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_x1,
        double param_y1, double param_x2, double param_y2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x1);
        qreal arg2 = (double)(param_y1);
        qreal arg3 = (double)(param_x2);
        qreal arg4 = (double)(param_y2);
        arg0.setCoords(arg1, arg2, arg3, arg4);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setHeight_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                double param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_height);
        arg0.setHeight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setLeft_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              double param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        arg0.setLeft(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setRect_void_QRectF_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_x,
        double param_y, double param_width, double param_height)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        qreal arg2 = (double)(param_y);
        qreal arg3 = (double)(param_width);
        qreal arg4 = (double)(param_height);
        arg0.setRect(arg1, arg2, arg3, arg4);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setRight_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               double param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        arg0.setRight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setTop_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                             Pointer param_this, double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_y);
        arg0.setTop(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setTopLeft_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.setTopLeft(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setTopRight_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_position);
        arg0.setTopRight(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setWidth_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               double param_width)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_width);
        arg0.setWidth(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setX_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                           Pointer param_this, double param_x)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_x);
        arg0.setX(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_setY_void_QRectF_double(Mu::Thread& NODE_THREAD,
                                           Pointer param_this, double param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_y);
        arg0.setY(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    Pointer qt_QRectF_toAlignedRect_QRect_QRectF(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QRectType>(c, arg0.toAlignedRect(), "qt.QRect");
    }

    Pointer qt_QRectF_toRect_QRect_QRectF(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QRectType>(c, arg0.toRect(), "qt.QRect");
    }

    double qt_QRectF_top_double_QRectF(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.top();
    }

    Pointer qt_QRectF_topLeft_QPointF_QRectF(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QPointFType>(c, arg0.topLeft(), "qt.QPointF");
    }

    Pointer qt_QRectF_topRight_QPointF_QRectF(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return makeqtype<QPointFType>(c, arg0.topRight(), "qt.QPointF");
    }

    void qt_QRectF_translate_void_QRectF_double_double(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       double param_dx,
                                                       double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_dx);
        qreal arg2 = (double)(param_dy);
        arg0.translate(arg1, arg2);
        setqtype<QRectFType>(param_this, arg0);
    }

    void qt_QRectF_translate_void_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_offset)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_offset);
        arg0.translate(arg1);
        setqtype<QRectFType>(param_this, arg0);
    }

    Pointer qt_QRectF_translated_QRectF_QRectF_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_dx,
        double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        qreal arg1 = (double)(param_dx);
        qreal arg2 = (double)(param_dy);
        return makeqtype<QRectFType>(c, arg0.translated(arg1, arg2),
                                     "qt.QRectF");
    }

    Pointer qt_QRectF_translated_QRectF_QRectF_QPointF(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_offset)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_offset);
        return makeqtype<QRectFType>(c, arg0.translated(arg1), "qt.QRectF");
    }

    Pointer qt_QRectF_united_QRectF_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.united(arg1), "qt.QRectF");
    }

    double qt_QRectF_width_double_QRectF(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.width();
    }

    double qt_QRectF_x_double_QRectF(Mu::Thread& NODE_THREAD,
                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.x();
    }

    double qt_QRectF_y_double_QRectF(Mu::Thread& NODE_THREAD,
                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        return arg0.y();
    }

    Pointer qt_QRectF_operatorAmp__QRectF_QRectF_QRectF(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.operator&(arg1), "qt.QRectF");
    }

    Pointer qt_QRectF_operatorPipe__QRectF_QRectF_QRectF(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.operator|(arg1), "qt.QRectF");
    }

    Pointer qt_QRectF_operatorPipe_EQ__QRectF_QRectF_QRectF(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRectF arg0 = getqtype<QRectFType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.operator|=(arg1), "qt.QRectF");
    }

    static NODE_IMPLEMENTATION(_n_QRectF0, Pointer)
    {
        NODE_RETURN(qt_QRectF_QRectF_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QRectF2, Pointer)
    {
        NODE_RETURN(qt_QRectF_QRectF_QRectF_QRectF_QPointF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QRectF3, Pointer)
    {
        NODE_RETURN(qt_QRectF_QRectF_QRectF_QRectF_double_double_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double)));
    }

    static NODE_IMPLEMENTATION(_n_QRectF4, Pointer)
    {
        NODE_RETURN(qt_QRectF_QRectF_QRectF_QRectF_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_adjust0, void)
    {
        qt_QRectF_adjust_void_QRectF_double_double_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double));
    }

    static NODE_IMPLEMENTATION(_n_adjusted0, Pointer)
    {
        NODE_RETURN(
            qt_QRectF_adjusted_QRectF_QRectF_double_double_double_double(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
                NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double)));
    }

    static NODE_IMPLEMENTATION(_n_bottom0, double)
    {
        NODE_RETURN(qt_QRectF_bottom_double_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bottomLeft0, Pointer)
    {
        NODE_RETURN(qt_QRectF_bottomLeft_QPointF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bottomRight0, Pointer)
    {
        NODE_RETURN(qt_QRectF_bottomRight_QPointF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_center0, Pointer)
    {
        NODE_RETURN(qt_QRectF_center_QPointF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contains0, bool)
    {
        NODE_RETURN(qt_QRectF_contains_bool_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contains1, bool)
    {
        NODE_RETURN(qt_QRectF_contains_bool_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contains2, bool)
    {
        NODE_RETURN(qt_QRectF_contains_bool_QRectF_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_height0, double)
    {
        NODE_RETURN(qt_QRectF_height_double_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_intersected0, Pointer)
    {
        NODE_RETURN(qt_QRectF_intersected_QRectF_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_intersects0, bool)
    {
        NODE_RETURN(qt_QRectF_intersects_bool_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
    {
        NODE_RETURN(qt_QRectF_isEmpty_bool_QRectF(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isNull0, bool)
    {
        NODE_RETURN(qt_QRectF_isNull_bool_QRectF(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isValid0, bool)
    {
        NODE_RETURN(qt_QRectF_isValid_bool_QRectF(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_left0, double)
    {
        NODE_RETURN(qt_QRectF_left_double_QRectF(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_moveBottom0, void)
    {
        qt_QRectF_moveBottom_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_moveBottomLeft0, void)
    {
        qt_QRectF_moveBottomLeft_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveBottomRight0, void)
    {
        qt_QRectF_moveBottomRight_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveCenter0, void)
    {
        qt_QRectF_moveCenter_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveLeft0, void)
    {
        qt_QRectF_moveLeft_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_moveRight0, void)
    {
        qt_QRectF_moveRight_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_moveTo0, void)
    {
        qt_QRectF_moveTo_void_QRectF_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double));
    }

    static NODE_IMPLEMENTATION(_n_moveTo1, void)
    {
        qt_QRectF_moveTo_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveTop0, void)
    {
        qt_QRectF_moveTop_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_moveTopLeft0, void)
    {
        qt_QRectF_moveTopLeft_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveTopRight0, void)
    {
        qt_QRectF_moveTopRight_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_normalized0, Pointer)
    {
        NODE_RETURN(qt_QRectF_normalized_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_right0, double)
    {
        NODE_RETURN(qt_QRectF_right_double_QRectF(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setBottom0, void)
    {
        qt_QRectF_setBottom_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setBottomLeft0, void)
    {
        qt_QRectF_setBottomLeft_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setBottomRight0, void)
    {
        qt_QRectF_setBottomRight_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setCoords0, void)
    {
        qt_QRectF_setCoords_void_QRectF_double_double_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double));
    }

    static NODE_IMPLEMENTATION(_n_setHeight0, void)
    {
        qt_QRectF_setHeight_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setLeft0, void)
    {
        qt_QRectF_setLeft_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setRect0, void)
    {
        qt_QRectF_setRect_void_QRectF_double_double_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double));
    }

    static NODE_IMPLEMENTATION(_n_setRight0, void)
    {
        qt_QRectF_setRight_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setTop0, void)
    {
        qt_QRectF_setTop_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setTopLeft0, void)
    {
        qt_QRectF_setTopLeft_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setTopRight0, void)
    {
        qt_QRectF_setTopRight_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setWidth0, void)
    {
        qt_QRectF_setWidth_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setX0, void)
    {
        qt_QRectF_setX_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_setY0, void)
    {
        qt_QRectF_setY_void_QRectF_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double));
    }

    static NODE_IMPLEMENTATION(_n_toAlignedRect0, Pointer)
    {
        NODE_RETURN(qt_QRectF_toAlignedRect_QRect_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toRect0, Pointer)
    {
        NODE_RETURN(qt_QRectF_toRect_QRect_QRectF(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_top0, double)
    {
        NODE_RETURN(qt_QRectF_top_double_QRectF(NODE_THREAD,
                                                NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_topLeft0, Pointer)
    {
        NODE_RETURN(qt_QRectF_topLeft_QPointF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_topRight0, Pointer)
    {
        NODE_RETURN(qt_QRectF_topRight_QPointF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_translate0, void)
    {
        qt_QRectF_translate_void_QRectF_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double));
    }

    static NODE_IMPLEMENTATION(_n_translate1, void)
    {
        qt_QRectF_translate_void_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_translated0, Pointer)
    {
        NODE_RETURN(qt_QRectF_translated_QRectF_QRectF_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_translated1, Pointer)
    {
        NODE_RETURN(qt_QRectF_translated_QRectF_QRectF_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_united0, Pointer)
    {
        NODE_RETURN(qt_QRectF_united_QRectF_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_width0, double)
    {
        NODE_RETURN(qt_QRectF_width_double_QRectF(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_x0, double)
    {
        NODE_RETURN(qt_QRectF_x_double_QRectF(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_y0, double)
    {
        NODE_RETURN(qt_QRectF_y_double_QRectF(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorAmp_0, Pointer)
    {
        NODE_RETURN(qt_QRectF_operatorAmp__QRectF_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPipe_0, Pointer)
    {
        NODE_RETURN(qt_QRectF_operatorPipe__QRectF_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPipe_EQ_0, Pointer)
    {
        NODE_RETURN(qt_QRectF_operatorPipe_EQ__QRectF_QRectF_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QRectFType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QRectF", _n_QRectF0, None, Compiled,
                         qt_QRectF_QRectF_QRectF_QRectF, Return, "qt.QRectF",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            // MISSING: QRectF (QRectF; QRectF this, QPointF topLeft, "const
            // QSizeF &" size)
            new Function(c, "QRectF", _n_QRectF2, None, Compiled,
                         qt_QRectF_QRectF_QRectF_QRectF_QPointF_QPointF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "topLeft", "qt.QPointF"),
                         new Param(c, "bottomRight", "qt.QPointF"), End),
            new Function(
                c, "QRectF", _n_QRectF3, None, Compiled,
                qt_QRectF_QRectF_QRectF_QRectF_double_double_double_double,
                Return, "qt.QRectF", Parameters,
                new Param(c, "this", "qt.QRectF"), new Param(c, "x", "double"),
                new Param(c, "y", "double"), new Param(c, "width", "double"),
                new Param(c, "height", "double"), End),
            new Function(c, "QRectF", _n_QRectF4, None, Compiled,
                         qt_QRectF_QRectF_QRectF_QRectF_QRect, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            new Function(
                c, "adjust", _n_adjust0, None, Compiled,
                qt_QRectF_adjust_void_QRectF_double_double_double_double,
                Return, "void", Parameters, new Param(c, "this", "qt.QRectF"),
                new Param(c, "dx1", "double"), new Param(c, "dy1", "double"),
                new Param(c, "dx2", "double"), new Param(c, "dy2", "double"),
                End),
            new Function(
                c, "adjusted", _n_adjusted0, None, Compiled,
                qt_QRectF_adjusted_QRectF_QRectF_double_double_double_double,
                Return, "qt.QRectF", Parameters,
                new Param(c, "this", "qt.QRectF"),
                new Param(c, "dx1", "double"), new Param(c, "dy1", "double"),
                new Param(c, "dx2", "double"), new Param(c, "dy2", "double"),
                End),
            new Function(c, "bottom", _n_bottom0, None, Compiled,
                         qt_QRectF_bottom_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "bottomLeft", _n_bottomLeft0, None, Compiled,
                         qt_QRectF_bottomLeft_QPointF_QRectF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "bottomRight", _n_bottomRight0, None, Compiled,
                         qt_QRectF_bottomRight_QPointF_QRectF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "center", _n_center0, None, Compiled,
                         qt_QRectF_center_QPointF_QRectF, Return, "qt.QPointF",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "contains", _n_contains0, None, Compiled,
                         qt_QRectF_contains_bool_QRectF_QPointF, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "point", "qt.QPointF"), End),
            new Function(c, "contains", _n_contains1, None, Compiled,
                         qt_QRectF_contains_bool_QRectF_QRectF, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "contains", _n_contains2, None, Compiled,
                         qt_QRectF_contains_bool_QRectF_double_double, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"),
                         new Param(c, "y", "double"), End),
            // MISSING: getCoords (void; QRectF this, "qreal *" x1, "qreal *"
            // y1, "qreal *" x2, "qreal *" y2) MISSING: getRect (void; QRectF
            // this, "qreal *" x, "qreal *" y, "qreal *" width, "qreal *"
            // height)
            new Function(c, "height", _n_height0, None, Compiled,
                         qt_QRectF_height_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "intersected", _n_intersected0, None, Compiled,
                         qt_QRectF_intersected_QRectF_QRectF_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "intersects", _n_intersects0, None, Compiled,
                         qt_QRectF_intersects_bool_QRectF_QRectF, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "isEmpty", _n_isEmpty0, None, Compiled,
                         qt_QRectF_isEmpty_bool_QRectF, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "isNull", _n_isNull0, None, Compiled,
                         qt_QRectF_isNull_bool_QRectF, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "isValid", _n_isValid0, None, Compiled,
                         qt_QRectF_isValid_bool_QRectF, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "left", _n_left0, None, Compiled,
                         qt_QRectF_left_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            // MISSING: marginsAdded (QRectF; QRectF this, "const QMarginsF &"
            // margins) MISSING: marginsRemoved (QRectF; QRectF this, "const
            // QMarginsF &" margins)
            new Function(c, "moveBottom", _n_moveBottom0, None, Compiled,
                         qt_QRectF_moveBottom_void_QRectF_double, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "y", "double"), End),
            new Function(c, "moveBottomLeft", _n_moveBottomLeft0, None,
                         Compiled, qt_QRectF_moveBottomLeft_void_QRectF_QPointF,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "moveBottomRight", _n_moveBottomRight0, None,
                         Compiled,
                         qt_QRectF_moveBottomRight_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "moveCenter", _n_moveCenter0, None, Compiled,
                         qt_QRectF_moveCenter_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "moveLeft", _n_moveLeft0, None, Compiled,
                         qt_QRectF_moveLeft_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"), End),
            new Function(c, "moveRight", _n_moveRight0, None, Compiled,
                         qt_QRectF_moveRight_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"), End),
            new Function(c, "moveTo", _n_moveTo0, None, Compiled,
                         qt_QRectF_moveTo_void_QRectF_double_double, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"),
                         new Param(c, "y", "double"), End),
            new Function(c, "moveTo", _n_moveTo1, None, Compiled,
                         qt_QRectF_moveTo_void_QRectF_QPointF, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "moveTop", _n_moveTop0, None, Compiled,
                         qt_QRectF_moveTop_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "y", "double"), End),
            new Function(c, "moveTopLeft", _n_moveTopLeft0, None, Compiled,
                         qt_QRectF_moveTopLeft_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "moveTopRight", _n_moveTopRight0, None, Compiled,
                         qt_QRectF_moveTopRight_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "normalized", _n_normalized0, None, Compiled,
                         qt_QRectF_normalized_QRectF_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "right", _n_right0, None, Compiled,
                         qt_QRectF_right_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "setBottom", _n_setBottom0, None, Compiled,
                         qt_QRectF_setBottom_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "y", "double"), End),
            new Function(c, "setBottomLeft", _n_setBottomLeft0, None, Compiled,
                         qt_QRectF_setBottomLeft_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "setBottomRight", _n_setBottomRight0, None,
                         Compiled, qt_QRectF_setBottomRight_void_QRectF_QPointF,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(
                c, "setCoords", _n_setCoords0, None, Compiled,
                qt_QRectF_setCoords_void_QRectF_double_double_double_double,
                Return, "void", Parameters, new Param(c, "this", "qt.QRectF"),
                new Param(c, "x1", "double"), new Param(c, "y1", "double"),
                new Param(c, "x2", "double"), new Param(c, "y2", "double"),
                End),
            new Function(c, "setHeight", _n_setHeight0, None, Compiled,
                         qt_QRectF_setHeight_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "height", "double"), End),
            new Function(c, "setLeft", _n_setLeft0, None, Compiled,
                         qt_QRectF_setLeft_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"), End),
            new Function(
                c, "setRect", _n_setRect0, None, Compiled,
                qt_QRectF_setRect_void_QRectF_double_double_double_double,
                Return, "void", Parameters, new Param(c, "this", "qt.QRectF"),
                new Param(c, "x", "double"), new Param(c, "y", "double"),
                new Param(c, "width", "double"),
                new Param(c, "height", "double"), End),
            new Function(c, "setRight", _n_setRight0, None, Compiled,
                         qt_QRectF_setRight_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"), End),
            // MISSING: setSize (void; QRectF this, "const QSizeF &" size)
            new Function(c, "setTop", _n_setTop0, None, Compiled,
                         qt_QRectF_setTop_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "y", "double"), End),
            new Function(c, "setTopLeft", _n_setTopLeft0, None, Compiled,
                         qt_QRectF_setTopLeft_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "setTopRight", _n_setTopRight0, None, Compiled,
                         qt_QRectF_setTopRight_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "position", "qt.QPointF"), End),
            new Function(c, "setWidth", _n_setWidth0, None, Compiled,
                         qt_QRectF_setWidth_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "width", "double"), End),
            new Function(c, "setX", _n_setX0, None, Compiled,
                         qt_QRectF_setX_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "x", "double"), End),
            new Function(c, "setY", _n_setY0, None, Compiled,
                         qt_QRectF_setY_void_QRectF_double, Return, "void",
                         Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "y", "double"), End),
            // MISSING: size ("QSizeF"; QRectF this)
            new Function(c, "toAlignedRect", _n_toAlignedRect0, None, Compiled,
                         qt_QRectF_toAlignedRect_QRect_QRectF, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "toRect", _n_toRect0, None, Compiled,
                         qt_QRectF_toRect_QRect_QRectF, Return, "qt.QRect",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "top", _n_top0, None, Compiled,
                         qt_QRectF_top_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "topLeft", _n_topLeft0, None, Compiled,
                         qt_QRectF_topLeft_QPointF_QRectF, Return, "qt.QPointF",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "topRight", _n_topRight0, None, Compiled,
                         qt_QRectF_topRight_QPointF_QRectF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "translate", _n_translate0, None, Compiled,
                         qt_QRectF_translate_void_QRectF_double_double, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "dx", "double"),
                         new Param(c, "dy", "double"), End),
            new Function(c, "translate", _n_translate1, None, Compiled,
                         qt_QRectF_translate_void_QRectF_QPointF, Return,
                         "void", Parameters, new Param(c, "this", "qt.QRectF"),
                         new Param(c, "offset", "qt.QPointF"), End),
            new Function(c, "translated", _n_translated0, None, Compiled,
                         qt_QRectF_translated_QRectF_QRectF_double_double,
                         Return, "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "dx", "double"),
                         new Param(c, "dy", "double"), End),
            new Function(c, "translated", _n_translated1, None, Compiled,
                         qt_QRectF_translated_QRectF_QRectF_QPointF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "offset", "qt.QPointF"), End),
            new Function(c, "united", _n_united0, None, Compiled,
                         qt_QRectF_united_QRectF_QRectF_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "width", _n_width0, None, Compiled,
                         qt_QRectF_width_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "x", _n_x0, None, Compiled,
                         qt_QRectF_x_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            new Function(c, "y", _n_y0, None, Compiled,
                         qt_QRectF_y_double_QRectF, Return, "double",
                         Parameters, new Param(c, "this", "qt.QRectF"), End),
            // MISSING: = ("QRectF & operator&"; QRectF this, QRectF rectangle)
            // static functions
            EndArguments);
        globalScope()->addSymbols(
            new Function(c, "&", _n_operatorAmp_0, Op, Compiled,
                         qt_QRectF_operatorAmp__QRectF_QRectF_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            // MISSING: += (QRectF; QRectF this, "const QMarginsF &" margins)
            // MISSING: -= (QRectF; QRectF this, "const QMarginsF &" margins)
            new Function(c, "|", _n_operatorPipe_0, Op, Compiled,
                         qt_QRectF_operatorPipe__QRectF_QRectF_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "|=", _n_operatorPipe_EQ_0, Op, Compiled,
                         qt_QRectF_operatorPipe_EQ__QRectF_QRectF_QRectF,
                         Return, "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QRectF"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
