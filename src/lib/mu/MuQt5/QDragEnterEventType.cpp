//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QDragEnterEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QPointType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QDragEnterEventType::QDragEnterEventType(Context* c, const char* name,
                                             Class* super)
        : Class(c, name, super)
    {
    }

    QDragEnterEventType::~QDragEnterEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QDragEnterEvent_QDragEnterEvent_QDragEnterEvent_QDragEnterEvent_QPoint_int_QMimeData_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point,
        int param_actions, Pointer param_data, int param_buttons,
        int param_modifiers)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPoint arg1 = getqtype<QPointType>(param_point);
        Qt::DropActions arg2 = (Qt::DropActions)(param_actions);
        const QMimeData* arg3 = object<QMimeData>(param_data);
        Qt::MouseButtons arg4 = (Qt::MouseButtons)(param_buttons);
        Qt::KeyboardModifiers arg5 = (Qt::KeyboardModifiers)(param_modifiers);
        setqpointer<QDragEnterEventType>(
            param_this, new QDragEnterEvent(arg1, arg2, arg3, arg4, arg5));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QDragEnterEvent0, Pointer)
    {
        NODE_RETURN(
            qt_QDragEnterEvent_QDragEnterEvent_QDragEnterEvent_QDragEnterEvent_QPoint_int_QMimeData_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int), NODE_ARG(3, Pointer), NODE_ARG(4, int),
                NODE_ARG(5, int)));
    }

    void QDragEnterEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QDragEnterEvent", _n_QDragEnterEvent0, None, Compiled,
                qt_QDragEnterEvent_QDragEnterEvent_QDragEnterEvent_QDragEnterEvent_QPoint_int_QMimeData_int_int,
                Return, "qt.QDragEnterEvent", Parameters,
                new Param(c, "this", "qt.QDragEnterEvent"),
                new Param(c, "point", "qt.QPoint"),
                new Param(c, "actions", "int"),
                new Param(c, "data", "qt.QMimeData"),
                new Param(c, "buttons", "int"),
                new Param(c, "modifiers", "int"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
