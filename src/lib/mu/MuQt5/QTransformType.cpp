//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QTransformType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QMatrixType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QRectFType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QTransformType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QTransformType::QTransformType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QTransformType::~QTransformType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QTransformType::Instance* i =
            new QTransformType::Instance((Class*)NODE_THIS.type());
        QTransformType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QTransformType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QTransformType::finalizer, 0, 0, 0);
    }

    void QTransformType::finalizer(void* obj, void* data)
    {
        QTransformType::Instance* i =
            reinterpret_cast<QTransformType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QTransform_QTransform_QTransform_QTransform(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QTransformType>(param_this, QTransform());
        return param_this;
    }

    Pointer
    qt_QTransform_QTransform_QTransform_QTransform_double_double_double_double_double_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_m11,
        double param_m12, double param_m13, double param_m21, double param_m22,
        double param_m23, double param_m31, double param_m32, double param_m33)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg1 = (double)(param_m11);
        qreal arg2 = (double)(param_m12);
        qreal arg3 = (double)(param_m13);
        qreal arg4 = (double)(param_m21);
        qreal arg5 = (double)(param_m22);
        qreal arg6 = (double)(param_m23);
        qreal arg7 = (double)(param_m31);
        qreal arg8 = (double)(param_m32);
        qreal arg9 = (double)(param_m33);
        setqtype<QTransformType>(
            param_this,
            QTransform(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
        return param_this;
    }

    Pointer
    qt_QTransform_QTransform_QTransform_QTransform_double_double_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_m11,
        double param_m12, double param_m21, double param_m22, double param_dx,
        double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg1 = (double)(param_m11);
        qreal arg2 = (double)(param_m12);
        qreal arg3 = (double)(param_m21);
        qreal arg4 = (double)(param_m22);
        qreal arg5 = (double)(param_dx);
        qreal arg6 = (double)(param_dy);
        setqtype<QTransformType>(
            param_this, QTransform(arg1, arg2, arg3, arg4, arg5, arg6));
        return param_this;
    }

    Pointer qt_QTransform_QTransform_QTransform_QTransform_QMatrix(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        setqtype<QTransformType>(param_this, QTransform(arg1));
        return param_this;
    }

    double qt_QTransform_m11_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m11();
    }

    double qt_QTransform_m12_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m12();
    }

    double qt_QTransform_m13_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m13();
    }

    double qt_QTransform_m21_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m21();
    }

    double qt_QTransform_m22_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m22();
    }

    double qt_QTransform_m23_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m23();
    }

    double qt_QTransform_m31_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m31();
    }

    double qt_QTransform_m32_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m32();
    }

    double qt_QTransform_m33_double_QTransform(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.m33();
    }

    Pointer qt_QTransform_adjoint_QTransform_QTransform(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return makeqtype<QTransformType>(c, arg0.adjoint(), "qt.QTransform");
    }

    double qt_QTransform_determinant_double_QTransform(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.determinant();
    }

    double qt_QTransform_dx_double_QTransform(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.dx();
    }

    double qt_QTransform_dy_double_QTransform(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.dy();
    }

    bool qt_QTransform_isAffine_bool_QTransform(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.isAffine();
    }

    bool qt_QTransform_isIdentity_bool_QTransform(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.isIdentity();
    }

    bool qt_QTransform_isInvertible_bool_QTransform(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.isInvertible();
    }

    bool qt_QTransform_isRotating_bool_QTransform(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.isRotating();
    }

    bool qt_QTransform_isScaling_bool_QTransform(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.isScaling();
    }

    bool qt_QTransform_isTranslating_bool_QTransform(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return arg0.isTranslating();
    }

    Pointer qt_QTransform_map_QPointF_QTransform_QPointF(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_p);
        return makeqtype<QPointFType>(c, arg0.map(arg1), "qt.QPointF");
    }

    Pointer qt_QTransform_map_QRegion_QTransform_QRegion(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_region)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QRegion arg1 = getqtype<QRegionType>(param_region);
        return makeqtype<QRegionType>(c, arg0.map(arg1), "qt.QRegion");
    }

    Pointer qt_QTransform_map_QPoint_QTransform_QPoint(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return makeqtype<QPointType>(c, arg0.map(arg1), "qt.QPoint");
    }

    Pointer qt_QTransform_mapRect_QRectF_QTransform_QRectF(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.mapRect(arg1), "qt.QRectF");
    }

    Pointer qt_QTransform_mapRect_QRect_QTransform_QRect(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.mapRect(arg1), "qt.QRect");
    }

    void qt_QTransform_reset_void_QTransform(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        arg0.reset();
        setqtype<QTransformType>(param_this, arg0);
    }

    Pointer qt_QTransform_rotate_QTransform_QTransform_double_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_angle,
        int param_axis)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_angle);
        Qt::Axis arg2 = (Qt::Axis)(param_axis);
        return makeqtype<QTransformType>(c, arg0.rotate(arg1, arg2),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_rotateRadians_QTransform_QTransform_double_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_angle,
        int param_axis)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_angle);
        Qt::Axis arg2 = (Qt::Axis)(param_axis);
        return makeqtype<QTransformType>(c, arg0.rotateRadians(arg1, arg2),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_scale_QTransform_QTransform_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_sx,
        double param_sy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_sx);
        qreal arg2 = (double)(param_sy);
        return makeqtype<QTransformType>(c, arg0.scale(arg1, arg2),
                                         "qt.QTransform");
    }

    void
    qt_QTransform_setMatrix_void_QTransform_double_double_double_double_double_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_m11,
        double param_m12, double param_m13, double param_m21, double param_m22,
        double param_m23, double param_m31, double param_m32, double param_m33)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_m11);
        qreal arg2 = (double)(param_m12);
        qreal arg3 = (double)(param_m13);
        qreal arg4 = (double)(param_m21);
        qreal arg5 = (double)(param_m22);
        qreal arg6 = (double)(param_m23);
        qreal arg7 = (double)(param_m31);
        qreal arg8 = (double)(param_m32);
        qreal arg9 = (double)(param_m33);
        arg0.setMatrix(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        setqtype<QTransformType>(param_this, arg0);
    }

    Pointer qt_QTransform_shear_QTransform_QTransform_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_sh,
        double param_sv)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_sh);
        qreal arg2 = (double)(param_sv);
        return makeqtype<QTransformType>(c, arg0.shear(arg1, arg2),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_toAffine_QMatrix_QTransform(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return makeqtype<QMatrixType>(c, arg0.toAffine(), "qt.QMatrix");
    }

    Pointer qt_QTransform_translate_QTransform_QTransform_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_dx,
        double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_dx);
        qreal arg2 = (double)(param_dy);
        return makeqtype<QTransformType>(c, arg0.translate(arg1, arg2),
                                         "qt.QTransform");
    }

    Pointer
    qt_QTransform_transposed_QTransform_QTransform(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return makeqtype<QTransformType>(c, arg0.transposed(), "qt.QTransform");
    }

    int qt_QTransform_type_int_QTransform(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        return int(arg0.type());
    }

    bool qt_QTransform_operatorBang_EQ__bool_QTransform_QTransform(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        return arg0.operator!=(arg1);
    }

    Pointer qt_QTransform_operatorStar__QTransform_QTransform_QTransform(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        return makeqtype<QTransformType>(c, arg0.operator*(arg1),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_operatorPlus_EQ__QTransform_QTransform_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_scalar)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_scalar);
        return makeqtype<QTransformType>(c, arg0.operator+=(arg1),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_operatorMinus_EQ__QTransform_QTransform_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_scalar)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_scalar);
        return makeqtype<QTransformType>(c, arg0.operator-=(arg1),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_operatorSlash_EQ__QTransform_QTransform_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_scalar)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        qreal arg1 = (double)(param_scalar);
        return makeqtype<QTransformType>(c, arg0.operator/=(arg1),
                                         "qt.QTransform");
    }

    bool qt_QTransform_operatorEQ_EQ__bool_QTransform_QTransform(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg0 = getqtype<QTransformType>(param_this);
        const QTransform arg1 = getqtype<QTransformType>(param_matrix);
        return arg0.operator==(arg1);
    }

    Pointer qt_QTransform_fromScale_QTransform_double_double(
        Mu::Thread& NODE_THREAD, double param_sx, double param_sy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg0 = (double)(param_sx);
        qreal arg1 = (double)(param_sy);
        return makeqtype<QTransformType>(c, QTransform::fromScale(arg0, arg1),
                                         "qt.QTransform");
    }

    Pointer qt_QTransform_fromTranslate_QTransform_double_double(
        Mu::Thread& NODE_THREAD, double param_dx, double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg0 = (double)(param_dx);
        qreal arg1 = (double)(param_dy);
        return makeqtype<QTransformType>(
            c, QTransform::fromTranslate(arg0, arg1), "qt.QTransform");
    }

    Pointer qt_QTransform_QVariant_QVariant_QVariant_QTransform(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTransform arg1 = getqtype<QTransformType>(param_from);
        setqtype<QVariantType>(param_this, QVariant(arg1));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QTransform0, Pointer)
    {
        NODE_RETURN(qt_QTransform_QTransform_QTransform_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QTransform1, Pointer)
    {
        NODE_RETURN(
            qt_QTransform_QTransform_QTransform_QTransform_double_double_double_double_double_double_double_double_double(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
                NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double),
                NODE_ARG(5, double), NODE_ARG(6, double), NODE_ARG(7, double),
                NODE_ARG(8, double), NODE_ARG(9, double)));
    }

    static NODE_IMPLEMENTATION(_n_QTransform2, Pointer)
    {
        NODE_RETURN(
            qt_QTransform_QTransform_QTransform_QTransform_double_double_double_double_double_double(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
                NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double),
                NODE_ARG(5, double), NODE_ARG(6, double)));
    }

    static NODE_IMPLEMENTATION(_n_QTransform3, Pointer)
    {
        NODE_RETURN(qt_QTransform_QTransform_QTransform_QTransform_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m110, double)
    {
        NODE_RETURN(qt_QTransform_m11_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m120, double)
    {
        NODE_RETURN(qt_QTransform_m12_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m130, double)
    {
        NODE_RETURN(qt_QTransform_m13_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m210, double)
    {
        NODE_RETURN(qt_QTransform_m21_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m220, double)
    {
        NODE_RETURN(qt_QTransform_m22_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m230, double)
    {
        NODE_RETURN(qt_QTransform_m23_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m310, double)
    {
        NODE_RETURN(qt_QTransform_m31_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m320, double)
    {
        NODE_RETURN(qt_QTransform_m32_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m330, double)
    {
        NODE_RETURN(qt_QTransform_m33_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_adjoint0, Pointer)
    {
        NODE_RETURN(qt_QTransform_adjoint_QTransform_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_determinant0, double)
    {
        NODE_RETURN(qt_QTransform_determinant_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dx0, double)
    {
        NODE_RETURN(qt_QTransform_dx_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dy0, double)
    {
        NODE_RETURN(qt_QTransform_dy_double_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isAffine0, bool)
    {
        NODE_RETURN(qt_QTransform_isAffine_bool_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIdentity0, bool)
    {
        NODE_RETURN(qt_QTransform_isIdentity_bool_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isInvertible0, bool)
    {
        NODE_RETURN(qt_QTransform_isInvertible_bool_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isRotating0, bool)
    {
        NODE_RETURN(qt_QTransform_isRotating_bool_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isScaling0, bool)
    {
        NODE_RETURN(qt_QTransform_isScaling_bool_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isTranslating0, bool)
    {
        NODE_RETURN(qt_QTransform_isTranslating_bool_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_map1, Pointer)
    {
        NODE_RETURN(qt_QTransform_map_QPointF_QTransform_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_map6, Pointer)
    {
        NODE_RETURN(qt_QTransform_map_QRegion_QTransform_QRegion(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_map9, Pointer)
    {
        NODE_RETURN(qt_QTransform_map_QPoint_QTransform_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapRect0, Pointer)
    {
        NODE_RETURN(qt_QTransform_mapRect_QRectF_QTransform_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapRect1, Pointer)
    {
        NODE_RETURN(qt_QTransform_mapRect_QRect_QTransform_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_reset0, void)
    {
        qt_QTransform_reset_void_QTransform(NODE_THREAD,
                                            NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_rotate0, Pointer)
    {
        NODE_RETURN(qt_QTransform_rotate_QTransform_QTransform_double_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_rotateRadians0, Pointer)
    {
        NODE_RETURN(
            qt_QTransform_rotateRadians_QTransform_QTransform_double_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_scale0, Pointer)
    {
        NODE_RETURN(qt_QTransform_scale_QTransform_QTransform_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_setMatrix0, void)
    {
        qt_QTransform_setMatrix_void_QTransform_double_double_double_double_double_double_double_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double),
            NODE_ARG(5, double), NODE_ARG(6, double), NODE_ARG(7, double),
            NODE_ARG(8, double), NODE_ARG(9, double));
    }

    static NODE_IMPLEMENTATION(_n_shear0, Pointer)
    {
        NODE_RETURN(qt_QTransform_shear_QTransform_QTransform_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_toAffine0, Pointer)
    {
        NODE_RETURN(qt_QTransform_toAffine_QMatrix_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_translate0, Pointer)
    {
        NODE_RETURN(qt_QTransform_translate_QTransform_QTransform_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_transposed0, Pointer)
    {
        NODE_RETURN(qt_QTransform_transposed_QTransform_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_type0, int)
    {
        NODE_RETURN(qt_QTransform_type_int_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(qt_QTransform_operatorBang_EQ__bool_QTransform_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_0, Pointer)
    {
        NODE_RETURN(
            qt_QTransform_operatorStar__QTransform_QTransform_QTransform(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_EQ_0, Pointer)
    {
        NODE_RETURN(qt_QTransform_operatorPlus_EQ__QTransform_QTransform_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorMinus_EQ_0, Pointer)
    {
        NODE_RETURN(
            qt_QTransform_operatorMinus_EQ__QTransform_QTransform_double(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorSlash_EQ_0, Pointer)
    {
        NODE_RETURN(
            qt_QTransform_operatorSlash_EQ__QTransform_QTransform_double(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt_QTransform_operatorEQ_EQ__bool_QTransform_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_fromScale0, Pointer)
    {
        NODE_RETURN(qt_QTransform_fromScale_QTransform_double_double(
            NODE_THREAD, NODE_ARG(0, double), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_fromTranslate0, Pointer)
    {
        NODE_RETURN(qt_QTransform_fromTranslate_QTransform_double_double(
            NODE_THREAD, NODE_ARG(0, double), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_co_n_QVariant0, Pointer)
    {
        NODE_RETURN(qt_QTransform_QVariant_QVariant_QVariant_QTransform(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QTransformType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(new Alias(c, "TransformationType", "int"),
                   new SymbolicConstant(c, "TxNone", "int",
                                        Value(int(QTransform::TxNone))),
                   new SymbolicConstant(c, "TxTranslate", "int",
                                        Value(int(QTransform::TxTranslate))),
                   new SymbolicConstant(c, "TxScale", "int",
                                        Value(int(QTransform::TxScale))),
                   new SymbolicConstant(c, "TxRotate", "int",
                                        Value(int(QTransform::TxRotate))),
                   new SymbolicConstant(c, "TxShear", "int",
                                        Value(int(QTransform::TxShear))),
                   new SymbolicConstant(c, "TxProject", "int",
                                        Value(int(QTransform::TxProject))),
                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QTransform", _n_QTransform0, None, Compiled,
                         qt_QTransform_QTransform_QTransform_QTransform, Return,
                         "qt.QTransform", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(
                c, "QTransform", _n_QTransform1, None, Compiled,
                qt_QTransform_QTransform_QTransform_QTransform_double_double_double_double_double_double_double_double_double,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "m11", "double"), new Param(c, "m12", "double"),
                new Param(c, "m13", "double"), new Param(c, "m21", "double"),
                new Param(c, "m22", "double"), new Param(c, "m23", "double"),
                new Param(c, "m31", "double"), new Param(c, "m32", "double"),
                new Param(c, "m33", "double"), End),
            new Function(
                c, "QTransform", _n_QTransform2, None, Compiled,
                qt_QTransform_QTransform_QTransform_QTransform_double_double_double_double_double_double,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "m11", "double"), new Param(c, "m12", "double"),
                new Param(c, "m21", "double"), new Param(c, "m22", "double"),
                new Param(c, "dx", "double"), new Param(c, "dy", "double"),
                End),
            new Function(c, "QTransform", _n_QTransform3, None, Compiled,
                         qt_QTransform_QTransform_QTransform_QTransform_QMatrix,
                         Return, "qt.QTransform", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            new Function(c, "m11", _n_m110, None, Compiled,
                         qt_QTransform_m11_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m12", _n_m120, None, Compiled,
                         qt_QTransform_m12_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m13", _n_m130, None, Compiled,
                         qt_QTransform_m13_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m21", _n_m210, None, Compiled,
                         qt_QTransform_m21_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m22", _n_m220, None, Compiled,
                         qt_QTransform_m22_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m23", _n_m230, None, Compiled,
                         qt_QTransform_m23_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m31", _n_m310, None, Compiled,
                         qt_QTransform_m31_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m32", _n_m320, None, Compiled,
                         qt_QTransform_m32_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "m33", _n_m330, None, Compiled,
                         qt_QTransform_m33_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "adjoint", _n_adjoint0, None, Compiled,
                         qt_QTransform_adjoint_QTransform_QTransform, Return,
                         "qt.QTransform", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "determinant", _n_determinant0, None, Compiled,
                         qt_QTransform_determinant_double_QTransform, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "dx", _n_dx0, None, Compiled,
                         qt_QTransform_dx_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "dy", _n_dy0, None, Compiled,
                         qt_QTransform_dy_double_QTransform, Return, "double",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            // MISSING: inverted (QTransform; QTransform this, "bool *"
            // invertible)
            new Function(c, "isAffine", _n_isAffine0, None, Compiled,
                         qt_QTransform_isAffine_bool_QTransform, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "isIdentity", _n_isIdentity0, None, Compiled,
                         qt_QTransform_isIdentity_bool_QTransform, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "isInvertible", _n_isInvertible0, None, Compiled,
                         qt_QTransform_isInvertible_bool_QTransform, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "isRotating", _n_isRotating0, None, Compiled,
                         qt_QTransform_isRotating_bool_QTransform, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "isScaling", _n_isScaling0, None, Compiled,
                         qt_QTransform_isScaling_bool_QTransform, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "isTranslating", _n_isTranslating0, None, Compiled,
                         qt_QTransform_isTranslating_bool_QTransform, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            // MISSING: map (void; QTransform this, double x, double y, "qreal
            // *" tx, "qreal *" ty)
            new Function(c, "map", _n_map1, None, Compiled,
                         qt_QTransform_map_QPointF_QTransform_QPointF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "p", "qt.QPointF"), End),
            // MISSING: map ("QLine"; QTransform this, "const QLine &" l)
            // MISSING: map ("QLineF"; QTransform this, "const QLineF &" line)
            // MISSING: map ("QPolygonF"; QTransform this, "const QPolygonF &"
            // polygon) MISSING: map ("QPolygon"; QTransform this, "const
            // QPolygon &" polygon)
            new Function(c, "map", _n_map6, None, Compiled,
                         qt_QTransform_map_QRegion_QTransform_QRegion, Return,
                         "qt.QRegion", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "region", "qt.QRegion"), End),
            // MISSING: map (QPainterPath; QTransform this, "const QPainterPath
            // &" path) MISSING: map (void; QTransform this, int x, int y, "int
            // *" tx, "int *" ty)
            new Function(c, "map", _n_map9, None, Compiled,
                         qt_QTransform_map_QPoint_QTransform_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "point", "qt.QPoint"), End),
            new Function(c, "mapRect", _n_mapRect0, None, Compiled,
                         qt_QTransform_mapRect_QRectF_QTransform_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "mapRect", _n_mapRect1, None, Compiled,
                         qt_QTransform_mapRect_QRect_QTransform_QRect, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            // MISSING: mapToPolygon ("QPolygon"; QTransform this, QRect
            // rectangle)
            new Function(c, "reset", _n_reset0, None, Compiled,
                         qt_QTransform_reset_void_QTransform, Return, "void",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            new Function(c, "rotate", _n_rotate0, None, Compiled,
                         qt_QTransform_rotate_QTransform_QTransform_double_int,
                         Return, "qt.QTransform", Parameters,
                         new Param(c, "this", "qt.QTransform"),
                         new Param(c, "angle", "double"),
                         new Param(c, "axis", "int", Value((int)Qt::ZAxis)),
                         End),
            new Function(
                c, "rotateRadians", _n_rotateRadians0, None, Compiled,
                qt_QTransform_rotateRadians_QTransform_QTransform_double_int,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "angle", "double"),
                new Param(c, "axis", "int", Value((int)Qt::ZAxis)), End),
            new Function(
                c, "scale", _n_scale0, None, Compiled,
                qt_QTransform_scale_QTransform_QTransform_double_double, Return,
                "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "sx", "double"), new Param(c, "sy", "double"),
                End),
            new Function(
                c, "setMatrix", _n_setMatrix0, None, Compiled,
                qt_QTransform_setMatrix_void_QTransform_double_double_double_double_double_double_double_double_double,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "m11", "double"), new Param(c, "m12", "double"),
                new Param(c, "m13", "double"), new Param(c, "m21", "double"),
                new Param(c, "m22", "double"), new Param(c, "m23", "double"),
                new Param(c, "m31", "double"), new Param(c, "m32", "double"),
                new Param(c, "m33", "double"), End),
            new Function(
                c, "shear", _n_shear0, None, Compiled,
                qt_QTransform_shear_QTransform_QTransform_double_double, Return,
                "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "sh", "double"), new Param(c, "sv", "double"),
                End),
            new Function(c, "toAffine", _n_toAffine0, None, Compiled,
                         qt_QTransform_toAffine_QMatrix_QTransform, Return,
                         "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(
                c, "translate", _n_translate0, None, Compiled,
                qt_QTransform_translate_QTransform_QTransform_double_double,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "dx", "double"), new Param(c, "dy", "double"),
                End),
            new Function(c, "transposed", _n_transposed0, None, Compiled,
                         qt_QTransform_transposed_QTransform_QTransform, Return,
                         "qt.QTransform", Parameters,
                         new Param(c, "this", "qt.QTransform"), End),
            new Function(c, "type", _n_type0, None, Compiled,
                         qt_QTransform_type_int_QTransform, Return, "int",
                         Parameters, new Param(c, "this", "qt.QTransform"),
                         End),
            // MISSING: = ("QTransform & operator*"; QTransform this, QTransform
            // matrix) MISSING: = ("QTransform & operator*"; QTransform this,
            // double scalar) static functions
            new Function(c, "fromScale", _n_fromScale0, None, Compiled,
                         qt_QTransform_fromScale_QTransform_double_double,
                         Return, "qt.QTransform", Parameters,
                         new Param(c, "sx", "double"),
                         new Param(c, "sy", "double"), End),
            new Function(c, "fromTranslate", _n_fromTranslate0, None, Compiled,
                         qt_QTransform_fromTranslate_QTransform_double_double,
                         Return, "qt.QTransform", Parameters,
                         new Param(c, "dx", "double"),
                         new Param(c, "dy", "double"), End),
            // MISSING: quadToQuad (bool; "const QPolygonF &" one, "const
            // QPolygonF &" two, QTransform trans) MISSING: quadToSquare (bool;
            // "const QPolygonF &" quad, QTransform trans) MISSING: squareToQuad
            // (bool; "const QPolygonF &" quad, QTransform trans)
            EndArguments);
        globalScope()->addSymbols(
            new Function(
                c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                qt_QTransform_operatorBang_EQ__bool_QTransform_QTransform,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "matrix", "qt.QTransform"), End),
            new Function(
                c, "*", _n_operatorStar_0, Op, Compiled,
                qt_QTransform_operatorStar__QTransform_QTransform_QTransform,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "matrix", "qt.QTransform"), End),
            new Function(
                c, "+=", _n_operatorPlus_EQ_0, Op, Compiled,
                qt_QTransform_operatorPlus_EQ__QTransform_QTransform_double,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "scalar", "double"), End),
            new Function(
                c, "-=", _n_operatorMinus_EQ_0, Op, Compiled,
                qt_QTransform_operatorMinus_EQ__QTransform_QTransform_double,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "scalar", "double"), End),
            new Function(
                c, "/=", _n_operatorSlash_EQ_0, Op, Compiled,
                qt_QTransform_operatorSlash_EQ__QTransform_QTransform_double,
                Return, "qt.QTransform", Parameters,
                new Param(c, "this", "qt.QTransform"),
                new Param(c, "scalar", "double"), End),
            // MISSING: = (QTransform; QTransform this, QTransform matrix)
            new Function(
                c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                qt_QTransform_operatorEQ_EQ__bool_QTransform_QTransform, Return,
                "bool", Parameters, new Param(c, "this", "qt.QTransform"),
                new Param(c, "matrix", "qt.QTransform"), End),
            EndArguments);
        scope()->addSymbols(
            new Function(c, "QVariant", _co_n_QVariant0, Cast, Compiled,
                         qt_QTransform_QVariant_QVariant_QVariant_QTransform,
                         Return, "qt.QVariant", Parameters,
                         new Param(c, "this", "qt.QVariant"),
                         new Param(c, "from", "qt.QTransform"), End),
            EndArguments);
    }

} // namespace Mu
