//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QHeaderViewType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QAbstractItemModelType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QItemSelectionType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QItemSelectionModelType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QHeaderView::~MuQt_QHeaderView()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QHeaderView::MuQt_QHeaderView(Pointer muobj, const CallEnvironment* ce,
                                       Qt::Orientation orientation,
                                       QWidget* parent)
        : QHeaderView(orientation, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QHeaderViewType>(
            c->internName("qt.QHeaderView"));
    }

    void MuQt_QHeaderView::reset()
    {
        if (!_env)
        {
            QHeaderView::reset();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::reset();
        }
    }

    void MuQt_QHeaderView::setModel(QAbstractItemModel* model)
    {
        if (!_env)
        {
            QHeaderView::setModel(model);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QAbstractItemModelType>(
                c, model, "qt.QAbstractItemModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::setModel(model);
        }
    }

    void MuQt_QHeaderView::setVisible(bool v)
    {
        if (!_env)
        {
            QHeaderView::setVisible(v);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(v);
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::setVisible(v);
        }
    }

    QSize MuQt_QHeaderView::sizeHint() const
    {
        if (!_env)
            return QHeaderView::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QHeaderView::sizeHint();
        }
    }

    QSize MuQt_QHeaderView::sectionSizeFromContents(int logicalIndex) const
    {
        if (!_env)
            return QHeaderView::sectionSizeFromContents(logicalIndex);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(logicalIndex);
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QHeaderView::sectionSizeFromContents(logicalIndex);
        }
    }

    void MuQt_QHeaderView::currentChanged(const QModelIndex& current,
                                          const QModelIndex& old)
    {
        if (!_env)
        {
            QHeaderView::currentChanged(current, old);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, current, "qt.QModelIndex"));
            args[2] =
                Value(makeqtype<QModelIndexType>(c, old, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::currentChanged(current, old);
        }
    }

    bool MuQt_QHeaderView::event(QEvent* e)
    {
        if (!_env)
            return QHeaderView::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QHeaderView::event(e);
        }
    }

    int MuQt_QHeaderView::horizontalOffset() const
    {
        if (!_env)
            return QHeaderView::horizontalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QHeaderView::horizontalOffset();
        }
    }

    void MuQt_QHeaderView::mouseDoubleClickEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QHeaderView::mouseDoubleClickEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::mouseDoubleClickEvent(e);
        }
    }

    void MuQt_QHeaderView::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QHeaderView::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::mouseMoveEvent(e);
        }
    }

    void MuQt_QHeaderView::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QHeaderView::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::mousePressEvent(e);
        }
    }

    void MuQt_QHeaderView::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QHeaderView::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::mouseReleaseEvent(e);
        }
    }

    void MuQt_QHeaderView::paintEvent(QPaintEvent* e)
    {
        if (!_env)
        {
            QHeaderView::paintEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, e, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::paintEvent(e);
        }
    }

    void
    MuQt_QHeaderView::setSelection(const QRect& rect,
                                   QItemSelectionModel::SelectionFlags flags)
    {
        if (!_env)
        {
            QHeaderView::setSelection(rect, flags);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            args[2] = Value(int(flags));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::setSelection(rect, flags);
        }
    }

    int MuQt_QHeaderView::verticalOffset() const
    {
        if (!_env)
            return QHeaderView::verticalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QHeaderView::verticalOffset();
        }
    }

    bool MuQt_QHeaderView::viewportEvent(QEvent* e)
    {
        if (!_env)
            return QHeaderView::viewportEvent(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QHeaderView::viewportEvent(e);
        }
    }

    void MuQt_QHeaderView::keyboardSearch(const QString& search)
    {
        if (!_env)
        {
            QHeaderView::keyboardSearch(search);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makestring(c, search));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::keyboardSearch(search);
        }
    }

    void
    MuQt_QHeaderView::setSelectionModel(QItemSelectionModel* selectionModel)
    {
        if (!_env)
        {
            QHeaderView::setSelectionModel(selectionModel);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeinstance<QItemSelectionModelType>(
                c, selectionModel, "qt.QItemSelectionModel"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::setSelectionModel(selectionModel);
        }
    }

    int MuQt_QHeaderView::sizeHintForColumn(int column) const
    {
        if (!_env)
            return QHeaderView::sizeHintForColumn(column);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(column);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QHeaderView::sizeHintForColumn(column);
        }
    }

    int MuQt_QHeaderView::sizeHintForRow(int row) const
    {
        if (!_env)
            return QHeaderView::sizeHintForRow(row);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(row);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QHeaderView::sizeHintForRow(row);
        }
    }

    QVariant
    MuQt_QHeaderView::inputMethodQuery(Qt::InputMethodQuery query) const
    {
        if (!_env)
            return QHeaderView::inputMethodQuery(query);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(query));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QHeaderView::inputMethodQuery(query);
        }
    }

    bool MuQt_QHeaderView::edit(const QModelIndex& index,
                                QAbstractItemView::EditTrigger trigger,
                                QEvent* event)
    {
        if (!_env)
            return QHeaderView::edit(index, trigger, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(int(trigger));
            args[3] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QHeaderView::edit(index, trigger, event);
        }
    }

    bool MuQt_QHeaderView::isIndexHidden(
        const QModelIndex& index) const // pure virtual
    {
        if (!_env)
            return defaultValue<bool>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return defaultValue<bool>();
        }
    }

    QModelIndexList MuQt_QHeaderView::selectedIndexes() const
    {
        if (!_env)
            return QHeaderView::selectedIndexes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qmodelindexlist(rval._Pointer);
        }
        else
        {
            return QHeaderView::selectedIndexes();
        }
    }

    QItemSelectionModel::SelectionFlags
    MuQt_QHeaderView::selectionCommand(const QModelIndex& index,
                                       const QEvent* event) const
    {
        if (!_env)
            return QHeaderView::selectionCommand(index, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (QItemSelectionModel::SelectionFlags)(rval._int);
        }
        else
        {
            return QHeaderView::selectionCommand(index, event);
        }
    }

    void MuQt_QHeaderView::startDrag(Qt::DropActions supportedActions)
    {
        if (!_env)
        {
            QHeaderView::startDrag(supportedActions);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(supportedActions));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::startDrag(supportedActions);
        }
    }

    QRegion MuQt_QHeaderView::visualRegionForSelection(
        const QItemSelection& selection) const // pure virtual
    {
        if (!_env)
            return defaultValue<QRegion>();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selection,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
            return getqtype<QRegionType>(rval._Pointer);
        }
        else
        {
            return defaultValue<QRegion>();
        }
    }

    void MuQt_QHeaderView::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QHeaderView::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::dragEnterEvent(event);
        }
    }

    void MuQt_QHeaderView::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QHeaderView::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::dragLeaveEvent(event);
        }
    }

    void MuQt_QHeaderView::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QHeaderView::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::dragMoveEvent(event);
        }
    }

    void MuQt_QHeaderView::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QHeaderView::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::dropEvent(event);
        }
    }

    void MuQt_QHeaderView::focusInEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QHeaderView::focusInEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::focusInEvent(event);
        }
    }

    bool MuQt_QHeaderView::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QHeaderView::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[32];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QHeaderView::focusNextPrevChild(next);
        }
    }

    void MuQt_QHeaderView::focusOutEvent(QFocusEvent* event)
    {
        if (!_env)
        {
            QHeaderView::focusOutEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[33];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QFocusEventType>(c, event, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::focusOutEvent(event);
        }
    }

    void MuQt_QHeaderView::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QHeaderView::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[34];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::keyPressEvent(event);
        }
    }

    void MuQt_QHeaderView::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QHeaderView::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[35];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::resizeEvent(event);
        }
    }

    void MuQt_QHeaderView::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QHeaderView::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[36];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QHeaderView::timerEvent(event);
        }
    }

    QSize MuQt_QHeaderView::viewportSizeHint() const
    {
        if (!_env)
            return QHeaderView::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[37];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QHeaderView::viewportSizeHint();
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QHeaderViewType::QHeaderViewType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QHeaderViewType::~QHeaderViewType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QHeaderView_QHeaderView_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QHeaderView* w = object<QHeaderView>(widget))
        {
            QHeaderViewType* type =
                c->findSymbolOfTypeByQualifiedName<QHeaderViewType>(
                    c->internName("qt.QHeaderView"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QHeaderView_QHeaderView_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QHeaderView_QHeaderView_QHeaderView_QHeaderView_int_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_orientation,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        Qt::Orientation arg1 = (Qt::Orientation)(param_orientation);
        QWidget* arg2 = object<QWidget>(param_parent);
        setobject(param_this, new MuQt_QHeaderView(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    int qt_QHeaderView_count_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->count();
    }

    int
    qt_QHeaderView_hiddenSectionCount_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->hiddenSectionCount();
    }

    void qt_QHeaderView_hideSection_void_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        arg0->hideSection(arg1);
    }

    bool qt_QHeaderView_isSectionHidden_bool_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return arg0->isSectionHidden(arg1);
    }

    int qt_QHeaderView_length_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->length();
    }

    int qt_QHeaderView_logicalIndex_int_QHeaderView_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_visualIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_visualIndex);
        return arg0->logicalIndex(arg1);
    }

    int qt_QHeaderView_logicalIndexAt_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_position);
        return arg0->logicalIndexAt(arg1);
    }

    int qt_QHeaderView_logicalIndexAt_int_QHeaderView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return arg0->logicalIndexAt(arg1, arg2);
    }

    int qt_QHeaderView_logicalIndexAt_int_QHeaderView_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return arg0->logicalIndexAt(arg1);
    }

    void qt_QHeaderView_moveSection_void_QHeaderView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_from,
        int param_to)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_from);
        int arg2 = (int)(param_to);
        arg0->moveSection(arg1, arg2);
    }

    int qt_QHeaderView_offset_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->offset();
    }

    int qt_QHeaderView_orientation_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return int(arg0->orientation());
    }

    int qt_QHeaderView_resizeContentsPrecision_int_QHeaderView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->resizeContentsPrecision();
    }

    void qt_QHeaderView_resizeSection_void_QHeaderView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex,
        int param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        int arg2 = (int)(param_size);
        arg0->resizeSection(arg1, arg2);
    }

    void qt_QHeaderView_resizeSections_void_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QHeaderView::ResizeMode arg1 = (QHeaderView::ResizeMode)(param_mode);
        arg0->resizeSections(arg1);
    }

    bool qt_QHeaderView_restoreState_bool_QHeaderView_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_state)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_state);
        return arg0->restoreState(arg1);
    }

    Pointer
    qt_QHeaderView_saveState_QByteArray_QHeaderView(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return makeqtype<QByteArrayType>(c, arg0->saveState(), "qt.QByteArray");
    }

    int qt_QHeaderView_sectionPosition_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return arg0->sectionPosition(arg1);
    }

    int qt_QHeaderView_sectionResizeMode_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return int(arg0->sectionResizeMode(arg1));
    }

    int qt_QHeaderView_sectionSize_int_QHeaderView_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return arg0->sectionSize(arg1);
    }

    int qt_QHeaderView_sectionSizeHint_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return arg0->sectionSizeHint(arg1);
    }

    int qt_QHeaderView_sectionViewportPosition_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return arg0->sectionViewportPosition(arg1);
    }

    bool
    qt_QHeaderView_sectionsClickable_bool_QHeaderView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->sectionsClickable();
    }

    bool qt_QHeaderView_sectionsHidden_bool_QHeaderView(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->sectionsHidden();
    }

    bool
    qt_QHeaderView_sectionsMovable_bool_QHeaderView(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->sectionsMovable();
    }

    bool qt_QHeaderView_sectionsMoved_bool_QHeaderView(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->sectionsMoved();
    }

    void qt_QHeaderView_setResizeContentsPrecision_void_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_precision)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_precision);
        arg0->setResizeContentsPrecision(arg1);
    }

    void qt_QHeaderView_setSectionHidden_void_QHeaderView_int_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex,
        bool param_hide)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        bool arg2 = (bool)(param_hide);
        arg0->setSectionHidden(arg1, arg2);
    }

    void qt_QHeaderView_setSectionResizeMode_void_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QHeaderView::ResizeMode arg1 = (QHeaderView::ResizeMode)(param_mode);
        arg0->setSectionResizeMode(arg1);
    }

    void qt_QHeaderView_setSectionResizeMode_void_QHeaderView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        QHeaderView::ResizeMode arg2 = (QHeaderView::ResizeMode)(param_mode);
        arg0->setSectionResizeMode(arg1, arg2);
    }

    void qt_QHeaderView_setSectionsClickable_void_QHeaderView_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_clickable)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        bool arg1 = (bool)(param_clickable);
        arg0->setSectionsClickable(arg1);
    }

    void qt_QHeaderView_setSectionsMovable_void_QHeaderView_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_movable)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        bool arg1 = (bool)(param_movable);
        arg0->setSectionsMovable(arg1);
    }

    void qt_QHeaderView_setSortIndicator_void_QHeaderView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex,
        int param_order)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        Qt::SortOrder arg2 = (Qt::SortOrder)(param_order);
        arg0->setSortIndicator(arg1, arg2);
    }

    void qt_QHeaderView_showSection_void_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        arg0->showSection(arg1);
    }

    int
    qt_QHeaderView_sortIndicatorOrder_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return int(arg0->sortIndicatorOrder());
    }

    int
    qt_QHeaderView_sortIndicatorSection_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->sortIndicatorSection();
    }

    int
    qt_QHeaderView_stretchSectionCount_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return arg0->stretchSectionCount();
    }

    void qt_QHeaderView_swapSections_void_QHeaderView_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_first,
        int param_second)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_first);
        int arg2 = (int)(param_second);
        arg0->swapSections(arg1, arg2);
    }

    int qt_QHeaderView_visualIndex_int_QHeaderView_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return arg0->visualIndex(arg1);
    }

    int qt_QHeaderView_visualIndexAt_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_position);
        return arg0->visualIndexAt(arg1);
    }

    void qt_QHeaderView_reset_void_QHeaderView(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        if (isMuQtObject(arg0))
            arg0->QHeaderView::reset();
        else
            arg0->reset();
    }

    void qt_QHeaderView_setModel_void_QHeaderView_QAbstractItemModel(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_model)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QAbstractItemModel* arg1 = object<QAbstractItemModel>(param_model);
        if (isMuQtObject(arg0))
            arg0->QHeaderView::setModel(arg1);
        else
            arg0->setModel(arg1);
    }

    void qt_QHeaderView_setVisible_void_QHeaderView_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_v)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        bool arg1 = (bool)(param_v);
        if (isMuQtObject(arg0))
            arg0->QHeaderView::setVisible(arg1);
        else
            arg0->setVisible(arg1);
    }

    Pointer qt_QHeaderView_sizeHint_QSize_QHeaderView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QHeaderView::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    Pointer qt_QHeaderView_sectionSizeFromContents_QSize_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_logicalIndex)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_logicalIndex);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c,
                         ((MuQt_QHeaderView*)arg0)
                             ->sectionSizeFromContents_pub_parent(arg1),
                         "qt.QSize")
                   : makeqtype<QSizeType>(
                         c,
                         ((MuQt_QHeaderView*)arg0)
                             ->sectionSizeFromContents_pub(arg1),
                         "qt.QSize");
    }

    void qt_QHeaderView_currentChanged_void_QHeaderView_QModelIndex_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_current,
        Pointer param_old)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_current);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_old);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->currentChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QHeaderView*)arg0)->currentChanged_pub(arg1, arg2);
    }

    bool qt_QHeaderView_event_bool_QHeaderView_QEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QHeaderView*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QHeaderView*)arg0)->event_pub(arg1);
    }

    int qt_QHeaderView_horizontalOffset_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QHeaderView*)arg0)->horizontalOffset_pub_parent()
                   : ((MuQt_QHeaderView*)arg0)->horizontalOffset_pub();
    }

    void qt_QHeaderView_mouseDoubleClickEvent_void_QHeaderView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QHeaderView_mouseMoveEvent_void_QHeaderView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QHeaderView_mousePressEvent_void_QHeaderView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QHeaderView_mouseReleaseEvent_void_QHeaderView_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QHeaderView_paintEvent_void_QHeaderView_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QHeaderView_setSelection_void_QHeaderView_QRect_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_flags);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->setSelection_pub_parent(arg1, arg2);
        else
            ((MuQt_QHeaderView*)arg0)->setSelection_pub(arg1, arg2);
    }

    int qt_QHeaderView_verticalOffset_int_QHeaderView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QHeaderView*)arg0)->verticalOffset_pub_parent()
                   : ((MuQt_QHeaderView*)arg0)->verticalOffset_pub();
    }

    bool qt_QHeaderView_viewportEvent_bool_QHeaderView_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QHeaderView*)arg0)->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QHeaderView*)arg0)->viewportEvent_pub(arg1);
    }

    void qt_QHeaderView_keyboardSearch_void_QHeaderView_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_search)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QString arg1 = qstring(param_search);
        if (isMuQtObject(arg0))
            arg0->QHeaderView::keyboardSearch(arg1);
        else
            arg0->keyboardSearch(arg1);
    }

    void qt_QHeaderView_setSelectionModel_void_QHeaderView_QItemSelectionModel(
        Mu::Thread& NODE_THREAD, Pointer param_this,
        Pointer param_selectionModel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QItemSelectionModel* arg1 =
            object<QItemSelectionModel>(param_selectionModel);
        if (isMuQtObject(arg0))
            arg0->QHeaderView::setSelectionModel(arg1);
        else
            arg0->setSelectionModel(arg1);
    }

    int qt_QHeaderView_sizeHintForColumn_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_column)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_column);
        return isMuQtObject(arg0) ? arg0->QHeaderView::sizeHintForColumn(arg1)
                                  : arg0->sizeHintForColumn(arg1);
    }

    int qt_QHeaderView_sizeHintForRow_int_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        int arg1 = (int)(param_row);
        return isMuQtObject(arg0) ? arg0->QHeaderView::sizeHintForRow(arg1)
                                  : arg0->sizeHintForRow(arg1);
    }

    Pointer qt_QHeaderView_inputMethodQuery_QVariant_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_query)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_query);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QHeaderView::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    bool qt_QHeaderView_edit_bool_QHeaderView_QModelIndex_int_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        int param_trigger, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        QAbstractItemView::EditTrigger arg2 =
            (QAbstractItemView::EditTrigger)(param_trigger);
        QEvent* arg3 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QHeaderView*)arg0)
                         ->edit_pub_parent(arg1, arg2, arg3)
                   : ((MuQt_QHeaderView*)arg0)->edit_pub(arg1, arg2, arg3);
    }

    bool qt_QHeaderView_isIndexHidden_bool_QHeaderView_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return ((MuQt_QHeaderView*)arg0)->isIndexHidden_pub(arg1);
    }

    Pointer qt_QHeaderView_selectedIndexes_qt__QModelIndexBSB_ESB__QHeaderView(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqmodelindexlist(c, ((MuQt_QHeaderView*)arg0)
                                                ->selectedIndexes_pub_parent())
                   : makeqmodelindexlist(
                         c, ((MuQt_QHeaderView*)arg0)->selectedIndexes_pub());
    }

    int qt_QHeaderView_selectionCommand_int_QHeaderView_QModelIndex_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        const QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? int(((MuQt_QHeaderView*)arg0)
                             ->selectionCommand_pub_parent(arg1, arg2))
                   : int(((MuQt_QHeaderView*)arg0)
                             ->selectionCommand_pub(arg1, arg2));
    }

    void qt_QHeaderView_startDrag_void_QHeaderView_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_supportedActions)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        Qt::DropActions arg1 = (Qt::DropActions)(param_supportedActions);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->startDrag_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->startDrag_pub(arg1);
    }

    Pointer
    qt_QHeaderView_visualRegionForSelection_QRegion_QHeaderView_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selection)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selection);
        return makeqtype<QRegionType>(
            c, ((MuQt_QHeaderView*)arg0)->visualRegionForSelection_pub(arg1),
            "qt.QRegion");
    }

    void qt_QHeaderView_dragEnterEvent_void_QHeaderView_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QHeaderView_dragLeaveEvent_void_QHeaderView_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QHeaderView_dragMoveEvent_void_QHeaderView_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QHeaderView_dropEvent_void_QHeaderView_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QHeaderView_focusInEvent_void_QHeaderView_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->focusInEvent_pub(arg1);
    }

    bool qt_QHeaderView_focusNextPrevChild_bool_QHeaderView_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QHeaderView*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QHeaderView*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QHeaderView_focusOutEvent_void_QHeaderView_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QHeaderView_keyPressEvent_void_QHeaderView_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QHeaderView_resizeEvent_void_QHeaderView_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QHeaderView_timerEvent_void_QHeaderView_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QHeaderView*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QHeaderView*)arg0)->timerEvent_pub(arg1);
    }

    Pointer
    qt_QHeaderView_viewportSizeHint_QSize_QHeaderView(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QHeaderView* arg0 = object<QHeaderView>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QHeaderView*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QHeaderView*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    static NODE_IMPLEMENTATION(_n_QHeaderView0, Pointer)
    {
        NODE_RETURN(
            qt_QHeaderView_QHeaderView_QHeaderView_QHeaderView_int_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_count0, int)
    {
        NODE_RETURN(qt_QHeaderView_count_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hiddenSectionCount0, int)
    {
        NODE_RETURN(qt_QHeaderView_hiddenSectionCount_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_hideSection0, void)
    {
        qt_QHeaderView_hideSection_void_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_isSectionHidden0, bool)
    {
        NODE_RETURN(qt_QHeaderView_isSectionHidden_bool_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_length0, int)
    {
        NODE_RETURN(qt_QHeaderView_length_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_logicalIndex0, int)
    {
        NODE_RETURN(qt_QHeaderView_logicalIndex_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_logicalIndexAt0, int)
    {
        NODE_RETURN(qt_QHeaderView_logicalIndexAt_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_logicalIndexAt1, int)
    {
        NODE_RETURN(qt_QHeaderView_logicalIndexAt_int_QHeaderView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_logicalIndexAt2, int)
    {
        NODE_RETURN(qt_QHeaderView_logicalIndexAt_int_QHeaderView_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_moveSection0, void)
    {
        qt_QHeaderView_moveSection_void_QHeaderView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_offset0, int)
    {
        NODE_RETURN(qt_QHeaderView_offset_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_orientation0, int)
    {
        NODE_RETURN(qt_QHeaderView_orientation_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_resizeContentsPrecision0, int)
    {
        NODE_RETURN(qt_QHeaderView_resizeContentsPrecision_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_resizeSection0, void)
    {
        qt_QHeaderView_resizeSection_void_QHeaderView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_resizeSections0, void)
    {
        qt_QHeaderView_resizeSections_void_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_restoreState0, bool)
    {
        NODE_RETURN(qt_QHeaderView_restoreState_bool_QHeaderView_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_saveState0, Pointer)
    {
        NODE_RETURN(qt_QHeaderView_saveState_QByteArray_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sectionPosition0, int)
    {
        NODE_RETURN(qt_QHeaderView_sectionPosition_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sectionResizeMode0, int)
    {
        NODE_RETURN(qt_QHeaderView_sectionResizeMode_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sectionSize0, int)
    {
        NODE_RETURN(qt_QHeaderView_sectionSize_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sectionSizeHint0, int)
    {
        NODE_RETURN(qt_QHeaderView_sectionSizeHint_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sectionViewportPosition0, int)
    {
        NODE_RETURN(qt_QHeaderView_sectionViewportPosition_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sectionsClickable0, bool)
    {
        NODE_RETURN(qt_QHeaderView_sectionsClickable_bool_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sectionsHidden0, bool)
    {
        NODE_RETURN(qt_QHeaderView_sectionsHidden_bool_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sectionsMovable0, bool)
    {
        NODE_RETURN(qt_QHeaderView_sectionsMovable_bool_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sectionsMoved0, bool)
    {
        NODE_RETURN(qt_QHeaderView_sectionsMoved_bool_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setResizeContentsPrecision0, void)
    {
        qt_QHeaderView_setResizeContentsPrecision_void_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setSectionHidden0, void)
    {
        qt_QHeaderView_setSectionHidden_void_QHeaderView_int_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, bool));
    }

    static NODE_IMPLEMENTATION(_n_setSectionResizeMode0, void)
    {
        qt_QHeaderView_setSectionResizeMode_void_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setSectionResizeMode1, void)
    {
        qt_QHeaderView_setSectionResizeMode_void_QHeaderView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setSectionsClickable0, void)
    {
        qt_QHeaderView_setSectionsClickable_void_QHeaderView_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_setSectionsMovable0, void)
    {
        qt_QHeaderView_setSectionsMovable_void_QHeaderView_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_setSortIndicator0, void)
    {
        qt_QHeaderView_setSortIndicator_void_QHeaderView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_showSection0, void)
    {
        qt_QHeaderView_showSection_void_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_sortIndicatorOrder0, int)
    {
        NODE_RETURN(qt_QHeaderView_sortIndicatorOrder_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sortIndicatorSection0, int)
    {
        NODE_RETURN(qt_QHeaderView_sortIndicatorSection_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_stretchSectionCount0, int)
    {
        NODE_RETURN(qt_QHeaderView_stretchSectionCount_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_swapSections0, void)
    {
        qt_QHeaderView_swapSections_void_QHeaderView_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_visualIndex0, int)
    {
        NODE_RETURN(qt_QHeaderView_visualIndex_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_visualIndexAt0, int)
    {
        NODE_RETURN(qt_QHeaderView_visualIndexAt_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_reset0, void)
    {
        qt_QHeaderView_reset_void_QHeaderView(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setModel0, void)
    {
        qt_QHeaderView_setModel_void_QHeaderView_QAbstractItemModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setVisible0, void)
    {
        qt_QHeaderView_setVisible_void_QHeaderView_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QHeaderView_sizeHint_QSize_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sectionSizeFromContents0, Pointer)
    {
        NODE_RETURN(
            qt_QHeaderView_sectionSizeFromContents_QSize_QHeaderView_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_currentChanged0, void)
    {
        qt_QHeaderView_currentChanged_void_QHeaderView_QModelIndex_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QHeaderView_event_bool_QHeaderView_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_horizontalOffset0, int)
    {
        NODE_RETURN(qt_QHeaderView_horizontalOffset_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QHeaderView_mouseDoubleClickEvent_void_QHeaderView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QHeaderView_mouseMoveEvent_void_QHeaderView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QHeaderView_mousePressEvent_void_QHeaderView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QHeaderView_mouseReleaseEvent_void_QHeaderView_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QHeaderView_paintEvent_void_QHeaderView_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QHeaderView_setSelection_void_QHeaderView_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_verticalOffset0, int)
    {
        NODE_RETURN(qt_QHeaderView_verticalOffset_int_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(qt_QHeaderView_viewportEvent_bool_QHeaderView_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyboardSearch0, void)
    {
        qt_QHeaderView_keyboardSearch_void_QHeaderView_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelectionModel0, void)
    {
        qt_QHeaderView_setSelectionModel_void_QHeaderView_QItemSelectionModel(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForColumn0, int)
    {
        NODE_RETURN(qt_QHeaderView_sizeHintForColumn_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHintForRow0, int)
    {
        NODE_RETURN(qt_QHeaderView_sizeHintForRow_int_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QHeaderView_inputMethodQuery_QVariant_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_edit0, bool)
    {
        NODE_RETURN(qt_QHeaderView_edit_bool_QHeaderView_QModelIndex_int_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIndexHidden0, bool)
    {
        NODE_RETURN(qt_QHeaderView_isIndexHidden_bool_QHeaderView_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectedIndexes0, Pointer)
    {
        NODE_RETURN(
            qt_QHeaderView_selectedIndexes_qt__QModelIndexBSB_ESB__QHeaderView(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionCommand0, int)
    {
        NODE_RETURN(
            qt_QHeaderView_selectionCommand_int_QHeaderView_QModelIndex_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_startDrag0, void)
    {
        qt_QHeaderView_startDrag_void_QHeaderView_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_visualRegionForSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QHeaderView_visualRegionForSelection_QRegion_QHeaderView_QItemSelection(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QHeaderView_dragEnterEvent_void_QHeaderView_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QHeaderView_dragLeaveEvent_void_QHeaderView_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QHeaderView_dragMoveEvent_void_QHeaderView_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QHeaderView_dropEvent_void_QHeaderView_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QHeaderView_focusInEvent_void_QHeaderView_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QHeaderView_focusNextPrevChild_bool_QHeaderView_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QHeaderView_focusOutEvent_void_QHeaderView_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QHeaderView_keyPressEvent_void_QHeaderView_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QHeaderView_resizeEvent_void_QHeaderView_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QHeaderView_timerEvent_void_QHeaderView_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QHeaderView_viewportSizeHint_QSize_QHeaderView(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QHeaderViewType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QHeaderView_QHeaderView_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QHeaderView", _n_QHeaderView0, None, Compiled,
                qt_QHeaderView_QHeaderView_QHeaderView_QHeaderView_int_QWidget,
                Return, "qt.QHeaderView", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "orientation", "int"),
                new Param(c, "parent", "qt.QWidget"), End),
            // PROP: cascadingSectionResizes (bool; QHeaderView this)
            new Function(c, "count", _n_count0, None, Compiled,
                         qt_QHeaderView_count_int_QHeaderView, Return, "int",
                         Parameters, new Param(c, "this", "qt.QHeaderView"),
                         End),
            // PROP: defaultAlignment (flags Qt::Alignment; QHeaderView this)
            // PROP: defaultSectionSize (int; QHeaderView this)
            new Function(
                c, "hiddenSectionCount", _n_hiddenSectionCount0, None, Compiled,
                qt_QHeaderView_hiddenSectionCount_int_QHeaderView, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            new Function(c, "hideSection", _n_hideSection0, None, Compiled,
                         qt_QHeaderView_hideSection_void_QHeaderView_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "logicalIndex", "int"), End),
            // PROP: highlightSections (bool; QHeaderView this)
            new Function(
                c, "isSectionHidden", _n_isSectionHidden0, None, Compiled,
                qt_QHeaderView_isSectionHidden_bool_QHeaderView_int, Return,
                "bool", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"), End),
            // PROP: isSortIndicatorShown (bool; QHeaderView this)
            new Function(c, "length", _n_length0, None, Compiled,
                         qt_QHeaderView_length_int_QHeaderView, Return, "int",
                         Parameters, new Param(c, "this", "qt.QHeaderView"),
                         End),
            new Function(c, "logicalIndex", _n_logicalIndex0, None, Compiled,
                         qt_QHeaderView_logicalIndex_int_QHeaderView_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "visualIndex", "int"), End),
            new Function(
                c, "logicalIndexAt", _n_logicalIndexAt0, None, Compiled,
                qt_QHeaderView_logicalIndexAt_int_QHeaderView_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "position", "int"), End),
            new Function(
                c, "logicalIndexAt", _n_logicalIndexAt1, None, Compiled,
                qt_QHeaderView_logicalIndexAt_int_QHeaderView_int_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "x", "int"), new Param(c, "y", "int"), End),
            new Function(
                c, "logicalIndexAt", _n_logicalIndexAt2, None, Compiled,
                qt_QHeaderView_logicalIndexAt_int_QHeaderView_QPoint, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "pos", "qt.QPoint"), End),
            // PROP: maximumSectionSize (int; QHeaderView this)
            // PROP: minimumSectionSize (int; QHeaderView this)
            new Function(
                c, "moveSection", _n_moveSection0, None, Compiled,
                qt_QHeaderView_moveSection_void_QHeaderView_int_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "from", "int"), new Param(c, "to", "int"), End),
            new Function(c, "offset", _n_offset0, None, Compiled,
                         qt_QHeaderView_offset_int_QHeaderView, Return, "int",
                         Parameters, new Param(c, "this", "qt.QHeaderView"),
                         End),
            new Function(c, "orientation", _n_orientation0, None, Compiled,
                         qt_QHeaderView_orientation_int_QHeaderView, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            // PROP: resetDefaultSectionSize (void; QHeaderView this)
            new Function(c, "resizeContentsPrecision",
                         _n_resizeContentsPrecision0, None, Compiled,
                         qt_QHeaderView_resizeContentsPrecision_int_QHeaderView,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            new Function(c, "resizeSection", _n_resizeSection0, None, Compiled,
                         qt_QHeaderView_resizeSection_void_QHeaderView_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "logicalIndex", "int"),
                         new Param(c, "size", "int"), End),
            new Function(
                c, "resizeSections", _n_resizeSections0, None, Compiled,
                qt_QHeaderView_resizeSections_void_QHeaderView_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "mode", "int"), End),
            new Function(
                c, "restoreState", _n_restoreState0, None, Compiled,
                qt_QHeaderView_restoreState_bool_QHeaderView_QByteArray, Return,
                "bool", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "state", "qt.QByteArray"), End),
            new Function(c, "saveState", _n_saveState0, None, Compiled,
                         qt_QHeaderView_saveState_QByteArray_QHeaderView,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            new Function(
                c, "sectionPosition", _n_sectionPosition0, None, Compiled,
                qt_QHeaderView_sectionPosition_int_QHeaderView_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"), End),
            new Function(
                c, "sectionResizeMode", _n_sectionResizeMode0, None, Compiled,
                qt_QHeaderView_sectionResizeMode_int_QHeaderView_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"), End),
            new Function(c, "sectionSize", _n_sectionSize0, None, Compiled,
                         qt_QHeaderView_sectionSize_int_QHeaderView_int, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "logicalIndex", "int"), End),
            new Function(
                c, "sectionSizeHint", _n_sectionSizeHint0, None, Compiled,
                qt_QHeaderView_sectionSizeHint_int_QHeaderView_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"), End),
            new Function(
                c, "sectionViewportPosition", _n_sectionViewportPosition0, None,
                Compiled,
                qt_QHeaderView_sectionViewportPosition_int_QHeaderView_int,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"), End),
            new Function(c, "sectionsClickable", _n_sectionsClickable0, None,
                         Compiled,
                         qt_QHeaderView_sectionsClickable_bool_QHeaderView,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            new Function(
                c, "sectionsHidden", _n_sectionsHidden0, None, Compiled,
                qt_QHeaderView_sectionsHidden_bool_QHeaderView, Return, "bool",
                Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            new Function(
                c, "sectionsMovable", _n_sectionsMovable0, None, Compiled,
                qt_QHeaderView_sectionsMovable_bool_QHeaderView, Return, "bool",
                Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            new Function(c, "sectionsMoved", _n_sectionsMoved0, None, Compiled,
                         qt_QHeaderView_sectionsMoved_bool_QHeaderView, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            // PROP: setCascadingSectionResizes (void; QHeaderView this, bool
            // enable) PROP: setDefaultAlignment (void; QHeaderView this, flags
            // Qt::Alignment alignment) PROP: setDefaultSectionSize (void;
            // QHeaderView this, int size) PROP: setHighlightSections (void;
            // QHeaderView this, bool highlight) PROP: setMaximumSectionSize
            // (void; QHeaderView this, int size) PROP: setMinimumSectionSize
            // (void; QHeaderView this, int size)
            new Function(
                c, "setResizeContentsPrecision", _n_setResizeContentsPrecision0,
                None, Compiled,
                qt_QHeaderView_setResizeContentsPrecision_void_QHeaderView_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "precision", "int"), End),
            new Function(
                c, "setSectionHidden", _n_setSectionHidden0, None, Compiled,
                qt_QHeaderView_setSectionHidden_void_QHeaderView_int_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"),
                new Param(c, "hide", "bool"), End),
            new Function(
                c, "setSectionResizeMode", _n_setSectionResizeMode0, None,
                Compiled,
                qt_QHeaderView_setSectionResizeMode_void_QHeaderView_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "mode", "int"), End),
            new Function(
                c, "setSectionResizeMode", _n_setSectionResizeMode1, None,
                Compiled,
                qt_QHeaderView_setSectionResizeMode_void_QHeaderView_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"),
                new Param(c, "mode", "int"), End),
            new Function(
                c, "setSectionsClickable", _n_setSectionsClickable0, None,
                Compiled,
                qt_QHeaderView_setSectionsClickable_void_QHeaderView_bool,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "clickable", "bool"), End),
            new Function(
                c, "setSectionsMovable", _n_setSectionsMovable0, None, Compiled,
                qt_QHeaderView_setSectionsMovable_void_QHeaderView_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "movable", "bool"), End),
            new Function(
                c, "setSortIndicator", _n_setSortIndicator0, None, Compiled,
                qt_QHeaderView_setSortIndicator_void_QHeaderView_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"),
                new Param(c, "order", "int"), End),
            // PROP: setSortIndicatorShown (void; QHeaderView this, bool show)
            // PROP: setStretchLastSection (void; QHeaderView this, bool
            // stretch)
            new Function(c, "showSection", _n_showSection0, None, Compiled,
                         qt_QHeaderView_showSection_void_QHeaderView_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "logicalIndex", "int"), End),
            new Function(
                c, "sortIndicatorOrder", _n_sortIndicatorOrder0, None, Compiled,
                qt_QHeaderView_sortIndicatorOrder_int_QHeaderView, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            new Function(c, "sortIndicatorSection", _n_sortIndicatorSection0,
                         None, Compiled,
                         qt_QHeaderView_sortIndicatorSection_int_QHeaderView,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            // PROP: stretchLastSection (bool; QHeaderView this)
            new Function(c, "stretchSectionCount", _n_stretchSectionCount0,
                         None, Compiled,
                         qt_QHeaderView_stretchSectionCount_int_QHeaderView,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"), End),
            new Function(c, "swapSections", _n_swapSections0, None, Compiled,
                         qt_QHeaderView_swapSections_void_QHeaderView_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "first", "int"),
                         new Param(c, "second", "int"), End),
            new Function(c, "visualIndex", _n_visualIndex0, None, Compiled,
                         qt_QHeaderView_visualIndex_int_QHeaderView_int, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "logicalIndex", "int"), End),
            new Function(c, "visualIndexAt", _n_visualIndexAt0, None, Compiled,
                         qt_QHeaderView_visualIndexAt_int_QHeaderView_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QHeaderView"),
                         new Param(c, "position", "int"), End),
            _func[0] = new MemberFunction(
                c, "reset", _n_reset0, None, Compiled,
                qt_QHeaderView_reset_void_QHeaderView, Return, "void",
                Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            _func[1] = new MemberFunction(
                c, "setModel", _n_setModel0, None, Compiled,
                qt_QHeaderView_setModel_void_QHeaderView_QAbstractItemModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "model", "qt.QAbstractItemModel"), End),
            _func[2] = new MemberFunction(
                c, "setVisible", _n_setVisible0, None, Compiled,
                qt_QHeaderView_setVisible_void_QHeaderView_bool, Return, "void",
                Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "v", "bool"), End),
            _func[3] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QHeaderView_sizeHint_QSize_QHeaderView, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            // MISSING: initStyleOption (void; QHeaderView this,
            // "QStyleOptionHeader *" option) // protected MISSING: paintSection
            // (void; QHeaderView this, "QPainter *" painter, QRect rect, int
            // logicalIndex) // protected
            _func[4] = new MemberFunction(
                c, "sectionSizeFromContents", _n_sectionSizeFromContents0, None,
                Compiled,
                qt_QHeaderView_sectionSizeFromContents_QSize_QHeaderView_int,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "logicalIndex", "int"), End),
            _func[5] = new MemberFunction(
                c, "currentChanged", _n_currentChanged0, None, Compiled,
                qt_QHeaderView_currentChanged_void_QHeaderView_QModelIndex_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "current", "qt.QModelIndex"),
                new Param(c, "old", "qt.QModelIndex"), End),
            _func[6] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QHeaderView_event_bool_QHeaderView_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[7] = new MemberFunction(
                c, "horizontalOffset", _n_horizontalOffset0, None, Compiled,
                qt_QHeaderView_horizontalOffset_int_QHeaderView, Return, "int",
                Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            _func[8] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QHeaderView_mouseDoubleClickEvent_void_QHeaderView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[9] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QHeaderView_mouseMoveEvent_void_QHeaderView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[10] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QHeaderView_mousePressEvent_void_QHeaderView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[11] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QHeaderView_mouseReleaseEvent_void_QHeaderView_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[12] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QHeaderView_paintEvent_void_QHeaderView_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QPaintEvent"), End),
            _func[13] = new MemberFunction(
                c, "setSelection", _n_setSelection0, None, Compiled,
                qt_QHeaderView_setSelection_void_QHeaderView_QRect_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "rect", "qt.QRect"), new Param(c, "flags", "int"),
                End),
            _func[14] = new MemberFunction(
                c, "verticalOffset", _n_verticalOffset0, None, Compiled,
                qt_QHeaderView_verticalOffset_int_QHeaderView, Return, "int",
                Parameters, new Param(c, "this", "qt.QHeaderView"), End),
            _func[15] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QHeaderView_viewportEvent_bool_QHeaderView_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[16] = new MemberFunction(
                c, "keyboardSearch", _n_keyboardSearch0, None, Compiled,
                qt_QHeaderView_keyboardSearch_void_QHeaderView_string, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "search", "string"), End),
            _func[17] = new MemberFunction(
                c, "setSelectionModel", _n_setSelectionModel0, None, Compiled,
                qt_QHeaderView_setSelectionModel_void_QHeaderView_QItemSelectionModel,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "selectionModel", "qt.QItemSelectionModel"), End),
            _func[18] = new MemberFunction(
                c, "sizeHintForColumn", _n_sizeHintForColumn0, None, Compiled,
                qt_QHeaderView_sizeHintForColumn_int_QHeaderView_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "column", "int"), End),
            _func[19] = new MemberFunction(
                c, "sizeHintForRow", _n_sizeHintForRow0, None, Compiled,
                qt_QHeaderView_sizeHintForRow_int_QHeaderView_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "row", "int"), End),
            _func[20] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QHeaderView_inputMethodQuery_QVariant_QHeaderView_int,
                Return, "qt.QVariant", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "query", "int"), End),
            _func[21] = new MemberFunction(
                c, "edit", _n_edit0, None, Compiled,
                qt_QHeaderView_edit_bool_QHeaderView_QModelIndex_int_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "trigger", "int"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[22] = new MemberFunction(
                c, "isIndexHidden", _n_isIndexHidden0, None, Compiled,
                qt_QHeaderView_isIndexHidden_bool_QHeaderView_QModelIndex,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[23] = new MemberFunction(
                c, "selectedIndexes", _n_selectedIndexes0, None, Compiled,
                qt_QHeaderView_selectedIndexes_qt__QModelIndexBSB_ESB__QHeaderView,
                Return, "qt.QModelIndex[]", Parameters,
                new Param(c, "this", "qt.QHeaderView"), End),
            _func[24] = new MemberFunction(
                c, "selectionCommand", _n_selectionCommand0, None, Compiled,
                qt_QHeaderView_selectionCommand_int_QHeaderView_QModelIndex_QEvent,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "index", "qt.QModelIndex"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[25] = new MemberFunction(
                c, "startDrag", _n_startDrag0, None, Compiled,
                qt_QHeaderView_startDrag_void_QHeaderView_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "supportedActions", "int"), End),
            // MISSING: viewOptions ("QStyleOptionViewItem"; QHeaderView this)
            // // protected
            _func[26] = new MemberFunction(
                c, "visualRegionForSelection", _n_visualRegionForSelection0,
                None, Compiled,
                qt_QHeaderView_visualRegionForSelection_QRegion_QHeaderView_QItemSelection,
                Return, "qt.QRegion", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "selection", "qt.QItemSelection"), End),
            _func[27] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QHeaderView_dragEnterEvent_void_QHeaderView_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[28] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QHeaderView_dragLeaveEvent_void_QHeaderView_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[29] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QHeaderView_dragMoveEvent_void_QHeaderView_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[30] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QHeaderView_dropEvent_void_QHeaderView_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[31] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QHeaderView_focusInEvent_void_QHeaderView_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            _func[32] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QHeaderView_focusNextPrevChild_bool_QHeaderView_bool, Return,
                "bool", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "next", "bool"), End),
            _func[33] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QHeaderView_focusOutEvent_void_QHeaderView_QFocusEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QHeaderView this,
            // "QInputMethodEvent *" event) // protected
            _func[34] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QHeaderView_keyPressEvent_void_QHeaderView_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[35] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QHeaderView_resizeEvent_void_QHeaderView_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[36] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QHeaderView_timerEvent_void_QHeaderView_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QHeaderView"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            _func[37] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QHeaderView_viewportSizeHint_QSize_QHeaderView, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QHeaderView"),
                End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QHeaderView::staticMetaObject, propExclusions);
    }

} // namespace Mu
