//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0 
// 
#include <MuQt5/qtUtils.h>
#include <MuQt5/QFileType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu {
using namespace std;

//----------------------------------------------------------------------
//  INHERITABLE TYPE IMPLEMENTATION

// destructor
MuQt_QFile::~MuQt_QFile()
{
    if (_obj)
    {
        *_obj->data<Pointer>() = Pointer(0);
        _obj->releaseExternal();
    }
    _obj = 0;
    _env = 0;
    _baseType = 0;
}

MuQt_QFile::MuQt_QFile(Pointer muobj, const CallEnvironment* ce, const QString & name) 
 : QFile(name)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QFileType>(c->internName("qt.QFile"));
}

MuQt_QFile::MuQt_QFile(Pointer muobj, const CallEnvironment* ce, QObject * parent) 
 : QFile(parent)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QFileType>(c->internName("qt.QFile"));
}

MuQt_QFile::MuQt_QFile(Pointer muobj, const CallEnvironment* ce, const QString & name, QObject * parent) 
 : QFile(name, parent)
{
    _env = ce;
    _obj = reinterpret_cast<ClassInstance*>(muobj);
    _obj->retainExternal();
    MuLangContext* c = (MuLangContext*)_env->context();
    _baseType = c->findSymbolOfTypeByQualifiedName<QFileType>(c->internName("qt.QFile"));
}

QString MuQt_QFile::fileName() const
{
    if (!_env) return QFile::fileName();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[0];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return qstring(rval._Pointer);
    }
    else
    {
        return QFile::fileName();
    }
}

bool MuQt_QFile::resize(qint64 sz) 
{
    if (!_env) return QFile::resize(sz);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[1];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(sz);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QFile::resize(sz);
    }
}

qint64 MuQt_QFile::size() const
{
    if (!_env) return QFile::size();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[2];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return (int64)(rval._int64);
    }
    else
    {
        return QFile::size();
    }
}

bool MuQt_QFile::atEnd() const
{
    if (!_env) return QFile::atEnd();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[3];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QFile::atEnd();
    }
}

bool MuQt_QFile::open(OpenMode mode) 
{
    if (!_env) return QFile::open(mode);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[8];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(mode);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QFile::open(mode);
    }
}

void MuQt_QFile::close() 
{
    if (!_env) { QFile::close(); return; }
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[4];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
    }
    else
    {
        QFile::close();
    }
}

bool MuQt_QFile::isSequential() const
{
    if (!_env) return QFile::isSequential();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[5];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QFile::isSequential();
    }
}

qint64 MuQt_QFile::pos() const
{
    if (!_env) return QFile::pos();
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[6];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(1);
        args[0] = Value(Pointer(_obj));
        Value rval = _env->call(F, args);
        return (int64)(rval._int64);
    }
    else
    {
        return QFile::pos();
    }
}

bool MuQt_QFile::seek(qint64 pos) 
{
    if (!_env) return QFile::seek(pos);
    MuLangContext* c = (MuLangContext*)_env->context();
    const MemberFunction* F0 = _baseType->_func[7];
    const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
    if (F != F0) 
    {
        Function::ArgumentVector args(2);
        args[0] = Value(Pointer(_obj));
        args[1] = Value(pos);
        Value rval = _env->call(F, args);
        return (bool)(rval._bool);
    }
    else
    {
        return QFile::seek(pos);
    }
}



//----------------------------------------------------------------------
//  Mu Type CONSTRUCTORS

QFileType::QFileType(Context* c, const char* name, Class* super, Class* super2)
: Class(c, name, vectorOf2(super, super2))
{
}

QFileType::~QFileType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

static Pointer
QFile_QFile_QObject(Thread& NODE_THREAD, Pointer obj)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

    if (!widget)
    {
        return 0;
    }
    else if (QFile* w = object<QFile>(widget))
    {
        QFileType* type = 
            c->findSymbolOfTypeByQualifiedName<QFileType>(c->internName("qt.QFile"), false);
        ClassInstance* o = ClassInstance::allocate(type);
        setobject(o, w);
        return o;
    }
    else
    {
        throw BadCastException();
    }
}

static NODE_IMPLEMENTATION(castFromObject, Pointer)
{
    NODE_RETURN( QFile_QFile_QObject(NODE_THREAD, NODE_ARG(0, Pointer)) );
}

Pointer qt_QFile_QFile_QFile_QFile_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_name)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg1 = qstring(param_name);
    setobject(param_this, new MuQt_QFile(param_this, NODE_THREAD.process()->callEnv(), arg1));
    return param_this;
}

Pointer qt_QFile_QFile_QFile_QFile_QObject(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QObject * arg1 = object<QObject>(param_parent);
    setobject(param_this, new MuQt_QFile(param_this, NODE_THREAD.process()->callEnv(), arg1));
    return param_this;
}

Pointer qt_QFile_QFile_QFile_QFile_string_QObject(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_name, Pointer param_parent)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg1 = qstring(param_name);
    QObject * arg2 = object<QObject>(param_parent);
    setobject(param_this, new MuQt_QFile(param_this, NODE_THREAD.process()->callEnv(), arg1, arg2));
    return param_this;
}

bool qt_QFile_copy_bool_QFile_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_newName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    const QString  arg1 = qstring(param_newName);
    return arg0->copy(arg1);
}

bool qt_QFile_exists_bool_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return arg0->exists();
}

bool qt_QFile_link_bool_QFile_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_linkName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    const QString  arg1 = qstring(param_linkName);
    return arg0->link(arg1);
}

bool qt_QFile_remove_bool_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return arg0->remove();
}

bool qt_QFile_rename_bool_QFile_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_newName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    const QString  arg1 = qstring(param_newName);
    return arg0->rename(arg1);
}

void qt_QFile_setFileName_void_QFile_string(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_name)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    const QString  arg1 = qstring(param_name);
    arg0->setFileName(arg1);
}

Pointer qt_QFile_symLinkTarget_string_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return makestring(c,arg0->symLinkTarget());
}

Pointer qt_QFile_fileName_string_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return isMuQtObject(arg0) ? makestring(c,arg0->QFile::fileName()) : makestring(c,arg0->fileName());
}

bool qt_QFile_resize_bool_QFile_int64(Mu::Thread& NODE_THREAD, Pointer param_this, int64 param_sz)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    qint64 arg1 = (int64)(param_sz);
    return isMuQtObject(arg0) ? arg0->QFile::resize(arg1) : arg0->resize(arg1);
}

int64 qt_QFile_size_int64_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return isMuQtObject(arg0) ? arg0->QFile::size() : arg0->size();
}

bool qt_QFile_atEnd_bool_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return isMuQtObject(arg0) ? arg0->QFile::atEnd() : arg0->atEnd();
}

bool qt_QFile_open_bool_QFile_int(Mu::Thread& NODE_THREAD, Pointer param_this, int param_mode)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    QIODevice::OpenModeFlag arg1 = (QIODevice::OpenModeFlag)(param_mode);
    return isMuQtObject(arg0) ? arg0->QFile::open(arg1) : arg0->open(arg1);
}

void qt_QFile_close_void_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    if (isMuQtObject(arg0)) arg0->QFile::close();
    else arg0->close();
}

bool qt_QFile_isSequential_bool_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return isMuQtObject(arg0) ? arg0->QFile::isSequential() : arg0->isSequential();
}

int64 qt_QFile_pos_int64_QFile(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    return isMuQtObject(arg0) ? arg0->QFile::pos() : arg0->pos();
}

bool qt_QFile_seek_bool_QFile_int64(Mu::Thread& NODE_THREAD, Pointer param_this, int64 param_pos)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QFile* arg0 = object<QFile>(param_this);
    qint64 arg1 = (int64)(param_pos);
    return isMuQtObject(arg0) ? arg0->QFile::seek(arg1) : arg0->seek(arg1);
}

bool qt_QFile_copy_bool_string_string(Mu::Thread& NODE_THREAD, Pointer param_fileName, Pointer param_newName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    const QString  arg1 = qstring(param_newName);
    return QFile::copy(arg0, arg1);
}

Pointer qt_QFile_decodeName_string_QByteArray(Mu::Thread& NODE_THREAD, Pointer param_localFileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QByteArray  arg0 = getqtype<QByteArrayType>(param_localFileName);
    return makestring(c,QFile::decodeName(arg0));
}

Pointer qt_QFile_encodeName_QByteArray_string(Mu::Thread& NODE_THREAD, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    return makeqtype<QByteArrayType>(c,QFile::encodeName(arg0),"qt.QByteArray");
}

bool qt_QFile_exists_bool_string(Mu::Thread& NODE_THREAD, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    return QFile::exists(arg0);
}

bool qt_QFile_link_bool_string_string(Mu::Thread& NODE_THREAD, Pointer param_fileName, Pointer param_linkName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    const QString  arg1 = qstring(param_linkName);
    return QFile::link(arg0, arg1);
}

bool qt_QFile_remove_bool_string(Mu::Thread& NODE_THREAD, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    return QFile::remove(arg0);
}

bool qt_QFile_rename_bool_string_string(Mu::Thread& NODE_THREAD, Pointer param_oldName, Pointer param_newName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_oldName);
    const QString  arg1 = qstring(param_newName);
    return QFile::rename(arg0, arg1);
}

bool qt_QFile_resize_bool_string_int64(Mu::Thread& NODE_THREAD, Pointer param_fileName, int64 param_sz)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    qint64 arg1 = (int64)(param_sz);
    return QFile::resize(arg0, arg1);
}

Pointer qt_QFile_symLinkTarget_string_string(Mu::Thread& NODE_THREAD, Pointer param_fileName)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QString  arg0 = qstring(param_fileName);
    return makestring(c,QFile::symLinkTarget(arg0));
}


static NODE_IMPLEMENTATION(_n_QFile0, Pointer)
{
    NODE_RETURN(qt_QFile_QFile_QFile_QFile_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_QFile1, Pointer)
{
    NODE_RETURN(qt_QFile_QFile_QFile_QFile_QObject(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_QFile2, Pointer)
{
    NODE_RETURN(qt_QFile_QFile_QFile_QFile_string_QObject(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer), NODE_ARG(2, Pointer)));
}

static NODE_IMPLEMENTATION(_n_copy0, bool)
{
    NODE_RETURN(qt_QFile_copy_bool_QFile_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_exists0, bool)
{
    NODE_RETURN(qt_QFile_exists_bool_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_link0, bool)
{
    NODE_RETURN(qt_QFile_link_bool_QFile_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_remove0, bool)
{
    NODE_RETURN(qt_QFile_remove_bool_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_rename0, bool)
{
    NODE_RETURN(qt_QFile_rename_bool_QFile_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setFileName0, void)
{
    qt_QFile_setFileName_void_QFile_string(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_symLinkTarget0, Pointer)
{
    NODE_RETURN(qt_QFile_symLinkTarget_string_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_fileName0, Pointer)
{
    NODE_RETURN(qt_QFile_fileName_string_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_resize0, bool)
{
    NODE_RETURN(qt_QFile_resize_bool_QFile_int64(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
}

static NODE_IMPLEMENTATION(_n_size0, int64)
{
    NODE_RETURN(qt_QFile_size_int64_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_atEnd0, bool)
{
    NODE_RETURN(qt_QFile_atEnd_bool_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_open0, void)
{
    qt_QFile_open_bool_QFile_int(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
}

static NODE_IMPLEMENTATION(_n_close0, void)
{
    qt_QFile_close_void_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_isSequential0, bool)
{
    NODE_RETURN(qt_QFile_isSequential_bool_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_pos0, int64)
{
    NODE_RETURN(qt_QFile_pos_int64_QFile(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_seek0, bool)
{
    NODE_RETURN(qt_QFile_seek_bool_QFile_int64(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
}

static NODE_IMPLEMENTATION(_n_copy1, bool)
{
    NODE_RETURN(qt_QFile_copy_bool_string_string(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_decodeName0, Pointer)
{
    NODE_RETURN(qt_QFile_decodeName_string_QByteArray(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_encodeName0, Pointer)
{
    NODE_RETURN(qt_QFile_encodeName_QByteArray_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_exists1, bool)
{
    NODE_RETURN(qt_QFile_exists_bool_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_link1, bool)
{
    NODE_RETURN(qt_QFile_link_bool_string_string(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_remove1, bool)
{
    NODE_RETURN(qt_QFile_remove_bool_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_rename1, bool)
{
    NODE_RETURN(qt_QFile_rename_bool_string_string(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_resize1, bool)
{
    NODE_RETURN(qt_QFile_resize_bool_string_int64(NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
}

static NODE_IMPLEMENTATION(_n_symLinkTarget1, Pointer)
{
    NODE_RETURN(qt_QFile_symLinkTarget_string_string(NODE_THREAD, NODE_ARG(0, Pointer)));
}



void
QFileType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),


               new Function(c, tn, castFromObject, Cast,
                            Compiled, QFile_QFile_QObject,
                            Return, ftn,
                            Parameters,
                            new Param(c, "object", "qt.QObject"),
                            End),

               EndArguments );

addSymbols(
    // enums
    // member functions
    new Function(c, "QFile", _n_QFile0, None, Compiled, qt_QFile_QFile_QFile_QFile_string, Return, "qt.QFile", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "name", "string"), End),
    new Function(c, "QFile", _n_QFile1, None, Compiled, qt_QFile_QFile_QFile_QFile_QObject, Return, "qt.QFile", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "parent", "qt.QObject"), End),
    new Function(c, "QFile", _n_QFile2, None, Compiled, qt_QFile_QFile_QFile_QFile_string_QObject, Return, "qt.QFile", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "name", "string"), new Param(c, "parent", "qt.QObject"), End),
    new Function(c, "copy", _n_copy0, None, Compiled, qt_QFile_copy_bool_QFile_string, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "newName", "string"), End),
    new Function(c, "exists", _n_exists0, None, Compiled, qt_QFile_exists_bool_QFile, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), End),
    new Function(c, "link", _n_link0, None, Compiled, qt_QFile_link_bool_QFile_string, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "linkName", "string"), End),
    // MISSING: open (bool; QFile this, "FILE *" fh, "OpenMode" mode, "FileHandleFlags" handleFlags)
    // MISSING: open (bool; QFile this, int fd, "OpenMode" mode, "FileHandleFlags" handleFlags)
    new Function(c, "remove", _n_remove0, None, Compiled, qt_QFile_remove_bool_QFile, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), End),
    new Function(c, "rename", _n_rename0, None, Compiled, qt_QFile_rename_bool_QFile_string, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "newName", "string"), End),
    new Function(c, "setFileName", _n_setFileName0, None, Compiled, qt_QFile_setFileName_void_QFile_string, Return, "void", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "name", "string"), End),
    new Function(c, "symLinkTarget", _n_symLinkTarget0, None, Compiled, qt_QFile_symLinkTarget_string_QFile, Return, "string", Parameters, new Param(c, "this", "qt.QFile"), End),
    _func[0] = new MemberFunction(c, "fileName", _n_fileName0, None, Compiled, qt_QFile_fileName_string_QFile, Return, "string", Parameters, new Param(c, "this", "qt.QFile"), End),
    // MISSING: permissions ("Permissions"; QFile this)
    _func[1] = new MemberFunction(c, "resize", _n_resize0, None, Compiled, qt_QFile_resize_bool_QFile_int64, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "sz", "int64"), End),
    // MISSING: setPermissions (bool; QFile this, "Permissions" permissions)
    _func[2] = new MemberFunction(c, "size", _n_size0, None, Compiled, qt_QFile_size_int64_QFile, Return, "int64", Parameters, new Param(c, "this", "qt.QFile"), End),
    _func[3] = new MemberFunction(c, "atEnd", _n_atEnd0, None, Compiled, qt_QFile_atEnd_bool_QFile, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), End),
    _func[4] = new MemberFunction(c, "close", _n_close0, None, Compiled, qt_QFile_close_void_QFile, Return, "void", Parameters, new Param(c, "this", "qt.QFile"), End),
    _func[5] = new MemberFunction(c, "isSequential", _n_isSequential0, None, Compiled, qt_QFile_isSequential_bool_QFile, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), End),
    _func[6] = new MemberFunction(c, "pos", _n_pos0, None, Compiled, qt_QFile_pos_int64_QFile, Return, "int64", Parameters, new Param(c, "this", "qt.QFile"), End),
    _func[7] = new MemberFunction(c, "seek", _n_seek0, None, Compiled, qt_QFile_seek_bool_QFile_int64, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "pos", "int64"), End),
    _func[8] = new MemberFunction(c, "open", _n_open0, None, Compiled, qt_QFile_open_bool_QFile_int, Return, "bool", Parameters, new Param(c, "this", "qt.QFile"), new Param(c, "mode", "int"), End),
    // MISSING: readData (int64; QFile this, "char *" data, int64 len) // protected
    // MISSING: readLineData (int64; QFile this, "char *" data, int64 maxlen) // protected
    // MISSING: writeData (int64; QFile this, "const char *" data, int64 len) // protected
    // static functions
    new Function(c, "copy", _n_copy1, None, Compiled, qt_QFile_copy_bool_string_string, Return, "bool", Parameters, new Param(c, "fileName", "string"), new Param(c, "newName", "string"), End),
    new Function(c, "decodeName", _n_decodeName0, None, Compiled, qt_QFile_decodeName_string_QByteArray, Return, "string", Parameters, new Param(c, "localFileName", "qt.QByteArray"), End),
    // MISSING: decodeName (string; "const char *" localFileName)
    new Function(c, "encodeName", _n_encodeName0, None, Compiled, qt_QFile_encodeName_QByteArray_string, Return, "qt.QByteArray", Parameters, new Param(c, "fileName", "string"), End),
    new Function(c, "exists", _n_exists1, None, Compiled, qt_QFile_exists_bool_string, Return, "bool", Parameters, new Param(c, "fileName", "string"), End),
    new Function(c, "link", _n_link1, None, Compiled, qt_QFile_link_bool_string_string, Return, "bool", Parameters, new Param(c, "fileName", "string"), new Param(c, "linkName", "string"), End),
    // MISSING: permissions ("Permissions"; string fileName)
    new Function(c, "remove", _n_remove1, None, Compiled, qt_QFile_remove_bool_string, Return, "bool", Parameters, new Param(c, "fileName", "string"), End),
    new Function(c, "rename", _n_rename1, None, Compiled, qt_QFile_rename_bool_string_string, Return, "bool", Parameters, new Param(c, "oldName", "string"), new Param(c, "newName", "string"), End),
    new Function(c, "resize", _n_resize1, None, Compiled, qt_QFile_resize_bool_string_int64, Return, "bool", Parameters, new Param(c, "fileName", "string"), new Param(c, "sz", "int64"), End),
    // MISSING: setPermissions (bool; string fileName, "Permissions" permissions)
    new Function(c, "symLinkTarget", _n_symLinkTarget1, None, Compiled, qt_QFile_symLinkTarget_string_string, Return, "string", Parameters, new Param(c, "fileName", "string"), End),
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);


    const char** propExclusions = 0;

    populate(this, QFile::staticMetaObject, propExclusions);
}

} // Mu
