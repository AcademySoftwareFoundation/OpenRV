//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QLineEditType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QCloseEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QMenuType.h>
#include <MuQt5/QCompleterType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QFocusEventType.h>
#include <MuQt5/QIconType.h>
#include <MuQt5/QShowEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QMarginsType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QTabletEventType.h>
#include <MuQt5/QVariantType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QHideEventType.h>
#include <MuQt5/QMoveEventType.h>
#include <MuQt5/QDragEnterEventType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QPointType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QLineEdit::~MuQt_QLineEdit()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QLineEdit::MuQt_QLineEdit(Pointer muobj, const CallEnvironment* ce,
                                   QWidget* parent)
        : QLineEdit(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QLineEditType>(
            c->internName("qt.QLineEdit"));
    }

    MuQt_QLineEdit::MuQt_QLineEdit(Pointer muobj, const CallEnvironment* ce,
                                   const QString& contents, QWidget* parent)
        : QLineEdit(contents, parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QLineEditType>(
            c->internName("qt.QLineEdit"));
    }

    bool MuQt_QLineEdit::event(QEvent* e)
    {
        if (!_env)
            return QLineEdit::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QLineEdit::event(e);
        }
    }

    QVariant
    MuQt_QLineEdit::inputMethodQuery(Qt::InputMethodQuery property) const
    {
        if (!_env)
            return QLineEdit::inputMethodQuery(property);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(property));
            Value rval = _env->call(F, args);
            return getqtype<QVariantType>(rval._Pointer);
        }
        else
        {
            return QLineEdit::inputMethodQuery(property);
        }
    }

    QSize MuQt_QLineEdit::minimumSizeHint() const
    {
        if (!_env)
            return QLineEdit::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QLineEdit::minimumSizeHint();
        }
    }

    QSize MuQt_QLineEdit::sizeHint() const
    {
        if (!_env)
            return QLineEdit::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QLineEdit::sizeHint();
        }
    }

    void MuQt_QLineEdit::changeEvent(QEvent* ev)
    {
        if (!_env)
        {
            QLineEdit::changeEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, ev, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::changeEvent(ev);
        }
    }

    void MuQt_QLineEdit::contextMenuEvent(QContextMenuEvent* event)
    {
        if (!_env)
        {
            QLineEdit::contextMenuEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, event, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::contextMenuEvent(event);
        }
    }

    void MuQt_QLineEdit::dragEnterEvent(QDragEnterEvent* e)
    {
        if (!_env)
        {
            QLineEdit::dragEnterEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragEnterEventType>(c, e, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::dragEnterEvent(e);
        }
    }

    void MuQt_QLineEdit::dragLeaveEvent(QDragLeaveEvent* e)
    {
        if (!_env)
        {
            QLineEdit::dragLeaveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragLeaveEventType>(c, e, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::dragLeaveEvent(e);
        }
    }

    void MuQt_QLineEdit::dragMoveEvent(QDragMoveEvent* e)
    {
        if (!_env)
        {
            QLineEdit::dragMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragMoveEventType>(c, e, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::dragMoveEvent(e);
        }
    }

    void MuQt_QLineEdit::dropEvent(QDropEvent* e)
    {
        if (!_env)
        {
            QLineEdit::dropEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, e, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::dropEvent(e);
        }
    }

    void MuQt_QLineEdit::focusInEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QLineEdit::focusInEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::focusInEvent(e);
        }
    }

    void MuQt_QLineEdit::focusOutEvent(QFocusEvent* e)
    {
        if (!_env)
        {
            QLineEdit::focusOutEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QFocusEventType>(c, e, "qt.QFocusEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::focusOutEvent(e);
        }
    }

    void MuQt_QLineEdit::keyPressEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QLineEdit::keyPressEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::keyPressEvent(event);
        }
    }

    void MuQt_QLineEdit::mouseDoubleClickEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QLineEdit::mouseDoubleClickEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::mouseDoubleClickEvent(e);
        }
    }

    void MuQt_QLineEdit::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QLineEdit::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::mouseMoveEvent(e);
        }
    }

    void MuQt_QLineEdit::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QLineEdit::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::mousePressEvent(e);
        }
    }

    void MuQt_QLineEdit::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QLineEdit::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::mouseReleaseEvent(e);
        }
    }

    void MuQt_QLineEdit::paintEvent(QPaintEvent* _p14)
    {
        if (!_env)
        {
            QLineEdit::paintEvent(_p14);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, _p14, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::paintEvent(_p14);
        }
    }

    bool MuQt_QLineEdit::hasHeightForWidth() const
    {
        if (!_env)
            return QLineEdit::hasHeightForWidth();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QLineEdit::hasHeightForWidth();
        }
    }

    int MuQt_QLineEdit::heightForWidth(int w) const
    {
        if (!_env)
            return QLineEdit::heightForWidth(w);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(w);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QLineEdit::heightForWidth(w);
        }
    }

    void MuQt_QLineEdit::closeEvent(QCloseEvent* event)
    {
        if (!_env)
        {
            QLineEdit::closeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QCloseEventType>(c, event, "qt.QCloseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::closeEvent(event);
        }
    }

    void MuQt_QLineEdit::enterEvent(QEvent* event)
    {
        if (!_env)
        {
            QLineEdit::enterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::enterEvent(event);
        }
    }

    bool MuQt_QLineEdit::focusNextPrevChild(bool next)
    {
        if (!_env)
            return QLineEdit::focusNextPrevChild(next);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(next);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QLineEdit::focusNextPrevChild(next);
        }
    }

    void MuQt_QLineEdit::hideEvent(QHideEvent* event)
    {
        if (!_env)
        {
            QLineEdit::hideEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QHideEventType>(c, event, "qt.QHideEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::hideEvent(event);
        }
    }

    void MuQt_QLineEdit::keyReleaseEvent(QKeyEvent* event)
    {
        if (!_env)
        {
            QLineEdit::keyReleaseEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QKeyEventType>(c, event, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::keyReleaseEvent(event);
        }
    }

    void MuQt_QLineEdit::leaveEvent(QEvent* event)
    {
        if (!_env)
        {
            QLineEdit::leaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::leaveEvent(event);
        }
    }

    void MuQt_QLineEdit::moveEvent(QMoveEvent* event)
    {
        if (!_env)
        {
            QLineEdit::moveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMoveEventType>(c, event, "qt.QMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::moveEvent(event);
        }
    }

    void MuQt_QLineEdit::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QLineEdit::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::resizeEvent(event);
        }
    }

    void MuQt_QLineEdit::showEvent(QShowEvent* event)
    {
        if (!_env)
        {
            QLineEdit::showEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QShowEventType>(c, event, "qt.QShowEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::showEvent(event);
        }
    }

    void MuQt_QLineEdit::tabletEvent(QTabletEvent* event)
    {
        if (!_env)
        {
            QLineEdit::tabletEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[29];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTabletEventType>(c, event, "qt.QTabletEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::tabletEvent(event);
        }
    }

    void MuQt_QLineEdit::wheelEvent(QWheelEvent* event)
    {
        if (!_env)
        {
            QLineEdit::wheelEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[30];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QWheelEventType>(c, event, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QLineEdit::wheelEvent(event);
        }
    }

    int MuQt_QLineEdit::metric(PaintDeviceMetric m) const
    {
        if (!_env)
            return QLineEdit::metric(m);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[31];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(m);
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QLineEdit::metric(m);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QLineEditType::QLineEditType(Context* c, const char* name, Class* super,
                                 Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QLineEditType::~QLineEditType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QLineEdit_QLineEdit_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QLineEdit* w = object<QLineEdit>(widget))
        {
            QLineEditType* type =
                c->findSymbolOfTypeByQualifiedName<QLineEditType>(
                    c->internName("qt.QLineEdit"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QLineEdit_QLineEdit_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QLineEdit_QLineEdit_QLineEdit_QLineEdit_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QLineEdit(param_this,
                                     NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer qt_QLineEdit_QLineEdit_QLineEdit_QLineEdit_string_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_contents,
        Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_contents);
        QWidget* arg2 = object<QWidget>(param_parent);
        setobject(param_this, new MuQt_QLineEdit(
                                  param_this, NODE_THREAD.process()->callEnv(),
                                  arg1, arg2));
        return param_this;
    }

    void qt_QLineEdit_addAction_void_QLineEdit_QAction_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_action,
        int param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QAction* arg1 = object<QAction>(param_action);
        QLineEdit::ActionPosition arg2 =
            (QLineEdit::ActionPosition)(param_position);
        arg0->addAction(arg1, arg2);
    }

    Pointer qt_QLineEdit_addAction_QAction_QLineEdit_QIcon_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_icon,
        int param_position)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        const QIcon arg1 = getqtype<QIconType>(param_icon);
        QLineEdit::ActionPosition arg2 =
            (QLineEdit::ActionPosition)(param_position);
        return makeinstance<QActionType>(c, arg0->addAction(arg1, arg2),
                                         "qt.QAction");
    }

    void qt_QLineEdit_backspace_void_QLineEdit(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        arg0->backspace();
    }

    Pointer qt_QLineEdit_completer_QCompleter_QLineEdit(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return makeinstance<QCompleterType>(c, arg0->completer(),
                                            "qt.QCompleter");
    }

    Pointer qt_QLineEdit_createStandardContextMenu_QMenu_QLineEdit(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return makeinstance<QMenuType>(c, arg0->createStandardContextMenu(),
                                       "qt.QMenu");
    }

    void qt_QLineEdit_cursorBackward_void_QLineEdit_bool_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_mark,
        int param_steps)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_mark);
        int arg2 = (int)(param_steps);
        arg0->cursorBackward(arg1, arg2);
    }

    void qt_QLineEdit_cursorForward_void_QLineEdit_bool_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_mark,
        int param_steps)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_mark);
        int arg2 = (int)(param_steps);
        arg0->cursorForward(arg1, arg2);
    }

    int qt_QLineEdit_cursorPositionAt_int_QLineEdit_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_pos);
        return arg0->cursorPositionAt(arg1);
    }

    void qt_QLineEdit_cursorWordBackward_void_QLineEdit_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_mark)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_mark);
        arg0->cursorWordBackward(arg1);
    }

    void qt_QLineEdit_cursorWordForward_void_QLineEdit_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_mark)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_mark);
        arg0->cursorWordForward(arg1);
    }

    void qt_QLineEdit_del_void_QLineEdit(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        arg0->del();
    }

    void qt_QLineEdit_deselect_void_QLineEdit(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        arg0->deselect();
    }

    void qt_QLineEdit_end_void_QLineEdit_bool(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              bool param_mark)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_mark);
        arg0->end(arg1);
    }

    void qt_QLineEdit_home_void_QLineEdit_bool(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               bool param_mark)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_mark);
        arg0->home(arg1);
    }

    void qt_QLineEdit_insert_void_QLineEdit_string(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_newText)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        const QString arg1 = qstring(param_newText);
        arg0->insert(arg1);
    }

    int qt_QLineEdit_selectionStart_int_QLineEdit(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return arg0->selectionStart();
    }

    void qt_QLineEdit_setCompleter_void_QLineEdit_QCompleter(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_c)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QCompleter* arg1 = object<QCompleter>(param_c);
        arg0->setCompleter(arg1);
    }

    void qt_QLineEdit_setSelection_void_QLineEdit_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_start,
        int param_length)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        int arg1 = (int)(param_start);
        int arg2 = (int)(param_length);
        arg0->setSelection(arg1, arg2);
    }

    void qt_QLineEdit_setTextMargins_void_QLineEdit_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_left,
        int param_top, int param_right, int param_bottom)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        int arg1 = (int)(param_left);
        int arg2 = (int)(param_top);
        int arg3 = (int)(param_right);
        int arg4 = (int)(param_bottom);
        arg0->setTextMargins(arg1, arg2, arg3, arg4);
    }

    void qt_QLineEdit_setTextMargins_void_QLineEdit_QMargins(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_margins)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        const QMargins arg1 = getqtype<QMarginsType>(param_margins);
        arg0->setTextMargins(arg1);
    }

    Pointer qt_QLineEdit_textMargins_QMargins_QLineEdit(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return makeqtype<QMarginsType>(c, arg0->textMargins(), "qt.QMargins");
    }

    bool qt_QLineEdit_event_bool_QLineEdit_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0) ? arg0->QLineEdit::event(arg1)
                                  : arg0->event(arg1);
    }

    Pointer qt_QLineEdit_inputMethodQuery_QVariant_QLineEdit_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_property)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        Qt::InputMethodQuery arg1 = (Qt::InputMethodQuery)(param_property);
        return isMuQtObject(arg0)
                   ? makeqtype<QVariantType>(
                         c, arg0->QLineEdit::inputMethodQuery(arg1),
                         "qt.QVariant")
                   : makeqtype<QVariantType>(c, arg0->inputMethodQuery(arg1),
                                             "qt.QVariant");
    }

    Pointer
    qt_QLineEdit_minimumSizeHint_QSize_QLineEdit(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QLineEdit::minimumSizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QLineEdit_sizeHint_QSize_QLineEdit(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c, arg0->QLineEdit::sizeHint(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    Pointer qt_QLineEdit_cursorRect_QRect_QLineEdit(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return makeqtype<QRectType>(
            c, ((MuQt_QLineEdit*)arg0)->cursorRect_pub(), "qt.QRect");
    }

    void qt_QLineEdit_changeEvent_void_QLineEdit_QEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->changeEvent_pub(arg1);
    }

    void qt_QLineEdit_contextMenuEvent_void_QLineEdit_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QContextMenuEvent* arg1 =
            getqpointer<QContextMenuEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->contextMenuEvent_pub(arg1);
    }

    void qt_QLineEdit_dragEnterEvent_void_QLineEdit_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->dragEnterEvent_pub(arg1);
    }

    void qt_QLineEdit_dragLeaveEvent_void_QLineEdit_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QLineEdit_dragMoveEvent_void_QLineEdit_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QLineEdit_dropEvent_void_QLineEdit_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->dropEvent_pub(arg1);
    }

    void qt_QLineEdit_focusInEvent_void_QLineEdit_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->focusInEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->focusInEvent_pub(arg1);
    }

    void qt_QLineEdit_focusOutEvent_void_QLineEdit_QFocusEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QFocusEvent* arg1 = getqpointer<QFocusEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->focusOutEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->focusOutEvent_pub(arg1);
    }

    void qt_QLineEdit_keyPressEvent_void_QLineEdit_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->keyPressEvent_pub(arg1);
    }

    void qt_QLineEdit_mouseDoubleClickEvent_void_QLineEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void qt_QLineEdit_mouseMoveEvent_void_QLineEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QLineEdit_mousePressEvent_void_QLineEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->mousePressEvent_pub(arg1);
    }

    void qt_QLineEdit_mouseReleaseEvent_void_QLineEdit_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QLineEdit_paintEvent_void_QLineEdit_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param__p14)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param__p14);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->paintEvent_pub(arg1);
    }

    bool qt_QLineEdit_hasHeightForWidth_bool_QLineEdit(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        return isMuQtObject(arg0) ? arg0->QLineEdit::hasHeightForWidth()
                                  : arg0->hasHeightForWidth();
    }

    int qt_QLineEdit_heightForWidth_int_QLineEdit_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_w)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        int arg1 = (int)(param_w);
        return isMuQtObject(arg0) ? arg0->QLineEdit::heightForWidth(arg1)
                                  : arg0->heightForWidth(arg1);
    }

    void qt_QLineEdit_closeEvent_void_QLineEdit_QCloseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QCloseEvent* arg1 = getqpointer<QCloseEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->closeEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->closeEvent_pub(arg1);
    }

    void qt_QLineEdit_enterEvent_void_QLineEdit_QEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->enterEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->enterEvent_pub(arg1);
    }

    bool qt_QLineEdit_focusNextPrevChild_bool_QLineEdit_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_next)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        bool arg1 = (bool)(param_next);
        return isMuQtObject(arg0)
                   ? ((MuQt_QLineEdit*)arg0)
                         ->focusNextPrevChild_pub_parent(arg1)
                   : ((MuQt_QLineEdit*)arg0)->focusNextPrevChild_pub(arg1);
    }

    void qt_QLineEdit_hideEvent_void_QLineEdit_QHideEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QHideEvent* arg1 = getqpointer<QHideEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->hideEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->hideEvent_pub(arg1);
    }

    void qt_QLineEdit_keyReleaseEvent_void_QLineEdit_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->keyReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->keyReleaseEvent_pub(arg1);
    }

    void qt_QLineEdit_leaveEvent_void_QLineEdit_QEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->leaveEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->leaveEvent_pub(arg1);
    }

    void qt_QLineEdit_moveEvent_void_QLineEdit_QMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QMoveEvent* arg1 = getqpointer<QMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->moveEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->moveEvent_pub(arg1);
    }

    void qt_QLineEdit_resizeEvent_void_QLineEdit_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QLineEdit_showEvent_void_QLineEdit_QShowEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QShowEvent* arg1 = getqpointer<QShowEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->showEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->showEvent_pub(arg1);
    }

    void qt_QLineEdit_tabletEvent_void_QLineEdit_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QTabletEvent* arg1 = getqpointer<QTabletEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->tabletEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->tabletEvent_pub(arg1);
    }

    void qt_QLineEdit_wheelEvent_void_QLineEdit_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QLineEdit*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QLineEdit*)arg0)->wheelEvent_pub(arg1);
    }

    int qt_QLineEdit_metric_int_QLineEdit_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this, int param_m)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QLineEdit* arg0 = object<QLineEdit>(param_this);
        QPaintDevice::PaintDeviceMetric arg1 =
            (QPaintDevice::PaintDeviceMetric)(param_m);
        return isMuQtObject(arg0)
                   ? ((MuQt_QLineEdit*)arg0)->metric_pub_parent(arg1)
                   : ((MuQt_QLineEdit*)arg0)->metric_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QLineEdit0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_QLineEdit_QLineEdit_QLineEdit_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QLineEdit1, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_QLineEdit_QLineEdit_QLineEdit_string_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addAction0, void)
    {
        qt_QLineEdit_addAction_void_QLineEdit_QAction_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_addAction1, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_addAction_QAction_QLineEdit_QIcon_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_backspace0, void)
    {
        qt_QLineEdit_backspace_void_QLineEdit(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_completer0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_completer_QCompleter_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_createStandardContextMenu0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_createStandardContextMenu_QMenu_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cursorBackward0, void)
    {
        qt_QLineEdit_cursorBackward_void_QLineEdit_bool_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_cursorForward0, void)
    {
        qt_QLineEdit_cursorForward_void_QLineEdit_bool_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_cursorPositionAt0, int)
    {
        NODE_RETURN(qt_QLineEdit_cursorPositionAt_int_QLineEdit_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cursorWordBackward0, void)
    {
        qt_QLineEdit_cursorWordBackward_void_QLineEdit_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_cursorWordForward0, void)
    {
        qt_QLineEdit_cursorWordForward_void_QLineEdit_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_del0, void)
    {
        qt_QLineEdit_del_void_QLineEdit(NODE_THREAD,
                                        NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_deselect0, void)
    {
        qt_QLineEdit_deselect_void_QLineEdit(NODE_THREAD,
                                             NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_end0, void)
    {
        qt_QLineEdit_end_void_QLineEdit_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_home0, void)
    {
        qt_QLineEdit_home_void_QLineEdit_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_insert0, void)
    {
        qt_QLineEdit_insert_void_QLineEdit_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_selectionStart0, int)
    {
        NODE_RETURN(qt_QLineEdit_selectionStart_int_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCompleter0, void)
    {
        qt_QLineEdit_setCompleter_void_QLineEdit_QCompleter(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QLineEdit_setSelection_void_QLineEdit_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setTextMargins0, void)
    {
        qt_QLineEdit_setTextMargins_void_QLineEdit_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_setTextMargins1, void)
    {
        qt_QLineEdit_setTextMargins_void_QLineEdit_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_textMargins0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_textMargins_QMargins_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QLineEdit_event_bool_QLineEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inputMethodQuery0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_inputMethodQuery_QVariant_QLineEdit_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_minimumSizeHint_QSize_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_sizeHint_QSize_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cursorRect0, Pointer)
    {
        NODE_RETURN(qt_QLineEdit_cursorRect_QRect_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QLineEdit_changeEvent_void_QLineEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QLineEdit_contextMenuEvent_void_QLineEdit_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QLineEdit_dragEnterEvent_void_QLineEdit_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QLineEdit_dragLeaveEvent_void_QLineEdit_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QLineEdit_dragMoveEvent_void_QLineEdit_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QLineEdit_dropEvent_void_QLineEdit_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusInEvent0, void)
    {
        qt_QLineEdit_focusInEvent_void_QLineEdit_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusOutEvent0, void)
    {
        qt_QLineEdit_focusOutEvent_void_QLineEdit_QFocusEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QLineEdit_keyPressEvent_void_QLineEdit_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QLineEdit_mouseDoubleClickEvent_void_QLineEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QLineEdit_mouseMoveEvent_void_QLineEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QLineEdit_mousePressEvent_void_QLineEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QLineEdit_mouseReleaseEvent_void_QLineEdit_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QLineEdit_paintEvent_void_QLineEdit_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasHeightForWidth0, bool)
    {
        NODE_RETURN(qt_QLineEdit_hasHeightForWidth_bool_QLineEdit(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_heightForWidth0, int)
    {
        NODE_RETURN(qt_QLineEdit_heightForWidth_int_QLineEdit_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_closeEvent0, void)
    {
        qt_QLineEdit_closeEvent_void_QLineEdit_QCloseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_enterEvent0, void)
    {
        qt_QLineEdit_enterEvent_void_QLineEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_focusNextPrevChild0, bool)
    {
        NODE_RETURN(qt_QLineEdit_focusNextPrevChild_bool_QLineEdit_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool)));
    }

    static NODE_IMPLEMENTATION(_n_hideEvent0, void)
    {
        qt_QLineEdit_hideEvent_void_QLineEdit_QHideEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_keyReleaseEvent0, void)
    {
        qt_QLineEdit_keyReleaseEvent_void_QLineEdit_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_leaveEvent0, void)
    {
        qt_QLineEdit_leaveEvent_void_QLineEdit_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_moveEvent0, void)
    {
        qt_QLineEdit_moveEvent_void_QLineEdit_QMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QLineEdit_resizeEvent_void_QLineEdit_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_showEvent0, void)
    {
        qt_QLineEdit_showEvent_void_QLineEdit_QShowEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_tabletEvent0, void)
    {
        qt_QLineEdit_tabletEvent_void_QLineEdit_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QLineEdit_wheelEvent_void_QLineEdit_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_metric0, int)
    {
        NODE_RETURN(qt_QLineEdit_metric_int_QLineEdit_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    void QLineEditType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QLineEdit_QLineEdit_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QLineEdit", _n_QLineEdit0, None, Compiled,
                         qt_QLineEdit_QLineEdit_QLineEdit_QLineEdit_QWidget,
                         Return, "qt.QLineEdit", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "QLineEdit", _n_QLineEdit1, None, Compiled,
                qt_QLineEdit_QLineEdit_QLineEdit_QLineEdit_string_QWidget,
                Return, "qt.QLineEdit", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "contents", "string"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "addAction", _n_addAction0, None, Compiled,
                         qt_QLineEdit_addAction_void_QLineEdit_QAction_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "action", "qt.QAction"),
                         new Param(c, "position", "int"), End),
            new Function(c, "addAction", _n_addAction1, None, Compiled,
                         qt_QLineEdit_addAction_QAction_QLineEdit_QIcon_int,
                         Return, "qt.QAction", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "icon", "qt.QIcon"),
                         new Param(c, "position", "int"), End),
            // PROP: alignment (flags Qt::Alignment; QLineEdit this)
            new Function(c, "backspace", _n_backspace0, None, Compiled,
                         qt_QLineEdit_backspace_void_QLineEdit, Return, "void",
                         Parameters, new Param(c, "this", "qt.QLineEdit"), End),
            new Function(c, "completer", _n_completer0, None, Compiled,
                         qt_QLineEdit_completer_QCompleter_QLineEdit, Return,
                         "qt.QCompleter", Parameters,
                         new Param(c, "this", "qt.QLineEdit"), End),
            new Function(c, "createStandardContextMenu",
                         _n_createStandardContextMenu0, None, Compiled,
                         qt_QLineEdit_createStandardContextMenu_QMenu_QLineEdit,
                         Return, "qt.QMenu", Parameters,
                         new Param(c, "this", "qt.QLineEdit"), End),
            new Function(
                c, "cursorBackward", _n_cursorBackward0, None, Compiled,
                qt_QLineEdit_cursorBackward_void_QLineEdit_bool_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "mark", "bool"),
                new Param(c, "steps", "int", Value((int)1)), End),
            new Function(c, "cursorForward", _n_cursorForward0, None, Compiled,
                         qt_QLineEdit_cursorForward_void_QLineEdit_bool_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "mark", "bool"),
                         new Param(c, "steps", "int", Value((int)1)), End),
            // PROP: cursorMoveStyle (flags Qt::CursorMoveStyle; QLineEdit this)
            // PROP: cursorPosition (int; QLineEdit this)
            new Function(
                c, "cursorPositionAt", _n_cursorPositionAt0, None, Compiled,
                qt_QLineEdit_cursorPositionAt_int_QLineEdit_QPoint, Return,
                "int", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "pos", "qt.QPoint"), End),
            new Function(
                c, "cursorWordBackward", _n_cursorWordBackward0, None, Compiled,
                qt_QLineEdit_cursorWordBackward_void_QLineEdit_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "mark", "bool"), End),
            new Function(
                c, "cursorWordForward", _n_cursorWordForward0, None, Compiled,
                qt_QLineEdit_cursorWordForward_void_QLineEdit_bool, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "mark", "bool"), End),
            new Function(c, "del", _n_del0, None, Compiled,
                         qt_QLineEdit_del_void_QLineEdit, Return, "void",
                         Parameters, new Param(c, "this", "qt.QLineEdit"), End),
            new Function(c, "deselect", _n_deselect0, None, Compiled,
                         qt_QLineEdit_deselect_void_QLineEdit, Return, "void",
                         Parameters, new Param(c, "this", "qt.QLineEdit"), End),
            // PROP: displayText (string; QLineEdit this)
            // PROP: dragEnabled (bool; QLineEdit this)
            // PROP: echoMode (flags QLineEdit::EchoMode; QLineEdit this)
            new Function(c, "end", _n_end0, None, Compiled,
                         qt_QLineEdit_end_void_QLineEdit_bool, Return, "void",
                         Parameters, new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "mark", "bool"), End),
            // MISSING: getTextMargins (void; QLineEdit this, "int *" left, "int
            // *" top, "int *" right, "int *" bottom) PROP: hasAcceptableInput
            // (bool; QLineEdit this) PROP: hasFrame (bool; QLineEdit this)
            // PROP: hasSelectedText (bool; QLineEdit this)
            new Function(c, "home", _n_home0, None, Compiled,
                         qt_QLineEdit_home_void_QLineEdit_bool, Return, "void",
                         Parameters, new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "mark", "bool"), End),
            // PROP: inputMask (string; QLineEdit this)
            new Function(c, "insert", _n_insert0, None, Compiled,
                         qt_QLineEdit_insert_void_QLineEdit_string, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "newText", "string"), End),
            // PROP: isClearButtonEnabled (bool; QLineEdit this)
            // PROP: isModified (bool; QLineEdit this)
            // PROP: isReadOnly (bool; QLineEdit this)
            // PROP: isRedoAvailable (bool; QLineEdit this)
            // PROP: isUndoAvailable (bool; QLineEdit this)
            // PROP: maxLength (int; QLineEdit this)
            // PROP: placeholderText (string; QLineEdit this)
            // PROP: selectedText (string; QLineEdit this)
            new Function(c, "selectionStart", _n_selectionStart0, None,
                         Compiled, qt_QLineEdit_selectionStart_int_QLineEdit,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QLineEdit"), End),
            // PROP: setAlignment (void; QLineEdit this, flags Qt::Alignment
            // flag) PROP: setClearButtonEnabled (void; QLineEdit this, bool
            // enable)
            new Function(c, "setCompleter", _n_setCompleter0, None, Compiled,
                         qt_QLineEdit_setCompleter_void_QLineEdit_QCompleter,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "c", "qt.QCompleter"), End),
            // PROP: setCursorMoveStyle (void; QLineEdit this, flags
            // Qt::CursorMoveStyle style) PROP: setCursorPosition (void;
            // QLineEdit this, int _p4) PROP: setDragEnabled (void; QLineEdit
            // this, bool b) PROP: setEchoMode (void; QLineEdit this, flags
            // QLineEdit::EchoMode _p9) PROP: setFrame (void; QLineEdit this,
            // bool _p5) PROP: setInputMask (void; QLineEdit this, string
            // inputMask) PROP: setMaxLength (void; QLineEdit this, int _p4)
            // PROP: setModified (void; QLineEdit this, bool _p5)
            // PROP: setPlaceholderText (void; QLineEdit this, string _p16)
            // PROP: setReadOnly (void; QLineEdit this, bool _p5)
            new Function(c, "setSelection", _n_setSelection0, None, Compiled,
                         qt_QLineEdit_setSelection_void_QLineEdit_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QLineEdit"),
                         new Param(c, "start", "int"),
                         new Param(c, "length", "int"), End),
            new Function(
                c, "setTextMargins", _n_setTextMargins0, None, Compiled,
                qt_QLineEdit_setTextMargins_void_QLineEdit_int_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "left", "int"), new Param(c, "top", "int"),
                new Param(c, "right", "int"), new Param(c, "bottom", "int"),
                End),
            new Function(
                c, "setTextMargins", _n_setTextMargins1, None, Compiled,
                qt_QLineEdit_setTextMargins_void_QLineEdit_QMargins, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "margins", "qt.QMargins"), End),
            // MISSING: setValidator (void; QLineEdit this, "const QValidator *"
            // v) PROP: text (string; QLineEdit this)
            new Function(c, "textMargins", _n_textMargins0, None, Compiled,
                         qt_QLineEdit_textMargins_QMargins_QLineEdit, Return,
                         "qt.QMargins", Parameters,
                         new Param(c, "this", "qt.QLineEdit"), End),
            // MISSING: validator ("const QValidator *"; QLineEdit this)
            _func[0] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QLineEdit_event_bool_QLineEdit_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[1] = new MemberFunction(
                c, "inputMethodQuery", _n_inputMethodQuery0, None, Compiled,
                qt_QLineEdit_inputMethodQuery_QVariant_QLineEdit_int, Return,
                "qt.QVariant", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "property", "int"), End),
            _func[2] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QLineEdit_minimumSizeHint_QSize_QLineEdit, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QLineEdit"),
                End),
            _func[3] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QLineEdit_sizeHint_QSize_QLineEdit, Return, "qt.QSize",
                Parameters, new Param(c, "this", "qt.QLineEdit"), End),
            new Function(c, "cursorRect", _n_cursorRect0, None, Compiled,
                         qt_QLineEdit_cursorRect_QRect_QLineEdit, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QLineEdit"), End),
            // MISSING: initStyleOption (void; QLineEdit this,
            // "QStyleOptionFrame *" option) // protected
            _func[4] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QLineEdit_changeEvent_void_QLineEdit_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "ev", "qt.QEvent"), End),
            _func[5] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QLineEdit_contextMenuEvent_void_QLineEdit_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QContextMenuEvent"), End),
            _func[6] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QLineEdit_dragEnterEvent_void_QLineEdit_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QDragEnterEvent"), End),
            _func[7] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QLineEdit_dragLeaveEvent_void_QLineEdit_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QDragLeaveEvent"), End),
            _func[8] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QLineEdit_dragMoveEvent_void_QLineEdit_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QDragMoveEvent"), End),
            _func[9] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QLineEdit_dropEvent_void_QLineEdit_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QDropEvent"), End),
            _func[10] = new MemberFunction(
                c, "focusInEvent", _n_focusInEvent0, None, Compiled,
                qt_QLineEdit_focusInEvent_void_QLineEdit_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            _func[11] = new MemberFunction(
                c, "focusOutEvent", _n_focusOutEvent0, None, Compiled,
                qt_QLineEdit_focusOutEvent_void_QLineEdit_QFocusEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QFocusEvent"), End),
            // MISSING: inputMethodEvent (void; QLineEdit this,
            // "QInputMethodEvent *" e) // protected
            _func[12] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QLineEdit_keyPressEvent_void_QLineEdit_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[13] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QLineEdit_mouseDoubleClickEvent_void_QLineEdit_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QLineEdit_mouseMoveEvent_void_QLineEdit_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[15] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QLineEdit_mousePressEvent_void_QLineEdit_QMouseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[16] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QLineEdit_mouseReleaseEvent_void_QLineEdit_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[17] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QLineEdit_paintEvent_void_QLineEdit_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "_p14", "qt.QPaintEvent"), End),
            _func[18] = new MemberFunction(
                c, "hasHeightForWidth", _n_hasHeightForWidth0, None, Compiled,
                qt_QLineEdit_hasHeightForWidth_bool_QLineEdit, Return, "bool",
                Parameters, new Param(c, "this", "qt.QLineEdit"), End),
            _func[19] = new MemberFunction(
                c, "heightForWidth", _n_heightForWidth0, None, Compiled,
                qt_QLineEdit_heightForWidth_int_QLineEdit_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "w", "int"), End),
            // MISSING: paintEngine ("QPaintEngine *"; QLineEdit this)
            // MISSING: actionEvent (void; QLineEdit this, "QActionEvent *"
            // event) // protected
            _func[20] = new MemberFunction(
                c, "closeEvent", _n_closeEvent0, None, Compiled,
                qt_QLineEdit_closeEvent_void_QLineEdit_QCloseEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QCloseEvent"), End),
            _func[21] = new MemberFunction(
                c, "enterEvent", _n_enterEvent0, None, Compiled,
                qt_QLineEdit_enterEvent_void_QLineEdit_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[22] = new MemberFunction(
                c, "focusNextPrevChild", _n_focusNextPrevChild0, None, Compiled,
                qt_QLineEdit_focusNextPrevChild_bool_QLineEdit_bool, Return,
                "bool", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "next", "bool"), End),
            _func[23] = new MemberFunction(
                c, "hideEvent", _n_hideEvent0, None, Compiled,
                qt_QLineEdit_hideEvent_void_QLineEdit_QHideEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QHideEvent"), End),
            _func[24] = new MemberFunction(
                c, "keyReleaseEvent", _n_keyReleaseEvent0, None, Compiled,
                qt_QLineEdit_keyReleaseEvent_void_QLineEdit_QKeyEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QKeyEvent"), End),
            _func[25] = new MemberFunction(
                c, "leaveEvent", _n_leaveEvent0, None, Compiled,
                qt_QLineEdit_leaveEvent_void_QLineEdit_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QEvent"), End),
            _func[26] = new MemberFunction(
                c, "moveEvent", _n_moveEvent0, None, Compiled,
                qt_QLineEdit_moveEvent_void_QLineEdit_QMoveEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QMoveEvent"), End),
            // MISSING: nativeEvent (bool; QLineEdit this, QByteArray eventType,
            // "void *" message, "long *" result) // protected
            _func[27] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QLineEdit_resizeEvent_void_QLineEdit_QResizeEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[28] = new MemberFunction(
                c, "showEvent", _n_showEvent0, None, Compiled,
                qt_QLineEdit_showEvent_void_QLineEdit_QShowEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QShowEvent"), End),
            _func[29] = new MemberFunction(
                c, "tabletEvent", _n_tabletEvent0, None, Compiled,
                qt_QLineEdit_tabletEvent_void_QLineEdit_QTabletEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QTabletEvent"), End),
            _func[30] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QLineEdit_wheelEvent_void_QLineEdit_QWheelEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "event", "qt.QWheelEvent"), End),
            // MISSING: initPainter (void; QLineEdit this, "QPainter *" painter)
            // // protected
            _func[31] = new MemberFunction(
                c, "metric", _n_metric0, None, Compiled,
                qt_QLineEdit_metric_int_QLineEdit_int, Return, "int",
                Parameters, new Param(c, "this", "qt.QLineEdit"),
                new Param(c, "m", "int"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QLineEdit::staticMetaObject, propExclusions);
    }

} // namespace Mu
