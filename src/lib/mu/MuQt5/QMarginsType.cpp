//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QMarginsType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QMarginsType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QMarginsType::QMarginsType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QMarginsType::~QMarginsType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QMarginsType::Instance* i =
            new QMarginsType::Instance((Class*)NODE_THIS.type());
        QMarginsType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QMarginsType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QMarginsType::finalizer, 0, 0, 0);
    }

    void QMarginsType::finalizer(void* obj, void* data)
    {
        QMarginsType::Instance* i =
            reinterpret_cast<QMarginsType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QMargins_QMargins_QMargins_QMargins(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QMarginsType>(param_this, QMargins());
        return param_this;
    }

    Pointer qt_QMargins_QMargins_QMargins_QMargins_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_left,
        int param_top, int param_right, int param_bottom)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg1 = (int)(param_left);
        int arg2 = (int)(param_top);
        int arg3 = (int)(param_right);
        int arg4 = (int)(param_bottom);
        setqtype<QMarginsType>(param_this, QMargins(arg1, arg2, arg3, arg4));
        return param_this;
    }

    int qt_QMargins_bottom_int_QMargins(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        return arg0.bottom();
    }

    bool qt_QMargins_isNull_bool_QMargins(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        return arg0.isNull();
    }

    int qt_QMargins_left_int_QMargins(Mu::Thread& NODE_THREAD,
                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        return arg0.left();
    }

    int qt_QMargins_right_int_QMargins(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        return arg0.right();
    }

    void qt_QMargins_setBottom_void_QMargins_int(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 int param_bottom)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        int arg1 = (int)(param_bottom);
        arg0.setBottom(arg1);
        setqtype<QMarginsType>(param_this, arg0);
    }

    void qt_QMargins_setLeft_void_QMargins_int(Mu::Thread& NODE_THREAD,
                                               Pointer param_this,
                                               int param_left)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        int arg1 = (int)(param_left);
        arg0.setLeft(arg1);
        setqtype<QMarginsType>(param_this, arg0);
    }

    void qt_QMargins_setRight_void_QMargins_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this,
                                                int param_right)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        int arg1 = (int)(param_right);
        arg0.setRight(arg1);
        setqtype<QMarginsType>(param_this, arg0);
    }

    void qt_QMargins_setTop_void_QMargins_int(Mu::Thread& NODE_THREAD,
                                              Pointer param_this, int param_Top)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        int arg1 = (int)(param_Top);
        arg0.setTop(arg1);
        setqtype<QMarginsType>(param_this, arg0);
    }

    int qt_QMargins_top_int_QMargins(Mu::Thread& NODE_THREAD,
                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMargins arg0 = getqtype<QMarginsType>(param_this);
        return arg0.top();
    }

    static NODE_IMPLEMENTATION(_n_QMargins0, Pointer)
    {
        NODE_RETURN(qt_QMargins_QMargins_QMargins_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QMargins1, Pointer)
    {
        NODE_RETURN(qt_QMargins_QMargins_QMargins_QMargins_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int)));
    }

    static NODE_IMPLEMENTATION(_n_bottom0, int)
    {
        NODE_RETURN(qt_QMargins_bottom_int_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isNull0, bool)
    {
        NODE_RETURN(qt_QMargins_isNull_bool_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_left0, int)
    {
        NODE_RETURN(qt_QMargins_left_int_QMargins(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_right0, int)
    {
        NODE_RETURN(qt_QMargins_right_int_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setBottom0, void)
    {
        qt_QMargins_setBottom_void_QMargins_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setLeft0, void)
    {
        qt_QMargins_setLeft_void_QMargins_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setRight0, void)
    {
        qt_QMargins_setRight_void_QMargins_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setTop0, void)
    {
        qt_QMargins_setTop_void_QMargins_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_top0, int)
    {
        NODE_RETURN(qt_QMargins_top_int_QMargins(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    void QMarginsType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QMargins", _n_QMargins0, None, Compiled,
                         qt_QMargins_QMargins_QMargins_QMargins, Return,
                         "qt.QMargins", Parameters,
                         new Param(c, "this", "qt.QMargins"), End),
            new Function(
                c, "QMargins", _n_QMargins1, None, Compiled,
                qt_QMargins_QMargins_QMargins_QMargins_int_int_int_int, Return,
                "qt.QMargins", Parameters, new Param(c, "this", "qt.QMargins"),
                new Param(c, "left", "int"), new Param(c, "top", "int"),
                new Param(c, "right", "int"), new Param(c, "bottom", "int"),
                End),
            new Function(c, "bottom", _n_bottom0, None, Compiled,
                         qt_QMargins_bottom_int_QMargins, Return, "int",
                         Parameters, new Param(c, "this", "qt.QMargins"), End),
            new Function(c, "isNull", _n_isNull0, None, Compiled,
                         qt_QMargins_isNull_bool_QMargins, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QMargins"), End),
            new Function(c, "left", _n_left0, None, Compiled,
                         qt_QMargins_left_int_QMargins, Return, "int",
                         Parameters, new Param(c, "this", "qt.QMargins"), End),
            new Function(c, "right", _n_right0, None, Compiled,
                         qt_QMargins_right_int_QMargins, Return, "int",
                         Parameters, new Param(c, "this", "qt.QMargins"), End),
            new Function(c, "setBottom", _n_setBottom0, None, Compiled,
                         qt_QMargins_setBottom_void_QMargins_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QMargins"),
                         new Param(c, "bottom", "int"), End),
            new Function(c, "setLeft", _n_setLeft0, None, Compiled,
                         qt_QMargins_setLeft_void_QMargins_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QMargins"),
                         new Param(c, "left", "int"), End),
            new Function(c, "setRight", _n_setRight0, None, Compiled,
                         qt_QMargins_setRight_void_QMargins_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QMargins"),
                         new Param(c, "right", "int"), End),
            new Function(c, "setTop", _n_setTop0, None, Compiled,
                         qt_QMargins_setTop_void_QMargins_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QMargins"),
                         new Param(c, "Top", "int"), End),
            new Function(c, "top", _n_top0, None, Compiled,
                         qt_QMargins_top_int_QMargins, Return, "int",
                         Parameters, new Param(c, "this", "qt.QMargins"), End),
            // MISSING: = ("QMargins & operator*"; QMargins this, int factor)
            // MISSING: = ("QMargins & operator*"; QMargins this, double factor)
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
