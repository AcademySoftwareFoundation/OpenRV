//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QAbstractScrollAreaType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QKeyEventType.h>
#include <MuQt5/QMarginsType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QContextMenuEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QResizeEventType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QDragEnterEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QAbstractScrollArea::~MuQt_QAbstractScrollArea()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QAbstractScrollArea::MuQt_QAbstractScrollArea(
        Pointer muobj, const CallEnvironment* ce, QWidget* parent)
        : QAbstractScrollArea(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QAbstractScrollAreaType>(
            c->internName("qt.QAbstractScrollArea"));
    }

    void MuQt_QAbstractScrollArea::setupViewport(QWidget* viewport)
    {
        if (!_env)
        {
            QAbstractScrollArea::setupViewport(viewport);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QWidgetType>(c, viewport, "qt.QWidget"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::setupViewport(viewport);
        }
    }

    QSize MuQt_QAbstractScrollArea::minimumSizeHint() const
    {
        if (!_env)
            return QAbstractScrollArea::minimumSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QAbstractScrollArea::minimumSizeHint();
        }
    }

    QSize MuQt_QAbstractScrollArea::sizeHint() const
    {
        if (!_env)
            return QAbstractScrollArea::sizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QAbstractScrollArea::sizeHint();
        }
    }

    void MuQt_QAbstractScrollArea::scrollContentsBy(int dx, int dy)
    {
        if (!_env)
        {
            QAbstractScrollArea::scrollContentsBy(dx, dy);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(dx);
            args[2] = Value(dy);
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::scrollContentsBy(dx, dy);
        }
    }

    bool MuQt_QAbstractScrollArea::viewportEvent(QEvent* event)
    {
        if (!_env)
            return QAbstractScrollArea::viewportEvent(event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAbstractScrollArea::viewportEvent(event);
        }
    }

    QSize MuQt_QAbstractScrollArea::viewportSizeHint() const
    {
        if (!_env)
            return QAbstractScrollArea::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QAbstractScrollArea::viewportSizeHint();
        }
    }

    void MuQt_QAbstractScrollArea::contextMenuEvent(QContextMenuEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::contextMenuEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QContextMenuEventType>(
                c, e, "qt.QContextMenuEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::contextMenuEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::dragEnterEvent(QDragEnterEvent* event)
    {
        if (!_env)
        {
            QAbstractScrollArea::dragEnterEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragEnterEventType>(
                c, event, "qt.QDragEnterEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::dragEnterEvent(event);
        }
    }

    void MuQt_QAbstractScrollArea::dragLeaveEvent(QDragLeaveEvent* event)
    {
        if (!_env)
        {
            QAbstractScrollArea::dragLeaveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragLeaveEventType>(
                c, event, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::dragLeaveEvent(event);
        }
    }

    void MuQt_QAbstractScrollArea::dragMoveEvent(QDragMoveEvent* event)
    {
        if (!_env)
        {
            QAbstractScrollArea::dragMoveEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QDragMoveEventType>(
                c, event, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::dragMoveEvent(event);
        }
    }

    void MuQt_QAbstractScrollArea::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QAbstractScrollArea::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::dropEvent(event);
        }
    }

    bool MuQt_QAbstractScrollArea::event(QEvent* event_)
    {
        if (!_env)
            return QAbstractScrollArea::event(event_);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event_, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QAbstractScrollArea::event(event_);
        }
    }

    void MuQt_QAbstractScrollArea::keyPressEvent(QKeyEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::keyPressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QKeyEventType>(c, e, "qt.QKeyEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::keyPressEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::mouseDoubleClickEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::mouseDoubleClickEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::mouseDoubleClickEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::mouseMoveEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::mousePressEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::mousePressEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::mousePressEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::mouseReleaseEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::paintEvent(QPaintEvent* event)
    {
        if (!_env)
        {
            QAbstractScrollArea::paintEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QPaintEventType>(c, event, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::paintEvent(event);
        }
    }

    void MuQt_QAbstractScrollArea::resizeEvent(QResizeEvent* event)
    {
        if (!_env)
        {
            QAbstractScrollArea::resizeEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QResizeEventType>(c, event, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::resizeEvent(event);
        }
    }

    void MuQt_QAbstractScrollArea::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QAbstractScrollArea::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::wheelEvent(e);
        }
    }

    void MuQt_QAbstractScrollArea::changeEvent(QEvent* ev)
    {
        if (!_env)
        {
            QAbstractScrollArea::changeEvent(ev);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, ev, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QAbstractScrollArea::changeEvent(ev);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QAbstractScrollAreaType::QAbstractScrollAreaType(Context* c,
                                                     const char* name,
                                                     Class* super,
                                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QAbstractScrollAreaType::~QAbstractScrollAreaType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer
    QAbstractScrollArea_QAbstractScrollArea_QObject(Thread& NODE_THREAD,
                                                    Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QAbstractScrollArea* w = object<QAbstractScrollArea>(widget))
        {
            QAbstractScrollAreaType* type =
                c->findSymbolOfTypeByQualifiedName<QAbstractScrollAreaType>(
                    c->internName("qt.QAbstractScrollArea"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(QAbstractScrollArea_QAbstractScrollArea_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer
    qt_QAbstractScrollArea_QAbstractScrollArea_QAbstractScrollArea_QAbstractScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QAbstractScrollArea(
                      param_this, NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void
    qt_QAbstractScrollArea_addScrollBarWidget_void_QAbstractScrollArea_QWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget,
        int param_alignment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        Qt::Alignment arg2 = (Qt::Alignment)(param_alignment);
        arg0->addScrollBarWidget(arg1, arg2);
    }

    Pointer qt_QAbstractScrollArea_cornerWidget_QWidget_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return makeinstance<QWidgetType>(c, arg0->cornerWidget(), "qt.QWidget");
    }

    Pointer
    qt_QAbstractScrollArea_maximumViewportSize_QSize_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return makeqtype<QSizeType>(c, arg0->maximumViewportSize(), "qt.QSize");
    }

    void
    qt_QAbstractScrollArea_setCornerWidget_void_QAbstractScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        arg0->setCornerWidget(arg1);
    }

    void qt_QAbstractScrollArea_setViewport_void_QAbstractScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_widget);
        arg0->setViewport(arg1);
    }

    void qt_QAbstractScrollArea_setupViewport_void_QAbstractScrollArea_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_viewport)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QWidget* arg1 = object<QWidget>(param_viewport);
        if (isMuQtObject(arg0))
            arg0->QAbstractScrollArea::setupViewport(arg1);
        else
            arg0->setupViewport(arg1);
    }

    Pointer qt_QAbstractScrollArea_viewport_QWidget_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return makeinstance<QWidgetType>(c, arg0->viewport(), "qt.QWidget");
    }

    Pointer qt_QAbstractScrollArea_minimumSizeHint_QSize_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QAbstractScrollArea::minimumSizeHint(),
                         "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->minimumSizeHint(),
                                          "qt.QSize");
    }

    Pointer qt_QAbstractScrollArea_sizeHint_QSize_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(
                         c, arg0->QAbstractScrollArea::sizeHint(), "qt.QSize")
                   : makeqtype<QSizeType>(c, arg0->sizeHint(), "qt.QSize");
    }

    void
    qt_QAbstractScrollArea_scrollContentsBy_void_QAbstractScrollArea_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_dx, int param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        int arg1 = (int)(param_dx);
        int arg2 = (int)(param_dy);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)
                ->scrollContentsBy_pub_parent(arg1, arg2);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->scrollContentsBy_pub(arg1, arg2);
    }

    void
    qt_QAbstractScrollArea_setViewportMargins_void_QAbstractScrollArea_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_left,
        int param_top, int param_right, int param_bottom)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        int arg1 = (int)(param_left);
        int arg2 = (int)(param_top);
        int arg3 = (int)(param_right);
        int arg4 = (int)(param_bottom);
        ((MuQt_QAbstractScrollArea*)arg0)
            ->setViewportMargins_pub(arg1, arg2, arg3, arg4);
    }

    void
    qt_QAbstractScrollArea_setViewportMargins_void_QAbstractScrollArea_QMargins(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_margins)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        const QMargins arg1 = getqtype<QMarginsType>(param_margins);
        ((MuQt_QAbstractScrollArea*)arg0)->setViewportMargins_pub(arg1);
    }

    bool qt_QAbstractScrollArea_viewportEvent_bool_QAbstractScrollArea_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0)
                   ? ((MuQt_QAbstractScrollArea*)arg0)
                         ->viewportEvent_pub_parent(arg1)
                   : ((MuQt_QAbstractScrollArea*)arg0)->viewportEvent_pub(arg1);
    }

    Pointer qt_QAbstractScrollArea_viewportMargins_QMargins_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return makeqtype<QMarginsType>(
            c, ((MuQt_QAbstractScrollArea*)arg0)->viewportMargins_pub(),
            "qt.QMargins");
    }

    Pointer qt_QAbstractScrollArea_viewportSizeHint_QSize_QAbstractScrollArea(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QAbstractScrollArea*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(c,
                                          ((MuQt_QAbstractScrollArea*)arg0)
                                              ->viewportSizeHint_pub(),
                                          "qt.QSize");
    }

    void
    qt_QAbstractScrollArea_contextMenuEvent_void_QAbstractScrollArea_QContextMenuEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QContextMenuEvent* arg1 = getqpointer<QContextMenuEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)
                ->contextMenuEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->contextMenuEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_dragEnterEvent_void_QAbstractScrollArea_QDragEnterEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QDragEnterEvent* arg1 = getqpointer<QDragEnterEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->dragEnterEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->dragEnterEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_dragLeaveEvent_void_QAbstractScrollArea_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_dragMoveEvent_void_QAbstractScrollArea_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->dragMoveEvent_pub(arg1);
    }

    void qt_QAbstractScrollArea_dropEvent_void_QAbstractScrollArea_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->dropEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->dropEvent_pub(arg1);
    }

    bool qt_QAbstractScrollArea_event_bool_QAbstractScrollArea_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event_)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event_);
        return isMuQtObject(arg0)
                   ? ((MuQt_QAbstractScrollArea*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QAbstractScrollArea*)arg0)->event_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_keyPressEvent_void_QAbstractScrollArea_QKeyEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QKeyEvent* arg1 = getqpointer<QKeyEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->keyPressEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->keyPressEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_mouseDoubleClickEvent_void_QAbstractScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)
                ->mouseDoubleClickEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->mouseDoubleClickEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_mouseMoveEvent_void_QAbstractScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_mousePressEvent_void_QAbstractScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->mousePressEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->mousePressEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_mouseReleaseEvent_void_QAbstractScrollArea_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)
                ->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QAbstractScrollArea_paintEvent_void_QAbstractScrollArea_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->paintEvent_pub(arg1);
    }

    void
    qt_QAbstractScrollArea_resizeEvent_void_QAbstractScrollArea_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->resizeEvent_pub(arg1);
    }

    void qt_QAbstractScrollArea_wheelEvent_void_QAbstractScrollArea_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->wheelEvent_pub(arg1);
    }

    void qt_QAbstractScrollArea_changeEvent_void_QAbstractScrollArea_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ev)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QAbstractScrollArea* arg0 = object<QAbstractScrollArea>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_ev);
        if (isMuQtObject(arg0))
            ((MuQt_QAbstractScrollArea*)arg0)->changeEvent_pub_parent(arg1);
        else
            ((MuQt_QAbstractScrollArea*)arg0)->changeEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QAbstractScrollArea0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_QAbstractScrollArea_QAbstractScrollArea_QAbstractScrollArea_QWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addScrollBarWidget0, void)
    {
        qt_QAbstractScrollArea_addScrollBarWidget_void_QAbstractScrollArea_QWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_cornerWidget0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_cornerWidget_QWidget_QAbstractScrollArea(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_maximumViewportSize0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_maximumViewportSize_QSize_QAbstractScrollArea(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCornerWidget0, void)
    {
        qt_QAbstractScrollArea_setCornerWidget_void_QAbstractScrollArea_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setViewport0, void)
    {
        qt_QAbstractScrollArea_setViewport_void_QAbstractScrollArea_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setupViewport0, void)
    {
        qt_QAbstractScrollArea_setupViewport_void_QAbstractScrollArea_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_viewport0, Pointer)
    {
        NODE_RETURN(qt_QAbstractScrollArea_viewport_QWidget_QAbstractScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_minimumSizeHint0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_minimumSizeHint_QSize_QAbstractScrollArea(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_sizeHint0, Pointer)
    {
        NODE_RETURN(qt_QAbstractScrollArea_sizeHint_QSize_QAbstractScrollArea(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_scrollContentsBy0, void)
    {
        qt_QAbstractScrollArea_scrollContentsBy_void_QAbstractScrollArea_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setViewportMargins0, void)
    {
        qt_QAbstractScrollArea_setViewportMargins_void_QAbstractScrollArea_int_int_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, int), NODE_ARG(4, int));
    }

    static NODE_IMPLEMENTATION(_n_setViewportMargins1, void)
    {
        qt_QAbstractScrollArea_setViewportMargins_void_QAbstractScrollArea_QMargins(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_viewportEvent0, bool)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_viewportEvent_bool_QAbstractScrollArea_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportMargins0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_viewportMargins_QMargins_QAbstractScrollArea(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_viewportSizeHint_QSize_QAbstractScrollArea(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_contextMenuEvent0, void)
    {
        qt_QAbstractScrollArea_contextMenuEvent_void_QAbstractScrollArea_QContextMenuEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragEnterEvent0, void)
    {
        qt_QAbstractScrollArea_dragEnterEvent_void_QAbstractScrollArea_QDragEnterEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QAbstractScrollArea_dragLeaveEvent_void_QAbstractScrollArea_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QAbstractScrollArea_dragMoveEvent_void_QAbstractScrollArea_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QAbstractScrollArea_dropEvent_void_QAbstractScrollArea_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(
            qt_QAbstractScrollArea_event_bool_QAbstractScrollArea_QEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_keyPressEvent0, void)
    {
        qt_QAbstractScrollArea_keyPressEvent_void_QAbstractScrollArea_QKeyEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseDoubleClickEvent0, void)
    {
        qt_QAbstractScrollArea_mouseDoubleClickEvent_void_QAbstractScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QAbstractScrollArea_mouseMoveEvent_void_QAbstractScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mousePressEvent0, void)
    {
        qt_QAbstractScrollArea_mousePressEvent_void_QAbstractScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QAbstractScrollArea_mouseReleaseEvent_void_QAbstractScrollArea_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QAbstractScrollArea_paintEvent_void_QAbstractScrollArea_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QAbstractScrollArea_resizeEvent_void_QAbstractScrollArea_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QAbstractScrollArea_wheelEvent_void_QAbstractScrollArea_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_changeEvent0, void)
    {
        qt_QAbstractScrollArea_changeEvent_void_QAbstractScrollArea_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QAbstractScrollAreaType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QAbstractScrollArea_QAbstractScrollArea_QObject,
                                Return, ftn, Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QAbstractScrollArea", _n_QAbstractScrollArea0, None,
                Compiled,
                qt_QAbstractScrollArea_QAbstractScrollArea_QAbstractScrollArea_QAbstractScrollArea_QWidget,
                Return, "qt.QAbstractScrollArea", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(
                c, "addScrollBarWidget", _n_addScrollBarWidget0, None, Compiled,
                qt_QAbstractScrollArea_addScrollBarWidget_void_QAbstractScrollArea_QWidget_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "widget", "qt.QWidget"),
                new Param(c, "alignment", "int"), End),
            new Function(
                c, "cornerWidget", _n_cornerWidget0, None, Compiled,
                qt_QAbstractScrollArea_cornerWidget_QWidget_QAbstractScrollArea,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            // MISSING: horizontalScrollBar ("QScrollBar *"; QAbstractScrollArea
            // this) PROP: horizontalScrollBarPolicy (flags Qt::ScrollBarPolicy;
            // QAbstractScrollArea this)
            new Function(
                c, "maximumViewportSize", _n_maximumViewportSize0, None,
                Compiled,
                qt_QAbstractScrollArea_maximumViewportSize_QSize_QAbstractScrollArea,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            // MISSING: scrollBarWidgets ("QWidgetList"; QAbstractScrollArea
            // this, flags Qt::Alignment alignment)
            new Function(
                c, "setCornerWidget", _n_setCornerWidget0, None, Compiled,
                qt_QAbstractScrollArea_setCornerWidget_void_QAbstractScrollArea_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "widget", "qt.QWidget"), End),
            // MISSING: setHorizontalScrollBar (void; QAbstractScrollArea this,
            // "QScrollBar *" scrollBar) PROP: setHorizontalScrollBarPolicy
            // (void; QAbstractScrollArea this, flags Qt::ScrollBarPolicy _p20)
            // PROP: setSizeAdjustPolicy (void; QAbstractScrollArea this, flags
            // QAbstractScrollArea::SizeAdjustPolicy policy) MISSING:
            // setVerticalScrollBar (void; QAbstractScrollArea this, "QScrollBar
            // *" scrollBar) PROP: setVerticalScrollBarPolicy (void;
            // QAbstractScrollArea this, flags Qt::ScrollBarPolicy _p20)
            new Function(
                c, "setViewport", _n_setViewport0, None, Compiled,
                qt_QAbstractScrollArea_setViewport_void_QAbstractScrollArea_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "widget", "qt.QWidget"), End),
            _func[0] = new MemberFunction(
                c, "setupViewport", _n_setupViewport0, None, Compiled,
                qt_QAbstractScrollArea_setupViewport_void_QAbstractScrollArea_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "viewport", "qt.QWidget"), End),
            // PROP: sizeAdjustPolicy (flags
            // QAbstractScrollArea::SizeAdjustPolicy; QAbstractScrollArea this)
            // MISSING: verticalScrollBar ("QScrollBar *"; QAbstractScrollArea
            // this) PROP: verticalScrollBarPolicy (flags Qt::ScrollBarPolicy;
            // QAbstractScrollArea this)
            new Function(
                c, "viewport", _n_viewport0, None, Compiled,
                qt_QAbstractScrollArea_viewport_QWidget_QAbstractScrollArea,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            _func[1] = new MemberFunction(
                c, "minimumSizeHint", _n_minimumSizeHint0, None, Compiled,
                qt_QAbstractScrollArea_minimumSizeHint_QSize_QAbstractScrollArea,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            _func[2] = new MemberFunction(
                c, "sizeHint", _n_sizeHint0, None, Compiled,
                qt_QAbstractScrollArea_sizeHint_QSize_QAbstractScrollArea,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            _func[3] = new MemberFunction(
                c, "scrollContentsBy", _n_scrollContentsBy0, None, Compiled,
                qt_QAbstractScrollArea_scrollContentsBy_void_QAbstractScrollArea_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "dx", "int"), new Param(c, "dy", "int"), End),
            new Function(
                c, "setViewportMargins", _n_setViewportMargins0, None, Compiled,
                qt_QAbstractScrollArea_setViewportMargins_void_QAbstractScrollArea_int_int_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "left", "int"), new Param(c, "top", "int"),
                new Param(c, "right", "int"), new Param(c, "bottom", "int"),
                End),
            new Function(
                c, "setViewportMargins", _n_setViewportMargins1, None, Compiled,
                qt_QAbstractScrollArea_setViewportMargins_void_QAbstractScrollArea_QMargins,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "margins", "qt.QMargins"), End),
            _func[4] = new MemberFunction(
                c, "viewportEvent", _n_viewportEvent0, None, Compiled,
                qt_QAbstractScrollArea_viewportEvent_bool_QAbstractScrollArea_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QEvent"), End),
            new Function(
                c, "viewportMargins", _n_viewportMargins0, None, Compiled,
                qt_QAbstractScrollArea_viewportMargins_QMargins_QAbstractScrollArea,
                Return, "qt.QMargins", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            _func[5] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QAbstractScrollArea_viewportSizeHint_QSize_QAbstractScrollArea,
                Return, "qt.QSize", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"), End),
            _func[6] = new MemberFunction(
                c, "contextMenuEvent", _n_contextMenuEvent0, None, Compiled,
                qt_QAbstractScrollArea_contextMenuEvent_void_QAbstractScrollArea_QContextMenuEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QContextMenuEvent"), End),
            _func[7] = new MemberFunction(
                c, "dragEnterEvent", _n_dragEnterEvent0, None, Compiled,
                qt_QAbstractScrollArea_dragEnterEvent_void_QAbstractScrollArea_QDragEnterEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QDragEnterEvent"), End),
            _func[8] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QAbstractScrollArea_dragLeaveEvent_void_QAbstractScrollArea_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QDragLeaveEvent"), End),
            _func[9] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QAbstractScrollArea_dragMoveEvent_void_QAbstractScrollArea_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QDragMoveEvent"), End),
            _func[10] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QAbstractScrollArea_dropEvent_void_QAbstractScrollArea_QDropEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[11] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QAbstractScrollArea_event_bool_QAbstractScrollArea_QEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event_", "qt.QEvent"), End),
            _func[12] = new MemberFunction(
                c, "keyPressEvent", _n_keyPressEvent0, None, Compiled,
                qt_QAbstractScrollArea_keyPressEvent_void_QAbstractScrollArea_QKeyEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QKeyEvent"), End),
            _func[13] = new MemberFunction(
                c, "mouseDoubleClickEvent", _n_mouseDoubleClickEvent0, None,
                Compiled,
                qt_QAbstractScrollArea_mouseDoubleClickEvent_void_QAbstractScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QAbstractScrollArea_mouseMoveEvent_void_QAbstractScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[15] = new MemberFunction(
                c, "mousePressEvent", _n_mousePressEvent0, None, Compiled,
                qt_QAbstractScrollArea_mousePressEvent_void_QAbstractScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[16] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QAbstractScrollArea_mouseReleaseEvent_void_QAbstractScrollArea_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[17] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QAbstractScrollArea_paintEvent_void_QAbstractScrollArea_QPaintEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QPaintEvent"), End),
            _func[18] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QAbstractScrollArea_resizeEvent_void_QAbstractScrollArea_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "event", "qt.QResizeEvent"), End),
            _func[19] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QAbstractScrollArea_wheelEvent_void_QAbstractScrollArea_QWheelEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            _func[20] = new MemberFunction(
                c, "changeEvent", _n_changeEvent0, None, Compiled,
                qt_QAbstractScrollArea_changeEvent_void_QAbstractScrollArea_QEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QAbstractScrollArea"),
                new Param(c, "ev", "qt.QEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QAbstractScrollArea::staticMetaObject, propExclusions);
    }

} // namespace Mu
