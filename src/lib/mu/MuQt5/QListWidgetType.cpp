//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QListWidgetType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QListWidgetItemType.h>
#include <MuQt5/QDropEventType.h>
#include <MuQt5/QSizeType.h>
#include <MuQt5/QEventType.h>
#include <MuQt5/QMouseEventType.h>
#include <MuQt5/QRectType.h>
#include <MuQt5/QMimeDataType.h>
#include <MuQt5/QModelIndexType.h>
#include <MuQt5/QDragMoveEventType.h>
#include <MuQt5/QDragLeaveEventType.h>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QItemSelectionType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QWheelEventType.h>
#include <MuQt5/QTimerEventType.h>
#include <MuQt5/QPaintEventType.h>
#include <MuQt5/QResizeEventType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QListWidget::~MuQt_QListWidget()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QListWidget::MuQt_QListWidget(Pointer muobj, const CallEnvironment* ce,
                                       QWidget* parent)
        : QListWidget(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QListWidgetType>(
            c->internName("qt.QListWidget"));
    }

    void MuQt_QListWidget::dropEvent(QDropEvent* event)
    {
        if (!_env)
        {
            QListWidget::dropEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QDropEventType>(c, event, "qt.QDropEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::dropEvent(event);
        }
    }

    bool MuQt_QListWidget::dropMimeData(int index, const QMimeData* data,
                                        Qt::DropAction action)
    {
        if (!_env)
            return QListWidget::dropMimeData(index, data, action);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(index);
            args[2] =
                Value(makeinstance<QMimeDataType>(c, data, "qt.QMimeData"));
            args[3] = Value(int(action));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QListWidget::dropMimeData(index, data, action);
        }
    }

    QMimeData*
    MuQt_QListWidget::mimeData(const QList<QListWidgetItem*>& items) const
    {
        if (!_env)
            return QListWidget::mimeData(items);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointerlist<QListWidgetItemType>(
                c, items, "qt.QListWidgetItem"));
            Value rval = _env->call(F, args);
            return object<QMimeData>(rval._Pointer);
        }
        else
        {
            return QListWidget::mimeData(items);
        }
    }

    QStringList MuQt_QListWidget::mimeTypes() const
    {
        if (!_env)
            return QListWidget::mimeTypes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qstringlist(rval._Pointer);
        }
        else
        {
            return QListWidget::mimeTypes();
        }
    }

    Qt::DropActions MuQt_QListWidget::supportedDropActions() const
    {
        if (!_env)
            return QListWidget::supportedDropActions();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (Qt::DropActions)(rval._int);
        }
        else
        {
            return QListWidget::supportedDropActions();
        }
    }

    bool MuQt_QListWidget::event(QEvent* e)
    {
        if (!_env)
            return QListWidget::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QListWidget::event(e);
        }
    }

    QModelIndex MuQt_QListWidget::indexAt(const QPoint& p) const
    {
        if (!_env)
            return QListWidget::indexAt(p);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QPointType>(c, p, "qt.QPoint"));
            Value rval = _env->call(F, args);
            return getqtype<QModelIndexType>(rval._Pointer);
        }
        else
        {
            return QListWidget::indexAt(p);
        }
    }

    QRect MuQt_QListWidget::visualRect(const QModelIndex& index) const
    {
        if (!_env)
            return QListWidget::visualRect(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return getqtype<QRectType>(rval._Pointer);
        }
        else
        {
            return QListWidget::visualRect(index);
        }
    }

    void MuQt_QListWidget::currentChanged(const QModelIndex& current,
                                          const QModelIndex& previous)
    {
        if (!_env)
        {
            QListWidget::currentChanged(current, previous);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, current, "qt.QModelIndex"));
            args[2] = Value(
                makeqtype<QModelIndexType>(c, previous, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::currentChanged(current, previous);
        }
    }

    void MuQt_QListWidget::dragLeaveEvent(QDragLeaveEvent* e)
    {
        if (!_env)
        {
            QListWidget::dragLeaveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragLeaveEventType>(c, e, "qt.QDragLeaveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::dragLeaveEvent(e);
        }
    }

    void MuQt_QListWidget::dragMoveEvent(QDragMoveEvent* e)
    {
        if (!_env)
        {
            QListWidget::dragMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QDragMoveEventType>(c, e, "qt.QDragMoveEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::dragMoveEvent(e);
        }
    }

    int MuQt_QListWidget::horizontalOffset() const
    {
        if (!_env)
            return QListWidget::horizontalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QListWidget::horizontalOffset();
        }
    }

    bool MuQt_QListWidget::isIndexHidden(const QModelIndex& index) const
    {
        if (!_env)
            return QListWidget::isIndexHidden(index);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, index, "qt.QModelIndex"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QListWidget::isIndexHidden(index);
        }
    }

    void MuQt_QListWidget::mouseMoveEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QListWidget::mouseMoveEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::mouseMoveEvent(e);
        }
    }

    void MuQt_QListWidget::mouseReleaseEvent(QMouseEvent* e)
    {
        if (!_env)
        {
            QListWidget::mouseReleaseEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[14];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QMouseEventType>(c, e, "qt.QMouseEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::mouseReleaseEvent(e);
        }
    }

    void MuQt_QListWidget::paintEvent(QPaintEvent* e)
    {
        if (!_env)
        {
            QListWidget::paintEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[15];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QPaintEventType>(c, e, "qt.QPaintEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::paintEvent(e);
        }
    }

    void MuQt_QListWidget::resizeEvent(QResizeEvent* e)
    {
        if (!_env)
        {
            QListWidget::resizeEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[16];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QResizeEventType>(c, e, "qt.QResizeEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::resizeEvent(e);
        }
    }

    void MuQt_QListWidget::rowsAboutToBeRemoved(const QModelIndex& parent,
                                                int start, int end)
    {
        if (!_env)
        {
            QListWidget::rowsAboutToBeRemoved(parent, start, end);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[17];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, parent, "qt.QModelIndex"));
            args[2] = Value(start);
            args[3] = Value(end);
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::rowsAboutToBeRemoved(parent, start, end);
        }
    }

    void MuQt_QListWidget::rowsInserted(const QModelIndex& parent, int start,
                                        int end)
    {
        if (!_env)
        {
            QListWidget::rowsInserted(parent, start, end);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[18];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(4);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqtype<QModelIndexType>(c, parent, "qt.QModelIndex"));
            args[2] = Value(start);
            args[3] = Value(end);
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::rowsInserted(parent, start, end);
        }
    }

    QModelIndexList MuQt_QListWidget::selectedIndexes() const
    {
        if (!_env)
            return QListWidget::selectedIndexes();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[19];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return qmodelindexlist(rval._Pointer);
        }
        else
        {
            return QListWidget::selectedIndexes();
        }
    }

    void MuQt_QListWidget::selectionChanged(const QItemSelection& selected,
                                            const QItemSelection& deselected)
    {
        if (!_env)
        {
            QListWidget::selectionChanged(selected, deselected);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[20];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selected,
                                                          "qt.QItemSelection"));
            args[2] = Value(makeqtype<QItemSelectionType>(c, deselected,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::selectionChanged(selected, deselected);
        }
    }

    void
    MuQt_QListWidget::setSelection(const QRect& rect,
                                   QItemSelectionModel::SelectionFlags command)
    {
        if (!_env)
        {
            QListWidget::setSelection(rect, command);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[21];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QRectType>(c, rect, "qt.QRect"));
            args[2] = Value(int(command));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::setSelection(rect, command);
        }
    }

    void MuQt_QListWidget::startDrag(Qt::DropActions supportedActions)
    {
        if (!_env)
        {
            QListWidget::startDrag(supportedActions);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[22];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(int(supportedActions));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::startDrag(supportedActions);
        }
    }

    void MuQt_QListWidget::timerEvent(QTimerEvent* e)
    {
        if (!_env)
        {
            QListWidget::timerEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[23];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QTimerEventType>(c, e, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::timerEvent(e);
        }
    }

    void MuQt_QListWidget::updateGeometries()
    {
        if (!_env)
        {
            QListWidget::updateGeometries();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[24];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::updateGeometries();
        }
    }

    int MuQt_QListWidget::verticalOffset() const
    {
        if (!_env)
            return QListWidget::verticalOffset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[25];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int)(rval._int);
        }
        else
        {
            return QListWidget::verticalOffset();
        }
    }

    QSize MuQt_QListWidget::viewportSizeHint() const
    {
        if (!_env)
            return QListWidget::viewportSizeHint();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[26];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return getqtype<QSizeType>(rval._Pointer);
        }
        else
        {
            return QListWidget::viewportSizeHint();
        }
    }

    QRegion MuQt_QListWidget::visualRegionForSelection(
        const QItemSelection& selection) const
    {
        if (!_env)
            return QListWidget::visualRegionForSelection(selection);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[27];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqtype<QItemSelectionType>(c, selection,
                                                          "qt.QItemSelection"));
            Value rval = _env->call(F, args);
            return getqtype<QRegionType>(rval._Pointer);
        }
        else
        {
            return QListWidget::visualRegionForSelection(selection);
        }
    }

    void MuQt_QListWidget::wheelEvent(QWheelEvent* e)
    {
        if (!_env)
        {
            QListWidget::wheelEvent(e);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[28];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeqpointer<QWheelEventType>(c, e, "qt.QWheelEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QListWidget::wheelEvent(e);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QListWidgetType::QListWidgetType(Context* c, const char* name, Class* super,
                                     Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QListWidgetType::~QListWidgetType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QListWidget_QListWidget_QObject(Thread& NODE_THREAD,
                                                   Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QListWidget* w = object<QListWidget>(widget))
        {
            QListWidgetType* type =
                c->findSymbolOfTypeByQualifiedName<QListWidgetType>(
                    c->internName("qt.QListWidget"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QListWidget_QListWidget_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QListWidget_QListWidget_QListWidget_QListWidget_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWidget* arg1 = object<QWidget>(param_parent);
        setobject(param_this,
                  new MuQt_QListWidget(param_this,
                                       NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QListWidget_addItem_void_QListWidget_string(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_label)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QString arg1 = qstring(param_label);
        arg0->addItem(arg1);
    }

    void qt_QListWidget_addItem_void_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        arg0->addItem(arg1);
    }

    void qt_QListWidget_addItems_void_QListWidget_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_labels)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QStringList arg1 = qstringlist(param_labels);
        arg0->addItems(arg1);
    }

    void qt_QListWidget_closePersistentEditor_void_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        arg0->closePersistentEditor(arg1);
    }

    Pointer qt_QListWidget_currentItem_QListWidgetItem_QListWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return makeqpointer<QListWidgetItemType>(c, arg0->currentItem(),
                                                 "qt.QListWidgetItem");
    }

    void qt_QListWidget_editItem_void_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        arg0->editItem(arg1);
    }

    Pointer
    qt_QListWidget_findItems_qt__QListWidgetItemBSB_ESB__QListWidget_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_text,
        int param_flags)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QString arg1 = qstring(param_text);
        Qt::MatchFlags arg2 = (Qt::MatchFlags)(param_flags);
        return makeqpointerlist<QListWidgetItemType>(
            c, arg0->findItems(arg1, arg2), "qt.QListWidgetItem");
    }

    void qt_QListWidget_insertItem_void_QListWidget_int_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_row);
        QListWidgetItem* arg2 = getqpointer<QListWidgetItemType>(param_item);
        arg0->insertItem(arg1, arg2);
    }

    void qt_QListWidget_insertItem_void_QListWidget_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_label)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_row);
        const QString arg2 = qstring(param_label);
        arg0->insertItem(arg1, arg2);
    }

    void qt_QListWidget_insertItems_void_QListWidget_int_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        Pointer param_labels)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_row);
        const QStringList arg2 = qstringlist(param_labels);
        arg0->insertItems(arg1, arg2);
    }

    Pointer qt_QListWidget_item_QListWidgetItem_QListWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_row);
        return makeqpointer<QListWidgetItemType>(c, arg0->item(arg1),
                                                 "qt.QListWidgetItem");
    }

    Pointer qt_QListWidget_itemAt_QListWidgetItem_QListWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_p);
        return makeqpointer<QListWidgetItemType>(c, arg0->itemAt(arg1),
                                                 "qt.QListWidgetItem");
    }

    Pointer qt_QListWidget_itemAt_QListWidgetItem_QListWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_x, int param_y)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_x);
        int arg2 = (int)(param_y);
        return makeqpointer<QListWidgetItemType>(c, arg0->itemAt(arg1, arg2),
                                                 "qt.QListWidgetItem");
    }

    Pointer qt_QListWidget_itemWidget_QWidget_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        return makeinstance<QWidgetType>(c, arg0->itemWidget(arg1),
                                         "qt.QWidget");
    }

    void qt_QListWidget_openPersistentEditor_void_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        arg0->openPersistentEditor(arg1);
    }

    void qt_QListWidget_removeItemWidget_void_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        arg0->removeItemWidget(arg1);
    }

    int qt_QListWidget_row_int_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QListWidgetItem* arg1 =
            getqpointer<QListWidgetItemType>(param_item);
        return arg0->row(arg1);
    }

    Pointer
    qt_QListWidget_selectedItems_qt__QListWidgetItemBSB_ESB__QListWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return makeqpointerlist<QListWidgetItemType>(c, arg0->selectedItems(),
                                                     "qt.QListWidgetItem");
    }

    void qt_QListWidget_setCurrentItem_void_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        arg0->setCurrentItem(arg1);
    }

    void qt_QListWidget_setCurrentItem_void_QListWidget_QListWidgetItem_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        arg0->setCurrentItem(arg1, arg2);
    }

    void qt_QListWidget_setCurrentRow_void_QListWidget_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row,
        int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_row);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        arg0->setCurrentRow(arg1, arg2);
    }

    void qt_QListWidget_setItemWidget_void_QListWidget_QListWidgetItem_QWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item,
        Pointer param_widget)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        QWidget* arg2 = object<QWidget>(param_widget);
        arg0->setItemWidget(arg1, arg2);
    }

    void qt_QListWidget_sortItems_void_QListWidget_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_order)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        Qt::SortOrder arg1 = (Qt::SortOrder)(param_order);
        arg0->sortItems(arg1);
    }

    Pointer qt_QListWidget_takeItem_QListWidgetItem_QListWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_row)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_row);
        return makeqpointer<QListWidgetItemType>(c, arg0->takeItem(arg1),
                                                 "qt.QListWidgetItem");
    }

    Pointer qt_QListWidget_visualItemRect_QRect_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QListWidgetItem* arg1 =
            getqpointer<QListWidgetItemType>(param_item);
        return makeqtype<QRectType>(c, arg0->visualItemRect(arg1), "qt.QRect");
    }

    void qt_QListWidget_dropEvent_void_QListWidget_QDropEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QDropEvent* arg1 = getqpointer<QDropEventType>(param_event);
        if (isMuQtObject(arg0))
            arg0->QListWidget::dropEvent(arg1);
        else
            arg0->dropEvent(arg1);
    }

    bool qt_QListWidget_dropMimeData_bool_QListWidget_int_QMimeData_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_index,
        Pointer param_data, int param_action)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        int arg1 = (int)(param_index);
        const QMimeData* arg2 = object<QMimeData>(param_data);
        Qt::DropAction arg3 = (Qt::DropAction)(param_action);
        return isMuQtObject(arg0)
                   ? ((MuQt_QListWidget*)arg0)
                         ->dropMimeData_pub_parent(arg1, arg2, arg3)
                   : ((MuQt_QListWidget*)arg0)
                         ->dropMimeData_pub(arg1, arg2, arg3);
    }

    Pointer
    qt_QListWidget_indexFromItem_QModelIndex_QListWidget_QListWidgetItem(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_item)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QListWidgetItem* arg1 = getqpointer<QListWidgetItemType>(param_item);
        return makeqtype<QModelIndexType>(
            c, ((MuQt_QListWidget*)arg0)->indexFromItem_pub(arg1),
            "qt.QModelIndex");
    }

    Pointer
    qt_QListWidget_itemFromIndex_QListWidgetItem_QListWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return makeqpointer<QListWidgetItemType>(
            c, ((MuQt_QListWidget*)arg0)->itemFromIndex_pub(arg1),
            "qt.QListWidgetItem");
    }

    Pointer
    qt_QListWidget_items_qt__QListWidgetItemBSB_ESB__QListWidget_QMimeData(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_data)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QMimeData* arg1 = object<QMimeData>(param_data);
        return makeqpointerlist<QListWidgetItemType>(
            c, ((MuQt_QListWidget*)arg0)->items_pub(arg1),
            "qt.QListWidgetItem");
    }

    Pointer
    qt_QListWidget_mimeData_QMimeData_QListWidget_qt__QListWidgetItemBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_items)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QList<QListWidgetItem*> arg1 =
            qpointerlist<QListWidgetItemType>(param_items);
        return isMuQtObject(arg0)
                   ? makeinstance<QMimeDataType>(
                         c,
                         ((MuQt_QListWidget*)arg0)->mimeData_pub_parent(arg1),
                         "qt.QMimeData")
                   : makeinstance<QMimeDataType>(
                         c, ((MuQt_QListWidget*)arg0)->mimeData_pub(arg1),
                         "qt.QMimeData");
    }

    Pointer
    qt_QListWidget_mimeTypes_stringBSB_ESB__QListWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makestringlist(
                         c, ((MuQt_QListWidget*)arg0)->mimeTypes_pub_parent())
                   : makestringlist(c,
                                    ((MuQt_QListWidget*)arg0)->mimeTypes_pub());
    }

    int
    qt_QListWidget_supportedDropActions_int_QListWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return isMuQtObject(arg0)
                   ? int(((MuQt_QListWidget*)arg0)
                             ->supportedDropActions_pub_parent())
                   : int(((MuQt_QListWidget*)arg0)->supportedDropActions_pub());
    }

    bool qt_QListWidget_event_bool_QListWidget_QEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0)
                   ? ((MuQt_QListWidget*)arg0)->event_pub_parent(arg1)
                   : ((MuQt_QListWidget*)arg0)->event_pub(arg1);
    }

    Pointer qt_QListWidget_indexAt_QModelIndex_QListWidget_QPoint(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_p);
        return isMuQtObject(arg0)
                   ? makeqtype<QModelIndexType>(
                         c, arg0->QListWidget::indexAt(arg1), "qt.QModelIndex")
                   : makeqtype<QModelIndexType>(c, arg0->indexAt(arg1),
                                                "qt.QModelIndex");
    }

    Pointer qt_QListWidget_visualRect_QRect_QListWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? makeqtype<QRectType>(
                         c, arg0->QListWidget::visualRect(arg1), "qt.QRect")
                   : makeqtype<QRectType>(c, arg0->visualRect(arg1),
                                          "qt.QRect");
    }

    void qt_QListWidget_currentChanged_void_QListWidget_QModelIndex_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_current,
        Pointer param_previous)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_current);
        const QModelIndex arg2 = getqtype<QModelIndexType>(param_previous);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->currentChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QListWidget*)arg0)->currentChanged_pub(arg1, arg2);
    }

    void qt_QListWidget_dragLeaveEvent_void_QListWidget_QDragLeaveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QDragLeaveEvent* arg1 = getqpointer<QDragLeaveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->dragLeaveEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->dragLeaveEvent_pub(arg1);
    }

    void qt_QListWidget_dragMoveEvent_void_QListWidget_QDragMoveEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QDragMoveEvent* arg1 = getqpointer<QDragMoveEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->dragMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->dragMoveEvent_pub(arg1);
    }

    int qt_QListWidget_horizontalOffset_int_QListWidget(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QListWidget*)arg0)->horizontalOffset_pub_parent()
                   : ((MuQt_QListWidget*)arg0)->horizontalOffset_pub();
    }

    bool qt_QListWidget_isIndexHidden_bool_QListWidget_QModelIndex(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_index)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_index);
        return isMuQtObject(arg0)
                   ? ((MuQt_QListWidget*)arg0)->isIndexHidden_pub_parent(arg1)
                   : ((MuQt_QListWidget*)arg0)->isIndexHidden_pub(arg1);
    }

    void qt_QListWidget_mouseMoveEvent_void_QListWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->mouseMoveEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->mouseMoveEvent_pub(arg1);
    }

    void qt_QListWidget_mouseReleaseEvent_void_QListWidget_QMouseEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QMouseEvent* arg1 = getqpointer<QMouseEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->mouseReleaseEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->mouseReleaseEvent_pub(arg1);
    }

    void qt_QListWidget_paintEvent_void_QListWidget_QPaintEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QPaintEvent* arg1 = getqpointer<QPaintEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->paintEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->paintEvent_pub(arg1);
    }

    void qt_QListWidget_resizeEvent_void_QListWidget_QResizeEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QResizeEvent* arg1 = getqpointer<QResizeEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->resizeEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->resizeEvent_pub(arg1);
    }

    void
    qt_QListWidget_rowsAboutToBeRemoved_void_QListWidget_QModelIndex_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_start, int param_end)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_parent);
        int arg2 = (int)(param_start);
        int arg3 = (int)(param_end);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)
                ->rowsAboutToBeRemoved_pub_parent(arg1, arg2, arg3);
        else
            ((MuQt_QListWidget*)arg0)
                ->rowsAboutToBeRemoved_pub(arg1, arg2, arg3);
    }

    void qt_QListWidget_rowsInserted_void_QListWidget_QModelIndex_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent,
        int param_start, int param_end)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QModelIndex arg1 = getqtype<QModelIndexType>(param_parent);
        int arg2 = (int)(param_start);
        int arg3 = (int)(param_end);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)
                ->rowsInserted_pub_parent(arg1, arg2, arg3);
        else
            ((MuQt_QListWidget*)arg0)->rowsInserted_pub(arg1, arg2, arg3);
    }

    Pointer qt_QListWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QListWidget(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqmodelindexlist(c, ((MuQt_QListWidget*)arg0)
                                                ->selectedIndexes_pub_parent())
                   : makeqmodelindexlist(
                         c, ((MuQt_QListWidget*)arg0)->selectedIndexes_pub());
    }

    void
    qt_QListWidget_selectionChanged_void_QListWidget_QItemSelection_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selected,
        Pointer param_deselected)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selected);
        const QItemSelection arg2 =
            getqtype<QItemSelectionType>(param_deselected);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->selectionChanged_pub_parent(arg1, arg2);
        else
            ((MuQt_QListWidget*)arg0)->selectionChanged_pub(arg1, arg2);
    }

    void qt_QListWidget_setSelection_void_QListWidget_QRect_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect,
        int param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rect);
        QItemSelectionModel::SelectionFlags arg2 =
            (QItemSelectionModel::SelectionFlags)(param_command);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->setSelection_pub_parent(arg1, arg2);
        else
            ((MuQt_QListWidget*)arg0)->setSelection_pub(arg1, arg2);
    }

    void qt_QListWidget_startDrag_void_QListWidget_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_supportedActions)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        Qt::DropActions arg1 = (Qt::DropActions)(param_supportedActions);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->startDrag_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->startDrag_pub(arg1);
    }

    void qt_QListWidget_timerEvent_void_QListWidget_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->timerEvent_pub(arg1);
    }

    void
    qt_QListWidget_updateGeometries_void_QListWidget(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->updateGeometries_pub_parent();
        else
            ((MuQt_QListWidget*)arg0)->updateGeometries_pub();
    }

    int qt_QListWidget_verticalOffset_int_QListWidget(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return isMuQtObject(arg0)
                   ? ((MuQt_QListWidget*)arg0)->verticalOffset_pub_parent()
                   : ((MuQt_QListWidget*)arg0)->verticalOffset_pub();
    }

    Pointer
    qt_QListWidget_viewportSizeHint_QSize_QListWidget(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        return isMuQtObject(arg0)
                   ? makeqtype<QSizeType>(c,
                                          ((MuQt_QListWidget*)arg0)
                                              ->viewportSizeHint_pub_parent(),
                                          "qt.QSize")
                   : makeqtype<QSizeType>(
                         c, ((MuQt_QListWidget*)arg0)->viewportSizeHint_pub(),
                         "qt.QSize");
    }

    Pointer
    qt_QListWidget_visualRegionForSelection_QRegion_QListWidget_QItemSelection(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_selection)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        const QItemSelection arg1 =
            getqtype<QItemSelectionType>(param_selection);
        return isMuQtObject(arg0)
                   ? makeqtype<QRegionType>(
                         c,
                         ((MuQt_QListWidget*)arg0)
                             ->visualRegionForSelection_pub_parent(arg1),
                         "qt.QRegion")
                   : makeqtype<QRegionType>(
                         c,
                         ((MuQt_QListWidget*)arg0)
                             ->visualRegionForSelection_pub(arg1),
                         "qt.QRegion");
    }

    void qt_QListWidget_wheelEvent_void_QListWidget_QWheelEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QListWidget* arg0 = object<QListWidget>(param_this);
        QWheelEvent* arg1 = getqpointer<QWheelEventType>(param_e);
        if (isMuQtObject(arg0))
            ((MuQt_QListWidget*)arg0)->wheelEvent_pub_parent(arg1);
        else
            ((MuQt_QListWidget*)arg0)->wheelEvent_pub(arg1);
    }

    static NODE_IMPLEMENTATION(_n_QListWidget0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_QListWidget_QListWidget_QListWidget_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_addItem0, void)
    {
        qt_QListWidget_addItem_void_QListWidget_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addItem1, void)
    {
        qt_QListWidget_addItem_void_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_addItems0, void)
    {
        qt_QListWidget_addItems_void_QListWidget_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_closePersistentEditor0, void)
    {
        qt_QListWidget_closePersistentEditor_void_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_currentItem0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_currentItem_QListWidgetItem_QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_editItem0, void)
    {
        qt_QListWidget_editItem_void_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_findItems0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_findItems_qt__QListWidgetItemBSB_ESB__QListWidget_string_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_insertItem0, void)
    {
        qt_QListWidget_insertItem_void_QListWidget_int_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertItem1, void)
    {
        qt_QListWidget_insertItem_void_QListWidget_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_insertItems0, void)
    {
        qt_QListWidget_insertItems_void_QListWidget_int_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_item0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_item_QListWidgetItem_QListWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemAt0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_itemAt_QListWidgetItem_QListWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemAt1, Pointer)
    {
        NODE_RETURN(qt_QListWidget_itemAt_QListWidgetItem_QListWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_itemWidget0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_itemWidget_QWidget_QListWidget_QListWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_openPersistentEditor0, void)
    {
        qt_QListWidget_openPersistentEditor_void_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_removeItemWidget0, void)
    {
        qt_QListWidget_removeItemWidget_void_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_row0, int)
    {
        NODE_RETURN(qt_QListWidget_row_int_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectedItems0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_selectedItems_qt__QListWidgetItemBSB_ESB__QListWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem0, void)
    {
        qt_QListWidget_setCurrentItem_void_QListWidget_QListWidgetItem(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentItem1, void)
    {
        qt_QListWidget_setCurrentItem_void_QListWidget_QListWidgetItem_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentRow1, void)
    {
        qt_QListWidget_setCurrentRow_void_QListWidget_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setItemWidget0, void)
    {
        qt_QListWidget_setItemWidget_void_QListWidget_QListWidgetItem_QWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_sortItems0, void)
    {
        qt_QListWidget_sortItems_void_QListWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_takeItem0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_takeItem_QListWidgetItem_QListWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_visualItemRect0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_visualItemRect_QRect_QListWidget_QListWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dropEvent0, void)
    {
        qt_QListWidget_dropEvent_void_QListWidget_QDropEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dropMimeData0, bool)
    {
        NODE_RETURN(
            qt_QListWidget_dropMimeData_bool_QListWidget_int_QMimeData_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, Pointer), NODE_ARG(3, int)));
    }

    static NODE_IMPLEMENTATION(_n_indexFromItem0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_indexFromItem_QModelIndex_QListWidget_QListWidgetItem(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_itemFromIndex0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_itemFromIndex_QListWidgetItem_QListWidget_QModelIndex(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_items0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_items_qt__QListWidgetItemBSB_ESB__QListWidget_QMimeData(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mimeData0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_mimeData_QMimeData_QListWidget_qt__QListWidgetItemBSB_ESB_(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mimeTypes0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_mimeTypes_stringBSB_ESB__QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_supportedDropActions0, int)
    {
        NODE_RETURN(qt_QListWidget_supportedDropActions_int_QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QListWidget_event_bool_QListWidget_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexAt0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_indexAt_QModelIndex_QListWidget_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualRect0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_visualRect_QRect_QListWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_currentChanged0, void)
    {
        qt_QListWidget_currentChanged_void_QListWidget_QModelIndex_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragLeaveEvent0, void)
    {
        qt_QListWidget_dragLeaveEvent_void_QListWidget_QDragLeaveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_dragMoveEvent0, void)
    {
        qt_QListWidget_dragMoveEvent_void_QListWidget_QDragMoveEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_horizontalOffset0, int)
    {
        NODE_RETURN(qt_QListWidget_horizontalOffset_int_QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIndexHidden0, bool)
    {
        NODE_RETURN(qt_QListWidget_isIndexHidden_bool_QListWidget_QModelIndex(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mouseMoveEvent0, void)
    {
        qt_QListWidget_mouseMoveEvent_void_QListWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_mouseReleaseEvent0, void)
    {
        qt_QListWidget_mouseReleaseEvent_void_QListWidget_QMouseEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_paintEvent0, void)
    {
        qt_QListWidget_paintEvent_void_QListWidget_QPaintEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_resizeEvent0, void)
    {
        qt_QListWidget_resizeEvent_void_QListWidget_QResizeEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_rowsAboutToBeRemoved0, void)
    {
        qt_QListWidget_rowsAboutToBeRemoved_void_QListWidget_QModelIndex_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_rowsInserted0, void)
    {
        qt_QListWidget_rowsInserted_void_QListWidget_QModelIndex_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_selectedIndexes0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QListWidget(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_selectionChanged0, void)
    {
        qt_QListWidget_selectionChanged_void_QListWidget_QItemSelection_QItemSelection(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setSelection0, void)
    {
        qt_QListWidget_setSelection_void_QListWidget_QRect_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_startDrag0, void)
    {
        qt_QListWidget_startDrag_void_QListWidget_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QListWidget_timerEvent_void_QListWidget_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_updateGeometries0, void)
    {
        qt_QListWidget_updateGeometries_void_QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_verticalOffset0, int)
    {
        NODE_RETURN(qt_QListWidget_verticalOffset_int_QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_viewportSizeHint0, Pointer)
    {
        NODE_RETURN(qt_QListWidget_viewportSizeHint_QSize_QListWidget(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_visualRegionForSelection0, Pointer)
    {
        NODE_RETURN(
            qt_QListWidget_visualRegionForSelection_QRegion_QListWidget_QItemSelection(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_wheelEvent0, void)
    {
        qt_QListWidget_wheelEvent_void_QListWidget_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    void QListWidgetType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QListWidget_QListWidget_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QListWidget", _n_QListWidget0, None, Compiled,
                qt_QListWidget_QListWidget_QListWidget_QListWidget_QWidget,
                Return, "qt.QListWidget", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "parent", "qt.QWidget"), End),
            new Function(c, "addItem", _n_addItem0, None, Compiled,
                         qt_QListWidget_addItem_void_QListWidget_string, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QListWidget"),
                         new Param(c, "label", "string"), End),
            new Function(
                c, "addItem", _n_addItem1, None, Compiled,
                qt_QListWidget_addItem_void_QListWidget_QListWidgetItem, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "addItems", _n_addItems0, None, Compiled,
                qt_QListWidget_addItems_void_QListWidget_stringBSB_ESB_, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "labels", "string[]"), End),
            new Function(
                c, "closePersistentEditor", _n_closePersistentEditor0, None,
                Compiled,
                qt_QListWidget_closePersistentEditor_void_QListWidget_QListWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            // PROP: count (int; QListWidget this)
            new Function(c, "currentItem", _n_currentItem0, None, Compiled,
                         qt_QListWidget_currentItem_QListWidgetItem_QListWidget,
                         Return, "qt.QListWidgetItem", Parameters,
                         new Param(c, "this", "qt.QListWidget"), End),
            // PROP: currentRow (int; QListWidget this)
            new Function(
                c, "editItem", _n_editItem0, None, Compiled,
                qt_QListWidget_editItem_void_QListWidget_QListWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "findItems", _n_findItems0, None, Compiled,
                qt_QListWidget_findItems_qt__QListWidgetItemBSB_ESB__QListWidget_string_int,
                Return, "qt.QListWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "text", "string"), new Param(c, "flags", "int"),
                End),
            new Function(
                c, "insertItem", _n_insertItem0, None, Compiled,
                qt_QListWidget_insertItem_void_QListWidget_int_QListWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "row", "int"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(c, "insertItem", _n_insertItem1, None, Compiled,
                         qt_QListWidget_insertItem_void_QListWidget_int_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QListWidget"),
                         new Param(c, "row", "int"),
                         new Param(c, "label", "string"), End),
            new Function(
                c, "insertItems", _n_insertItems0, None, Compiled,
                qt_QListWidget_insertItems_void_QListWidget_int_stringBSB_ESB_,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "row", "int"), new Param(c, "labels", "string[]"),
                End),
            // PROP: isSortingEnabled (bool; QListWidget this)
            new Function(c, "item", _n_item0, None, Compiled,
                         qt_QListWidget_item_QListWidgetItem_QListWidget_int,
                         Return, "qt.QListWidgetItem", Parameters,
                         new Param(c, "this", "qt.QListWidget"),
                         new Param(c, "row", "int"), End),
            new Function(
                c, "itemAt", _n_itemAt0, None, Compiled,
                qt_QListWidget_itemAt_QListWidgetItem_QListWidget_QPoint,
                Return, "qt.QListWidgetItem", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "p", "qt.QPoint"), End),
            new Function(
                c, "itemAt", _n_itemAt1, None, Compiled,
                qt_QListWidget_itemAt_QListWidgetItem_QListWidget_int_int,
                Return, "qt.QListWidgetItem", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "x", "int"), new Param(c, "y", "int"), End),
            new Function(
                c, "itemWidget", _n_itemWidget0, None, Compiled,
                qt_QListWidget_itemWidget_QWidget_QListWidget_QListWidgetItem,
                Return, "qt.QWidget", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "openPersistentEditor", _n_openPersistentEditor0, None,
                Compiled,
                qt_QListWidget_openPersistentEditor_void_QListWidget_QListWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "removeItemWidget", _n_removeItemWidget0, None, Compiled,
                qt_QListWidget_removeItemWidget_void_QListWidget_QListWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(c, "row", _n_row0, None, Compiled,
                         qt_QListWidget_row_int_QListWidget_QListWidgetItem,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QListWidget"),
                         new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "selectedItems", _n_selectedItems0, None, Compiled,
                qt_QListWidget_selectedItems_qt__QListWidgetItemBSB_ESB__QListWidget,
                Return, "qt.QListWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QListWidget"), End),
            new Function(
                c, "setCurrentItem", _n_setCurrentItem0, None, Compiled,
                qt_QListWidget_setCurrentItem_void_QListWidget_QListWidgetItem,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "setCurrentItem", _n_setCurrentItem1, None, Compiled,
                qt_QListWidget_setCurrentItem_void_QListWidget_QListWidgetItem_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"),
                new Param(c, "command", "int"), End),
            // PROP: setCurrentRow (void; QListWidget this, int row)
            new Function(c, "setCurrentRow", _n_setCurrentRow1, None, Compiled,
                         qt_QListWidget_setCurrentRow_void_QListWidget_int_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QListWidget"),
                         new Param(c, "row", "int"),
                         new Param(c, "command", "int"), End),
            new Function(
                c, "setItemWidget", _n_setItemWidget0, None, Compiled,
                qt_QListWidget_setItemWidget_void_QListWidget_QListWidgetItem_QWidget,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"),
                new Param(c, "widget", "qt.QWidget"), End),
            // PROP: setSortingEnabled (void; QListWidget this, bool enable)
            new Function(
                c, "sortItems", _n_sortItems0, None, Compiled,
                qt_QListWidget_sortItems_void_QListWidget_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "order", "int", Value((int)Qt::AscendingOrder)),
                End),
            new Function(
                c, "takeItem", _n_takeItem0, None, Compiled,
                qt_QListWidget_takeItem_QListWidgetItem_QListWidget_int, Return,
                "qt.QListWidgetItem", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "row", "int"), End),
            new Function(
                c, "visualItemRect", _n_visualItemRect0, None, Compiled,
                qt_QListWidget_visualItemRect_QRect_QListWidget_QListWidgetItem,
                Return, "qt.QRect", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            _func[0] = new MemberFunction(
                c, "dropEvent", _n_dropEvent0, None, Compiled,
                qt_QListWidget_dropEvent_void_QListWidget_QDropEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "event", "qt.QDropEvent"), End),
            _func[1] = new MemberFunction(
                c, "dropMimeData", _n_dropMimeData0, None, Compiled,
                qt_QListWidget_dropMimeData_bool_QListWidget_int_QMimeData_int,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "index", "int"),
                new Param(c, "data", "qt.QMimeData"),
                new Param(c, "action", "int"), End),
            new Function(
                c, "indexFromItem", _n_indexFromItem0, None, Compiled,
                qt_QListWidget_indexFromItem_QModelIndex_QListWidget_QListWidgetItem,
                Return, "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "item", "qt.QListWidgetItem"), End),
            new Function(
                c, "itemFromIndex", _n_itemFromIndex0, None, Compiled,
                qt_QListWidget_itemFromIndex_QListWidgetItem_QListWidget_QModelIndex,
                Return, "qt.QListWidgetItem", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            new Function(
                c, "items", _n_items0, None, Compiled,
                qt_QListWidget_items_qt__QListWidgetItemBSB_ESB__QListWidget_QMimeData,
                Return, "qt.QListWidgetItem[]", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "data", "qt.QMimeData"), End),
            _func[2] = new MemberFunction(
                c, "mimeData", _n_mimeData0, None, Compiled,
                qt_QListWidget_mimeData_QMimeData_QListWidget_qt__QListWidgetItemBSB_ESB_,
                Return, "qt.QMimeData", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "items", "qt.QListWidgetItem[]"), End),
            _func[3] = new MemberFunction(
                c, "mimeTypes", _n_mimeTypes0, None, Compiled,
                qt_QListWidget_mimeTypes_stringBSB_ESB__QListWidget, Return,
                "string[]", Parameters, new Param(c, "this", "qt.QListWidget"),
                End),
            _func[4] = new MemberFunction(
                c, "supportedDropActions", _n_supportedDropActions0, None,
                Compiled, qt_QListWidget_supportedDropActions_int_QListWidget,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QListWidget"), End),
            _func[5] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QListWidget_event_bool_QListWidget_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[6] = new MemberFunction(
                c, "indexAt", _n_indexAt0, None, Compiled,
                qt_QListWidget_indexAt_QModelIndex_QListWidget_QPoint, Return,
                "qt.QModelIndex", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "p", "qt.QPoint"), End),
            // MISSING: scrollTo (void; QListWidget this, QModelIndex index,
            // "ScrollHint" hint)
            _func[7] = new MemberFunction(
                c, "visualRect", _n_visualRect0, None, Compiled,
                qt_QListWidget_visualRect_QRect_QListWidget_QModelIndex, Return,
                "qt.QRect", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[8] = new MemberFunction(
                c, "currentChanged", _n_currentChanged0, None, Compiled,
                qt_QListWidget_currentChanged_void_QListWidget_QModelIndex_QModelIndex,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "current", "qt.QModelIndex"),
                new Param(c, "previous", "qt.QModelIndex"), End),
            // MISSING: dataChanged (void; QListWidget this, QModelIndex
            // topLeft, QModelIndex bottomRight, "const QVector<int> &" roles)
            // // protected
            _func[9] = new MemberFunction(
                c, "dragLeaveEvent", _n_dragLeaveEvent0, None, Compiled,
                qt_QListWidget_dragLeaveEvent_void_QListWidget_QDragLeaveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QDragLeaveEvent"), End),
            _func[10] = new MemberFunction(
                c, "dragMoveEvent", _n_dragMoveEvent0, None, Compiled,
                qt_QListWidget_dragMoveEvent_void_QListWidget_QDragMoveEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QDragMoveEvent"), End),
            _func[11] = new MemberFunction(
                c, "horizontalOffset", _n_horizontalOffset0, None, Compiled,
                qt_QListWidget_horizontalOffset_int_QListWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QListWidget"), End),
            _func[12] = new MemberFunction(
                c, "isIndexHidden", _n_isIndexHidden0, None, Compiled,
                qt_QListWidget_isIndexHidden_bool_QListWidget_QModelIndex,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "index", "qt.QModelIndex"), End),
            _func[13] = new MemberFunction(
                c, "mouseMoveEvent", _n_mouseMoveEvent0, None, Compiled,
                qt_QListWidget_mouseMoveEvent_void_QListWidget_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            _func[14] = new MemberFunction(
                c, "mouseReleaseEvent", _n_mouseReleaseEvent0, None, Compiled,
                qt_QListWidget_mouseReleaseEvent_void_QListWidget_QMouseEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QMouseEvent"), End),
            // MISSING: moveCursor (QModelIndex; QListWidget this,
            // "CursorAction" cursorAction, flags Qt::KeyboardModifiers
            // modifiers) // protected
            _func[15] = new MemberFunction(
                c, "paintEvent", _n_paintEvent0, None, Compiled,
                qt_QListWidget_paintEvent_void_QListWidget_QPaintEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QPaintEvent"), End),
            _func[16] = new MemberFunction(
                c, "resizeEvent", _n_resizeEvent0, None, Compiled,
                qt_QListWidget_resizeEvent_void_QListWidget_QResizeEvent,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QResizeEvent"), End),
            _func[17] = new MemberFunction(
                c, "rowsAboutToBeRemoved", _n_rowsAboutToBeRemoved0, None,
                Compiled,
                qt_QListWidget_rowsAboutToBeRemoved_void_QListWidget_QModelIndex_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "start", "int"), new Param(c, "end", "int"), End),
            _func[18] = new MemberFunction(
                c, "rowsInserted", _n_rowsInserted0, None, Compiled,
                qt_QListWidget_rowsInserted_void_QListWidget_QModelIndex_int_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "parent", "qt.QModelIndex"),
                new Param(c, "start", "int"), new Param(c, "end", "int"), End),
            _func[19] = new MemberFunction(
                c, "selectedIndexes", _n_selectedIndexes0, None, Compiled,
                qt_QListWidget_selectedIndexes_qt__QModelIndexBSB_ESB__QListWidget,
                Return, "qt.QModelIndex[]", Parameters,
                new Param(c, "this", "qt.QListWidget"), End),
            _func[20] = new MemberFunction(
                c, "selectionChanged", _n_selectionChanged0, None, Compiled,
                qt_QListWidget_selectionChanged_void_QListWidget_QItemSelection_QItemSelection,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "selected", "qt.QItemSelection"),
                new Param(c, "deselected", "qt.QItemSelection"), End),
            _func[21] = new MemberFunction(
                c, "setSelection", _n_setSelection0, None, Compiled,
                qt_QListWidget_setSelection_void_QListWidget_QRect_int, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "rect", "qt.QRect"),
                new Param(c, "command", "int"), End),
            _func[22] = new MemberFunction(
                c, "startDrag", _n_startDrag0, None, Compiled,
                qt_QListWidget_startDrag_void_QListWidget_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "supportedActions", "int"), End),
            _func[23] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QListWidget_timerEvent_void_QListWidget_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QTimerEvent"), End),
            _func[24] = new MemberFunction(
                c, "updateGeometries", _n_updateGeometries0, None, Compiled,
                qt_QListWidget_updateGeometries_void_QListWidget, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                End),
            _func[25] = new MemberFunction(
                c, "verticalOffset", _n_verticalOffset0, None, Compiled,
                qt_QListWidget_verticalOffset_int_QListWidget, Return, "int",
                Parameters, new Param(c, "this", "qt.QListWidget"), End),
            // MISSING: viewOptions ("QStyleOptionViewItem"; QListWidget this)
            // // protected
            _func[26] = new MemberFunction(
                c, "viewportSizeHint", _n_viewportSizeHint0, None, Compiled,
                qt_QListWidget_viewportSizeHint_QSize_QListWidget, Return,
                "qt.QSize", Parameters, new Param(c, "this", "qt.QListWidget"),
                End),
            _func[27] = new MemberFunction(
                c, "visualRegionForSelection", _n_visualRegionForSelection0,
                None, Compiled,
                qt_QListWidget_visualRegionForSelection_QRegion_QListWidget_QItemSelection,
                Return, "qt.QRegion", Parameters,
                new Param(c, "this", "qt.QListWidget"),
                new Param(c, "selection", "qt.QItemSelection"), End),
            _func[28] = new MemberFunction(
                c, "wheelEvent", _n_wheelEvent0, None, Compiled,
                qt_QListWidget_wheelEvent_void_QListWidget_QWheelEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QListWidget"),
                new Param(c, "e", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QListWidget::staticMetaObject, propExclusions);
    }

} // namespace Mu
