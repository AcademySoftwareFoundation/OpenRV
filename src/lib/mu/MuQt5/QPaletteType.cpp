//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QPaletteType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QColorType.h>
#include <MuQt5/QBrushType.h>
#include <MuQt5/QVariantType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QPaletteType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QPaletteType::QPaletteType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QPaletteType::~QPaletteType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QPaletteType::Instance* i =
            new QPaletteType::Instance((Class*)NODE_THIS.type());
        QPaletteType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QPaletteType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QPaletteType::finalizer, 0, 0, 0);
    }

    void QPaletteType::finalizer(void* obj, void* data)
    {
        QPaletteType::Instance* i =
            reinterpret_cast<QPaletteType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QPalette_QPalette_QPalette_QPalette(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QPaletteType>(param_this, QPalette());
        return param_this;
    }

    Pointer qt_QPalette_QPalette_QPalette_QPalette_QColor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_button)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QColor arg1 = getqtype<QColorType>(param_button);
        setqtype<QPaletteType>(param_this, QPalette(arg1));
        return param_this;
    }

    Pointer qt_QPalette_QPalette_QPalette_QPalette_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_button)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        Qt::GlobalColor arg1 = (Qt::GlobalColor)(param_button);
        setqtype<QPaletteType>(param_this, QPalette(arg1));
        return param_this;
    }

    Pointer qt_QPalette_QPalette_QPalette_QPalette_QColor_QColor(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_button,
        Pointer param_window)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QColor arg1 = getqtype<QColorType>(param_button);
        const QColor arg2 = getqtype<QColorType>(param_window);
        setqtype<QPaletteType>(param_this, QPalette(arg1, arg2));
        return param_this;
    }

    Pointer
    qt_QPalette_QPalette_QPalette_QPalette_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_windowText,
        Pointer param_button, Pointer param_light, Pointer param_dark,
        Pointer param_mid, Pointer param_text, Pointer param_bright_text,
        Pointer param_base, Pointer param_window)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QBrush arg1 = getqtype<QBrushType>(param_windowText);
        const QBrush arg2 = getqtype<QBrushType>(param_button);
        const QBrush arg3 = getqtype<QBrushType>(param_light);
        const QBrush arg4 = getqtype<QBrushType>(param_dark);
        const QBrush arg5 = getqtype<QBrushType>(param_mid);
        const QBrush arg6 = getqtype<QBrushType>(param_text);
        const QBrush arg7 = getqtype<QBrushType>(param_bright_text);
        const QBrush arg8 = getqtype<QBrushType>(param_base);
        const QBrush arg9 = getqtype<QBrushType>(param_window);
        setqtype<QPaletteType>(
            param_this,
            QPalette(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9));
        return param_this;
    }

    Pointer qt_QPalette_alternateBase_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.alternateBase(), "qt.QBrush");
    }

    Pointer qt_QPalette_base_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.base(), "qt.QBrush");
    }

    Pointer qt_QPalette_brightText_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.brightText(), "qt.QBrush");
    }

    Pointer qt_QPalette_brush_QBrush_QPalette_int_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_group,
                                                      int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_group);
        QPalette::ColorRole arg2 = (QPalette::ColorRole)(param_role);
        return makeqtype<QBrushType>(c, arg0.brush(arg1, arg2), "qt.QBrush");
    }

    Pointer qt_QPalette_brush_QBrush_QPalette_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorRole arg1 = (QPalette::ColorRole)(param_role);
        return makeqtype<QBrushType>(c, arg0.brush(arg1), "qt.QBrush");
    }

    Pointer qt_QPalette_button_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.button(), "qt.QBrush");
    }

    Pointer qt_QPalette_buttonText_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.buttonText(), "qt.QBrush");
    }

    int64 qt_QPalette_cacheKey_int64_QPalette(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return arg0.cacheKey();
    }

    Pointer qt_QPalette_color_QColor_QPalette_int_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_group,
                                                      int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_group);
        QPalette::ColorRole arg2 = (QPalette::ColorRole)(param_role);
        return makeqtype<QColorType>(c, arg0.color(arg1, arg2), "qt.QColor");
    }

    Pointer qt_QPalette_color_QColor_QPalette_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_role)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorRole arg1 = (QPalette::ColorRole)(param_role);
        return makeqtype<QColorType>(c, arg0.color(arg1), "qt.QColor");
    }

    int qt_QPalette_currentColorGroup_int_QPalette(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return int(arg0.currentColorGroup());
    }

    Pointer qt_QPalette_dark_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.dark(), "qt.QBrush");
    }

    Pointer qt_QPalette_highlight_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.highlight(), "qt.QBrush");
    }

    Pointer qt_QPalette_highlightedText_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.highlightedText(), "qt.QBrush");
    }

    bool qt_QPalette_isBrushSet_bool_QPalette_int_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_cg,
                                                      int param_cr)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_cg);
        QPalette::ColorRole arg2 = (QPalette::ColorRole)(param_cr);
        return arg0.isBrushSet(arg1, arg2);
    }

    bool qt_QPalette_isCopyOf_bool_QPalette_QPalette(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        const QPalette arg1 = getqtype<QPaletteType>(param_p);
        return arg0.isCopyOf(arg1);
    }

    bool qt_QPalette_isEqual_bool_QPalette_int_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_cg1, int param_cg2)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_cg1);
        QPalette::ColorGroup arg2 = (QPalette::ColorGroup)(param_cg2);
        return arg0.isEqual(arg1, arg2);
    }

    Pointer qt_QPalette_light_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.light(), "qt.QBrush");
    }

    Pointer qt_QPalette_link_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.link(), "qt.QBrush");
    }

    Pointer qt_QPalette_linkVisited_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.linkVisited(), "qt.QBrush");
    }

    Pointer qt_QPalette_mid_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.mid(), "qt.QBrush");
    }

    Pointer qt_QPalette_midlight_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.midlight(), "qt.QBrush");
    }

    Pointer qt_QPalette_resolve_QPalette_QPalette_QPalette(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        const QPalette arg1 = getqtype<QPaletteType>(param_other);
        return makeqtype<QPaletteType>(c, arg0.resolve(arg1), "qt.QPalette");
    }

    void qt_QPalette_setBrush_void_QPalette_int_QBrush(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_role,
                                                       Pointer param_brush)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorRole arg1 = (QPalette::ColorRole)(param_role);
        const QBrush arg2 = getqtype<QBrushType>(param_brush);
        arg0.setBrush(arg1, arg2);
        setqtype<QPaletteType>(param_this, arg0);
    }

    void qt_QPalette_setBrush_void_QPalette_int_int_QBrush(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_group,
        int param_role, Pointer param_brush)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_group);
        QPalette::ColorRole arg2 = (QPalette::ColorRole)(param_role);
        const QBrush arg3 = getqtype<QBrushType>(param_brush);
        arg0.setBrush(arg1, arg2, arg3);
        setqtype<QPaletteType>(param_this, arg0);
    }

    void qt_QPalette_setColor_void_QPalette_int_int_QColor(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_group,
        int param_role, Pointer param_color)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_group);
        QPalette::ColorRole arg2 = (QPalette::ColorRole)(param_role);
        const QColor arg3 = getqtype<QColorType>(param_color);
        arg0.setColor(arg1, arg2, arg3);
        setqtype<QPaletteType>(param_this, arg0);
    }

    void qt_QPalette_setColor_void_QPalette_int_QColor(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_role,
                                                       Pointer param_color)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorRole arg1 = (QPalette::ColorRole)(param_role);
        const QColor arg2 = getqtype<QColorType>(param_color);
        arg0.setColor(arg1, arg2);
        setqtype<QPaletteType>(param_this, arg0);
    }

    void
    qt_QPalette_setColorGroup_void_QPalette_int_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_cg,
        Pointer param_windowText, Pointer param_button, Pointer param_light,
        Pointer param_dark, Pointer param_mid, Pointer param_text,
        Pointer param_bright_text, Pointer param_base, Pointer param_window)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_cg);
        const QBrush arg2 = getqtype<QBrushType>(param_windowText);
        const QBrush arg3 = getqtype<QBrushType>(param_button);
        const QBrush arg4 = getqtype<QBrushType>(param_light);
        const QBrush arg5 = getqtype<QBrushType>(param_dark);
        const QBrush arg6 = getqtype<QBrushType>(param_mid);
        const QBrush arg7 = getqtype<QBrushType>(param_text);
        const QBrush arg8 = getqtype<QBrushType>(param_bright_text);
        const QBrush arg9 = getqtype<QBrushType>(param_base);
        const QBrush arg10 = getqtype<QBrushType>(param_window);
        arg0.setColorGroup(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9,
                           arg10);
        setqtype<QPaletteType>(param_this, arg0);
    }

    void qt_QPalette_setCurrentColorGroup_void_QPalette_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_cg)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette::ColorGroup arg1 = (QPalette::ColorGroup)(param_cg);
        arg0.setCurrentColorGroup(arg1);
        setqtype<QPaletteType>(param_this, arg0);
    }

    Pointer qt_QPalette_shadow_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.shadow(), "qt.QBrush");
    }

    void qt_QPalette_swap_void_QPalette_QPalette(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette& arg0 = getqtype<QPaletteType>(param_this);
        QPalette arg1 = getqtype<QPaletteType>(param_other);
        arg0.swap(arg1);
        setqtype<QPaletteType>(param_this, arg0);
    }

    Pointer qt_QPalette_text_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.text(), "qt.QBrush");
    }

    Pointer qt_QPalette_toolTipBase_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.toolTipBase(), "qt.QBrush");
    }

    Pointer qt_QPalette_toolTipText_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.toolTipText(), "qt.QBrush");
    }

    Pointer qt_QPalette_window_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.window(), "qt.QBrush");
    }

    Pointer qt_QPalette_windowText_QBrush_QPalette(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        return makeqtype<QBrushType>(c, arg0.windowText(), "qt.QBrush");
    }

    bool qt_QPalette_operatorBang_EQ__bool_QPalette_QPalette(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        const QPalette arg1 = getqtype<QPaletteType>(param_p);
        return arg0.operator!=(arg1);
    }

    bool qt_QPalette_operatorEQ_EQ__bool_QPalette_QPalette(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_p)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPalette& arg0 = getqtype<QPaletteType>(param_this);
        const QPalette arg1 = getqtype<QPaletteType>(param_p);
        return arg0.operator==(arg1);
    }

    Pointer qt_QPalette_QVariant_QVariant_QVariant_QPalette(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QPalette arg1 = getqtype<QPaletteType>(param_from);
        setqtype<QVariantType>(param_this, QVariant(arg1));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QPalette0, Pointer)
    {
        NODE_RETURN(qt_QPalette_QPalette_QPalette_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QPalette1, Pointer)
    {
        NODE_RETURN(qt_QPalette_QPalette_QPalette_QPalette_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QPalette2, Pointer)
    {
        NODE_RETURN(qt_QPalette_QPalette_QPalette_QPalette_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_QPalette3, Pointer)
    {
        NODE_RETURN(qt_QPalette_QPalette_QPalette_QPalette_QColor_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QPalette4, Pointer)
    {
        NODE_RETURN(
            qt_QPalette_QPalette_QPalette_QPalette_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, Pointer),
                NODE_ARG(4, Pointer), NODE_ARG(5, Pointer),
                NODE_ARG(6, Pointer), NODE_ARG(7, Pointer),
                NODE_ARG(8, Pointer), NODE_ARG(9, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_alternateBase0, Pointer)
    {
        NODE_RETURN(qt_QPalette_alternateBase_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_base0, Pointer)
    {
        NODE_RETURN(qt_QPalette_base_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_brightText0, Pointer)
    {
        NODE_RETURN(qt_QPalette_brightText_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_brush0, Pointer)
    {
        NODE_RETURN(qt_QPalette_brush_QBrush_QPalette_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_brush1, Pointer)
    {
        NODE_RETURN(qt_QPalette_brush_QBrush_QPalette_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_button0, Pointer)
    {
        NODE_RETURN(qt_QPalette_button_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_buttonText0, Pointer)
    {
        NODE_RETURN(qt_QPalette_buttonText_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_cacheKey0, int64)
    {
        NODE_RETURN(qt_QPalette_cacheKey_int64_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_color0, Pointer)
    {
        NODE_RETURN(qt_QPalette_color_QColor_QPalette_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_color1, Pointer)
    {
        NODE_RETURN(qt_QPalette_color_QColor_QPalette_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_currentColorGroup0, int)
    {
        NODE_RETURN(qt_QPalette_currentColorGroup_int_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dark0, Pointer)
    {
        NODE_RETURN(qt_QPalette_dark_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_highlight0, Pointer)
    {
        NODE_RETURN(qt_QPalette_highlight_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_highlightedText0, Pointer)
    {
        NODE_RETURN(qt_QPalette_highlightedText_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isBrushSet0, bool)
    {
        NODE_RETURN(qt_QPalette_isBrushSet_bool_QPalette_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_isCopyOf0, bool)
    {
        NODE_RETURN(qt_QPalette_isCopyOf_bool_QPalette_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEqual0, bool)
    {
        NODE_RETURN(qt_QPalette_isEqual_bool_QPalette_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_light0, Pointer)
    {
        NODE_RETURN(qt_QPalette_light_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_link0, Pointer)
    {
        NODE_RETURN(qt_QPalette_link_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_linkVisited0, Pointer)
    {
        NODE_RETURN(qt_QPalette_linkVisited_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mid0, Pointer)
    {
        NODE_RETURN(qt_QPalette_mid_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_midlight0, Pointer)
    {
        NODE_RETURN(qt_QPalette_midlight_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_resolve0, Pointer)
    {
        NODE_RETURN(qt_QPalette_resolve_QPalette_QPalette_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setBrush0, void)
    {
        qt_QPalette_setBrush_void_QPalette_int_QBrush(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setBrush1, void)
    {
        qt_QPalette_setBrush_void_QPalette_int_int_QBrush(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setColor0, void)
    {
        qt_QPalette_setColor_void_QPalette_int_int_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int), NODE_ARG(3, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setColor1, void)
    {
        qt_QPalette_setColor_void_QPalette_int_QColor(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setColorGroup0, void)
    {
        qt_QPalette_setColorGroup_void_QPalette_int_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer), NODE_ARG(3, Pointer), NODE_ARG(4, Pointer),
            NODE_ARG(5, Pointer), NODE_ARG(6, Pointer), NODE_ARG(7, Pointer),
            NODE_ARG(8, Pointer), NODE_ARG(9, Pointer), NODE_ARG(10, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setCurrentColorGroup0, void)
    {
        qt_QPalette_setCurrentColorGroup_void_QPalette_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_shadow0, Pointer)
    {
        NODE_RETURN(qt_QPalette_shadow_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_swap0, void)
    {
        qt_QPalette_swap_void_QPalette_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_text0, Pointer)
    {
        NODE_RETURN(qt_QPalette_text_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toolTipBase0, Pointer)
    {
        NODE_RETURN(qt_QPalette_toolTipBase_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toolTipText0, Pointer)
    {
        NODE_RETURN(qt_QPalette_toolTipText_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_window0, Pointer)
    {
        NODE_RETURN(qt_QPalette_window_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_windowText0, Pointer)
    {
        NODE_RETURN(qt_QPalette_windowText_QBrush_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(qt_QPalette_operatorBang_EQ__bool_QPalette_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt_QPalette_operatorEQ_EQ__bool_QPalette_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_co_n_QVariant0, Pointer)
    {
        NODE_RETURN(qt_QPalette_QVariant_QVariant_QVariant_QPalette(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QPaletteType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(
            new Alias(c, "ColorGroup", "int"),
            new SymbolicConstant(c, "Disabled", "int",
                                 Value(int(QPalette::Disabled))),
            new SymbolicConstant(c, "Active", "int",
                                 Value(int(QPalette::Active))),
            new SymbolicConstant(c, "Inactive", "int",
                                 Value(int(QPalette::Inactive))),
            new SymbolicConstant(c, "Normal", "int",
                                 Value(int(QPalette::Normal))),
            new Alias(c, "ColorRole", "int"),
            new SymbolicConstant(c, "Window", "int",
                                 Value(int(QPalette::Window))),
            new SymbolicConstant(c, "Background", "int",
                                 Value(int(QPalette::Background))),
            new SymbolicConstant(c, "WindowText", "int",
                                 Value(int(QPalette::WindowText))),
            new SymbolicConstant(c, "Foreground", "int",
                                 Value(int(QPalette::Foreground))),
            new SymbolicConstant(c, "Base", "int", Value(int(QPalette::Base))),
            new SymbolicConstant(c, "AlternateBase", "int",
                                 Value(int(QPalette::AlternateBase))),
            new SymbolicConstant(c, "ToolTipBase", "int",
                                 Value(int(QPalette::ToolTipBase))),
            new SymbolicConstant(c, "ToolTipText", "int",
                                 Value(int(QPalette::ToolTipText))),
            new SymbolicConstant(c, "Text", "int", Value(int(QPalette::Text))),
            new SymbolicConstant(c, "Button", "int",
                                 Value(int(QPalette::Button))),
            new SymbolicConstant(c, "ButtonText", "int",
                                 Value(int(QPalette::ButtonText))),
            new SymbolicConstant(c, "BrightText", "int",
                                 Value(int(QPalette::BrightText))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QPalette", _n_QPalette0, None, Compiled,
                         qt_QPalette_QPalette_QPalette_QPalette, Return,
                         "qt.QPalette", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "QPalette", _n_QPalette1, None, Compiled,
                         qt_QPalette_QPalette_QPalette_QPalette_QColor, Return,
                         "qt.QPalette", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "button", "qt.QColor"), End),
            new Function(c, "QPalette", _n_QPalette2, None, Compiled,
                         qt_QPalette_QPalette_QPalette_QPalette_int, Return,
                         "qt.QPalette", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "button", "int"), End),
            new Function(c, "QPalette", _n_QPalette3, None, Compiled,
                         qt_QPalette_QPalette_QPalette_QPalette_QColor_QColor,
                         Return, "qt.QPalette", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "button", "qt.QColor"),
                         new Param(c, "window", "qt.QColor"), End),
            new Function(
                c, "QPalette", _n_QPalette4, None, Compiled,
                qt_QPalette_QPalette_QPalette_QPalette_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush,
                Return, "qt.QPalette", Parameters,
                new Param(c, "this", "qt.QPalette"),
                new Param(c, "windowText", "qt.QBrush"),
                new Param(c, "button", "qt.QBrush"),
                new Param(c, "light", "qt.QBrush"),
                new Param(c, "dark", "qt.QBrush"),
                new Param(c, "mid", "qt.QBrush"),
                new Param(c, "text", "qt.QBrush"),
                new Param(c, "bright_text", "qt.QBrush"),
                new Param(c, "base", "qt.QBrush"),
                new Param(c, "window", "qt.QBrush"), End),
            // MISSING: QPalette (QPalette; QPalette this, QPalette p)
            // MISSING: QPalette (QPalette; QPalette this, QPalette other)
            new Function(c, "alternateBase", _n_alternateBase0, None, Compiled,
                         qt_QPalette_alternateBase_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "base", _n_base0, None, Compiled,
                         qt_QPalette_base_QBrush_QPalette, Return, "qt.QBrush",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "brightText", _n_brightText0, None, Compiled,
                         qt_QPalette_brightText_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(
                c, "brush", _n_brush0, None, Compiled,
                qt_QPalette_brush_QBrush_QPalette_int_int, Return, "qt.QBrush",
                Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "group", "int"), new Param(c, "role", "int"), End),
            new Function(c, "brush", _n_brush1, None, Compiled,
                         qt_QPalette_brush_QBrush_QPalette_int, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "role", "int"), End),
            new Function(c, "button", _n_button0, None, Compiled,
                         qt_QPalette_button_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "buttonText", _n_buttonText0, None, Compiled,
                         qt_QPalette_buttonText_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "cacheKey", _n_cacheKey0, None, Compiled,
                         qt_QPalette_cacheKey_int64_QPalette, Return, "int64",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(
                c, "color", _n_color0, None, Compiled,
                qt_QPalette_color_QColor_QPalette_int_int, Return, "qt.QColor",
                Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "group", "int"), new Param(c, "role", "int"), End),
            new Function(c, "color", _n_color1, None, Compiled,
                         qt_QPalette_color_QColor_QPalette_int, Return,
                         "qt.QColor", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "role", "int"), End),
            new Function(c, "currentColorGroup", _n_currentColorGroup0, None,
                         Compiled, qt_QPalette_currentColorGroup_int_QPalette,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "dark", _n_dark0, None, Compiled,
                         qt_QPalette_dark_QBrush_QPalette, Return, "qt.QBrush",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "highlight", _n_highlight0, None, Compiled,
                         qt_QPalette_highlight_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "highlightedText", _n_highlightedText0, None,
                         Compiled, qt_QPalette_highlightedText_QBrush_QPalette,
                         Return, "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(
                c, "isBrushSet", _n_isBrushSet0, None, Compiled,
                qt_QPalette_isBrushSet_bool_QPalette_int_int, Return, "bool",
                Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "cg", "int"), new Param(c, "cr", "int"), End),
            new Function(c, "isCopyOf", _n_isCopyOf0, None, Compiled,
                         qt_QPalette_isCopyOf_bool_QPalette_QPalette, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "p", "qt.QPalette"), End),
            new Function(
                c, "isEqual", _n_isEqual0, None, Compiled,
                qt_QPalette_isEqual_bool_QPalette_int_int, Return, "bool",
                Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "cg1", "int"), new Param(c, "cg2", "int"), End),
            new Function(c, "light", _n_light0, None, Compiled,
                         qt_QPalette_light_QBrush_QPalette, Return, "qt.QBrush",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "link", _n_link0, None, Compiled,
                         qt_QPalette_link_QBrush_QPalette, Return, "qt.QBrush",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "linkVisited", _n_linkVisited0, None, Compiled,
                         qt_QPalette_linkVisited_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "mid", _n_mid0, None, Compiled,
                         qt_QPalette_mid_QBrush_QPalette, Return, "qt.QBrush",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "midlight", _n_midlight0, None, Compiled,
                         qt_QPalette_midlight_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "resolve", _n_resolve0, None, Compiled,
                         qt_QPalette_resolve_QPalette_QPalette_QPalette, Return,
                         "qt.QPalette", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "other", "qt.QPalette"), End),
            new Function(c, "setBrush", _n_setBrush0, None, Compiled,
                         qt_QPalette_setBrush_void_QPalette_int_QBrush, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "role", "int"),
                         new Param(c, "brush", "qt.QBrush"), End),
            new Function(
                c, "setBrush", _n_setBrush1, None, Compiled,
                qt_QPalette_setBrush_void_QPalette_int_int_QBrush, Return,
                "void", Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "group", "int"), new Param(c, "role", "int"),
                new Param(c, "brush", "qt.QBrush"), End),
            new Function(
                c, "setColor", _n_setColor0, None, Compiled,
                qt_QPalette_setColor_void_QPalette_int_int_QColor, Return,
                "void", Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "group", "int"), new Param(c, "role", "int"),
                new Param(c, "color", "qt.QColor"), End),
            new Function(c, "setColor", _n_setColor1, None, Compiled,
                         qt_QPalette_setColor_void_QPalette_int_QColor, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "role", "int"),
                         new Param(c, "color", "qt.QColor"), End),
            new Function(
                c, "setColorGroup", _n_setColorGroup0, None, Compiled,
                qt_QPalette_setColorGroup_void_QPalette_int_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush_QBrush,
                Return, "void", Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "cg", "int"),
                new Param(c, "windowText", "qt.QBrush"),
                new Param(c, "button", "qt.QBrush"),
                new Param(c, "light", "qt.QBrush"),
                new Param(c, "dark", "qt.QBrush"),
                new Param(c, "mid", "qt.QBrush"),
                new Param(c, "text", "qt.QBrush"),
                new Param(c, "bright_text", "qt.QBrush"),
                new Param(c, "base", "qt.QBrush"),
                new Param(c, "window", "qt.QBrush"), End),
            new Function(
                c, "setCurrentColorGroup", _n_setCurrentColorGroup0, None,
                Compiled, qt_QPalette_setCurrentColorGroup_void_QPalette_int,
                Return, "void", Parameters, new Param(c, "this", "qt.QPalette"),
                new Param(c, "cg", "int"), End),
            new Function(c, "shadow", _n_shadow0, None, Compiled,
                         qt_QPalette_shadow_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "swap", _n_swap0, None, Compiled,
                         qt_QPalette_swap_void_QPalette_QPalette, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "other", "qt.QPalette"), End),
            new Function(c, "text", _n_text0, None, Compiled,
                         qt_QPalette_text_QBrush_QPalette, Return, "qt.QBrush",
                         Parameters, new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "toolTipBase", _n_toolTipBase0, None, Compiled,
                         qt_QPalette_toolTipBase_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "toolTipText", _n_toolTipText0, None, Compiled,
                         qt_QPalette_toolTipText_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "window", _n_window0, None, Compiled,
                         qt_QPalette_window_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            new Function(c, "windowText", _n_windowText0, None, Compiled,
                         qt_QPalette_windowText_QBrush_QPalette, Return,
                         "qt.QBrush", Parameters,
                         new Param(c, "this", "qt.QPalette"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(
            new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                         qt_QPalette_operatorBang_EQ__bool_QPalette_QPalette,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "p", "qt.QPalette"), End),
            // MISSING: = (QPalette; QPalette this, QPalette p)
            // MISSING: = (QPalette; QPalette this, QPalette other)
            new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                         qt_QPalette_operatorEQ_EQ__bool_QPalette_QPalette,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QPalette"),
                         new Param(c, "p", "qt.QPalette"), End),
            EndArguments);
        scope()->addSymbols(
            new Function(c, "QVariant", _co_n_QVariant0, Cast, Compiled,
                         qt_QPalette_QVariant_QVariant_QVariant_QPalette,
                         Return, "qt.QVariant", Parameters,
                         new Param(c, "this", "qt.QVariant"),
                         new Param(c, "from", "qt.QPalette"), End),
            EndArguments);
    }

} // namespace Mu
