//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QByteArrayType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuLang/ByteType.h>
#include <MuLang/DynamicArray.h>
#include <MuLang/DynamicArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QByteArrayType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QByteArrayType::QByteArrayType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QByteArrayType::~QByteArrayType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QByteArrayType::Instance* i =
            new QByteArrayType::Instance((Class*)NODE_THIS.type());
        QByteArrayType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QByteArrayType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QByteArrayType::finalizer, 0, 0, 0);
    }

    void QByteArrayType::finalizer(void* obj, void* data)
    {
        QByteArrayType::Instance* i =
            reinterpret_cast<QByteArrayType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QByteArray_QByteArray_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QByteArrayType>(param_this, QByteArray());
        return param_this;
    }

    Pointer qt_QByteArray_append_QByteArray_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return makeqtype<QByteArrayType>(c, arg0.append(arg1), "qt.QByteArray");
    }

    Pointer qt_QByteArray_append_QByteArray_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return makeqtype<QByteArrayType>(c, arg0.append(arg1), "qt.QByteArray");
    }

    int qt_QByteArray_capacity_int_QByteArray(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return arg0.capacity();
    }

    void qt_QByteArray_chop_void_QByteArray_int(Mu::Thread& NODE_THREAD,
                                                Pointer param_this, int param_n)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_n);
        arg0.chop(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    void qt_QByteArray_clear_void_QByteArray(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        arg0.clear();
        setqtype<QByteArrayType>(param_this, arg0);
    }

    bool qt_QByteArray_contains_bool_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return arg0.contains(arg1);
    }

    int qt_QByteArray_count_int_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return arg0.count(arg1);
    }

    int qt_QByteArray_count_int_QByteArray(Mu::Thread& NODE_THREAD,
                                           Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return arg0.count();
    }

    bool qt_QByteArray_endsWith_bool_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return arg0.endsWith(arg1);
    }

    int qt_QByteArray_indexOf_int_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba,
        int param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        int arg2 = (int)(param_from);
        return arg0.indexOf(arg1, arg2);
    }

    int qt_QByteArray_indexOf_int_QByteArray_string_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_str,
                                                        int param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        int arg2 = (int)(param_from);
        return arg0.indexOf(arg1, arg2);
    }

    Pointer qt_QByteArray_insert_QByteArray_QByteArray_int_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_i,
        Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_i);
        const QByteArray arg2 = getqtype<QByteArrayType>(param_ba);
        return makeqtype<QByteArrayType>(c, arg0.insert(arg1, arg2),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_insert_QByteArray_QByteArray_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_i,
        Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_i);
        const QString arg2 = qstring(param_str);
        return makeqtype<QByteArrayType>(c, arg0.insert(arg1, arg2),
                                         "qt.QByteArray");
    }

    bool qt_QByteArray_isEmpty_bool_QByteArray(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return arg0.isEmpty();
    }

    bool qt_QByteArray_isNull_bool_QByteArray(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return arg0.isNull();
    }

    int qt_QByteArray_lastIndexOf_int_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba,
        int param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        int arg2 = (int)(param_from);
        return arg0.lastIndexOf(arg1, arg2);
    }

    int qt_QByteArray_lastIndexOf_int_QByteArray_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str,
        int param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        int arg2 = (int)(param_from);
        return arg0.lastIndexOf(arg1, arg2);
    }

    Pointer qt_QByteArray_left_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_len)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_len);
        return makeqtype<QByteArrayType>(c, arg0.left(arg1), "qt.QByteArray");
    }

    int qt_QByteArray_length_int_QByteArray(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return arg0.length();
    }

    Pointer qt_QByteArray_mid_QByteArray_QByteArray_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_pos,
        int param_len)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_pos);
        int arg2 = (int)(param_len);
        return makeqtype<QByteArrayType>(c, arg0.mid(arg1, arg2),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_prepend_QByteArray_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return makeqtype<QByteArrayType>(c, arg0.prepend(arg1),
                                         "qt.QByteArray");
    }

    void qt_QByteArray_push_back_void_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_other);
        arg0.push_back(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    void qt_QByteArray_push_front_void_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_other);
        arg0.push_front(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    Pointer qt_QByteArray_remove_QByteArray_QByteArray_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_pos,
        int param_len)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_pos);
        int arg2 = (int)(param_len);
        return makeqtype<QByteArrayType>(c, arg0.remove(arg1, arg2),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_repeated_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_times)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_times);
        return makeqtype<QByteArrayType>(c, arg0.repeated(arg1),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_replace_QByteArray_QByteArray_int_int_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_pos,
        int param_len, Pointer param_after)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_pos);
        int arg2 = (int)(param_len);
        const QByteArray arg3 = getqtype<QByteArrayType>(param_after);
        return makeqtype<QByteArrayType>(c, arg0.replace(arg1, arg2, arg3),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_replace_QByteArray_QByteArray_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_before,
        Pointer param_after)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_before);
        const QByteArray arg2 = getqtype<QByteArrayType>(param_after);
        return makeqtype<QByteArrayType>(c, arg0.replace(arg1, arg2),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_replace_QByteArray_QByteArray_string_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_before,
        Pointer param_after)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_before);
        const QByteArray arg2 = getqtype<QByteArrayType>(param_after);
        return makeqtype<QByteArrayType>(c, arg0.replace(arg1, arg2),
                                         "qt.QByteArray");
    }

    void qt_QByteArray_reserve_void_QByteArray_int(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   int param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_size);
        arg0.reserve(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    void qt_QByteArray_resize_void_QByteArray_int(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  int param_size)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_size);
        arg0.resize(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    Pointer qt_QByteArray_right_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_len)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_len);
        return makeqtype<QByteArrayType>(c, arg0.right(arg1), "qt.QByteArray");
    }

    Pointer qt_QByteArray_setNum_QByteArray_QByteArray_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_n,
        int param_base)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_n);
        int arg2 = (int)(param_base);
        return makeqtype<QByteArrayType>(c, arg0.setNum(arg1, arg2),
                                         "qt.QByteArray");
    }

    Pointer
    qt_QByteArray_simplified_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return makeqtype<QByteArrayType>(c, arg0.simplified(), "qt.QByteArray");
    }

    int qt_QByteArray_size_int_QByteArray(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return arg0.size();
    }

    void qt_QByteArray_squeeze_void_QByteArray(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        arg0.squeeze();
        setqtype<QByteArrayType>(param_this, arg0);
    }

    bool qt_QByteArray_startsWith_bool_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return arg0.startsWith(arg1);
    }

    void qt_QByteArray_swap_void_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        QByteArray arg1 = getqtype<QByteArrayType>(param_other);
        arg0.swap(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    Pointer
    qt_QByteArray_toBase64_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return makeqtype<QByteArrayType>(c, arg0.toBase64(), "qt.QByteArray");
    }

    Pointer qt_QByteArray_toBase64_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        QByteArray::Base64Options arg1 =
            (QByteArray::Base64Options)(param_options);
        return makeqtype<QByteArrayType>(c, arg0.toBase64(arg1),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_toHex_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return makeqtype<QByteArrayType>(c, arg0.toHex(), "qt.QByteArray");
    }

    Pointer qt_QByteArray_toLower_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return makeqtype<QByteArrayType>(c, arg0.toLower(), "qt.QByteArray");
    }

    Pointer qt_QByteArray_toUpper_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return makeqtype<QByteArrayType>(c, arg0.toUpper(), "qt.QByteArray");
    }

    Pointer qt_QByteArray_trimmed_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        return makeqtype<QByteArrayType>(c, arg0.trimmed(), "qt.QByteArray");
    }

    void qt_QByteArray_truncate_void_QByteArray_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    int param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        int arg1 = (int)(param_pos);
        arg0.truncate(arg1);
        setqtype<QByteArrayType>(param_this, arg0);
    }

    bool qt_QByteArray_operatorBang_EQ__bool_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return arg0.operator!=(arg1);
    }

    Pointer qt_QByteArray_operatorPlus_EQ__QByteArray_QByteArray_QByteArray(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_ba)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QByteArray arg1 = getqtype<QByteArrayType>(param_ba);
        return makeqtype<QByteArrayType>(c, arg0.operator+=(arg1),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_operatorPlus_EQ__QByteArray_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return makeqtype<QByteArrayType>(c, arg0.operator+=(arg1),
                                         "qt.QByteArray");
    }

    bool qt_QByteArray_operatorLT__bool_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return arg0.operator<(arg1);
    }

    bool qt_QByteArray_operatorLT_EQ__bool_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return arg0.operator<=(arg1);
    }

    bool qt_QByteArray_operatorEQ_EQ__bool_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return arg0.operator==(arg1);
    }

    bool qt_QByteArray_operatorGT__bool_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return arg0.operator>(arg1);
    }

    bool qt_QByteArray_operatorGT_EQ__bool_QByteArray_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray& arg0 = getqtype<QByteArrayType>(param_this);
        const QString arg1 = qstring(param_str);
        return arg0.operator>=(arg1);
    }

    Pointer
    qt_QByteArray_fromBase64_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                   Pointer param_base64)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_base64);
        return makeqtype<QByteArrayType>(c, QByteArray::fromBase64(arg0),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_fromBase64_QByteArray_QByteArray_int(
        Mu::Thread& NODE_THREAD, Pointer param_base64, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_base64);
        QByteArray::Base64Option arg1 =
            (QByteArray::Base64Option)(param_options);
        return makeqtype<QByteArrayType>(c, QByteArray::fromBase64(arg0, arg1),
                                         "qt.QByteArray");
    }

    Pointer
    qt_QByteArray_fromHex_QByteArray_QByteArray(Mu::Thread& NODE_THREAD,
                                                Pointer param_hexEncoded)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QByteArray arg0 = getqtype<QByteArrayType>(param_hexEncoded);
        return makeqtype<QByteArrayType>(c, QByteArray::fromHex(arg0),
                                         "qt.QByteArray");
    }

    Pointer qt_QByteArray_number_QByteArray_int_int(Mu::Thread& NODE_THREAD,
                                                    int param_n, int param_base)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        int arg0 = (int)(param_n);
        int arg1 = (int)(param_base);
        return makeqtype<QByteArrayType>(c, QByteArray::number(arg0, arg1),
                                         "qt.QByteArray");
    }

    static NODE_IMPLEMENTATION(_n_QByteArray0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_QByteArray_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_append0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_append_QByteArray_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_append4, Pointer)
    {
        NODE_RETURN(qt_QByteArray_append_QByteArray_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_capacity0, int)
    {
        NODE_RETURN(qt_QByteArray_capacity_int_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_chop0, void)
    {
        qt_QByteArray_chop_void_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_clear0, void)
    {
        qt_QByteArray_clear_void_QByteArray(NODE_THREAD,
                                            NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_contains0, bool)
    {
        NODE_RETURN(qt_QByteArray_contains_bool_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_count0, int)
    {
        NODE_RETURN(qt_QByteArray_count_int_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_count3, int)
    {
        NODE_RETURN(qt_QByteArray_count_int_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_endsWith0, bool)
    {
        NODE_RETURN(qt_QByteArray_endsWith_bool_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_indexOf0, int)
    {
        NODE_RETURN(qt_QByteArray_indexOf_int_QByteArray_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_indexOf3, int)
    {
        NODE_RETURN(qt_QByteArray_indexOf_int_QByteArray_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_insert0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_insert_QByteArray_QByteArray_int_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_insert4, Pointer)
    {
        NODE_RETURN(qt_QByteArray_insert_QByteArray_QByteArray_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEmpty0, bool)
    {
        NODE_RETURN(qt_QByteArray_isEmpty_bool_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isNull0, bool)
    {
        NODE_RETURN(qt_QByteArray_isNull_bool_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_lastIndexOf0, int)
    {
        NODE_RETURN(qt_QByteArray_lastIndexOf_int_QByteArray_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_lastIndexOf3, int)
    {
        NODE_RETURN(qt_QByteArray_lastIndexOf_int_QByteArray_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_left0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_left_QByteArray_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_length0, int)
    {
        NODE_RETURN(qt_QByteArray_length_int_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mid0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_mid_QByteArray_QByteArray_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_prepend0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_prepend_QByteArray_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_push_back0, void)
    {
        qt_QByteArray_push_back_void_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_push_front0, void)
    {
        qt_QByteArray_push_front_void_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_remove0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_remove_QByteArray_QByteArray_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_repeated0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_repeated_QByteArray_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_replace0, Pointer)
    {
        NODE_RETURN(
            qt_QByteArray_replace_QByteArray_QByteArray_int_int_QByteArray(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
                NODE_ARG(2, int), NODE_ARG(3, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_replace7, Pointer)
    {
        NODE_RETURN(
            qt_QByteArray_replace_QByteArray_QByteArray_QByteArray_QByteArray(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_replace13, Pointer)
    {
        NODE_RETURN(
            qt_QByteArray_replace_QByteArray_QByteArray_string_QByteArray(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_reserve0, void)
    {
        qt_QByteArray_reserve_void_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_resize0, void)
    {
        qt_QByteArray_resize_void_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_right0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_right_QByteArray_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_setNum0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_setNum_QByteArray_QByteArray_int_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_simplified0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_simplified_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_size0, int)
    {
        NODE_RETURN(qt_QByteArray_size_int_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_squeeze0, void)
    {
        qt_QByteArray_squeeze_void_QByteArray(NODE_THREAD,
                                              NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_startsWith0, bool)
    {
        NODE_RETURN(qt_QByteArray_startsWith_bool_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_swap0, void)
    {
        qt_QByteArray_swap_void_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_toBase640, Pointer)
    {
        NODE_RETURN(qt_QByteArray_toBase64_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toBase641, Pointer)
    {
        NODE_RETURN(qt_QByteArray_toBase64_QByteArray_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_toHex0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_toHex_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toLower0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_toLower_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_toUpper0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_toUpper_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_trimmed0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_trimmed_QByteArray_QByteArray(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_truncate0, void)
    {
        qt_QByteArray_truncate_void_QByteArray_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(qt_QByteArray_operatorBang_EQ__bool_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_EQ_0, Pointer)
    {
        NODE_RETURN(
            qt_QByteArray_operatorPlus_EQ__QByteArray_QByteArray_QByteArray(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorPlus_EQ_3, Pointer)
    {
        NODE_RETURN(qt_QByteArray_operatorPlus_EQ__QByteArray_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorLT_0, bool)
    {
        NODE_RETURN(qt_QByteArray_operatorLT__bool_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorLT_EQ_0, bool)
    {
        NODE_RETURN(qt_QByteArray_operatorLT_EQ__bool_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt_QByteArray_operatorEQ_EQ__bool_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorGT_0, bool)
    {
        NODE_RETURN(qt_QByteArray_operatorGT__bool_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorGT_EQ_0, bool)
    {
        NODE_RETURN(qt_QByteArray_operatorGT_EQ__bool_QByteArray_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_fromBase640, Pointer)
    {
        NODE_RETURN(qt_QByteArray_fromBase64_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_fromBase641, Pointer)
    {
        NODE_RETURN(qt_QByteArray_fromBase64_QByteArray_QByteArray_int(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_fromHex0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_fromHex_QByteArray_QByteArray(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_number0, Pointer)
    {
        NODE_RETURN(qt_QByteArray_number_QByteArray_int_int(
            NODE_THREAD, NODE_ARG(0, int), NODE_ARG(1, int)));
    }

    Pointer
    QByteArray_constData_QByteArray_byteECB_BSB__(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QByteArray arg0 = getqtype<QByteArrayType>(param_this);
        Class* atype = (Class*)c->arrayType(c->byteType(), 1, 0);
        DynamicArray* array = new DynamicArray(atype, 1);
        array->resize(arg0.size());
        memcpy(array->data<char>(), arg0.constData(), arg0.size());
        return array;
    }

    static NODE_IMPLEMENTATION(constData, Pointer)
    {
        NODE_RETURN(QByteArray_constData_QByteArray_byteECB_BSB__(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QByteArrayType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(
            new Alias(c, "Base64Option", "int"),
            new Alias(c, "Base64Options", "int"),
            new SymbolicConstant(c, "Base64Encoding", "int",
                                 Value(int(QByteArray::Base64Encoding))),
            new SymbolicConstant(c, "Base64UrlEncoding", "int",
                                 Value(int(QByteArray::Base64UrlEncoding))),
            new SymbolicConstant(c, "KeepTrailingEquals", "int",
                                 Value(int(QByteArray::KeepTrailingEquals))),
            new SymbolicConstant(c, "OmitTrailingEquals", "int",
                                 Value(int(QByteArray::OmitTrailingEquals))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QByteArray", _n_QByteArray0, None, Compiled,
                         qt_QByteArray_QByteArray_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            // MISSING: QByteArray (QByteArray; QByteArray this, "const char *"
            // data, int size) MISSING: QByteArray (QByteArray; QByteArray this,
            // int size, "char" ch) MISSING: QByteArray (QByteArray; QByteArray
            // this, QByteArray other) MISSING: QByteArray (QByteArray;
            // QByteArray this, QByteArray other)
            new Function(c, "append", _n_append0, None, Compiled,
                         qt_QByteArray_append_QByteArray_QByteArray_QByteArray,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: append (QByteArray; QByteArray this, "const char *" str)
            // MISSING: append (QByteArray; QByteArray this, "const char *" str,
            // int len) MISSING: append (QByteArray; QByteArray this, "char" ch)
            new Function(c, "append", _n_append4, None, Compiled,
                         qt_QByteArray_append_QByteArray_QByteArray_string,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            // MISSING: at ("char"; QByteArray this, int i)
            // MISSING: begin ("iterator"; QByteArray this)
            // MISSING: begin ("const_iterator"; QByteArray this)
            new Function(c, "capacity", _n_capacity0, None, Compiled,
                         qt_QByteArray_capacity_int_QByteArray, Return, "int",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            // MISSING: cbegin ("const_iterator"; QByteArray this)
            // MISSING: cend ("const_iterator"; QByteArray this)
            new Function(c, "chop", _n_chop0, None, Compiled,
                         qt_QByteArray_chop_void_QByteArray_int, Return, "void",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "n", "int"), End),
            new Function(c, "clear", _n_clear0, None, Compiled,
                         qt_QByteArray_clear_void_QByteArray, Return, "void",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            // MISSING: constBegin ("const_iterator"; QByteArray this)
            // MISSING: constData ("const char *"; QByteArray this)
            // MISSING: constEnd ("const_iterator"; QByteArray this)
            new Function(c, "contains", _n_contains0, None, Compiled,
                         qt_QByteArray_contains_bool_QByteArray_QByteArray,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: contains (bool; QByteArray this, "const char *" str)
            // MISSING: contains (bool; QByteArray this, "char" ch)
            new Function(c, "count", _n_count0, None, Compiled,
                         qt_QByteArray_count_int_QByteArray_QByteArray, Return,
                         "int", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: count (int; QByteArray this, "const char *" str)
            // MISSING: count (int; QByteArray this, "char" ch)
            new Function(c, "count", _n_count3, None, Compiled,
                         qt_QByteArray_count_int_QByteArray, Return, "int",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            // MISSING: crbegin ("const_reverse_iterator"; QByteArray this)
            // MISSING: crend ("const_reverse_iterator"; QByteArray this)
            // MISSING: data ("char *"; QByteArray this)
            // MISSING: data ("const char *"; QByteArray this)
            // MISSING: end ("iterator"; QByteArray this)
            // MISSING: end ("const_iterator"; QByteArray this)
            new Function(c, "endsWith", _n_endsWith0, None, Compiled,
                         qt_QByteArray_endsWith_bool_QByteArray_QByteArray,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: endsWith (bool; QByteArray this, "char" ch)
            // MISSING: endsWith (bool; QByteArray this, "const char *" str)
            // MISSING: fill (QByteArray; QByteArray this, "char" ch, int size)
            new Function(c, "indexOf", _n_indexOf0, None, Compiled,
                         qt_QByteArray_indexOf_int_QByteArray_QByteArray_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"),
                         new Param(c, "from", "int", Value((int)0)), End),
            // MISSING: indexOf (int; QByteArray this, "const char *" str, int
            // from) MISSING: indexOf (int; QByteArray this, "char" ch, int
            // from)
            new Function(c, "indexOf", _n_indexOf3, None, Compiled,
                         qt_QByteArray_indexOf_int_QByteArray_string_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"),
                         new Param(c, "from", "int", Value((int)0)), End),
            new Function(
                c, "insert", _n_insert0, None, Compiled,
                qt_QByteArray_insert_QByteArray_QByteArray_int_QByteArray,
                Return, "qt.QByteArray", Parameters,
                new Param(c, "this", "qt.QByteArray"), new Param(c, "i", "int"),
                new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: insert (QByteArray; QByteArray this, int i, "const char
            // *" str) MISSING: insert (QByteArray; QByteArray this, int i,
            // "const char *" str, int len) MISSING: insert (QByteArray;
            // QByteArray this, int i, "char" ch)
            new Function(c, "insert", _n_insert4, None, Compiled,
                         qt_QByteArray_insert_QByteArray_QByteArray_int_string,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "i", "int"),
                         new Param(c, "str", "string"), End),
            new Function(c, "isEmpty", _n_isEmpty0, None, Compiled,
                         qt_QByteArray_isEmpty_bool_QByteArray, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            new Function(c, "isNull", _n_isNull0, None, Compiled,
                         qt_QByteArray_isNull_bool_QByteArray, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            new Function(
                c, "lastIndexOf", _n_lastIndexOf0, None, Compiled,
                qt_QByteArray_lastIndexOf_int_QByteArray_QByteArray_int, Return,
                "int", Parameters, new Param(c, "this", "qt.QByteArray"),
                new Param(c, "ba", "qt.QByteArray"),
                new Param(c, "from", "int", Value((int)-1)), End),
            // MISSING: lastIndexOf (int; QByteArray this, "const char *" str,
            // int from) MISSING: lastIndexOf (int; QByteArray this, "char" ch,
            // int from)
            new Function(c, "lastIndexOf", _n_lastIndexOf3, None, Compiled,
                         qt_QByteArray_lastIndexOf_int_QByteArray_string_int,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"),
                         new Param(c, "from", "int", Value((int)-1)), End),
            new Function(c, "left", _n_left0, None, Compiled,
                         qt_QByteArray_left_QByteArray_QByteArray_int, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "len", "int"), End),
            // MISSING: leftJustified (QByteArray; QByteArray this, int width,
            // "char" fill, bool truncate)
            new Function(c, "length", _n_length0, None, Compiled,
                         qt_QByteArray_length_int_QByteArray, Return, "int",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            new Function(c, "mid", _n_mid0, None, Compiled,
                         qt_QByteArray_mid_QByteArray_QByteArray_int_int,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "pos", "int"),
                         new Param(c, "len", "int", Value((int)-1)), End),
            new Function(c, "prepend", _n_prepend0, None, Compiled,
                         qt_QByteArray_prepend_QByteArray_QByteArray_QByteArray,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: prepend (QByteArray; QByteArray this, "const char *"
            // str) MISSING: prepend (QByteArray; QByteArray this, "const char
            // *" str, int len) MISSING: prepend (QByteArray; QByteArray this,
            // "char" ch)
            new Function(c, "push_back", _n_push_back0, None, Compiled,
                         qt_QByteArray_push_back_void_QByteArray_QByteArray,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "other", "qt.QByteArray"), End),
            // MISSING: push_back (void; QByteArray this, "const char *" str)
            // MISSING: push_back (void; QByteArray this, "char" ch)
            new Function(c, "push_front", _n_push_front0, None, Compiled,
                         qt_QByteArray_push_front_void_QByteArray_QByteArray,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "other", "qt.QByteArray"), End),
            // MISSING: push_front (void; QByteArray this, "const char *" str)
            // MISSING: push_front (void; QByteArray this, "char" ch)
            // MISSING: rbegin ("reverse_iterator"; QByteArray this)
            // MISSING: rbegin ("const_reverse_iterator"; QByteArray this)
            new Function(c, "remove", _n_remove0, None, Compiled,
                         qt_QByteArray_remove_QByteArray_QByteArray_int_int,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "pos", "int"), new Param(c, "len", "int"),
                         End),
            // MISSING: rend ("reverse_iterator"; QByteArray this)
            // MISSING: rend ("const_reverse_iterator"; QByteArray this)
            new Function(c, "repeated", _n_repeated0, None, Compiled,
                         qt_QByteArray_repeated_QByteArray_QByteArray_int,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "times", "int"), End),
            new Function(
                c, "replace", _n_replace0, None, Compiled,
                qt_QByteArray_replace_QByteArray_QByteArray_int_int_QByteArray,
                Return, "qt.QByteArray", Parameters,
                new Param(c, "this", "qt.QByteArray"),
                new Param(c, "pos", "int"), new Param(c, "len", "int"),
                new Param(c, "after", "qt.QByteArray"), End),
            // MISSING: replace (QByteArray; QByteArray this, int pos, int len,
            // "const char *" after, int alen) MISSING: replace (QByteArray;
            // QByteArray this, int pos, int len, "const char *" after) MISSING:
            // replace (QByteArray; QByteArray this, "char" before, "const char
            // *" after) MISSING: replace (QByteArray; QByteArray this, "char"
            // before, QByteArray after) MISSING: replace (QByteArray;
            // QByteArray this, "const char *" before, "const char *" after)
            // MISSING: replace (QByteArray; QByteArray this, "const char *"
            // before, int bsize, "const char *" after, int asize)
            new Function(
                c, "replace", _n_replace7, None, Compiled,
                qt_QByteArray_replace_QByteArray_QByteArray_QByteArray_QByteArray,
                Return, "qt.QByteArray", Parameters,
                new Param(c, "this", "qt.QByteArray"),
                new Param(c, "before", "qt.QByteArray"),
                new Param(c, "after", "qt.QByteArray"), End),
            // MISSING: replace (QByteArray; QByteArray this, QByteArray before,
            // "const char *" after) MISSING: replace (QByteArray; QByteArray
            // this, "const char *" before, QByteArray after) MISSING: replace
            // (QByteArray; QByteArray this, "char" before, "char" after)
            // MISSING: replace (QByteArray; QByteArray this, string before,
            // "const char *" after) MISSING: replace (QByteArray; QByteArray
            // this, "char" before, string after)
            new Function(
                c, "replace", _n_replace13, None, Compiled,
                qt_QByteArray_replace_QByteArray_QByteArray_string_QByteArray,
                Return, "qt.QByteArray", Parameters,
                new Param(c, "this", "qt.QByteArray"),
                new Param(c, "before", "string"),
                new Param(c, "after", "qt.QByteArray"), End),
            new Function(c, "reserve", _n_reserve0, None, Compiled,
                         qt_QByteArray_reserve_void_QByteArray_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "size", "int"), End),
            new Function(c, "resize", _n_resize0, None, Compiled,
                         qt_QByteArray_resize_void_QByteArray_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "size", "int"), End),
            new Function(c, "right", _n_right0, None, Compiled,
                         qt_QByteArray_right_QByteArray_QByteArray_int, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "len", "int"), End),
            // MISSING: rightJustified (QByteArray; QByteArray this, int width,
            // "char" fill, bool truncate)
            new Function(c, "setNum", _n_setNum0, None, Compiled,
                         qt_QByteArray_setNum_QByteArray_QByteArray_int_int,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "n", "int"),
                         new Param(c, "base", "int", Value((int)10)), End),
            // MISSING: setNum (QByteArray; QByteArray this, "ushort" n, int
            // base) MISSING: setNum (QByteArray; QByteArray this, "short" n,
            // int base) MISSING: setNum (QByteArray; QByteArray this, int n,
            // int base) MISSING: setNum (QByteArray; QByteArray this,
            // "qlonglong" n, int base) MISSING: setNum (QByteArray; QByteArray
            // this, "qulonglong" n, int base) MISSING: setNum (QByteArray;
            // QByteArray this, "float" n, "char" f, int prec) MISSING: setNum
            // (QByteArray; QByteArray this, double n, "char" f, int prec)
            // MISSING: setRawData (QByteArray; QByteArray this, "const char *"
            // data, int size)
            new Function(c, "simplified", _n_simplified0, None, Compiled,
                         qt_QByteArray_simplified_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            new Function(c, "size", _n_size0, None, Compiled,
                         qt_QByteArray_size_int_QByteArray, Return, "int",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            // MISSING: split ("QList<QByteArray>"; QByteArray this, "char" sep)
            new Function(c, "squeeze", _n_squeeze0, None, Compiled,
                         qt_QByteArray_squeeze_void_QByteArray, Return, "void",
                         Parameters, new Param(c, "this", "qt.QByteArray"),
                         End),
            new Function(c, "startsWith", _n_startsWith0, None, Compiled,
                         qt_QByteArray_startsWith_bool_QByteArray_QByteArray,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: startsWith (bool; QByteArray this, "char" ch)
            // MISSING: startsWith (bool; QByteArray this, "const char *" str)
            new Function(c, "swap", _n_swap0, None, Compiled,
                         qt_QByteArray_swap_void_QByteArray_QByteArray, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "other", "qt.QByteArray"), End),
            new Function(c, "toBase64", _n_toBase640, None, Compiled,
                         qt_QByteArray_toBase64_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            new Function(c, "toBase64", _n_toBase641, None, Compiled,
                         qt_QByteArray_toBase64_QByteArray_QByteArray_int,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "options", "int"), End),
            // MISSING: toCFData ("CFDataRef"; QByteArray this)
            // MISSING: toDouble (double; QByteArray this, "bool *" ok)
            // MISSING: toFloat ("float"; QByteArray this, "bool *" ok)
            new Function(c, "toHex", _n_toHex0, None, Compiled,
                         qt_QByteArray_toHex_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            // MISSING: toInt (int; QByteArray this, "bool *" ok, int base)
            // MISSING: toLong ("long"; QByteArray this, "bool *" ok, int base)
            // MISSING: toLongLong ("qlonglong"; QByteArray this, "bool *" ok,
            // int base)
            new Function(c, "toLower", _n_toLower0, None, Compiled,
                         qt_QByteArray_toLower_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            // MISSING: toNSData ("NSData *"; QByteArray this)
            // MISSING: toPercentEncoding (QByteArray; QByteArray this,
            // QByteArray exclude, QByteArray include, "char" percent) MISSING:
            // toRawCFData ("CFDataRef"; QByteArray this) MISSING: toRawNSData
            // ("NSData *"; QByteArray this) MISSING: toShort ("short";
            // QByteArray this, "bool *" ok, int base) MISSING: toUInt (int;
            // QByteArray this, "bool *" ok, int base) MISSING: toULong
            // ("ulong"; QByteArray this, "bool *" ok, int base) MISSING:
            // toULongLong ("qulonglong"; QByteArray this, "bool *" ok, int
            // base) MISSING: toUShort ("ushort"; QByteArray this, "bool *" ok,
            // int base)
            new Function(c, "toUpper", _n_toUpper0, None, Compiled,
                         qt_QByteArray_toUpper_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            new Function(c, "trimmed", _n_trimmed0, None, Compiled,
                         qt_QByteArray_trimmed_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QByteArray"), End),
            new Function(c, "truncate", _n_truncate0, None, Compiled,
                         qt_QByteArray_truncate_void_QByteArray_int, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "pos", "int"), End),
            // static functions
            new Function(c, "fromBase64", _n_fromBase640, None, Compiled,
                         qt_QByteArray_fromBase64_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "base64", "qt.QByteArray"), End),
            new Function(c, "fromBase64", _n_fromBase641, None, Compiled,
                         qt_QByteArray_fromBase64_QByteArray_QByteArray_int,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "base64", "qt.QByteArray"),
                         new Param(c, "options", "int"), End),
            // MISSING: fromCFData (QByteArray; "CFDataRef" data)
            new Function(c, "fromHex", _n_fromHex0, None, Compiled,
                         qt_QByteArray_fromHex_QByteArray_QByteArray, Return,
                         "qt.QByteArray", Parameters,
                         new Param(c, "hexEncoded", "qt.QByteArray"), End),
            // MISSING: fromNSData (QByteArray; "const NSData *" data)
            // MISSING: fromPercentEncoding (QByteArray; QByteArray input,
            // "char" percent) MISSING: fromRawCFData (QByteArray; "CFDataRef"
            // data) MISSING: fromRawData (QByteArray; "const char *" data, int
            // size) MISSING: fromRawNSData (QByteArray; "const NSData *" data)
            new Function(c, "number", _n_number0, None, Compiled,
                         qt_QByteArray_number_QByteArray_int_int, Return,
                         "qt.QByteArray", Parameters, new Param(c, "n", "int"),
                         new Param(c, "base", "int", Value((int)10)), End),
            // MISSING: number (QByteArray; "qlonglong" n, int base)
            // MISSING: number (QByteArray; "qulonglong" n, int base)
            // MISSING: number (QByteArray; double n, "char" f, int prec)
            EndArguments);
        globalScope()->addSymbols(
            new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                         qt_QByteArray_operatorBang_EQ__bool_QByteArray_string,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            new Function(
                c, "+=", _n_operatorPlus_EQ_0, Op, Compiled,
                qt_QByteArray_operatorPlus_EQ__QByteArray_QByteArray_QByteArray,
                Return, "qt.QByteArray", Parameters,
                new Param(c, "this", "qt.QByteArray"),
                new Param(c, "ba", "qt.QByteArray"), End),
            // MISSING: += (QByteArray; QByteArray this, "const char *" str)
            // MISSING: += (QByteArray; QByteArray this, "char" ch)
            new Function(
                c, "+=", _n_operatorPlus_EQ_3, Op, Compiled,
                qt_QByteArray_operatorPlus_EQ__QByteArray_QByteArray_string,
                Return, "qt.QByteArray", Parameters,
                new Param(c, "this", "qt.QByteArray"),
                new Param(c, "str", "string"), End),
            new Function(c, "<", _n_operatorLT_0, Op, Compiled,
                         qt_QByteArray_operatorLT__bool_QByteArray_string,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            new Function(c, "<=", _n_operatorLT_EQ_0, Op, Compiled,
                         qt_QByteArray_operatorLT_EQ__bool_QByteArray_string,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            // MISSING: = (QByteArray; QByteArray this, QByteArray other)
            // MISSING: = (QByteArray; QByteArray this, "const char *" str)
            // MISSING: = (QByteArray; QByteArray this, QByteArray other)
            new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                         qt_QByteArray_operatorEQ_EQ__bool_QByteArray_string,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            new Function(c, ">", _n_operatorGT_0, Op, Compiled,
                         qt_QByteArray_operatorGT__bool_QByteArray_string,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            new Function(c, ">=", _n_operatorGT_EQ_0, Op, Compiled,
                         qt_QByteArray_operatorGT_EQ__bool_QByteArray_string,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QByteArray"),
                         new Param(c, "str", "string"), End),
            // MISSING: [] ("QByteRef"; QByteArray this, int i)
            // MISSING: [] ("char"; QByteArray this, int i)
            // MISSING: [] ("char"; QByteArray this, int i)
            // MISSING: [] ("QByteRef"; QByteArray this, int i)
            EndArguments);
        scope()->addSymbols(EndArguments);

        c->arrayType(c->byteType(), 1, 0);

        addSymbol(new Function(c, "constData", constData, None, Compiled,
                               QByteArray_constData_QByteArray_byteECB_BSB__,
                               Return, "byte[]", Parameters,
                               new Param(c, "this", "qt.QByteArray"), End));
    }

} // namespace Mu
