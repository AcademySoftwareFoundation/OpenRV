//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QMatrixType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QRectType.h>
#include <MuQt5/QRectFType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QPointType.h>
#include <MuQt5/QRegionType.h>
#include <MuQt5/QVariantType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QMatrixType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QMatrixType::QMatrixType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QMatrixType::~QMatrixType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QMatrixType::Instance* i =
            new QMatrixType::Instance((Class*)NODE_THIS.type());
        QMatrixType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QMatrixType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QMatrixType::finalizer, 0, 0, 0);
    }

    void QMatrixType::finalizer(void* obj, void* data)
    {
        QMatrixType::Instance* i =
            reinterpret_cast<QMatrixType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer qt_QMatrix_QMatrix_QMatrix_QMatrix(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QMatrixType>(param_this, QMatrix());
        return param_this;
    }

    Pointer
    qt_QMatrix_QMatrix_QMatrix_QMatrix_double_double_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_m11,
        double param_m12, double param_m21, double param_m22, double param_dx,
        double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        qreal arg1 = (double)(param_m11);
        qreal arg2 = (double)(param_m12);
        qreal arg3 = (double)(param_m21);
        qreal arg4 = (double)(param_m22);
        qreal arg5 = (double)(param_dx);
        qreal arg6 = (double)(param_dy);
        setqtype<QMatrixType>(param_this,
                              QMatrix(arg1, arg2, arg3, arg4, arg5, arg6));
        return param_this;
    }

    double qt_QMatrix_m11_double_QMatrix(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.m11();
    }

    double qt_QMatrix_m12_double_QMatrix(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.m12();
    }

    double qt_QMatrix_m21_double_QMatrix(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.m21();
    }

    double qt_QMatrix_m22_double_QMatrix(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.m22();
    }

    double qt_QMatrix_determinant_double_QMatrix(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.determinant();
    }

    double qt_QMatrix_dx_double_QMatrix(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.dx();
    }

    double qt_QMatrix_dy_double_QMatrix(Mu::Thread& NODE_THREAD,
                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.dy();
    }

    bool qt_QMatrix_isIdentity_bool_QMatrix(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.isIdentity();
    }

    bool qt_QMatrix_isInvertible_bool_QMatrix(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        return arg0.isInvertible();
    }

    Pointer qt_QMatrix_map_QPoint_QMatrix_QPoint(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this,
                                                 Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QPoint arg1 = getqtype<QPointType>(param_point);
        return makeqtype<QPointType>(c, arg0.map(arg1), "qt.QPoint");
    }

    Pointer qt_QMatrix_map_QPointF_QMatrix_QPointF(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_point)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QPointF arg1 = getqtype<QPointFType>(param_point);
        return makeqtype<QPointFType>(c, arg0.map(arg1), "qt.QPointF");
    }

    Pointer qt_QMatrix_map_QRegion_QMatrix_QRegion(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_region)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QRegion arg1 = getqtype<QRegionType>(param_region);
        return makeqtype<QRegionType>(c, arg0.map(arg1), "qt.QRegion");
    }

    Pointer qt_QMatrix_mapRect_QRectF_QMatrix_QRectF(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QRectF arg1 = getqtype<QRectFType>(param_rectangle);
        return makeqtype<QRectFType>(c, arg0.mapRect(arg1), "qt.QRectF");
    }

    Pointer qt_QMatrix_mapRect_QRect_QMatrix_QRect(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this,
                                                   Pointer param_rectangle)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QRect arg1 = getqtype<QRectType>(param_rectangle);
        return makeqtype<QRectType>(c, arg0.mapRect(arg1), "qt.QRect");
    }

    void qt_QMatrix_reset_void_QMatrix(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        arg0.reset();
        setqtype<QMatrixType>(param_this, arg0);
    }

    Pointer qt_QMatrix_rotate_QMatrix_QMatrix_double(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     double param_degrees)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        qreal arg1 = (double)(param_degrees);
        return makeqtype<QMatrixType>(c, arg0.rotate(arg1), "qt.QMatrix");
    }

    Pointer qt_QMatrix_scale_QMatrix_QMatrix_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_sx,
        double param_sy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        qreal arg1 = (double)(param_sx);
        qreal arg2 = (double)(param_sy);
        return makeqtype<QMatrixType>(c, arg0.scale(arg1, arg2), "qt.QMatrix");
    }

    void
    qt_QMatrix_setMatrix_void_QMatrix_double_double_double_double_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_m11,
        double param_m12, double param_m21, double param_m22, double param_dx,
        double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        qreal arg1 = (double)(param_m11);
        qreal arg2 = (double)(param_m12);
        qreal arg3 = (double)(param_m21);
        qreal arg4 = (double)(param_m22);
        qreal arg5 = (double)(param_dx);
        qreal arg6 = (double)(param_dy);
        arg0.setMatrix(arg1, arg2, arg3, arg4, arg5, arg6);
        setqtype<QMatrixType>(param_this, arg0);
    }

    Pointer qt_QMatrix_shear_QMatrix_QMatrix_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_sh,
        double param_sv)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        qreal arg1 = (double)(param_sh);
        qreal arg2 = (double)(param_sv);
        return makeqtype<QMatrixType>(c, arg0.shear(arg1, arg2), "qt.QMatrix");
    }

    Pointer qt_QMatrix_translate_QMatrix_QMatrix_double_double(
        Mu::Thread& NODE_THREAD, Pointer param_this, double param_dx,
        double param_dy)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        qreal arg1 = (double)(param_dx);
        qreal arg2 = (double)(param_dy);
        return makeqtype<QMatrixType>(c, arg0.translate(arg1, arg2),
                                      "qt.QMatrix");
    }

    bool qt_QMatrix_operatorBang_EQ__bool_QMatrix_QMatrix(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        return arg0.operator!=(arg1);
    }

    Pointer qt_QMatrix_operatorStar__QMatrix_QMatrix_QMatrix(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        return makeqtype<QMatrixType>(c, arg0.operator*(arg1), "qt.QMatrix");
    }

    bool qt_QMatrix_operatorEQ_EQ__bool_QMatrix_QMatrix(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_matrix)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg0 = getqtype<QMatrixType>(param_this);
        const QMatrix arg1 = getqtype<QMatrixType>(param_matrix);
        return arg0.operator==(arg1);
    }

    Pointer qt_QMatrix_QVariant_QVariant_QVariant_QMatrix(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_from)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QMatrix arg1 = getqtype<QMatrixType>(param_from);
        setqtype<QVariantType>(param_this, QVariant(arg1));
        return param_this;
    }

    static NODE_IMPLEMENTATION(_n_QMatrix0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_QMatrix_QMatrix_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QMatrix1, Pointer)
    {
        NODE_RETURN(
            qt_QMatrix_QMatrix_QMatrix_QMatrix_double_double_double_double_double_double(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
                NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double),
                NODE_ARG(5, double), NODE_ARG(6, double)));
    }

    static NODE_IMPLEMENTATION(_n_m110, double)
    {
        NODE_RETURN(qt_QMatrix_m11_double_QMatrix(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m120, double)
    {
        NODE_RETURN(qt_QMatrix_m12_double_QMatrix(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m210, double)
    {
        NODE_RETURN(qt_QMatrix_m21_double_QMatrix(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_m220, double)
    {
        NODE_RETURN(qt_QMatrix_m22_double_QMatrix(NODE_THREAD,
                                                  NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_determinant0, double)
    {
        NODE_RETURN(qt_QMatrix_determinant_double_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dx0, double)
    {
        NODE_RETURN(qt_QMatrix_dx_double_QMatrix(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_dy0, double)
    {
        NODE_RETURN(qt_QMatrix_dy_double_QMatrix(NODE_THREAD,
                                                 NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isIdentity0, bool)
    {
        NODE_RETURN(qt_QMatrix_isIdentity_bool_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isInvertible0, bool)
    {
        NODE_RETURN(qt_QMatrix_isInvertible_bool_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_map2, Pointer)
    {
        NODE_RETURN(qt_QMatrix_map_QPoint_QMatrix_QPoint(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_map3, Pointer)
    {
        NODE_RETURN(qt_QMatrix_map_QPointF_QMatrix_QPointF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_map8, Pointer)
    {
        NODE_RETURN(qt_QMatrix_map_QRegion_QMatrix_QRegion(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapRect0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_mapRect_QRectF_QMatrix_QRectF(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_mapRect1, Pointer)
    {
        NODE_RETURN(qt_QMatrix_mapRect_QRect_QMatrix_QRect(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_reset0, void)
    {
        qt_QMatrix_reset_void_QMatrix(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_rotate0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_rotate_QMatrix_QMatrix_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double)));
    }

    static NODE_IMPLEMENTATION(_n_scale0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_scale_QMatrix_QMatrix_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_setMatrix0, void)
    {
        qt_QMatrix_setMatrix_void_QMatrix_double_double_double_double_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double), NODE_ARG(3, double), NODE_ARG(4, double),
            NODE_ARG(5, double), NODE_ARG(6, double));
    }

    static NODE_IMPLEMENTATION(_n_shear0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_shear_QMatrix_QMatrix_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_translate0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_translate_QMatrix_QMatrix_double_double(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, double),
            NODE_ARG(2, double)));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(qt_QMatrix_operatorBang_EQ__bool_QMatrix_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorStar_0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_operatorStar__QMatrix_QMatrix_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(qt_QMatrix_operatorEQ_EQ__bool_QMatrix_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_co_n_QVariant0, Pointer)
    {
        NODE_RETURN(qt_QMatrix_QVariant_QVariant_QVariant_QMatrix(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    void QMatrixType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QMatrix", _n_QMatrix0, None, Compiled,
                         qt_QMatrix_QMatrix_QMatrix_QMatrix, Return,
                         "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QMatrix"), End),
            new Function(
                c, "QMatrix", _n_QMatrix1, None, Compiled,
                qt_QMatrix_QMatrix_QMatrix_QMatrix_double_double_double_double_double_double,
                Return, "qt.QMatrix", Parameters,
                new Param(c, "this", "qt.QMatrix"),
                new Param(c, "m11", "double"), new Param(c, "m12", "double"),
                new Param(c, "m21", "double"), new Param(c, "m22", "double"),
                new Param(c, "dx", "double"), new Param(c, "dy", "double"),
                End),
            // MISSING: QMatrix (QMatrix; QMatrix this, QMatrix matrix)
            new Function(c, "m11", _n_m110, None, Compiled,
                         qt_QMatrix_m11_double_QMatrix, Return, "double",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "m12", _n_m120, None, Compiled,
                         qt_QMatrix_m12_double_QMatrix, Return, "double",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "m21", _n_m210, None, Compiled,
                         qt_QMatrix_m21_double_QMatrix, Return, "double",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "m22", _n_m220, None, Compiled,
                         qt_QMatrix_m22_double_QMatrix, Return, "double",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "determinant", _n_determinant0, None, Compiled,
                         qt_QMatrix_determinant_double_QMatrix, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "dx", _n_dx0, None, Compiled,
                         qt_QMatrix_dx_double_QMatrix, Return, "double",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "dy", _n_dy0, None, Compiled,
                         qt_QMatrix_dy_double_QMatrix, Return, "double",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            // MISSING: inverted (QMatrix; QMatrix this, "bool *" invertible)
            new Function(c, "isIdentity", _n_isIdentity0, None, Compiled,
                         qt_QMatrix_isIdentity_bool_QMatrix, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "isInvertible", _n_isInvertible0, None, Compiled,
                         qt_QMatrix_isInvertible_bool_QMatrix, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            // MISSING: map (void; QMatrix this, double x, double y, "qreal *"
            // tx, "qreal *" ty) MISSING: map (void; QMatrix this, int x, int y,
            // "int *" tx, "int *" ty)
            new Function(c, "map", _n_map2, None, Compiled,
                         qt_QMatrix_map_QPoint_QMatrix_QPoint, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "point", "qt.QPoint"), End),
            new Function(c, "map", _n_map3, None, Compiled,
                         qt_QMatrix_map_QPointF_QMatrix_QPointF, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "point", "qt.QPointF"), End),
            // MISSING: map ("QLine"; QMatrix this, "const QLine &" line)
            // MISSING: map ("QLineF"; QMatrix this, "const QLineF &" line)
            // MISSING: map ("QPolygonF"; QMatrix this, "const QPolygonF &"
            // polygon) MISSING: map ("QPolygon"; QMatrix this, "const QPolygon
            // &" polygon)
            new Function(c, "map", _n_map8, None, Compiled,
                         qt_QMatrix_map_QRegion_QMatrix_QRegion, Return,
                         "qt.QRegion", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "region", "qt.QRegion"), End),
            // MISSING: map (QPainterPath; QMatrix this, "const QPainterPath &"
            // path)
            new Function(c, "mapRect", _n_mapRect0, None, Compiled,
                         qt_QMatrix_mapRect_QRectF_QMatrix_QRectF, Return,
                         "qt.QRectF", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "rectangle", "qt.QRectF"), End),
            new Function(c, "mapRect", _n_mapRect1, None, Compiled,
                         qt_QMatrix_mapRect_QRect_QMatrix_QRect, Return,
                         "qt.QRect", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "rectangle", "qt.QRect"), End),
            // MISSING: mapToPolygon ("QPolygon"; QMatrix this, QRect rectangle)
            new Function(c, "reset", _n_reset0, None, Compiled,
                         qt_QMatrix_reset_void_QMatrix, Return, "void",
                         Parameters, new Param(c, "this", "qt.QMatrix"), End),
            new Function(c, "rotate", _n_rotate0, None, Compiled,
                         qt_QMatrix_rotate_QMatrix_QMatrix_double, Return,
                         "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "degrees", "double"), End),
            new Function(c, "scale", _n_scale0, None, Compiled,
                         qt_QMatrix_scale_QMatrix_QMatrix_double_double, Return,
                         "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "sx", "double"),
                         new Param(c, "sy", "double"), End),
            new Function(
                c, "setMatrix", _n_setMatrix0, None, Compiled,
                qt_QMatrix_setMatrix_void_QMatrix_double_double_double_double_double_double,
                Return, "void", Parameters, new Param(c, "this", "qt.QMatrix"),
                new Param(c, "m11", "double"), new Param(c, "m12", "double"),
                new Param(c, "m21", "double"), new Param(c, "m22", "double"),
                new Param(c, "dx", "double"), new Param(c, "dy", "double"),
                End),
            new Function(c, "shear", _n_shear0, None, Compiled,
                         qt_QMatrix_shear_QMatrix_QMatrix_double_double, Return,
                         "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "sh", "double"),
                         new Param(c, "sv", "double"), End),
            new Function(c, "translate", _n_translate0, None, Compiled,
                         qt_QMatrix_translate_QMatrix_QMatrix_double_double,
                         Return, "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "dx", "double"),
                         new Param(c, "dy", "double"), End),
            // MISSING: = ("QMatrix & operator*"; QMatrix this, QMatrix matrix)
            // static functions
            EndArguments);
        globalScope()->addSymbols(
            new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                         qt_QMatrix_operatorBang_EQ__bool_QMatrix_QMatrix,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            new Function(c, "*", _n_operatorStar_0, Op, Compiled,
                         qt_QMatrix_operatorStar__QMatrix_QMatrix_QMatrix,
                         Return, "qt.QMatrix", Parameters,
                         new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            // MISSING: = (QMatrix; QMatrix this, QMatrix matrix)
            new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                         qt_QMatrix_operatorEQ_EQ__bool_QMatrix_QMatrix, Return,
                         "bool", Parameters, new Param(c, "this", "qt.QMatrix"),
                         new Param(c, "matrix", "qt.QMatrix"), End),
            EndArguments);
        scope()->addSymbols(
            new Function(c, "QVariant", _co_n_QVariant0, Cast, Compiled,
                         qt_QMatrix_QVariant_QVariant_QVariant_QMatrix, Return,
                         "qt.QVariant", Parameters,
                         new Param(c, "this", "qt.QVariant"),
                         new Param(c, "from", "qt.QMatrix"), End),
            EndArguments);
    }

} // namespace Mu
