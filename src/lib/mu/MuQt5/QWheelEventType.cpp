//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QWheelEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QPointFType.h>
#include <MuQt5/QPointType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    QWheelEventType::QWheelEventType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QWheelEventType::~QWheelEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos,
        Pointer param_globalPos, Pointer param_pixelDelta,
        Pointer param_angleDelta, int param_qt4Delta, int param_qt4Orientation,
        int param_buttons, int param_modifiers)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg1 = getqtype<QPointFType>(param_pos);
        const QPointF arg2 = getqtype<QPointFType>(param_globalPos);
        QPoint arg3 = getqtype<QPointType>(param_pixelDelta);
        QPoint arg4 = getqtype<QPointType>(param_angleDelta);
        int arg5 = (int)(param_qt4Delta);
        Qt::Orientation arg6 = (Qt::Orientation)(param_qt4Orientation);
        Qt::MouseButtons arg7 = (Qt::MouseButtons)(param_buttons);
        Qt::KeyboardModifiers arg8 = (Qt::KeyboardModifiers)(param_modifiers);
        setqpointer<QWheelEventType>(
            param_this,
            new QWheelEvent(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8));
        return param_this;
    }

    Pointer
    qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos,
        Pointer param_globalPos, Pointer param_pixelDelta,
        Pointer param_angleDelta, int param_qt4Delta, int param_qt4Orientation,
        int param_buttons, int param_modifiers, int param_phase)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg1 = getqtype<QPointFType>(param_pos);
        const QPointF arg2 = getqtype<QPointFType>(param_globalPos);
        QPoint arg3 = getqtype<QPointType>(param_pixelDelta);
        QPoint arg4 = getqtype<QPointType>(param_angleDelta);
        int arg5 = (int)(param_qt4Delta);
        Qt::Orientation arg6 = (Qt::Orientation)(param_qt4Orientation);
        Qt::MouseButtons arg7 = (Qt::MouseButtons)(param_buttons);
        Qt::KeyboardModifiers arg8 = (Qt::KeyboardModifiers)(param_modifiers);
        Qt::ScrollPhase arg9 = (Qt::ScrollPhase)(param_phase);
        setqpointer<QWheelEventType>(
            param_this, new QWheelEvent(arg1, arg2, arg3, arg4, arg5, arg6,
                                        arg7, arg8, arg9));
        return param_this;
    }

    Pointer
    qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int_int_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pos,
        Pointer param_globalPos, Pointer param_pixelDelta,
        Pointer param_angleDelta, int param_qt4Delta, int param_qt4Orientation,
        int param_buttons, int param_modifiers, int param_phase,
        int param_source)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QPointF arg1 = getqtype<QPointFType>(param_pos);
        const QPointF arg2 = getqtype<QPointFType>(param_globalPos);
        QPoint arg3 = getqtype<QPointType>(param_pixelDelta);
        QPoint arg4 = getqtype<QPointType>(param_angleDelta);
        int arg5 = (int)(param_qt4Delta);
        Qt::Orientation arg6 = (Qt::Orientation)(param_qt4Orientation);
        Qt::MouseButtons arg7 = (Qt::MouseButtons)(param_buttons);
        Qt::KeyboardModifiers arg8 = (Qt::KeyboardModifiers)(param_modifiers);
        Qt::ScrollPhase arg9 = (Qt::ScrollPhase)(param_phase);
        Qt::MouseEventSource arg10 = (Qt::MouseEventSource)(param_source);
        setqpointer<QWheelEventType>(
            param_this, new QWheelEvent(arg1, arg2, arg3, arg4, arg5, arg6,
                                        arg7, arg8, arg9, arg10));
        return param_this;
    }

    Pointer
    qt_QWheelEvent_angleDelta_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->angleDelta(), "qt.QPoint");
    }

    int qt_QWheelEvent_buttons_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return int(arg0->buttons());
    }

    Pointer qt_QWheelEvent_globalPos_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->globalPos(), "qt.QPoint");
    }

    Pointer
    qt_QWheelEvent_globalPosF_QPointF_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->globalPosF(), "qt.QPointF");
    }

    int qt_QWheelEvent_globalX_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->globalX();
    }

    int qt_QWheelEvent_globalY_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->globalY();
    }

    int qt_QWheelEvent_phase_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return int(arg0->phase());
    }

    Pointer
    qt_QWheelEvent_pixelDelta_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->pixelDelta(), "qt.QPoint");
    }

    Pointer qt_QWheelEvent_pos_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->pos(), "qt.QPoint");
    }

    Pointer qt_QWheelEvent_posF_QPointF_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->posF(), "qt.QPointF");
    }

    int qt_QWheelEvent_source_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return int(arg0->source());
    }

    int qt_QWheelEvent_x_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->x();
    }

    int qt_QWheelEvent_y_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->y();
    }

    static NODE_IMPLEMENTATION(_n_QWheelEvent0, Pointer)
    {
        NODE_RETURN(
            qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, Pointer),
                NODE_ARG(4, Pointer), NODE_ARG(5, int), NODE_ARG(6, int),
                NODE_ARG(7, int), NODE_ARG(8, int)));
    }

    static NODE_IMPLEMENTATION(_n_QWheelEvent1, Pointer)
    {
        NODE_RETURN(
            qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, Pointer),
                NODE_ARG(4, Pointer), NODE_ARG(5, int), NODE_ARG(6, int),
                NODE_ARG(7, int), NODE_ARG(8, int), NODE_ARG(9, int)));
    }

    static NODE_IMPLEMENTATION(_n_QWheelEvent2, Pointer)
    {
        NODE_RETURN(
            qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int_int_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, Pointer), NODE_ARG(3, Pointer),
                NODE_ARG(4, Pointer), NODE_ARG(5, int), NODE_ARG(6, int),
                NODE_ARG(7, int), NODE_ARG(8, int), NODE_ARG(9, int),
                NODE_ARG(10, int)));
    }

    static NODE_IMPLEMENTATION(_n_angleDelta0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_angleDelta_QPoint_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_buttons0, int)
    {
        NODE_RETURN(qt_QWheelEvent_buttons_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalPos0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_globalPos_QPoint_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalPosF0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_globalPosF_QPointF_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalX0, int)
    {
        NODE_RETURN(qt_QWheelEvent_globalX_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalY0, int)
    {
        NODE_RETURN(qt_QWheelEvent_globalY_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_phase0, int)
    {
        NODE_RETURN(qt_QWheelEvent_phase_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pixelDelta0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_pixelDelta_QPoint_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pos0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_pos_QPoint_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_posF0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_posF_QPointF_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_source0, int)
    {
        NODE_RETURN(qt_QWheelEvent_source_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_x0, int)
    {
        NODE_RETURN(qt_QWheelEvent_x_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_y0, int)
    {
        NODE_RETURN(qt_QWheelEvent_y_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QWheelEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QWheelEvent", _n_QWheelEvent0, None, Compiled,
                qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int,
                Return, "qt.QWheelEvent", Parameters,
                new Param(c, "this", "qt.QWheelEvent"),
                new Param(c, "pos", "qt.QPointF"),
                new Param(c, "globalPos", "qt.QPointF"),
                new Param(c, "pixelDelta", "qt.QPoint"),
                new Param(c, "angleDelta", "qt.QPoint"),
                new Param(c, "qt4Delta", "int"),
                new Param(c, "qt4Orientation", "int"),
                new Param(c, "buttons", "int"),
                new Param(c, "modifiers", "int"), End),
            new Function(
                c, "QWheelEvent", _n_QWheelEvent1, None, Compiled,
                qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int_int,
                Return, "qt.QWheelEvent", Parameters,
                new Param(c, "this", "qt.QWheelEvent"),
                new Param(c, "pos", "qt.QPointF"),
                new Param(c, "globalPos", "qt.QPointF"),
                new Param(c, "pixelDelta", "qt.QPoint"),
                new Param(c, "angleDelta", "qt.QPoint"),
                new Param(c, "qt4Delta", "int"),
                new Param(c, "qt4Orientation", "int"),
                new Param(c, "buttons", "int"),
                new Param(c, "modifiers", "int"), new Param(c, "phase", "int"),
                End),
            new Function(
                c, "QWheelEvent", _n_QWheelEvent2, None, Compiled,
                qt_QWheelEvent_QWheelEvent_QWheelEvent_QWheelEvent_QPointF_QPointF_QPoint_QPoint_int_int_int_int_int_int,
                Return, "qt.QWheelEvent", Parameters,
                new Param(c, "this", "qt.QWheelEvent"),
                new Param(c, "pos", "qt.QPointF"),
                new Param(c, "globalPos", "qt.QPointF"),
                new Param(c, "pixelDelta", "qt.QPoint"),
                new Param(c, "angleDelta", "qt.QPoint"),
                new Param(c, "qt4Delta", "int"),
                new Param(c, "qt4Orientation", "int"),
                new Param(c, "buttons", "int"),
                new Param(c, "modifiers", "int"), new Param(c, "phase", "int"),
                new Param(c, "source", "int"), End),
            new Function(c, "angleDelta", _n_angleDelta0, None, Compiled,
                         qt_QWheelEvent_angleDelta_QPoint_QWheelEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "buttons", _n_buttons0, None, Compiled,
                         qt_QWheelEvent_buttons_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "globalPos", _n_globalPos0, None, Compiled,
                         qt_QWheelEvent_globalPos_QPoint_QWheelEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "globalPosF", _n_globalPosF0, None, Compiled,
                         qt_QWheelEvent_globalPosF_QPointF_QWheelEvent, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "globalX", _n_globalX0, None, Compiled,
                         qt_QWheelEvent_globalX_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "globalY", _n_globalY0, None, Compiled,
                         qt_QWheelEvent_globalY_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "phase", _n_phase0, None, Compiled,
                         qt_QWheelEvent_phase_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "pixelDelta", _n_pixelDelta0, None, Compiled,
                         qt_QWheelEvent_pixelDelta_QPoint_QWheelEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "pos", _n_pos0, None, Compiled,
                         qt_QWheelEvent_pos_QPoint_QWheelEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "posF", _n_posF0, None, Compiled,
                         qt_QWheelEvent_posF_QPointF_QWheelEvent, Return,
                         "qt.QPointF", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "source", _n_source0, None, Compiled,
                         qt_QWheelEvent_source_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "x", _n_x0, None, Compiled,
                         qt_QWheelEvent_x_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "y", _n_y0, None, Compiled,
                         qt_QWheelEvent_y_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
