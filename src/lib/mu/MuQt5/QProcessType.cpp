//
// Copyright (c) 2009, Jim Hourihan
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
#include <MuQt5/qtUtils.h>
#include <MuQt5/QProcessType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt5/QWidgetType.h>
#include <MuQt5/QActionType.h>
#include <MuQt5/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt5/QProcessEnvironmentType.h>
#include <MuQt5/QByteArrayType.h>

//
//  NOTE: this file was automatically generated by qt2mu.py
//

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QProcess::~MuQt_QProcess()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QProcess::MuQt_QProcess(Pointer muobj, const CallEnvironment* ce,
                                 QObject* parent)
        : QProcess(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QProcessType>(
            c->internName("qt.QProcess"));
    }

    bool MuQt_QProcess::atEnd() const
    {
        if (!_env)
            return QProcess::atEnd();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::atEnd();
        }
    }

    qint64 MuQt_QProcess::bytesAvailable() const
    {
        if (!_env)
            return QProcess::bytesAvailable();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int64)(rval._int64);
        }
        else
        {
            return QProcess::bytesAvailable();
        }
    }

    qint64 MuQt_QProcess::bytesToWrite() const
    {
        if (!_env)
            return QProcess::bytesToWrite();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int64)(rval._int64);
        }
        else
        {
            return QProcess::bytesToWrite();
        }
    }

    bool MuQt_QProcess::canReadLine() const
    {
        if (!_env)
            return QProcess::canReadLine();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::canReadLine();
        }
    }

    void MuQt_QProcess::close()
    {
        if (!_env)
        {
            QProcess::close();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[4];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QProcess::close();
        }
    }

    bool MuQt_QProcess::isSequential() const
    {
        if (!_env)
            return QProcess::isSequential();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[5];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::isSequential();
        }
    }

    bool MuQt_QProcess::open(OpenMode mode)
    {
        if (!_env)
            return QProcess::open(mode);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[6];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(mode);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::open(mode);
        }
    }

    bool MuQt_QProcess::waitForBytesWritten(int msecs)
    {
        if (!_env)
            return QProcess::waitForBytesWritten(msecs);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[7];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(msecs);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::waitForBytesWritten(msecs);
        }
    }

    bool MuQt_QProcess::waitForReadyRead(int msecs)
    {
        if (!_env)
            return QProcess::waitForReadyRead(msecs);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[8];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(msecs);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::waitForReadyRead(msecs);
        }
    }

    void MuQt_QProcess::setupChildProcess()
    {
        if (!_env)
        {
            QProcess::setupChildProcess();
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[9];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
        }
        else
        {
            QProcess::setupChildProcess();
        }
    }

    qint64 MuQt_QProcess::pos() const
    {
        if (!_env)
            return QProcess::pos();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[10];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int64)(rval._int64);
        }
        else
        {
            return QProcess::pos();
        }
    }

    bool MuQt_QProcess::reset()
    {
        if (!_env)
            return QProcess::reset();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[11];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::reset();
        }
    }

    bool MuQt_QProcess::seek(qint64 pos)
    {
        if (!_env)
            return QProcess::seek(pos);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[12];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(pos);
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QProcess::seek(pos);
        }
    }

    qint64 MuQt_QProcess::size() const
    {
        if (!_env)
            return QProcess::size();
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[13];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(1);
            args[0] = Value(Pointer(_obj));
            Value rval = _env->call(F, args);
            return (int64)(rval._int64);
        }
        else
        {
            return QProcess::size();
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QProcessType::QProcessType(Context* c, const char* name, Class* super,
                               Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QProcessType::~QProcessType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QProcess_QProcess_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QProcess* w = object<QProcess>(widget))
        {
            QProcessType* type =
                c->findSymbolOfTypeByQualifiedName<QProcessType>(
                    c->internName("qt.QProcess"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QProcess_QProcess_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QProcess_QProcess_QProcess_QProcess_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QProcess(param_this,
                                    NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    Pointer
    qt_QProcess_arguments_stringBSB_ESB__QProcess(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return makestringlist(c, arg0->arguments());
    }

    void qt_QProcess_closeReadChannel_void_QProcess_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_channel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QProcess::ProcessChannel arg1 =
            (QProcess::ProcessChannel)(param_channel);
        arg0->closeReadChannel(arg1);
    }

    void qt_QProcess_closeWriteChannel_void_QProcess(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        arg0->closeWriteChannel();
    }

    int qt_QProcess_error_int_QProcess(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return int(arg0->error());
    }

    int qt_QProcess_exitCode_int_QProcess(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return arg0->exitCode();
    }

    int qt_QProcess_exitStatus_int_QProcess(Mu::Thread& NODE_THREAD,
                                            Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return int(arg0->exitStatus());
    }

    int qt_QProcess_inputChannelMode_int_QProcess(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return int(arg0->inputChannelMode());
    }

    int qt_QProcess_processChannelMode_int_QProcess(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return int(arg0->processChannelMode());
    }

    Pointer qt_QProcess_processEnvironment_QProcessEnvironment_QProcess(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return makeqtype<QProcessEnvironmentType>(c, arg0->processEnvironment(),
                                                  "qt.QProcessEnvironment");
    }

    int64 qt_QProcess_processId_int64_QProcess(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return arg0->processId();
    }

    Pointer qt_QProcess_program_string_QProcess(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return makestring(c, arg0->program());
    }

    Pointer qt_QProcess_readAllStandardError_QByteArray_QProcess(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return makeqtype<QByteArrayType>(c, arg0->readAllStandardError(),
                                         "qt.QByteArray");
    }

    Pointer qt_QProcess_readAllStandardOutput_QByteArray_QProcess(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return makeqtype<QByteArrayType>(c, arg0->readAllStandardOutput(),
                                         "qt.QByteArray");
    }

    int qt_QProcess_readChannel_int_QProcess(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return int(arg0->readChannel());
    }

    void qt_QProcess_setArguments_void_QProcess_stringBSB_ESB_(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_arguments)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QStringList arg1 = qstringlist(param_arguments);
        arg0->setArguments(arg1);
    }

    void qt_QProcess_setInputChannelMode_void_QProcess_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QProcess::InputChannelMode arg1 =
            (QProcess::InputChannelMode)(param_mode);
        arg0->setInputChannelMode(arg1);
    }

    void qt_QProcess_setProcessChannelMode_void_QProcess_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QProcess::ProcessChannelMode arg1 =
            (QProcess::ProcessChannelMode)(param_mode);
        arg0->setProcessChannelMode(arg1);
    }

    void qt_QProcess_setProcessEnvironment_void_QProcess_QProcessEnvironment(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_environment)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QProcessEnvironment arg1 =
            getqtype<QProcessEnvironmentType>(param_environment);
        arg0->setProcessEnvironment(arg1);
    }

    void qt_QProcess_setProgram_void_QProcess_string(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this,
                                                     Pointer param_program)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_program);
        arg0->setProgram(arg1);
    }

    void qt_QProcess_setReadChannel_void_QProcess_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_channel)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QProcess::ProcessChannel arg1 =
            (QProcess::ProcessChannel)(param_channel);
        arg0->setReadChannel(arg1);
    }

    void qt_QProcess_setStandardErrorFile_void_QProcess_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_fileName);
        QIODevice::OpenModeFlag arg2 = (QIODevice::OpenModeFlag)(param_mode);
        arg0->setStandardErrorFile(arg1, arg2);
    }

    void qt_QProcess_setStandardInputFile_void_QProcess_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_fileName);
        arg0->setStandardInputFile(arg1);
    }

    void qt_QProcess_setStandardOutputFile_void_QProcess_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_fileName,
        int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_fileName);
        QIODevice::OpenModeFlag arg2 = (QIODevice::OpenModeFlag)(param_mode);
        arg0->setStandardOutputFile(arg1, arg2);
    }

    void qt_QProcess_setStandardOutputProcess_void_QProcess_QProcess(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_destination)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QProcess* arg1 = object<QProcess>(param_destination);
        arg0->setStandardOutputProcess(arg1);
    }

    void qt_QProcess_setWorkingDirectory_void_QProcess_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_dir)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_dir);
        arg0->setWorkingDirectory(arg1);
    }

    void qt_QProcess_start_void_QProcess_string_stringBSB_ESB__int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_program,
        Pointer param_arguments, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_program);
        const QStringList arg2 = qstringlist(param_arguments);
        QIODevice::OpenModeFlag arg3 = (QIODevice::OpenModeFlag)(param_mode);
        arg0->start(arg1, arg2, arg3);
    }

    void qt_QProcess_start_void_QProcess_string_int(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this,
                                                    Pointer param_command,
                                                    int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        const QString arg1 = qstring(param_command);
        QIODevice::OpenModeFlag arg2 = (QIODevice::OpenModeFlag)(param_mode);
        arg0->start(arg1, arg2);
    }

    void qt_QProcess_start_void_QProcess_int(Mu::Thread& NODE_THREAD,
                                             Pointer param_this, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QIODevice::OpenModeFlag arg1 = (QIODevice::OpenModeFlag)(param_mode);
        arg0->start(arg1);
    }

    int qt_QProcess_state_int_QProcess(Mu::Thread& NODE_THREAD,
                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return int(arg0->state());
    }

    bool qt_QProcess_waitForFinished_bool_QProcess_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        int arg1 = (int)(param_msecs);
        return arg0->waitForFinished(arg1);
    }

    bool qt_QProcess_waitForStarted_bool_QProcess_int(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this,
                                                      int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        int arg1 = (int)(param_msecs);
        return arg0->waitForStarted(arg1);
    }

    Pointer
    qt_QProcess_workingDirectory_string_QProcess(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return makestring(c, arg0->workingDirectory());
    }

    bool qt_QProcess_atEnd_bool_QProcess(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::atEnd() : arg0->atEnd();
    }

    int64 qt_QProcess_bytesAvailable_int64_QProcess(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::bytesAvailable()
                                  : arg0->bytesAvailable();
    }

    int64 qt_QProcess_bytesToWrite_int64_QProcess(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::bytesToWrite()
                                  : arg0->bytesToWrite();
    }

    bool qt_QProcess_canReadLine_bool_QProcess(Mu::Thread& NODE_THREAD,
                                               Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::canReadLine()
                                  : arg0->canReadLine();
    }

    void qt_QProcess_close_void_QProcess(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        if (isMuQtObject(arg0))
            arg0->QProcess::close();
        else
            arg0->close();
    }

    bool qt_QProcess_isSequential_bool_QProcess(Mu::Thread& NODE_THREAD,
                                                Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::isSequential()
                                  : arg0->isSequential();
    }

    bool qt_QProcess_open_bool_QProcess_int(Mu::Thread& NODE_THREAD,
                                            Pointer param_this, int param_mode)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QIODevice::OpenModeFlag arg1 = (QIODevice::OpenModeFlag)(param_mode);
        return isMuQtObject(arg0) ? arg0->QProcess::open(arg1)
                                  : arg0->open(arg1);
    }

    bool qt_QProcess_waitForBytesWritten_bool_QProcess_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        int arg1 = (int)(param_msecs);
        return isMuQtObject(arg0) ? arg0->QProcess::waitForBytesWritten(arg1)
                                  : arg0->waitForBytesWritten(arg1);
    }

    bool qt_QProcess_waitForReadyRead_bool_QProcess_int(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        int param_msecs)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        int arg1 = (int)(param_msecs);
        return isMuQtObject(arg0) ? arg0->QProcess::waitForReadyRead(arg1)
                                  : arg0->waitForReadyRead(arg1);
    }

    void qt_QProcess_setProcessState_void_QProcess_int(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       int param_state)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        QProcess::ProcessState arg1 = (QProcess::ProcessState)(param_state);
        ((MuQt_QProcess*)arg0)->setProcessState_pub(arg1);
    }

    void qt_QProcess_setupChildProcess_void_QProcess(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        if (isMuQtObject(arg0))
            ((MuQt_QProcess*)arg0)->setupChildProcess_pub_parent();
        else
            ((MuQt_QProcess*)arg0)->setupChildProcess_pub();
    }

    int64 qt_QProcess_pos_int64_QProcess(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::pos() : arg0->pos();
    }

    bool qt_QProcess_reset_bool_QProcess(Mu::Thread& NODE_THREAD,
                                         Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::reset() : arg0->reset();
    }

    bool qt_QProcess_seek_bool_QProcess_int64(Mu::Thread& NODE_THREAD,
                                              Pointer param_this,
                                              int64 param_pos)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        qint64 arg1 = (int64)(param_pos);
        return isMuQtObject(arg0) ? arg0->QProcess::seek(arg1)
                                  : arg0->seek(arg1);
    }

    int64 qt_QProcess_size_int64_QProcess(Mu::Thread& NODE_THREAD,
                                          Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QProcess* arg0 = object<QProcess>(param_this);
        return isMuQtObject(arg0) ? arg0->QProcess::size() : arg0->size();
    }

    int qt_QProcess_execute_int_string_stringBSB_ESB_(Mu::Thread& NODE_THREAD,
                                                      Pointer param_program,
                                                      Pointer param_arguments)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_program);
        const QStringList arg1 = qstringlist(param_arguments);
        return QProcess::execute(arg0, arg1);
    }

    int qt_QProcess_execute_int_string(Mu::Thread& NODE_THREAD,
                                       Pointer param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_command);
        return QProcess::execute(arg0);
    }

    Pointer qt_QProcess_nullDevice_string(Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makestring(c, QProcess::nullDevice());
    }

    bool qt_QProcess_startDetached_bool_string(Mu::Thread& NODE_THREAD,
                                               Pointer param_command)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_command);
        return QProcess::startDetached(arg0);
    }

    Pointer
    qt_QProcess_systemEnvironment_stringBSB_ESB_(Mu::Thread& NODE_THREAD)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        return makestringlist(c, QProcess::systemEnvironment());
    }

    static NODE_IMPLEMENTATION(_n_QProcess0, Pointer)
    {
        NODE_RETURN(qt_QProcess_QProcess_QProcess_QProcess_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_arguments0, Pointer)
    {
        NODE_RETURN(qt_QProcess_arguments_stringBSB_ESB__QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_closeReadChannel0, void)
    {
        qt_QProcess_closeReadChannel_void_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_closeWriteChannel0, void)
    {
        qt_QProcess_closeWriteChannel_void_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_error0, int)
    {
        NODE_RETURN(qt_QProcess_error_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_exitCode0, int)
    {
        NODE_RETURN(qt_QProcess_exitCode_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_exitStatus0, int)
    {
        NODE_RETURN(qt_QProcess_exitStatus_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inputChannelMode0, int)
    {
        NODE_RETURN(qt_QProcess_inputChannelMode_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_processChannelMode0, int)
    {
        NODE_RETURN(qt_QProcess_processChannelMode_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_processEnvironment0, Pointer)
    {
        NODE_RETURN(qt_QProcess_processEnvironment_QProcessEnvironment_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_processId0, int64)
    {
        NODE_RETURN(qt_QProcess_processId_int64_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_program0, Pointer)
    {
        NODE_RETURN(qt_QProcess_program_string_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_readAllStandardError0, Pointer)
    {
        NODE_RETURN(qt_QProcess_readAllStandardError_QByteArray_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_readAllStandardOutput0, Pointer)
    {
        NODE_RETURN(qt_QProcess_readAllStandardOutput_QByteArray_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_readChannel0, int)
    {
        NODE_RETURN(qt_QProcess_readChannel_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setArguments0, void)
    {
        qt_QProcess_setArguments_void_QProcess_stringBSB_ESB_(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setInputChannelMode0, void)
    {
        qt_QProcess_setInputChannelMode_void_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setProcessChannelMode0, void)
    {
        qt_QProcess_setProcessChannelMode_void_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setProcessEnvironment0, void)
    {
        qt_QProcess_setProcessEnvironment_void_QProcess_QProcessEnvironment(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setProgram0, void)
    {
        qt_QProcess_setProgram_void_QProcess_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setReadChannel0, void)
    {
        qt_QProcess_setReadChannel_void_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setStandardErrorFile0, void)
    {
        qt_QProcess_setStandardErrorFile_void_QProcess_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setStandardInputFile0, void)
    {
        qt_QProcess_setStandardInputFile_void_QProcess_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setStandardOutputFile0, void)
    {
        qt_QProcess_setStandardOutputFile_void_QProcess_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_setStandardOutputProcess0, void)
    {
        qt_QProcess_setStandardOutputProcess_void_QProcess_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setWorkingDirectory0, void)
    {
        qt_QProcess_setWorkingDirectory_void_QProcess_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_start0, void)
    {
        qt_QProcess_start_void_QProcess_string_stringBSB_ESB__int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer), NODE_ARG(3, int));
    }

    static NODE_IMPLEMENTATION(_n_start1, void)
    {
        qt_QProcess_start_void_QProcess_string_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, int));
    }

    static NODE_IMPLEMENTATION(_n_start2, void)
    {
        qt_QProcess_start_void_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_state0, int)
    {
        NODE_RETURN(qt_QProcess_state_int_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_waitForFinished0, bool)
    {
        NODE_RETURN(qt_QProcess_waitForFinished_bool_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForStarted0, bool)
    {
        NODE_RETURN(qt_QProcess_waitForStarted_bool_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_workingDirectory0, Pointer)
    {
        NODE_RETURN(qt_QProcess_workingDirectory_string_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_atEnd0, bool)
    {
        NODE_RETURN(qt_QProcess_atEnd_bool_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesAvailable0, int64)
    {
        NODE_RETURN(qt_QProcess_bytesAvailable_int64_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_bytesToWrite0, int64)
    {
        NODE_RETURN(qt_QProcess_bytesToWrite_int64_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_canReadLine0, bool)
    {
        NODE_RETURN(qt_QProcess_canReadLine_bool_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_close0, void)
    {
        qt_QProcess_close_void_QProcess(NODE_THREAD,
                                        NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_isSequential0, bool)
    {
        NODE_RETURN(qt_QProcess_isSequential_bool_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_open0, bool)
    {
        NODE_RETURN(qt_QProcess_open_bool_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForBytesWritten0, bool)
    {
        NODE_RETURN(qt_QProcess_waitForBytesWritten_bool_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_waitForReadyRead0, bool)
    {
        NODE_RETURN(qt_QProcess_waitForReadyRead_bool_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    static NODE_IMPLEMENTATION(_n_setProcessState0, void)
    {
        qt_QProcess_setProcessState_void_QProcess_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_setupChildProcess0, void)
    {
        qt_QProcess_setupChildProcess_void_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_pos0, int64)
    {
        NODE_RETURN(qt_QProcess_pos_int64_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_reset0, bool)
    {
        NODE_RETURN(qt_QProcess_reset_bool_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_seek0, bool)
    {
        NODE_RETURN(qt_QProcess_seek_bool_QProcess_int64(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int64)));
    }

    static NODE_IMPLEMENTATION(_n_size0, int64)
    {
        NODE_RETURN(qt_QProcess_size_int64_QProcess(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_execute0, int)
    {
        NODE_RETURN(qt_QProcess_execute_int_string_stringBSB_ESB_(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_execute1, int)
    {
        NODE_RETURN(
            qt_QProcess_execute_int_string(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_nullDevice0, Pointer)
    {
        NODE_RETURN(qt_QProcess_nullDevice_string(NODE_THREAD));
    }

    static NODE_IMPLEMENTATION(_n_startDetached1, bool)
    {
        NODE_RETURN(qt_QProcess_startDetached_bool_string(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_systemEnvironment0, Pointer)
    {
        NODE_RETURN(qt_QProcess_systemEnvironment_stringBSB_ESB_(NODE_THREAD));
    }

    void QProcessType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QProcess_QProcess_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            new Alias(c, "ExitStatus", "int"),
            new SymbolicConstant(c, "NormalExit", "int",
                                 Value(int(QProcess::NormalExit))),
            new SymbolicConstant(c, "CrashExit", "int",
                                 Value(int(QProcess::CrashExit))),
            new Alias(c, "ProcessChannel", "int"),
            new SymbolicConstant(c, "StandardOutput", "int",
                                 Value(int(QProcess::StandardOutput))),
            new SymbolicConstant(c, "StandardError", "int",
                                 Value(int(QProcess::StandardError))),
            new Alias(c, "ProcessChannelMode", "int"),
            new SymbolicConstant(c, "SeparateChannels", "int",
                                 Value(int(QProcess::SeparateChannels))),
            new SymbolicConstant(c, "MergedChannels", "int",
                                 Value(int(QProcess::MergedChannels))),
            new SymbolicConstant(c, "ForwardedChannels", "int",
                                 Value(int(QProcess::ForwardedChannels))),
            new SymbolicConstant(c, "ForwardedErrorChannel", "int",
                                 Value(int(QProcess::ForwardedErrorChannel))),
            new SymbolicConstant(c, "ForwardedOutputChannel", "int",
                                 Value(int(QProcess::ForwardedOutputChannel))),
            new Alias(c, "ProcessError", "int"),
            new SymbolicConstant(c, "FailedToStart", "int",
                                 Value(int(QProcess::FailedToStart))),
            new SymbolicConstant(c, "Crashed", "int",
                                 Value(int(QProcess::Crashed))),
            new SymbolicConstant(c, "Timedout", "int",
                                 Value(int(QProcess::Timedout))),
            new SymbolicConstant(c, "WriteError", "int",
                                 Value(int(QProcess::WriteError))),
            new SymbolicConstant(c, "ReadError", "int",
                                 Value(int(QProcess::ReadError))),
            new SymbolicConstant(c, "UnknownError", "int",
                                 Value(int(QProcess::UnknownError))),
            new Alias(c, "ProcessState", "int"),
            new SymbolicConstant(c, "NotRunning", "int",
                                 Value(int(QProcess::NotRunning))),
            new SymbolicConstant(c, "Starting", "int",
                                 Value(int(QProcess::Starting))),
            new SymbolicConstant(c, "Running", "int",
                                 Value(int(QProcess::Running))),
            // member functions
            new Function(c, "QProcess", _n_QProcess0, None, Compiled,
                         qt_QProcess_QProcess_QProcess_QProcess_QObject, Return,
                         "qt.QProcess", Parameters,
                         new Param(c, "this", "qt.QProcess"),
                         new Param(c, "parent", "qt.QObject"), End),
            new Function(c, "arguments", _n_arguments0, None, Compiled,
                         qt_QProcess_arguments_stringBSB_ESB__QProcess, Return,
                         "string[]", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            new Function(
                c, "closeReadChannel", _n_closeReadChannel0, None, Compiled,
                qt_QProcess_closeReadChannel_void_QProcess_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "channel", "int"), End),
            new Function(c, "closeWriteChannel", _n_closeWriteChannel0, None,
                         Compiled, qt_QProcess_closeWriteChannel_void_QProcess,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "error", _n_error0, None, Compiled,
                         qt_QProcess_error_int_QProcess, Return, "int",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "exitCode", _n_exitCode0, None, Compiled,
                         qt_QProcess_exitCode_int_QProcess, Return, "int",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "exitStatus", _n_exitStatus0, None, Compiled,
                         qt_QProcess_exitStatus_int_QProcess, Return, "int",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "inputChannelMode", _n_inputChannelMode0, None,
                         Compiled, qt_QProcess_inputChannelMode_int_QProcess,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "processChannelMode", _n_processChannelMode0, None,
                         Compiled, qt_QProcess_processChannelMode_int_QProcess,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            new Function(
                c, "processEnvironment", _n_processEnvironment0, None, Compiled,
                qt_QProcess_processEnvironment_QProcessEnvironment_QProcess,
                Return, "qt.QProcessEnvironment", Parameters,
                new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "processId", _n_processId0, None, Compiled,
                         qt_QProcess_processId_int64_QProcess, Return, "int64",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "program", _n_program0, None, Compiled,
                         qt_QProcess_program_string_QProcess, Return, "string",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "readAllStandardError", _n_readAllStandardError0,
                         None, Compiled,
                         qt_QProcess_readAllStandardError_QByteArray_QProcess,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "readAllStandardOutput", _n_readAllStandardOutput0,
                         None, Compiled,
                         qt_QProcess_readAllStandardOutput_QByteArray_QProcess,
                         Return, "qt.QByteArray", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "readChannel", _n_readChannel0, None, Compiled,
                         qt_QProcess_readChannel_int_QProcess, Return, "int",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(c, "setArguments", _n_setArguments0, None, Compiled,
                         qt_QProcess_setArguments_void_QProcess_stringBSB_ESB_,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QProcess"),
                         new Param(c, "arguments", "string[]"), End),
            new Function(
                c, "setInputChannelMode", _n_setInputChannelMode0, None,
                Compiled, qt_QProcess_setInputChannelMode_void_QProcess_int,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "mode", "int"), End),
            new Function(
                c, "setProcessChannelMode", _n_setProcessChannelMode0, None,
                Compiled, qt_QProcess_setProcessChannelMode_void_QProcess_int,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "mode", "int"), End),
            new Function(
                c, "setProcessEnvironment", _n_setProcessEnvironment0, None,
                Compiled,
                qt_QProcess_setProcessEnvironment_void_QProcess_QProcessEnvironment,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "environment", "qt.QProcessEnvironment"), End),
            new Function(c, "setProgram", _n_setProgram0, None, Compiled,
                         qt_QProcess_setProgram_void_QProcess_string, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QProcess"),
                         new Param(c, "program", "string"), End),
            new Function(c, "setReadChannel", _n_setReadChannel0, None,
                         Compiled, qt_QProcess_setReadChannel_void_QProcess_int,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QProcess"),
                         new Param(c, "channel", "int"), End),
            new Function(
                c, "setStandardErrorFile", _n_setStandardErrorFile0, None,
                Compiled,
                qt_QProcess_setStandardErrorFile_void_QProcess_string_int,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "fileName", "string"),
                new Param(c, "mode", "int", Value((int)QIODevice::Truncate)),
                End),
            new Function(
                c, "setStandardInputFile", _n_setStandardInputFile0, None,
                Compiled, qt_QProcess_setStandardInputFile_void_QProcess_string,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "fileName", "string"), End),
            new Function(
                c, "setStandardOutputFile", _n_setStandardOutputFile0, None,
                Compiled,
                qt_QProcess_setStandardOutputFile_void_QProcess_string_int,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "fileName", "string"),
                new Param(c, "mode", "int", Value((int)QIODevice::Truncate)),
                End),
            new Function(
                c, "setStandardOutputProcess", _n_setStandardOutputProcess0,
                None, Compiled,
                qt_QProcess_setStandardOutputProcess_void_QProcess_QProcess,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "destination", "qt.QProcess"), End),
            new Function(
                c, "setWorkingDirectory", _n_setWorkingDirectory0, None,
                Compiled, qt_QProcess_setWorkingDirectory_void_QProcess_string,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "dir", "string"), End),
            new Function(
                c, "start", _n_start0, None, Compiled,
                qt_QProcess_start_void_QProcess_string_stringBSB_ESB__int,
                Return, "void", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "program", "string"),
                new Param(c, "arguments", "string[]"),
                new Param(c, "mode", "int", Value((int)QIODevice::ReadWrite)),
                End),
            new Function(
                c, "start", _n_start1, None, Compiled,
                qt_QProcess_start_void_QProcess_string_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "command", "string"),
                new Param(c, "mode", "int", Value((int)QIODevice::ReadWrite)),
                End),
            new Function(
                c, "start", _n_start2, None, Compiled,
                qt_QProcess_start_void_QProcess_int, Return, "void", Parameters,
                new Param(c, "this", "qt.QProcess"),
                new Param(c, "mode", "int", Value((int)QIODevice::ReadWrite)),
                End),
            new Function(c, "state", _n_state0, None, Compiled,
                         qt_QProcess_state_int_QProcess, Return, "int",
                         Parameters, new Param(c, "this", "qt.QProcess"), End),
            new Function(
                c, "waitForFinished", _n_waitForFinished0, None, Compiled,
                qt_QProcess_waitForFinished_bool_QProcess_int, Return, "bool",
                Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            new Function(c, "waitForStarted", _n_waitForStarted0, None,
                         Compiled, qt_QProcess_waitForStarted_bool_QProcess_int,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QProcess"),
                         new Param(c, "msecs", "int", Value((int)30000)), End),
            new Function(c, "workingDirectory", _n_workingDirectory0, None,
                         Compiled, qt_QProcess_workingDirectory_string_QProcess,
                         Return, "string", Parameters,
                         new Param(c, "this", "qt.QProcess"), End),
            _func[0] = new MemberFunction(
                c, "atEnd", _n_atEnd0, None, Compiled,
                qt_QProcess_atEnd_bool_QProcess, Return, "bool", Parameters,
                new Param(c, "this", "qt.QProcess"), End),
            _func[1] = new MemberFunction(
                c, "bytesAvailable", _n_bytesAvailable0, None, Compiled,
                qt_QProcess_bytesAvailable_int64_QProcess, Return, "int64",
                Parameters, new Param(c, "this", "qt.QProcess"), End),
            _func[2] = new MemberFunction(
                c, "bytesToWrite", _n_bytesToWrite0, None, Compiled,
                qt_QProcess_bytesToWrite_int64_QProcess, Return, "int64",
                Parameters, new Param(c, "this", "qt.QProcess"), End),
            _func[3] = new MemberFunction(
                c, "canReadLine", _n_canReadLine0, None, Compiled,
                qt_QProcess_canReadLine_bool_QProcess, Return, "bool",
                Parameters, new Param(c, "this", "qt.QProcess"), End),
            _func[4] = new MemberFunction(
                c, "close", _n_close0, None, Compiled,
                qt_QProcess_close_void_QProcess, Return, "void", Parameters,
                new Param(c, "this", "qt.QProcess"), End),
            _func[5] = new MemberFunction(
                c, "isSequential", _n_isSequential0, None, Compiled,
                qt_QProcess_isSequential_bool_QProcess, Return, "bool",
                Parameters, new Param(c, "this", "qt.QProcess"), End),
            _func[6] = new MemberFunction(
                c, "open", _n_open0, None, Compiled,
                qt_QProcess_open_bool_QProcess_int, Return, "bool", Parameters,
                new Param(c, "this", "qt.QProcess"),
                new Param(c, "mode", "int", Value((int)QIODevice::ReadWrite)),
                End),
            _func[7] = new MemberFunction(
                c, "waitForBytesWritten", _n_waitForBytesWritten0, None,
                Compiled, qt_QProcess_waitForBytesWritten_bool_QProcess_int,
                Return, "bool", Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            _func[8] = new MemberFunction(
                c, "waitForReadyRead", _n_waitForReadyRead0, None, Compiled,
                qt_QProcess_waitForReadyRead_bool_QProcess_int, Return, "bool",
                Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "msecs", "int", Value((int)30000)), End),
            new Function(
                c, "setProcessState", _n_setProcessState0, None, Compiled,
                qt_QProcess_setProcessState_void_QProcess_int, Return, "void",
                Parameters, new Param(c, "this", "qt.QProcess"),
                new Param(c, "state", "int"), End),
            _func[9] = new MemberFunction(
                c, "setupChildProcess", _n_setupChildProcess0, None, Compiled,
                qt_QProcess_setupChildProcess_void_QProcess, Return, "void",
                Parameters, new Param(c, "this", "qt.QProcess"), End),
            // MISSING: readData (int64; QProcess this, "char *" data, int64
            // maxlen) // protected MISSING: writeData (int64; QProcess this,
            // "const char *" data, int64 len) // protected
            _func[10] = new MemberFunction(
                c, "pos", _n_pos0, None, Compiled,
                qt_QProcess_pos_int64_QProcess, Return, "int64", Parameters,
                new Param(c, "this", "qt.QProcess"), End),
            _func[11] = new MemberFunction(
                c, "reset", _n_reset0, None, Compiled,
                qt_QProcess_reset_bool_QProcess, Return, "bool", Parameters,
                new Param(c, "this", "qt.QProcess"), End),
            _func[12] = new MemberFunction(c, "seek", _n_seek0, None, Compiled,
                                           qt_QProcess_seek_bool_QProcess_int64,
                                           Return, "bool", Parameters,
                                           new Param(c, "this", "qt.QProcess"),
                                           new Param(c, "pos", "int64"), End),
            _func[13] = new MemberFunction(
                c, "size", _n_size0, None, Compiled,
                qt_QProcess_size_int64_QProcess, Return, "int64", Parameters,
                new Param(c, "this", "qt.QProcess"), End),
            // MISSING: readLineData (int64; QProcess this, "char *" data, int64
            // maxSize) // protected static functions
            new Function(c, "execute", _n_execute0, None, Compiled,
                         qt_QProcess_execute_int_string_stringBSB_ESB_, Return,
                         "int", Parameters, new Param(c, "program", "string"),
                         new Param(c, "arguments", "string[]"), End),
            new Function(c, "execute", _n_execute1, None, Compiled,
                         qt_QProcess_execute_int_string, Return, "int",
                         Parameters, new Param(c, "command", "string"), End),
            new Function(c, "nullDevice", _n_nullDevice0, None, Compiled,
                         qt_QProcess_nullDevice_string, Return, "string", End),
            // MISSING: startDetached (bool; string program, string[] arguments,
            // string workingDirectory, "qint64 *" pid)
            new Function(c, "startDetached", _n_startDetached1, None, Compiled,
                         qt_QProcess_startDetached_bool_string, Return, "bool",
                         Parameters, new Param(c, "command", "string"), End),
            new Function(c, "systemEnvironment", _n_systemEnvironment0, None,
                         Compiled, qt_QProcess_systemEnvironment_stringBSB_ESB_,
                         Return, "string[]", End),
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QProcess::staticMetaObject, propExclusions);
    }

} // namespace Mu
