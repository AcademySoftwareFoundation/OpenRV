//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QJSEngineType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt6/QTimerEventType.h>
#include <MuQt6/QObjectType.h>
#include <MuQt6/QEventType.h>

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION

    // destructor
    MuQt_QJSEngine::~MuQt_QJSEngine()
    {
        if (_obj)
        {
            *_obj->data<Pointer>() = Pointer(0);
            _obj->releaseExternal();
        }
        _obj = 0;
        _env = 0;
        _baseType = 0;
    }

    MuQt_QJSEngine::MuQt_QJSEngine(Pointer muobj, const CallEnvironment* ce)
        : QJSEngine()
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QJSEngineType>(
            c->internName("qt.QJSEngine"));
    }

    MuQt_QJSEngine::MuQt_QJSEngine(Pointer muobj, const CallEnvironment* ce,
                                   QObject* parent)
        : QJSEngine(parent)
    {
        _env = ce;
        _obj = reinterpret_cast<ClassInstance*>(muobj);
        _obj->retainExternal();
        MuLangContext* c = (MuLangContext*)_env->context();
        _baseType = c->findSymbolOfTypeByQualifiedName<QJSEngineType>(
            c->internName("qt.QJSEngine"));
    }

    bool MuQt_QJSEngine::event(QEvent* e)
    {
        if (!_env)
            return QJSEngine::event(e);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[0];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, e, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QJSEngine::event(e);
        }
    }

    bool MuQt_QJSEngine::eventFilter(QObject* watched, QEvent* event)
    {
        if (!_env)
            return QJSEngine::eventFilter(watched, event);
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[1];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(3);
            args[0] = Value(Pointer(_obj));
            args[1] =
                Value(makeinstance<QObjectType>(c, watched, "qt.QObject"));
            args[2] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
            return (bool)(rval._bool);
        }
        else
        {
            return QJSEngine::eventFilter(watched, event);
        }
    }

    void MuQt_QJSEngine::customEvent(QEvent* event)
    {
        if (!_env)
        {
            QJSEngine::customEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[2];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(makeqpointer<QEventType>(c, event, "qt.QEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QJSEngine::customEvent(event);
        }
    }

    void MuQt_QJSEngine::timerEvent(QTimerEvent* event)
    {
        if (!_env)
        {
            QJSEngine::timerEvent(event);
            return;
        }
        MuLangContext* c = (MuLangContext*)_env->context();
        const MemberFunction* F0 = _baseType->_func[3];
        const MemberFunction* F = _obj->classType()->dynamicLookup(F0);
        if (F != F0)
        {
            Function::ArgumentVector args(2);
            args[0] = Value(Pointer(_obj));
            args[1] = Value(
                makeqpointer<QTimerEventType>(c, event, "qt.QTimerEvent"));
            Value rval = _env->call(F, args);
        }
        else
        {
            QJSEngine::timerEvent(event);
        }
    }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    QJSEngineType::QJSEngineType(Context* c, const char* name, Class* super,
                                 Class* super2)
        : Class(c, name, vectorOf2(super, super2))
    {
    }

    QJSEngineType::~QJSEngineType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    static Pointer QJSEngine_QJSEngine_QObject(Thread& NODE_THREAD, Pointer obj)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        ClassInstance* widget = reinterpret_cast<ClassInstance*>(obj);

        if (!widget)
        {
            return 0;
        }
        else if (QJSEngine* w = object<QJSEngine>(widget))
        {
            QJSEngineType* type =
                c->findSymbolOfTypeByQualifiedName<QJSEngineType>(
                    c->internName("qt.QJSEngine"), false);
            ClassInstance* o = ClassInstance::allocate(type);
            setobject(o, w);
            return o;
        }
        else
        {
            throw BadCastException();
        }
    }

    static NODE_IMPLEMENTATION(castFromObject, Pointer)
    {
        NODE_RETURN(
            QJSEngine_QJSEngine_QObject(NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    Pointer qt_QJSEngine_QJSEngine_QJSEngine_QJSEngine(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setobject(
            param_this,
            new MuQt_QJSEngine(param_this, NODE_THREAD.process()->callEnv()));
        return param_this;
    }

    Pointer qt_QJSEngine_QJSEngine_QJSEngine_QJSEngine_QObject(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_parent)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg1 = object<QObject>(param_parent);
        setobject(param_this,
                  new MuQt_QJSEngine(param_this,
                                     NODE_THREAD.process()->callEnv(), arg1));
        return param_this;
    }

    void qt_QJSEngine_collectGarbage_void_QJSEngine(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        arg0->collectGarbage();
    }

    bool qt_QJSEngine_hasError_bool_QJSEngine(Mu::Thread& NODE_THREAD,
                                              Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        return arg0->hasError();
    }

    bool qt_QJSEngine_isInterrupted_bool_QJSEngine(Mu::Thread& NODE_THREAD,
                                                   Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        return arg0->isInterrupted();
    }

    void qt_QJSEngine_setInterrupted_void_QJSEngine_bool(
        Mu::Thread& NODE_THREAD, Pointer param_this, bool param_interrupted)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        bool arg1 = (bool)(param_interrupted);
        arg0->setInterrupted(arg1);
    }

    void qt_QJSEngine_throwError_void_QJSEngine_string(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this,
                                                       Pointer param_message)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        const QString arg1 = qstring(param_message);
        arg0->throwError(arg1);
    }

    void qt_QJSEngine_throwError_void_QJSEngine_int_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_errorType,
        Pointer param_message)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        QJSValue::ErrorType arg1 = (QJSValue::ErrorType)(param_errorType);
        const QString arg2 = qstring(param_message);
        arg0->throwError(arg1, arg2);
    }

    bool qt_QJSEngine_event_bool_QJSEngine_QEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this,
                                                  Pointer param_e)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_e);
        return isMuQtObject(arg0) ? arg0->QJSEngine::event(arg1)
                                  : arg0->event(arg1);
    }

    bool qt_QJSEngine_eventFilter_bool_QJSEngine_QObject_QEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_watched,
        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        QObject* arg1 = object<QObject>(param_watched);
        QEvent* arg2 = getqpointer<QEventType>(param_event);
        return isMuQtObject(arg0) ? arg0->QJSEngine::eventFilter(arg1, arg2)
                                  : arg0->eventFilter(arg1, arg2);
    }

    void qt_QJSEngine_customEvent_void_QJSEngine_QEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this,
                                                        Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        QEvent* arg1 = getqpointer<QEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QJSEngine*)arg0)->customEvent_pub_parent(arg1);
        else
            ((MuQt_QJSEngine*)arg0)->customEvent_pub(arg1);
    }

    void qt_QJSEngine_timerEvent_void_QJSEngine_QTimerEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_event)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QJSEngine* arg0 = object<QJSEngine>(param_this);
        QTimerEvent* arg1 = getqpointer<QTimerEventType>(param_event);
        if (isMuQtObject(arg0))
            ((MuQt_QJSEngine*)arg0)->timerEvent_pub_parent(arg1);
        else
            ((MuQt_QJSEngine*)arg0)->timerEvent_pub(arg1);
    }

    int qt_QJSEngine_objectOwnership_int_QObject(Mu::Thread& NODE_THREAD,
                                                 Pointer param_object)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg0 = object<QObject>(param_object);
        return int(QJSEngine::objectOwnership(arg0));
    }

    void qt_QJSEngine_setObjectOwnership_void_QObject_int(
        Mu::Thread& NODE_THREAD, Pointer param_object, int param_ownership)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QObject* arg0 = object<QObject>(param_object);
        QJSEngine::ObjectOwnership arg1 =
            (QJSEngine::ObjectOwnership)(param_ownership);
        QJSEngine::setObjectOwnership(arg0, arg1);
    }

    static NODE_IMPLEMENTATION(_n_QJSEngine0, Pointer)
    {
        NODE_RETURN(qt_QJSEngine_QJSEngine_QJSEngine_QJSEngine(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QJSEngine1, Pointer)
    {
        NODE_RETURN(qt_QJSEngine_QJSEngine_QJSEngine_QJSEngine_QObject(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_collectGarbage0, void)
    {
        qt_QJSEngine_collectGarbage_void_QJSEngine(NODE_THREAD,
                                                   NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_hasError0, bool)
    {
        NODE_RETURN(qt_QJSEngine_hasError_bool_QJSEngine(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isInterrupted0, bool)
    {
        NODE_RETURN(qt_QJSEngine_isInterrupted_bool_QJSEngine(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setInterrupted0, void)
    {
        qt_QJSEngine_setInterrupted_void_QJSEngine_bool(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, bool));
    }

    static NODE_IMPLEMENTATION(_n_throwError0, void)
    {
        qt_QJSEngine_throwError_void_QJSEngine_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_throwError1, void)
    {
        qt_QJSEngine_throwError_void_QJSEngine_int_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int),
            NODE_ARG(2, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_event0, bool)
    {
        NODE_RETURN(qt_QJSEngine_event_bool_QJSEngine_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_eventFilter0, bool)
    {
        NODE_RETURN(qt_QJSEngine_eventFilter_bool_QJSEngine_QObject_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
            NODE_ARG(2, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_customEvent0, void)
    {
        qt_QJSEngine_customEvent_void_QJSEngine_QEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_timerEvent0, void)
    {
        qt_QJSEngine_timerEvent_void_QJSEngine_QTimerEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_objectOwnership0, int)
    {
        NODE_RETURN(qt_QJSEngine_objectOwnership_int_QObject(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setObjectOwnership0, void)
    {
        qt_QJSEngine_setObjectOwnership_void_QObject_int(
            NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    void QJSEngineType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new Function(c, tn, castFromObject, Cast, Compiled,
                                QJSEngine_QJSEngine_QObject, Return, ftn,
                                Parameters,
                                new Param(c, "object", "qt.QObject"), End),

                   EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "QJSEngine", _n_QJSEngine0, None, Compiled,
                         qt_QJSEngine_QJSEngine_QJSEngine_QJSEngine, Return,
                         "qt.QJSEngine", Parameters,
                         new Param(c, "this", "qt.QJSEngine"), End),
            new Function(c, "QJSEngine", _n_QJSEngine1, None, Compiled,
                         qt_QJSEngine_QJSEngine_QJSEngine_QJSEngine_QObject,
                         Return, "qt.QJSEngine", Parameters,
                         new Param(c, "this", "qt.QJSEngine"),
                         new Param(c, "parent", "qt.QObject"), End),
            // MISSING: catchError ("QJSValue"; QJSEngine this)
            // MISSING: coerceValue ("To"; QJSEngine this, "const From &" from)
            new Function(c, "collectGarbage", _n_collectGarbage0, None,
                         Compiled, qt_QJSEngine_collectGarbage_void_QJSEngine,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QJSEngine"), End),
            // MISSING: evaluate ("QJSValue"; QJSEngine this, string program,
            // string fileName, int lineNumber, string[] exceptionStackTrace)
            // MISSING: fromManagedValue ("T"; QJSEngine this, "const
            // QJSManagedValue &" value) MISSING: fromPrimitiveValue ("T";
            // QJSEngine this, "const QJSPrimitiveValue &" value) MISSING:
            // fromScriptValue ("T"; QJSEngine this, "const QJSValue &" value)
            // MISSING: fromVariant ("T"; QJSEngine this, QVariant value)
            // MISSING: globalObject ("QJSValue"; QJSEngine this)
            new Function(c, "hasError", _n_hasError0, None, Compiled,
                         qt_QJSEngine_hasError_bool_QJSEngine, Return, "bool",
                         Parameters, new Param(c, "this", "qt.QJSEngine"), End),
            // MISSING: importModule ("QJSValue"; QJSEngine this, string
            // fileName) MISSING: installExtensions (void; QJSEngine this, flags
            // QJSEngine::Extensions extensions, "const QJSValue &" object)
            new Function(c, "isInterrupted", _n_isInterrupted0, None, Compiled,
                         qt_QJSEngine_isInterrupted_bool_QJSEngine, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QJSEngine"), End),
            // MISSING: newArray ("QJSValue"; QJSEngine this, int length)
            // MISSING: newErrorObject ("QJSValue"; QJSEngine this, flags
            // QJSValue::ErrorType errorType, string message) MISSING: newObject
            // ("QJSValue"; QJSEngine this) MISSING: newQMetaObject ("QJSValue";
            // QJSEngine this, "const QMetaObject *" metaObject) MISSING:
            // newQMetaObject ("QJSValue"; QJSEngine this) MISSING: newQObject
            // ("QJSValue"; QJSEngine this, QObject object) MISSING: newSymbol
            // ("QJSValue"; QJSEngine this, string name) MISSING: registerModule
            // (bool; QJSEngine this, string moduleName, "const QJSValue &"
            // value)
            new Function(
                c, "setInterrupted", _n_setInterrupted0, None, Compiled,
                qt_QJSEngine_setInterrupted_void_QJSEngine_bool, Return, "void",
                Parameters, new Param(c, "this", "qt.QJSEngine"),
                new Param(c, "interrupted", "bool"), End),
            // PROP: setUiLanguage (void; QJSEngine this, string language)
            new Function(c, "throwError", _n_throwError0, None, Compiled,
                         qt_QJSEngine_throwError_void_QJSEngine_string, Return,
                         "void", Parameters,
                         new Param(c, "this", "qt.QJSEngine"),
                         new Param(c, "message", "string"), End),
            new Function(c, "throwError", _n_throwError1, None, Compiled,
                         qt_QJSEngine_throwError_void_QJSEngine_int_string,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QJSEngine"),
                         new Param(c, "errorType", "int"),
                         new Param(c, "message", "string"), End),
            // MISSING: throwError (void; QJSEngine this, "const QJSValue &"
            // error) MISSING: toManagedValue ("QJSManagedValue"; QJSEngine
            // this, "const T &" value) MISSING: toPrimitiveValue
            // ("QJSPrimitiveValue"; QJSEngine this, "const T &" value) MISSING:
            // toScriptValue ("QJSValue"; QJSEngine this, "const T &" value)
            // PROP: uiLanguage (string; QJSEngine this)
            _func[0] = new MemberFunction(
                c, "event", _n_event0, None, Compiled,
                qt_QJSEngine_event_bool_QJSEngine_QEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QJSEngine"),
                new Param(c, "e", "qt.QEvent"), End),
            _func[1] = new MemberFunction(
                c, "eventFilter", _n_eventFilter0, None, Compiled,
                qt_QJSEngine_eventFilter_bool_QJSEngine_QObject_QEvent, Return,
                "bool", Parameters, new Param(c, "this", "qt.QJSEngine"),
                new Param(c, "watched", "qt.QObject"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: metaObject ("const QMetaObject *"; QJSEngine this)
            // MISSING: childEvent (void; QJSEngine this, "QChildEvent *" event)
            // // protected MISSING: connectNotify (void; QJSEngine this, "const
            // QMetaMethod &" signal) // protected
            _func[2] = new MemberFunction(
                c, "customEvent", _n_customEvent0, None, Compiled,
                qt_QJSEngine_customEvent_void_QJSEngine_QEvent, Return, "void",
                Parameters, new Param(c, "this", "qt.QJSEngine"),
                new Param(c, "event", "qt.QEvent"), End),
            // MISSING: disconnectNotify (void; QJSEngine this, "const
            // QMetaMethod &" signal) // protected
            _func[3] = new MemberFunction(
                c, "timerEvent", _n_timerEvent0, None, Compiled,
                qt_QJSEngine_timerEvent_void_QJSEngine_QTimerEvent, Return,
                "void", Parameters, new Param(c, "this", "qt.QJSEngine"),
                new Param(c, "event", "qt.QTimerEvent"), End),
            // static functions
            new Function(c, "objectOwnership", _n_objectOwnership0, None,
                         Compiled, qt_QJSEngine_objectOwnership_int_QObject,
                         Return, "int", Parameters,
                         new Param(c, "object", "qt.QObject"), End),
            new Function(
                c, "setObjectOwnership", _n_setObjectOwnership0, None, Compiled,
                qt_QJSEngine_setObjectOwnership_void_QObject_int, Return,
                "void", Parameters, new Param(c, "object", "qt.QObject"),
                new Param(c, "ownership", "int"), End),
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);

        const char** propExclusions = 0;

        populate(this, QJSEngine::staticMetaObject, propExclusions);
    }

} // namespace Mu
