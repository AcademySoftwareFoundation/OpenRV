//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the qt2mu.py script.
//            If it is not possible, manual editing is ok but it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QGenericMatrixType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>

namespace Mu {
using namespace std;

QGenericMatrixType::Instance::Instance(const Class* c) : ClassInstance(c)
{
}

QGenericMatrixType::QGenericMatrixType(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QGenericMatrixType::~QGenericMatrixType()
{
}

static NODE_IMPLEMENTATION(__allocate, Pointer)
{
    QGenericMatrixType::Instance* i = new QGenericMatrixType::Instance((Class*)NODE_THIS.type());
    QGenericMatrixType::registerFinalizer(i);
    NODE_RETURN(i);
}

void 
QGenericMatrixType::registerFinalizer (void* o)
{
    GC_register_finalizer(o, QGenericMatrixType::finalizer, 0, 0, 0);
}

void 
QGenericMatrixType::finalizer (void* obj, void* data)
{
    QGenericMatrixType::Instance* i = reinterpret_cast<QGenericMatrixType::Instance*>(obj);
    delete i;
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

Pointer qt_QGenericMatrix_QGenericMatrix_QGenericMatrix_QGenericMatrix(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    setqtype<QGenericMatrixType>(param_this,QGenericMatrix());
    return param_this;
}

bool qt_QGenericMatrix_isIdentity_bool_QGenericMatrix(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QGenericMatrix arg0 = getqtype<QGenericMatrixType>(param_this);
    return arg0.isIdentity();
}

void qt_QGenericMatrix_setToIdentity_void_QGenericMatrix(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QGenericMatrix arg0 = getqtype<QGenericMatrixType>(param_this);
    arg0.setToIdentity();
    setqtype<QGenericMatrixType>(param_this,arg0);
}


static NODE_IMPLEMENTATION(_n_QGenericMatrix0, Pointer)
{
    NODE_RETURN(qt_QGenericMatrix_QGenericMatrix_QGenericMatrix_QGenericMatrix(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isIdentity0, bool)
{
    NODE_RETURN(qt_QGenericMatrix_isIdentity_bool_QGenericMatrix(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_setToIdentity0, void)
{
    qt_QGenericMatrix_setToIdentity_void_QGenericMatrix(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}



void
QGenericMatrixType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", __allocate, None,
                            Return, ftn,
                            End),

               EndArguments );

addSymbols(
    EndArguments);

addSymbols(
    // enums
    // member functions
    new Function(c, "QGenericMatrix", _n_QGenericMatrix0, None, Compiled, qt_QGenericMatrix_QGenericMatrix_QGenericMatrix_QGenericMatrix, Return, "qt.QGenericMatrix", Parameters, new Param(c, "this", "qt.QGenericMatrix"), End),
    // MISSING: QGenericMatrix (QGenericMatrix; QGenericMatrix this, "const T *" values)
    // MISSING: constData ("const T *"; QGenericMatrix this)
    // MISSING: copyDataTo (void; QGenericMatrix this, "T *" values)
    // MISSING: data ("T *"; QGenericMatrix this)
    // MISSING: data ("const T *"; QGenericMatrix this)
    // MISSING: fill (void; QGenericMatrix this, "T" value)
    new Function(c, "isIdentity", _n_isIdentity0, None, Compiled, qt_QGenericMatrix_isIdentity_bool_QGenericMatrix, Return, "bool", Parameters, new Param(c, "this", "qt.QGenericMatrix"), End),
    new Function(c, "setToIdentity", _n_setToIdentity0, None, Compiled, qt_QGenericMatrix_setToIdentity_void_QGenericMatrix, Return, "void", Parameters, new Param(c, "this", "qt.QGenericMatrix"), End),
    // MISSING: transposed ("QGenericMatrix<M, N, T>"; QGenericMatrix this)
    // MISSING: = ("QGenericMatrix<N, M, T> & operator*"; QGenericMatrix this, "T" factor)
    // static functions
    EndArguments);
globalScope()->addSymbols(
    // MISSING: != (bool; QGenericMatrix this, "const QGenericMatrix<N, M, T> &" other)
    // MISSING:  ("const T &"; QGenericMatrix this, int row, int column)
    // MISSING:  ("T &"; QGenericMatrix this, int row, int column)
    // MISSING: += ("QGenericMatrix<N, M, T> &"; QGenericMatrix this, "const QGenericMatrix<N, M, T> &" other)
    // MISSING: -= ("QGenericMatrix<N, M, T> &"; QGenericMatrix this, "const QGenericMatrix<N, M, T> &" other)
    // MISSING: /= ("QGenericMatrix<N, M, T> &"; QGenericMatrix this, "T" divisor)
    // MISSING: == (bool; QGenericMatrix this, "const QGenericMatrix<N, M, T> &" other)
    EndArguments);
scope()->addSymbols(
    EndArguments);

}

} // Mu
