//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/$TType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
{%%handRolledInclude%%}

namespace Mu
{
    using namespace std;

    $TType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    $TType::$TType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    $TType::~$TType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        $TType::Instance* i = new $TType::Instance((Class*)NODE_THIS.type());
        $TType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void $TType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, $TType::finalizer, 0, 0, 0);
    }

    void $TType::finalizer(void* obj, void* data)
    {
        $TType::Instance* i = reinterpret_cast<$TType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    {%%definitions%%}
    {%%handRolledDefinitions%%}

    void $TType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        {%%addSymbolsEnums%%}
        {%%addSymbols%%}
        {%%addHandRolledSymbols%%}
    }

} // namespace Mu
