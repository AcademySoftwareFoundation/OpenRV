//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/$TType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Thread.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
{%%handRolledInclude%%}

namespace Mu
{
    using namespace std;

    //----------------------------------------------------------------------
    //  INHERITABLE TYPE IMPLEMENTATION POTATO

    { % % nativeMuQtClassImplemenation % % }

    //----------------------------------------------------------------------
    //  Mu Type CONSTRUCTORS

    $TType::$TType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    $TType::~$TType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    // static Pointer
    // $T_$T_QIODeviceBase(Thread& NODE_THREAD, Pointer obj)
    // {
    //     MuLangContext* c =
    //     static_cast<MuLangContext*>(NODE_THREAD.context()); ClassInstance*
    //     item = reinterpret_cast<ClassInstance*>(obj);

    //     if (!item)
    //     {
    //         return 0;
    //     }
    //     else if ($T* i = iodevicebase<$T>(item))
    //     {
    //         $TType* type =
    //             c->findSymbolOfTypeByQualifiedName<$TType>(c->internName("qt.$T"),
    //             false);
    //         ClassInstance* o = ClassInstance::allocate(type);
    //         setiodevicebase(o, i);
    //         return o;
    //     }
    //     else
    //     {
    //         throw BadCastException();
    //     }
    // }

    // static NODE_IMPLEMENTATION(castFromLayoutItem, Pointer)
    // {
    //     NODE_RETURN( $T_$T_QIODeviceBase(NODE_THREAD, NODE_ARG(0, Pointer))
    //     );
    // }

    {%%definitions%%}
    {%%handRolledDefinitions%%}

    void $TType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   { % % nativeObject % % }

                   EndArguments);

        {%%addSymbols%%}
        {%%addHandRolledSymbols%%}
    }

} // namespace Mu
