//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QRegularExpressionType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>

namespace Mu
{
    using namespace std;

    QRegularExpressionType::Instance::Instance(const Class* c)
        : ClassInstance(c)
    {
    }

    QRegularExpressionType::QRegularExpressionType(Context* c, const char* name,
                                                   Class* super)
        : Class(c, name, super)
    {
    }

    QRegularExpressionType::~QRegularExpressionType() {}

    static NODE_IMPLEMENTATION(__allocate, Pointer)
    {
        QRegularExpressionType::Instance* i =
            new QRegularExpressionType::Instance((Class*)NODE_THIS.type());
        QRegularExpressionType::registerFinalizer(i);
        NODE_RETURN(i);
    }

    void QRegularExpressionType::registerFinalizer(void* o)
    {
        GC_register_finalizer(o, QRegularExpressionType::finalizer, 0, 0, 0);
    }

    void QRegularExpressionType::finalizer(void* obj, void* data)
    {
        QRegularExpressionType::Instance* i =
            reinterpret_cast<QRegularExpressionType::Instance*>(obj);
        delete i;
    }

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QRegularExpression_QRegularExpression_QRegularExpression_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        setqtype<QRegularExpressionType>(param_this, QRegularExpression());
        return param_this;
    }

    Pointer
    qt_QRegularExpression_QRegularExpression_QRegularExpression_QRegularExpression_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pattern,
        int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg1 = qstring(param_pattern);
        QRegularExpression::PatternOptions arg2 =
            (QRegularExpression::PatternOptions)(param_options);
        setqtype<QRegularExpressionType>(param_this,
                                         QRegularExpression(arg1, arg2));
        return param_this;
    }

    int qt_QRegularExpression_captureCount_int_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        return arg0.captureCount();
    }

    Pointer qt_QRegularExpression_errorString_string_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        return makestring(c, arg0.errorString());
    }

    bool qt_QRegularExpression_isValid_bool_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        return arg0.isValid();
    }

    Pointer
    qt_QRegularExpression_namedCaptureGroups_stringBSB_ESB__QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        return makestringlist(c, arg0.namedCaptureGroups());
    }

    void qt_QRegularExpression_optimize_void_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        arg0.optimize();
        setqtype<QRegularExpressionType>(param_this, arg0);
    }

    Pointer qt_QRegularExpression_pattern_string_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        return makestring(c, arg0.pattern());
    }

    int qt_QRegularExpression_patternOptions_int_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        return int(arg0.patternOptions());
    }

    void qt_QRegularExpression_setPattern_void_QRegularExpression_string(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_pattern)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRegularExpression& arg0 = getqtype<QRegularExpressionType>(param_this);
        const QString arg1 = qstring(param_pattern);
        arg0.setPattern(arg1);
        setqtype<QRegularExpressionType>(param_this, arg0);
    }

    void qt_QRegularExpression_setPatternOptions_void_QRegularExpression_int(
        Mu::Thread& NODE_THREAD, Pointer param_this, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRegularExpression& arg0 = getqtype<QRegularExpressionType>(param_this);
        QRegularExpression::PatternOptions arg1 =
            (QRegularExpression::PatternOptions)(param_options);
        arg0.setPatternOptions(arg1);
        setqtype<QRegularExpressionType>(param_this, arg0);
    }

    void qt_QRegularExpression_swap_void_QRegularExpression_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QRegularExpression& arg0 = getqtype<QRegularExpressionType>(param_this);
        QRegularExpression arg1 = getqtype<QRegularExpressionType>(param_other);
        arg0.swap(arg1);
        setqtype<QRegularExpressionType>(param_this, arg0);
    }

    bool
    qt_QRegularExpression_operatorBang_EQ__bool_QRegularExpression_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_re)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        const QRegularExpression arg1 =
            getqtype<QRegularExpressionType>(param_re);
        return arg0.operator!=(arg1);
    }

    bool
    qt_QRegularExpression_operatorEQ_EQ__bool_QRegularExpression_QRegularExpression(
        Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_re)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QRegularExpression& arg0 =
            getqtype<QRegularExpressionType>(param_this);
        const QRegularExpression arg1 =
            getqtype<QRegularExpressionType>(param_re);
        return arg0.operator==(arg1);
    }

    Pointer qt_QRegularExpression_anchoredPattern_string_string(
        Mu::Thread& NODE_THREAD, Pointer param_expression)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_expression);
        return makestring(c, QRegularExpression::anchoredPattern(arg0));
    }

    Pointer qt_QRegularExpression_escape_string_string(Mu::Thread& NODE_THREAD,
                                                       Pointer param_str)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_str);
        return makestring(c, QRegularExpression::escape(arg0));
    }

    Pointer qt_QRegularExpression_wildcardToRegularExpression_string_string_int(
        Mu::Thread& NODE_THREAD, Pointer param_pattern, int param_options)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        const QString arg0 = qstring(param_pattern);
        QRegularExpression::WildcardConversionOptions arg1 =
            (QRegularExpression::WildcardConversionOptions)(param_options);
        return makestring(
            c, QRegularExpression::wildcardToRegularExpression(arg0, arg1));
    }

    static NODE_IMPLEMENTATION(_n_QRegularExpression0, Pointer)
    {
        NODE_RETURN(
            qt_QRegularExpression_QRegularExpression_QRegularExpression_QRegularExpression(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_QRegularExpression1, Pointer)
    {
        NODE_RETURN(
            qt_QRegularExpression_QRegularExpression_QRegularExpression_QRegularExpression_string_int(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer),
                NODE_ARG(2, int)));
    }

    static NODE_IMPLEMENTATION(_n_captureCount0, int)
    {
        NODE_RETURN(qt_QRegularExpression_captureCount_int_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_errorString0, Pointer)
    {
        NODE_RETURN(qt_QRegularExpression_errorString_string_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isValid0, bool)
    {
        NODE_RETURN(qt_QRegularExpression_isValid_bool_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_namedCaptureGroups0, Pointer)
    {
        NODE_RETURN(
            qt_QRegularExpression_namedCaptureGroups_stringBSB_ESB__QRegularExpression(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_optimize0, void)
    {
        qt_QRegularExpression_optimize_void_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_pattern0, Pointer)
    {
        NODE_RETURN(qt_QRegularExpression_pattern_string_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_patternOptions0, int)
    {
        NODE_RETURN(qt_QRegularExpression_patternOptions_int_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_setPattern0, void)
    {
        qt_QRegularExpression_setPattern_void_QRegularExpression_string(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_setPatternOptions0, void)
    {
        qt_QRegularExpression_setPatternOptions_void_QRegularExpression_int(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, int));
    }

    static NODE_IMPLEMENTATION(_n_swap0, void)
    {
        qt_QRegularExpression_swap_void_QRegularExpression_QRegularExpression(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
    }

    static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
    {
        NODE_RETURN(
            qt_QRegularExpression_operatorBang_EQ__bool_QRegularExpression_QRegularExpression(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
    {
        NODE_RETURN(
            qt_QRegularExpression_operatorEQ_EQ__bool_QRegularExpression_QRegularExpression(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer),
                NODE_ARG(1, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_anchoredPattern1, Pointer)
    {
        NODE_RETURN(qt_QRegularExpression_anchoredPattern_string_string(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_escape1, Pointer)
    {
        NODE_RETURN(qt_QRegularExpression_escape_string_string(
            NODE_THREAD, NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_wildcardToRegularExpression1, Pointer)
    {
        NODE_RETURN(
            qt_QRegularExpression_wildcardToRegularExpression_string_string_int(
                NODE_THREAD, NODE_ARG(0, Pointer), NODE_ARG(1, int)));
    }

    void QRegularExpressionType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(
            new Function(c, "__allocate", __allocate, None, Return, ftn, End),

            EndArguments);

        addSymbols(
            new Alias(c, "MatchOption", "int"),
            new Alias(c, "MatchOptions", "int"),
            new SymbolicConstant(c, "NoMatchOption", "int",
                                 Value(int(QRegularExpression::NoMatchOption))),
            new SymbolicConstant(
                c, "AnchoredMatchOption", "int",
                Value(int(QRegularExpression::AnchoredMatchOption))),
            new SymbolicConstant(
                c, "AnchorAtOffsetMatchOption", "int",
                Value(int(QRegularExpression::AnchorAtOffsetMatchOption))),
            new SymbolicConstant(
                c, "DontCheckSubjectStringMatchOption", "int",
                Value(int(
                    QRegularExpression::DontCheckSubjectStringMatchOption))),
            new Alias(c, "MatchType", "int"),
            new SymbolicConstant(c, "NormalMatch", "int",
                                 Value(int(QRegularExpression::NormalMatch))),
            new SymbolicConstant(
                c, "PartialPreferCompleteMatch", "int",
                Value(int(QRegularExpression::PartialPreferCompleteMatch))),
            new SymbolicConstant(
                c, "PartialPreferFirstMatch", "int",
                Value(int(QRegularExpression::PartialPreferFirstMatch))),
            new SymbolicConstant(c, "NoMatch", "int",
                                 Value(int(QRegularExpression::NoMatch))),
            new Alias(c, "PatternOption", "int"),
            new Alias(c, "PatternOptions", "int"),
            new SymbolicConstant(
                c, "NoPatternOption", "int",
                Value(int(QRegularExpression::NoPatternOption))),
            new SymbolicConstant(
                c, "CaseInsensitiveOption", "int",
                Value(int(QRegularExpression::CaseInsensitiveOption))),
            new SymbolicConstant(
                c, "DotMatchesEverythingOption", "int",
                Value(int(QRegularExpression::DotMatchesEverythingOption))),
            new SymbolicConstant(
                c, "MultilineOption", "int",
                Value(int(QRegularExpression::MultilineOption))),
            new SymbolicConstant(
                c, "ExtendedPatternSyntaxOption", "int",
                Value(int(QRegularExpression::ExtendedPatternSyntaxOption))),
            new SymbolicConstant(
                c, "InvertedGreedinessOption", "int",
                Value(int(QRegularExpression::InvertedGreedinessOption))),
            new SymbolicConstant(
                c, "DontCaptureOption", "int",
                Value(int(QRegularExpression::DontCaptureOption))),
            new SymbolicConstant(
                c, "UseUnicodePropertiesOption", "int",
                Value(int(QRegularExpression::UseUnicodePropertiesOption))),
            new Alias(c, "WildcardConversionOption", "int"),
            new Alias(c, "WildcardConversionOptions", "int"),
            new SymbolicConstant(
                c, "DefaultWildcardConversion", "int",
                Value(int(QRegularExpression::DefaultWildcardConversion))),
            new SymbolicConstant(
                c, "UnanchoredWildcardConversion", "int",
                Value(int(QRegularExpression::UnanchoredWildcardConversion))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(
                c, "QRegularExpression", _n_QRegularExpression0, None, Compiled,
                qt_QRegularExpression_QRegularExpression_QRegularExpression_QRegularExpression,
                Return, "qt.QRegularExpression", Parameters,
                new Param(c, "this", "qt.QRegularExpression"), End),
            new Function(
                c, "QRegularExpression", _n_QRegularExpression1, None, Compiled,
                qt_QRegularExpression_QRegularExpression_QRegularExpression_QRegularExpression_string_int,
                Return, "qt.QRegularExpression", Parameters,
                new Param(c, "this", "qt.QRegularExpression"),
                new Param(c, "pattern", "string"),
                new Param(c, "options", "int",
                          Value((int)QRegularExpression::NoPatternOption)),
                End),
            // MISSING: QRegularExpression (QRegularExpression;
            // QRegularExpression this, QRegularExpression re) MISSING:
            // QRegularExpression (QRegularExpression; QRegularExpression this,
            // "QRegularExpression & &" re)
            new Function(
                c, "captureCount", _n_captureCount0, None, Compiled,
                qt_QRegularExpression_captureCount_int_QRegularExpression,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QRegularExpression"), End),
            new Function(
                c, "errorString", _n_errorString0, None, Compiled,
                qt_QRegularExpression_errorString_string_QRegularExpression,
                Return, "string", Parameters,
                new Param(c, "this", "qt.QRegularExpression"), End),
            // MISSING: globalMatch ("QRegularExpressionMatchIterator";
            // QRegularExpression this, string subject, "qsizetype" offset,
            // flags QRegularExpression::MatchType matchType, flags
            // QRegularExpression::MatchOptions matchOptions) MISSING:
            // globalMatchView ("QRegularExpressionMatchIterator";
            // QRegularExpression this, "QStringView" subjectView, "qsizetype"
            // offset, flags QRegularExpression::MatchType matchType, flags
            // QRegularExpression::MatchOptions matchOptions)
            new Function(c, "isValid", _n_isValid0, None, Compiled,
                         qt_QRegularExpression_isValid_bool_QRegularExpression,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QRegularExpression"), End),
            // MISSING: match ("QRegularExpressionMatch"; QRegularExpression
            // this, string subject, "qsizetype" offset, flags
            // QRegularExpression::MatchType matchType, flags
            // QRegularExpression::MatchOptions matchOptions) MISSING: matchView
            // ("QRegularExpressionMatch"; QRegularExpression this,
            // "QStringView" subjectView, "qsizetype" offset, flags
            // QRegularExpression::MatchType matchType, flags
            // QRegularExpression::MatchOptions matchOptions)
            new Function(
                c, "namedCaptureGroups", _n_namedCaptureGroups0, None, Compiled,
                qt_QRegularExpression_namedCaptureGroups_stringBSB_ESB__QRegularExpression,
                Return, "string[]", Parameters,
                new Param(c, "this", "qt.QRegularExpression"), End),
            new Function(c, "optimize", _n_optimize0, None, Compiled,
                         qt_QRegularExpression_optimize_void_QRegularExpression,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QRegularExpression"), End),
            new Function(
                c, "pattern", _n_pattern0, None, Compiled,
                qt_QRegularExpression_pattern_string_QRegularExpression, Return,
                "string", Parameters,
                new Param(c, "this", "qt.QRegularExpression"), End),
            // MISSING: patternErrorOffset ("qsizetype"; QRegularExpression
            // this)
            new Function(
                c, "patternOptions", _n_patternOptions0, None, Compiled,
                qt_QRegularExpression_patternOptions_int_QRegularExpression,
                Return, "int", Parameters,
                new Param(c, "this", "qt.QRegularExpression"), End),
            new Function(
                c, "setPattern", _n_setPattern0, None, Compiled,
                qt_QRegularExpression_setPattern_void_QRegularExpression_string,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QRegularExpression"),
                new Param(c, "pattern", "string"), End),
            new Function(
                c, "setPatternOptions", _n_setPatternOptions0, None, Compiled,
                qt_QRegularExpression_setPatternOptions_void_QRegularExpression_int,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QRegularExpression"),
                new Param(c, "options", "int"), End),
            new Function(
                c, "swap", _n_swap0, None, Compiled,
                qt_QRegularExpression_swap_void_QRegularExpression_QRegularExpression,
                Return, "void", Parameters,
                new Param(c, "this", "qt.QRegularExpression"),
                new Param(c, "other", "qt.QRegularExpression"), End),
            // static functions
            // MISSING: anchoredPattern (string; "QStringView" expression)
            new Function(c, "anchoredPattern", _n_anchoredPattern1, None,
                         Compiled,
                         qt_QRegularExpression_anchoredPattern_string_string,
                         Return, "string", Parameters,
                         new Param(c, "expression", "string"), End),
            // MISSING: escape (string; "QStringView" str)
            new Function(c, "escape", _n_escape1, None, Compiled,
                         qt_QRegularExpression_escape_string_string, Return,
                         "string", Parameters, new Param(c, "str", "string"),
                         End),
            // MISSING: fromWildcard (QRegularExpression; "QStringView" pattern,
            // flags Qt::CaseSensitivity cs, flags
            // QRegularExpression::WildcardConversionOptions options) MISSING:
            // wildcardToRegularExpression (string; "QStringView" pattern, flags
            // QRegularExpression::WildcardConversionOptions options)
            new Function(
                c, "wildcardToRegularExpression",
                _n_wildcardToRegularExpression1, None, Compiled,
                qt_QRegularExpression_wildcardToRegularExpression_string_string_int,
                Return, "string", Parameters, new Param(c, "pattern", "string"),
                new Param(
                    c, "options", "int",
                    Value((int)QRegularExpression::DefaultWildcardConversion)),
                End),
            EndArguments);
        globalScope()->addSymbols(
            new Function(
                c, "!=", _n_operatorBang_EQ_0, Op, Compiled,
                qt_QRegularExpression_operatorBang_EQ__bool_QRegularExpression_QRegularExpression,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QRegularExpression"),
                new Param(c, "re", "qt.QRegularExpression"), End),
            // MISSING: = (QRegularExpression; QRegularExpression this,
            // QRegularExpression re) MISSING: = (QRegularExpression;
            // QRegularExpression this, "QRegularExpression & &" re)
            new Function(
                c, "==", _n_operatorEQ_EQ_0, Op, Compiled,
                qt_QRegularExpression_operatorEQ_EQ__bool_QRegularExpression_QRegularExpression,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QRegularExpression"),
                new Param(c, "re", "qt.QRegularExpression"), End),
            EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
