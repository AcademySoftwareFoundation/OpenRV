//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QSinglePointEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt6/QPointFType.h>

namespace Mu
{
    using namespace std;

    QSinglePointEventType::QSinglePointEventType(Context* c, const char* name,
                                                 Class* super)
        : Class(c, name, super)
    {
    }

    QSinglePointEventType::~QSinglePointEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    int
    qt_QSinglePointEvent_button_int_QSinglePointEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return int(arg0->button());
    }

    int
    qt_QSinglePointEvent_buttons_int_QSinglePointEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return int(arg0->buttons());
    }

    Pointer qt_QSinglePointEvent_globalPosition_QPointF_QSinglePointEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->globalPosition(), "qt.QPointF");
    }

    Pointer qt_QSinglePointEvent_position_QPointF_QSinglePointEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->position(), "qt.QPointF");
    }

    Pointer qt_QSinglePointEvent_scenePosition_QPointF_QSinglePointEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return makeqtype<QPointFType>(c, arg0->scenePosition(), "qt.QPointF");
    }

    bool qt_QSinglePointEvent_isBeginEvent_bool_QSinglePointEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return arg0->isBeginEvent();
    }

    bool qt_QSinglePointEvent_isEndEvent_bool_QSinglePointEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return arg0->isEndEvent();
    }

    bool qt_QSinglePointEvent_isUpdateEvent_bool_QSinglePointEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QSinglePointEvent* arg0 =
            getqpointer<QSinglePointEventType>(param_this);
        return arg0->isUpdateEvent();
    }

    static NODE_IMPLEMENTATION(_n_button0, int)
    {
        NODE_RETURN(qt_QSinglePointEvent_button_int_QSinglePointEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_buttons0, int)
    {
        NODE_RETURN(qt_QSinglePointEvent_buttons_int_QSinglePointEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_globalPosition0, Pointer)
    {
        NODE_RETURN(
            qt_QSinglePointEvent_globalPosition_QPointF_QSinglePointEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_position0, Pointer)
    {
        NODE_RETURN(qt_QSinglePointEvent_position_QPointF_QSinglePointEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_scenePosition0, Pointer)
    {
        NODE_RETURN(
            qt_QSinglePointEvent_scenePosition_QPointF_QSinglePointEvent(
                NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isBeginEvent0, bool)
    {
        NODE_RETURN(qt_QSinglePointEvent_isBeginEvent_bool_QSinglePointEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEndEvent0, bool)
    {
        NODE_RETURN(qt_QSinglePointEvent_isEndEvent_bool_QSinglePointEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isUpdateEvent0, bool)
    {
        NODE_RETURN(qt_QSinglePointEvent_isUpdateEvent_bool_QSinglePointEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QSinglePointEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "button", _n_button0, None, Compiled,
                         qt_QSinglePointEvent_button_int_QSinglePointEvent,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QSinglePointEvent"), End),
            new Function(c, "buttons", _n_buttons0, None, Compiled,
                         qt_QSinglePointEvent_buttons_int_QSinglePointEvent,
                         Return, "int", Parameters,
                         new Param(c, "this", "qt.QSinglePointEvent"), End),
            // PROP: exclusivePointGrabber (QObject; QSinglePointEvent this)
            new Function(
                c, "globalPosition", _n_globalPosition0, None, Compiled,
                qt_QSinglePointEvent_globalPosition_QPointF_QSinglePointEvent,
                Return, "qt.QPointF", Parameters,
                new Param(c, "this", "qt.QSinglePointEvent"), End),
            new Function(
                c, "position", _n_position0, None, Compiled,
                qt_QSinglePointEvent_position_QPointF_QSinglePointEvent, Return,
                "qt.QPointF", Parameters,
                new Param(c, "this", "qt.QSinglePointEvent"), End),
            new Function(
                c, "scenePosition", _n_scenePosition0, None, Compiled,
                qt_QSinglePointEvent_scenePosition_QPointF_QSinglePointEvent,
                Return, "qt.QPointF", Parameters,
                new Param(c, "this", "qt.QSinglePointEvent"), End),
            // PROP: setExclusivePointGrabber (void; QSinglePointEvent this,
            // QObject exclusiveGrabber)
            new MemberFunction(
                c, "isBeginEvent", _n_isBeginEvent0, None, Compiled,
                qt_QSinglePointEvent_isBeginEvent_bool_QSinglePointEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QSinglePointEvent"), End),
            new MemberFunction(
                c, "isEndEvent", _n_isEndEvent0, None, Compiled,
                qt_QSinglePointEvent_isEndEvent_bool_QSinglePointEvent, Return,
                "bool", Parameters,
                new Param(c, "this", "qt.QSinglePointEvent"), End),
            new MemberFunction(
                c, "isUpdateEvent", _n_isUpdateEvent0, None, Compiled,
                qt_QSinglePointEvent_isUpdateEvent_bool_QSinglePointEvent,
                Return, "bool", Parameters,
                new Param(c, "this", "qt.QSinglePointEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
