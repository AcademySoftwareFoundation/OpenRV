//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QWheelEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <MuQt6/QPointType.h>

namespace Mu
{
    using namespace std;

    QWheelEventType::QWheelEventType(Context* c, const char* name, Class* super)
        : Class(c, name, super)
    {
    }

    QWheelEventType::~QWheelEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    Pointer
    qt_QWheelEvent_angleDelta_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->angleDelta(), "qt.QPoint");
    }

    bool qt_QWheelEvent_inverted_bool_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                  Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->inverted();
    }

    int qt_QWheelEvent_phase_int_QWheelEvent(Mu::Thread& NODE_THREAD,
                                             Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return int(arg0->phase());
    }

    Pointer
    qt_QWheelEvent_pixelDelta_QPoint_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return makeqtype<QPointType>(c, arg0->pixelDelta(), "qt.QPoint");
    }

    bool qt_QWheelEvent_isBeginEvent_bool_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->isBeginEvent();
    }

    bool qt_QWheelEvent_isEndEvent_bool_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                    Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->isEndEvent();
    }

    bool qt_QWheelEvent_isUpdateEvent_bool_QWheelEvent(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QWheelEvent* arg0 = getqpointer<QWheelEventType>(param_this);
        return arg0->isUpdateEvent();
    }

    static NODE_IMPLEMENTATION(_n_angleDelta0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_angleDelta_QPoint_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_inverted0, bool)
    {
        NODE_RETURN(qt_QWheelEvent_inverted_bool_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_phase0, int)
    {
        NODE_RETURN(qt_QWheelEvent_phase_int_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_pixelDelta0, Pointer)
    {
        NODE_RETURN(qt_QWheelEvent_pixelDelta_QPoint_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isBeginEvent0, bool)
    {
        NODE_RETURN(qt_QWheelEvent_isBeginEvent_bool_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isEndEvent0, bool)
    {
        NODE_RETURN(qt_QWheelEvent_isEndEvent_bool_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isUpdateEvent0, bool)
    {
        NODE_RETURN(qt_QWheelEvent_isUpdateEvent_bool_QWheelEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QWheelEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            // MISSING: QWheelEvent (QWheelEvent; QWheelEvent this, QPointF pos,
            // QPointF globalPos, QPoint pixelDelta, QPoint angleDelta, flags
            // Qt::MouseButtons buttons, flags Qt::KeyboardModifiers modifiers,
            // flags Qt::ScrollPhase phase, bool inverted, flags
            // Qt::MouseEventSource source, "const QPointingDevice *" device)
            new Function(c, "angleDelta", _n_angleDelta0, None, Compiled,
                         qt_QWheelEvent_angleDelta_QPoint_QWheelEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "inverted", _n_inverted0, None, Compiled,
                         qt_QWheelEvent_inverted_bool_QWheelEvent, Return,
                         "bool", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new Function(c, "phase", _n_phase0, None, Compiled,
                         qt_QWheelEvent_phase_int_QWheelEvent, Return, "int",
                         Parameters, new Param(c, "this", "qt.QWheelEvent"),
                         End),
            new Function(c, "pixelDelta", _n_pixelDelta0, None, Compiled,
                         qt_QWheelEvent_pixelDelta_QPoint_QWheelEvent, Return,
                         "qt.QPoint", Parameters,
                         new Param(c, "this", "qt.QWheelEvent"), End),
            new MemberFunction(
                c, "isBeginEvent", _n_isBeginEvent0, None, Compiled,
                qt_QWheelEvent_isBeginEvent_bool_QWheelEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
            new MemberFunction(c, "isEndEvent", _n_isEndEvent0, None, Compiled,
                               qt_QWheelEvent_isEndEvent_bool_QWheelEvent,
                               Return, "bool", Parameters,
                               new Param(c, "this", "qt.QWheelEvent"), End),
            new MemberFunction(
                c, "isUpdateEvent", _n_isUpdateEvent0, None, Compiled,
                qt_QWheelEvent_isUpdateEvent_bool_QWheelEvent, Return, "bool",
                Parameters, new Param(c, "this", "qt.QWheelEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
