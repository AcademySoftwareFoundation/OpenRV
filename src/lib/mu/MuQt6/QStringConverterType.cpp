//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QStringConverterType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>

namespace Mu
{
    using namespace std;

    QStringConverterType::QStringConverterType(Context* c, const char* name,
                                               Class* super)
        : Class(c, name, super)
    {
    }

    QStringConverterType::~QStringConverterType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    bool
    qt_QStringConverter_hasError_bool_QStringConverter(Mu::Thread& NODE_THREAD,
                                                       Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStringConverter* arg0 = getqpointer<QStringConverterType>(param_this);
        return arg0->hasError();
    }

    bool
    qt_QStringConverter_isValid_bool_QStringConverter(Mu::Thread& NODE_THREAD,
                                                      Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStringConverter* arg0 = getqpointer<QStringConverterType>(param_this);
        return arg0->isValid();
    }

    void qt_QStringConverter_resetState_void_QStringConverter(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QStringConverter* arg0 = getqpointer<QStringConverterType>(param_this);
        arg0->resetState();
        setqpointer<QStringConverterType>(param_this, arg0);
    }

    static NODE_IMPLEMENTATION(_n_hasError0, bool)
    {
        NODE_RETURN(qt_QStringConverter_hasError_bool_QStringConverter(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_isValid0, bool)
    {
        NODE_RETURN(qt_QStringConverter_isValid_bool_QStringConverter(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_resetState0, void)
    {
        qt_QStringConverter_resetState_void_QStringConverter(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
    }

    void QStringConverterType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(
            new Alias(c, "Encoding", "int"),
            new SymbolicConstant(c, "Utf8", "int",
                                 Value(int(QStringConverter::Utf8))),
            new SymbolicConstant(c, "Utf16", "int",
                                 Value(int(QStringConverter::Utf16))),
            new SymbolicConstant(c, "Utf16BE", "int",
                                 Value(int(QStringConverter::Utf16BE))),
            new SymbolicConstant(c, "Utf16LE", "int",
                                 Value(int(QStringConverter::Utf16LE))),
            new SymbolicConstant(c, "Utf32", "int",
                                 Value(int(QStringConverter::Utf32))),
            new SymbolicConstant(c, "Utf32BE", "int",
                                 Value(int(QStringConverter::Utf32BE))),
            new SymbolicConstant(c, "Utf32LE", "int",
                                 Value(int(QStringConverter::Utf32LE))),
            new SymbolicConstant(c, "Latin1", "int",
                                 Value(int(QStringConverter::Latin1))),
            new SymbolicConstant(c, "System", "int",
                                 Value(int(QStringConverter::System))),
            new Alias(c, "Flag", "int"), new Alias(c, "Flags", "int"),
            new SymbolicConstant(c, "Default", "int",
                                 Value(int(QStringConverter::Flag::Default))),
            new SymbolicConstant(
                c, "ConvertInvalidToNull", "int",
                Value(int(QStringConverter::Flag::ConvertInvalidToNull))),
            new SymbolicConstant(c, "WriteBom", "int",
                                 Value(int(QStringConverter::Flag::WriteBom))),
            new SymbolicConstant(
                c, "ConvertInitialBom", "int",
                Value(int(QStringConverter::Flag::ConvertInitialBom))),
            new SymbolicConstant(c, "Stateless", "int",
                                 Value(int(QStringConverter::Flag::Stateless))),
            EndArguments);

        addSymbols(
            // enums
            // member functions
            new Function(c, "hasError", _n_hasError0, None, Compiled,
                         qt_QStringConverter_hasError_bool_QStringConverter,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QStringConverter"), End),
            new Function(c, "isValid", _n_isValid0, None, Compiled,
                         qt_QStringConverter_isValid_bool_QStringConverter,
                         Return, "bool", Parameters,
                         new Param(c, "this", "qt.QStringConverter"), End),
            // MISSING: name ("const char *"; QStringConverter this)
            new Function(c, "resetState", _n_resetState0, None, Compiled,
                         qt_QStringConverter_resetState_void_QStringConverter,
                         Return, "void", Parameters,
                         new Param(c, "this", "qt.QStringConverter"), End),
            // static functions
            // MISSING: encodingForData (flags std::optional<Encoding>;
            // "QByteArrayView" data, "char16_t" expectedFirstCharacter)
            // MISSING: encodingForHtml (flags std::optional<Encoding>;
            // "QByteArrayView" data) MISSING: encodingForName (flags
            // std::optional<Encoding>; "const char *" name) MISSING:
            // nameForEncoding ("const char *"; flags QStringConverter::Encoding
            // e)
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
