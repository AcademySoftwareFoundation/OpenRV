//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the qt2mu.py script.
//            If it is not possible, manual editing is ok but it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QWebEngineHistoryType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>

namespace Mu {
using namespace std;

QWebEngineHistoryType::QWebEngineHistoryType(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QWebEngineHistoryType::~QWebEngineHistoryType()
{
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

void qt_QWebEngineHistory_back_void_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    arg0->back();
}

bool qt_QWebEngineHistory_canGoBack_bool_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    return arg0->canGoBack();
}

bool qt_QWebEngineHistory_canGoForward_bool_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    return arg0->canGoForward();
}

void qt_QWebEngineHistory_clear_void_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    arg0->clear();
}

int qt_QWebEngineHistory_count_int_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    return arg0->count();
}

int qt_QWebEngineHistory_currentItemIndex_int_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    return arg0->currentItemIndex();
}

void qt_QWebEngineHistory_forward_void_QWebEngineHistory(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QWebEngineHistory* arg0 = object<QWebEngineHistory>(param_this);
    arg0->forward();
}


static NODE_IMPLEMENTATION(_n_back0, void)
{
    qt_QWebEngineHistory_back_void_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_canGoBack0, bool)
{
    NODE_RETURN(qt_QWebEngineHistory_canGoBack_bool_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_canGoForward0, bool)
{
    NODE_RETURN(qt_QWebEngineHistory_canGoForward_bool_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_clear0, void)
{
    qt_QWebEngineHistory_clear_void_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_count0, int)
{
    NODE_RETURN(qt_QWebEngineHistory_count_int_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_currentItemIndex0, int)
{
    NODE_RETURN(qt_QWebEngineHistory_currentItemIndex_int_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_forward0, void)
{
    qt_QWebEngineHistory_forward_void_QWebEngineHistory(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}



void
QWebEngineHistoryType::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate, None,
                            Return, ftn,
                            End),

               new MemberVariable(c, "native", "qt.NativeObject"),

               EndArguments );


addSymbols(
    EndArguments);

addSymbols(
    // enums
    // member functions
    new Function(c, "back", _n_back0, None, Compiled, qt_QWebEngineHistory_back_void_QWebEngineHistory, Return, "void", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    // MISSING: backItems ("QList<QWebEngineHistoryItem>"; QWebEngineHistory this, int maxItems)
    // MISSING: backItemsModel ("QWebEngineHistoryModel *"; QWebEngineHistory this)
    new Function(c, "canGoBack", _n_canGoBack0, None, Compiled, qt_QWebEngineHistory_canGoBack_bool_QWebEngineHistory, Return, "bool", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    new Function(c, "canGoForward", _n_canGoForward0, None, Compiled, qt_QWebEngineHistory_canGoForward_bool_QWebEngineHistory, Return, "bool", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    new Function(c, "clear", _n_clear0, None, Compiled, qt_QWebEngineHistory_clear_void_QWebEngineHistory, Return, "void", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    new Function(c, "count", _n_count0, None, Compiled, qt_QWebEngineHistory_count_int_QWebEngineHistory, Return, "int", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    new Function(c, "currentItemIndex", _n_currentItemIndex0, None, Compiled, qt_QWebEngineHistory_currentItemIndex_int_QWebEngineHistory, Return, "int", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    new Function(c, "forward", _n_forward0, None, Compiled, qt_QWebEngineHistory_forward_void_QWebEngineHistory, Return, "void", Parameters, new Param(c, "this", "qt.QWebEngineHistory"), End),
    // MISSING: forwardItems ("QList<QWebEngineHistoryItem>"; QWebEngineHistory this, int maxItems)
    // MISSING: forwardItemsModel ("QWebEngineHistoryModel *"; QWebEngineHistory this)
    // MISSING: goToItem (void; QWebEngineHistory this, "const QWebEngineHistoryItem &" item)
    // MISSING: items ("QList<QWebEngineHistoryItem>"; QWebEngineHistory this)
    // MISSING: itemsModel ("QWebEngineHistoryModel *"; QWebEngineHistory this)
    // static functions
    EndArguments);
globalScope()->addSymbols(
    EndArguments);
scope()->addSymbols(
    EndArguments);

}

} // Mu
