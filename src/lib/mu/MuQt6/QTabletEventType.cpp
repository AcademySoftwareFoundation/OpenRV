//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the
//            qt2mu.py script. If it is not possible, manual editing is ok but
//            it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QTabletEventType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QWidgetType.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QIconType.h>
#include <Mu/BaseFunctions.h>
#include <Mu/Alias.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/ClassInstance.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/Exception.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>

namespace Mu
{
    using namespace std;

    QTabletEventType::QTabletEventType(Context* c, const char* name,
                                       Class* super)
        : Class(c, name, super)
    {
    }

    QTabletEventType::~QTabletEventType() {}

    //----------------------------------------------------------------------
    //  PRE-COMPILED FUNCTIONS

    double qt_QTabletEvent_pressure_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->pressure();
    }

    double qt_QTabletEvent_rotation_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                        Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->rotation();
    }

    double qt_QTabletEvent_tangentialPressure_double_QTabletEvent(
        Mu::Thread& NODE_THREAD, Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->tangentialPressure();
    }

    double qt_QTabletEvent_xTilt_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->xTilt();
    }

    double qt_QTabletEvent_yTilt_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                     Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->yTilt();
    }

    double qt_QTabletEvent_z_double_QTabletEvent(Mu::Thread& NODE_THREAD,
                                                 Pointer param_this)
    {
        MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
        QTabletEvent* arg0 = getqpointer<QTabletEventType>(param_this);
        return arg0->z();
    }

    static NODE_IMPLEMENTATION(_n_pressure0, double)
    {
        NODE_RETURN(qt_QTabletEvent_pressure_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_rotation0, double)
    {
        NODE_RETURN(qt_QTabletEvent_rotation_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_tangentialPressure0, double)
    {
        NODE_RETURN(qt_QTabletEvent_tangentialPressure_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_xTilt0, double)
    {
        NODE_RETURN(qt_QTabletEvent_xTilt_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_yTilt0, double)
    {
        NODE_RETURN(qt_QTabletEvent_yTilt_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    static NODE_IMPLEMENTATION(_n_z0, double)
    {
        NODE_RETURN(qt_QTabletEvent_z_double_QTabletEvent(
            NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
    }

    void QTabletEventType::load()
    {
        USING_MU_FUNCTION_SYMBOLS;
        MuLangContext* c = static_cast<MuLangContext*>(context());
        Module* global = globalModule();

        const string typeName = name();
        const string refTypeName = typeName + "&";
        const string fullTypeName = fullyQualifiedName();
        const string fullRefTypeName = fullTypeName + "&";
        const char* tn = typeName.c_str();
        const char* ftn = fullTypeName.c_str();
        const char* rtn = refTypeName.c_str();
        const char* frtn = fullRefTypeName.c_str();

        scope()->addSymbols(new ReferenceType(c, rtn, this),

                            new Function(c, tn, BaseFunctions::dereference,
                                         Cast, Return, ftn, Args, frtn, End),

                            EndArguments);

        addSymbols(new Function(c, "__allocate", BaseFunctions::classAllocate,
                                None, Return, ftn, End),

                   new MemberVariable(c, "native", "qt.NativeObject"),

                   EndArguments);

        addSymbols(EndArguments);

        addSymbols(
            // enums
            // member functions
            // MISSING: QTabletEvent (QTabletEvent; QTabletEvent this, flags
            // QEvent::Type type, "const QPointingDevice *" dev, QPointF pos,
            // QPointF globalPos, double pressure, float xTilt, float yTilt,
            // float tangentialPressure, double rotation, float z, flags
            // Qt::KeyboardModifiers keyState, flags Qt::MouseButton button,
            // flags Qt::MouseButtons buttons)
            new Function(c, "pressure", _n_pressure0, None, Compiled,
                         qt_QTabletEvent_pressure_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "rotation", _n_rotation0, None, Compiled,
                         qt_QTabletEvent_rotation_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "tangentialPressure", _n_tangentialPressure0, None,
                         Compiled,
                         qt_QTabletEvent_tangentialPressure_double_QTabletEvent,
                         Return, "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "xTilt", _n_xTilt0, None, Compiled,
                         qt_QTabletEvent_xTilt_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "yTilt", _n_yTilt0, None, Compiled,
                         qt_QTabletEvent_yTilt_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            new Function(c, "z", _n_z0, None, Compiled,
                         qt_QTabletEvent_z_double_QTabletEvent, Return,
                         "double", Parameters,
                         new Param(c, "this", "qt.QTabletEvent"), End),
            // static functions
            EndArguments);
        globalScope()->addSymbols(EndArguments);
        scope()->addSymbols(EndArguments);
    }

} // namespace Mu
