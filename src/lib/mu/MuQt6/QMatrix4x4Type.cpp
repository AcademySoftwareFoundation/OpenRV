//*****************************************************************************
// Copyright (c) 2024 Autodesk, Inc.
// All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//
//*****************************************************************************

// IMPORTANT: This file (not the template) is auto-generated by qt2mu.py script.
//            The prefered way to do a fix is to handrolled it or modify the qt2mu.py script.
//            If it is not possible, manual editing is ok but it could be lost in future generations.

#include <MuQt6/qtUtils.h>
#include <MuQt6/QMatrix4x4Type.h>
#include <MuQt6/QActionType.h>
#include <MuQt6/QWidgetType.h>
#include <Mu/Alias.h>
#include <Mu/BaseFunctions.h>
#include <Mu/ClassInstance.h>
#include <Mu/Exception.h>
#include <Mu/Function.h>
#include <Mu/MemberFunction.h>
#include <Mu/MemberVariable.h>
#include <Mu/Node.h>
#include <Mu/ParameterVariable.h>
#include <Mu/ReferenceType.h>
#include <Mu/SymbolicConstant.h>
#include <Mu/Thread.h>
#include <Mu/Value.h>
#include <MuLang/MuLangContext.h>
#include <MuLang/StringType.h>
#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtSvg/QtSvg>
#include <QSvgWidget>
#include <QtNetwork/QtNetwork>
#include <MuQt6/QRectFType.h>
#include <MuQt6/QPointFType.h>
#include <MuQt6/QRectType.h>
#include <MuQt6/QPointType.h>
#include <MuQt6/QTransformType.h>

namespace Mu {
using namespace std;

QMatrix4x4Type::Instance::Instance(const Class* c) : ClassInstance(c)
{
}

QMatrix4x4Type::QMatrix4x4Type(Context* c, const char* name, Class* super)
    : Class(c, name, super)
{
}

QMatrix4x4Type::~QMatrix4x4Type()
{
}

static NODE_IMPLEMENTATION(__allocate, Pointer)
{
    QMatrix4x4Type::Instance* i = new QMatrix4x4Type::Instance((Class*)NODE_THIS.type());
    QMatrix4x4Type::registerFinalizer(i);
    NODE_RETURN(i);
}

void 
QMatrix4x4Type::registerFinalizer (void* o)
{
    GC_register_finalizer(o, QMatrix4x4Type::finalizer, 0, 0, 0);
}

void 
QMatrix4x4Type::finalizer (void* obj, void* data)
{
    QMatrix4x4Type::Instance* i = reinterpret_cast<QMatrix4x4Type::Instance*>(obj);
    delete i;
}

//----------------------------------------------------------------------
//  PRE-COMPILED FUNCTIONS

Pointer qt_QMatrix4x4_QMatrix4x4_QMatrix4x4_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    setqtype<QMatrix4x4Type>(param_this,QMatrix4x4());
    return param_this;
}

Pointer qt_QMatrix4x4_QMatrix4x4_QMatrix4x4_QMatrix4x4_QTransform(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_transform)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    const QTransform  arg1 = getqtype<QTransformType>(param_transform);
    setqtype<QMatrix4x4Type>(param_this,QMatrix4x4(arg1));
    return param_this;
}

double qt_QMatrix4x4_determinant_double_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    return arg0.determinant();
}

bool qt_QMatrix4x4_isAffine_bool_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    return arg0.isAffine();
}

bool qt_QMatrix4x4_isIdentity_bool_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    return arg0.isIdentity();
}

Pointer qt_QMatrix4x4_map_QPoint_QMatrix4x4_QPoint(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QPoint  arg1 = getqtype<QPointType>(param_point);
    return makeqtype<QPointType>(c,arg0.map(arg1),"qt.QPoint");
}

Pointer qt_QMatrix4x4_map_QPointF_QMatrix4x4_QPointF(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_point)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QPointF  arg1 = getqtype<QPointFType>(param_point);
    return makeqtype<QPointFType>(c,arg0.map(arg1),"qt.QPointF");
}

Pointer qt_QMatrix4x4_mapRect_QRect_QMatrix4x4_QRect(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QRect  arg1 = getqtype<QRectType>(param_rect);
    return makeqtype<QRectType>(c,arg0.mapRect(arg1),"qt.QRect");
}

Pointer qt_QMatrix4x4_mapRect_QRectF_QMatrix4x4_QRectF(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QRectF  arg1 = getqtype<QRectFType>(param_rect);
    return makeqtype<QRectFType>(c,arg0.mapRect(arg1),"qt.QRectF");
}

void qt_QMatrix4x4_optimize_void_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    arg0.optimize();
    setqtype<QMatrix4x4Type>(param_this,arg0);
}

void qt_QMatrix4x4_ortho_void_QMatrix4x4_QRect(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QRect  arg1 = getqtype<QRectType>(param_rect);
    arg0.ortho(arg1);
    setqtype<QMatrix4x4Type>(param_this,arg0);
}

void qt_QMatrix4x4_ortho_void_QMatrix4x4_QRectF(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QRectF  arg1 = getqtype<QRectFType>(param_rect);
    arg0.ortho(arg1);
    setqtype<QMatrix4x4Type>(param_this,arg0);
}

void qt_QMatrix4x4_setToIdentity_void_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    arg0.setToIdentity();
    setqtype<QMatrix4x4Type>(param_this,arg0);
}

Pointer qt_QMatrix4x4_toTransform_QTransform_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    return makeqtype<QTransformType>(c,arg0.toTransform(),"qt.QTransform");
}

Pointer qt_QMatrix4x4_transposed_QMatrix4x4_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    return makeqtype<QMatrix4x4Type>(c,arg0.transposed(),"qt.QMatrix4x4");
}

void qt_QMatrix4x4_viewport_void_QMatrix4x4_QRectF(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_rect)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QRectF  arg1 = getqtype<QRectFType>(param_rect);
    arg0.viewport(arg1);
    setqtype<QMatrix4x4Type>(param_this,arg0);
}

bool qt_QMatrix4x4_operatorBang_EQ__bool_QMatrix4x4_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QMatrix4x4  arg1 = getqtype<QMatrix4x4Type>(param_other);
    return arg0.operator!=(arg1);
}

Pointer qt_QMatrix4x4_operatorPlus_EQ__QMatrix4x4_QMatrix4x4_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QMatrix4x4  arg1 = getqtype<QMatrix4x4Type>(param_other);
    return makeqtype<QMatrix4x4Type>(c,arg0.operator+=(arg1),"qt.QMatrix4x4");
}

Pointer qt_QMatrix4x4_operatorMinus_EQ__QMatrix4x4_QMatrix4x4_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QMatrix4x4  arg1 = getqtype<QMatrix4x4Type>(param_other);
    return makeqtype<QMatrix4x4Type>(c,arg0.operator-=(arg1),"qt.QMatrix4x4");
}

bool qt_QMatrix4x4_operatorEQ_EQ__bool_QMatrix4x4_QMatrix4x4(Mu::Thread& NODE_THREAD, Pointer param_this, Pointer param_other)
{
    MuLangContext* c = static_cast<MuLangContext*>(NODE_THREAD.context());
    QMatrix4x4 arg0 = getqtype<QMatrix4x4Type>(param_this);
    const QMatrix4x4  arg1 = getqtype<QMatrix4x4Type>(param_other);
    return arg0.operator==(arg1);
}


static NODE_IMPLEMENTATION(_n_QMatrix4x40, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_QMatrix4x4_QMatrix4x4_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_QMatrix4x44, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_QMatrix4x4_QMatrix4x4_QMatrix4x4_QTransform(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_determinant0, double)
{
    NODE_RETURN(qt_QMatrix4x4_determinant_double_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isAffine0, bool)
{
    NODE_RETURN(qt_QMatrix4x4_isAffine_bool_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_isIdentity0, bool)
{
    NODE_RETURN(qt_QMatrix4x4_isIdentity_bool_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_map0, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_map_QPoint_QMatrix4x4_QPoint(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_map1, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_map_QPointF_QMatrix4x4_QPointF(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_mapRect0, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_mapRect_QRect_QMatrix4x4_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_mapRect1, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_mapRect_QRectF_QMatrix4x4_QRectF(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_optimize0, void)
{
    qt_QMatrix4x4_optimize_void_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_ortho1, void)
{
    qt_QMatrix4x4_ortho_void_QMatrix4x4_QRect(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_ortho2, void)
{
    qt_QMatrix4x4_ortho_void_QMatrix4x4_QRectF(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_setToIdentity0, void)
{
    qt_QMatrix4x4_setToIdentity_void_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer));
}

static NODE_IMPLEMENTATION(_n_toTransform0, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_toTransform_QTransform_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_transposed0, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_transposed_QMatrix4x4_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer)));
}

static NODE_IMPLEMENTATION(_n_viewport1, void)
{
    qt_QMatrix4x4_viewport_void_QMatrix4x4_QRectF(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer));
}

static NODE_IMPLEMENTATION(_n_operatorBang_EQ_0, bool)
{
    NODE_RETURN(qt_QMatrix4x4_operatorBang_EQ__bool_QMatrix4x4_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorPlus_EQ_0, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_operatorPlus_EQ__QMatrix4x4_QMatrix4x4_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorMinus_EQ_0, Pointer)
{
    NODE_RETURN(qt_QMatrix4x4_operatorMinus_EQ__QMatrix4x4_QMatrix4x4_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}

static NODE_IMPLEMENTATION(_n_operatorEQ_EQ_0, bool)
{
    NODE_RETURN(qt_QMatrix4x4_operatorEQ_EQ__bool_QMatrix4x4_QMatrix4x4(NODE_THREAD, NONNIL_NODE_ARG(0, Pointer), NODE_ARG(1, Pointer)));
}



void
QMatrix4x4Type::load()
{
    USING_MU_FUNCTION_SYMBOLS;
    MuLangContext* c = static_cast<MuLangContext*>(context());
    Module* global = globalModule();
    
    const string typeName        = name();
    const string refTypeName     = typeName + "&";
    const string fullTypeName    = fullyQualifiedName();
    const string fullRefTypeName = fullTypeName + "&";
    const char*  tn              = typeName.c_str();
    const char*  ftn             = fullTypeName.c_str();
    const char*  rtn             = refTypeName.c_str();
    const char*  frtn            = fullRefTypeName.c_str();

    scope()->addSymbols(new ReferenceType(c, rtn, this),

                        new Function(c, tn, BaseFunctions::dereference, Cast,
                                     Return, ftn,
                                     Args, frtn, End),

                        EndArguments);
    
    addSymbols(new Function(c, "__allocate", __allocate, None,
                            Return, ftn,
                            End),

               EndArguments );

addSymbols(
    EndArguments);

addSymbols(
    // enums
    // member functions
    new Function(c, "QMatrix4x4", _n_QMatrix4x40, None, Compiled, qt_QMatrix4x4_QMatrix4x4_QMatrix4x4_QMatrix4x4, Return, "qt.QMatrix4x4", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: QMatrix4x4 (QMatrix4x4; QMatrix4x4 this, "const float *" values)
    // MISSING: QMatrix4x4 (QMatrix4x4; QMatrix4x4 this, "float" m11, "float" m12, "float" m13, "float" m14, "float" m21, "float" m22, "float" m23, "float" m24, "float" m31, "float" m32, "float" m33, "float" m34, "float" m41, "float" m42, "float" m43, "float" m44)
    // MISSING: QMatrix4x4 (QMatrix4x4; QMatrix4x4 this, "const QGenericMatrix<N, M, float> &" matrix)
    new Function(c, "QMatrix4x4", _n_QMatrix4x44, None, Compiled, qt_QMatrix4x4_QMatrix4x4_QMatrix4x4_QMatrix4x4_QTransform, Return, "qt.QMatrix4x4", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "transform", "qt.QTransform"), End),
    // MISSING: column ("QVector4D"; QMatrix4x4 this, int index)
    // MISSING: constData ("const float *"; QMatrix4x4 this)
    // MISSING: copyDataTo (void; QMatrix4x4 this, "float *" values)
    // MISSING: data ("float *"; QMatrix4x4 this)
    // MISSING: data ("const float *"; QMatrix4x4 this)
    new Function(c, "determinant", _n_determinant0, None, Compiled, qt_QMatrix4x4_determinant_double_QMatrix4x4, Return, "double", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: fill (void; QMatrix4x4 this, "float" value)
    // MISSING: frustum (void; QMatrix4x4 this, "float" left, "float" right, "float" bottom, "float" top, "float" nearPlane, "float" farPlane)
    // MISSING: inverted (QMatrix4x4; QMatrix4x4 this, "bool *" invertible)
    new Function(c, "isAffine", _n_isAffine0, None, Compiled, qt_QMatrix4x4_isAffine_bool_QMatrix4x4, Return, "bool", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    new Function(c, "isIdentity", _n_isIdentity0, None, Compiled, qt_QMatrix4x4_isIdentity_bool_QMatrix4x4, Return, "bool", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: lookAt (void; QMatrix4x4 this, "const QVector3D &" eye, "const QVector3D &" center, "const QVector3D &" up)
    new Function(c, "map", _n_map0, None, Compiled, qt_QMatrix4x4_map_QPoint_QMatrix4x4_QPoint, Return, "qt.QPoint", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "point", "qt.QPoint"), End),
    new Function(c, "map", _n_map1, None, Compiled, qt_QMatrix4x4_map_QPointF_QMatrix4x4_QPointF, Return, "qt.QPointF", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "point", "qt.QPointF"), End),
    // MISSING: map ("QVector3D"; QMatrix4x4 this, "const QVector3D &" point)
    // MISSING: map ("QVector4D"; QMatrix4x4 this, "const QVector4D &" point)
    new Function(c, "mapRect", _n_mapRect0, None, Compiled, qt_QMatrix4x4_mapRect_QRect_QMatrix4x4_QRect, Return, "qt.QRect", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "rect", "qt.QRect"), End),
    new Function(c, "mapRect", _n_mapRect1, None, Compiled, qt_QMatrix4x4_mapRect_QRectF_QMatrix4x4_QRectF, Return, "qt.QRectF", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "rect", "qt.QRectF"), End),
    // MISSING: mapVector ("QVector3D"; QMatrix4x4 this, "const QVector3D &" vector)
    // MISSING: normalMatrix ("QMatrix3x3"; QMatrix4x4 this)
    new Function(c, "optimize", _n_optimize0, None, Compiled, qt_QMatrix4x4_optimize_void_QMatrix4x4, Return, "void", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: ortho (void; QMatrix4x4 this, "float" left, "float" right, "float" bottom, "float" top, "float" nearPlane, "float" farPlane)
    new Function(c, "ortho", _n_ortho1, None, Compiled, qt_QMatrix4x4_ortho_void_QMatrix4x4_QRect, Return, "void", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "rect", "qt.QRect"), End),
    new Function(c, "ortho", _n_ortho2, None, Compiled, qt_QMatrix4x4_ortho_void_QMatrix4x4_QRectF, Return, "void", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "rect", "qt.QRectF"), End),
    // MISSING: perspective (void; QMatrix4x4 this, "float" verticalAngle, "float" aspectRatio, "float" nearPlane, "float" farPlane)
    // MISSING: rotate (void; QMatrix4x4 this, "float" angle, "const QVector3D &" vector)
    // MISSING: rotate (void; QMatrix4x4 this, "float" angle, "float" x, "float" y, "float" z)
    // MISSING: rotate (void; QMatrix4x4 this, "const QQuaternion &" quaternion)
    // MISSING: row ("QVector4D"; QMatrix4x4 this, int index)
    // MISSING: scale (void; QMatrix4x4 this, "const QVector3D &" vector)
    // MISSING: scale (void; QMatrix4x4 this, "float" x, "float" y)
    // MISSING: scale (void; QMatrix4x4 this, "float" x, "float" y, "float" z)
    // MISSING: scale (void; QMatrix4x4 this, "float" factor)
    // MISSING: setColumn (void; QMatrix4x4 this, int index, "const QVector4D &" value)
    // MISSING: setRow (void; QMatrix4x4 this, int index, "const QVector4D &" value)
    new Function(c, "setToIdentity", _n_setToIdentity0, None, Compiled, qt_QMatrix4x4_setToIdentity_void_QMatrix4x4, Return, "void", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: toGenericMatrix ("QGenericMatrix<N, M, float>"; QMatrix4x4 this)
    new Function(c, "toTransform", _n_toTransform0, None, Compiled, qt_QMatrix4x4_toTransform_QTransform_QMatrix4x4, Return, "qt.QTransform", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: toTransform (QTransform; QMatrix4x4 this, "float" distanceToPlane)
    // MISSING: translate (void; QMatrix4x4 this, "const QVector3D &" vector)
    // MISSING: translate (void; QMatrix4x4 this, "float" x, "float" y)
    // MISSING: translate (void; QMatrix4x4 this, "float" x, "float" y, "float" z)
    new Function(c, "transposed", _n_transposed0, None, Compiled, qt_QMatrix4x4_transposed_QMatrix4x4_QMatrix4x4, Return, "qt.QMatrix4x4", Parameters, new Param(c, "this", "qt.QMatrix4x4"), End),
    // MISSING: viewport (void; QMatrix4x4 this, "float" left, "float" bottom, "float" width, "float" height, "float" nearPlane, "float" farPlane)
    new Function(c, "viewport", _n_viewport1, None, Compiled, qt_QMatrix4x4_viewport_void_QMatrix4x4_QRectF, Return, "void", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "rect", "qt.QRectF"), End),
    // MISSING: QVariant ("QVariant operator"; QMatrix4x4 this)
    // MISSING: = ("QMatrix4x4 & operator*"; QMatrix4x4 this, QMatrix4x4 other)
    // MISSING: = ("QMatrix4x4 & operator*"; QMatrix4x4 this, "float" factor)
    // static functions
    EndArguments);
globalScope()->addSymbols(
    new Function(c, "!=", _n_operatorBang_EQ_0, Op, Compiled, qt_QMatrix4x4_operatorBang_EQ__bool_QMatrix4x4_QMatrix4x4, Return, "bool", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "other", "qt.QMatrix4x4"), End),
    new Function(c, "+=", _n_operatorPlus_EQ_0, Op, Compiled, qt_QMatrix4x4_operatorPlus_EQ__QMatrix4x4_QMatrix4x4_QMatrix4x4, Return, "qt.QMatrix4x4", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "other", "qt.QMatrix4x4"), End),
    new Function(c, "-=", _n_operatorMinus_EQ_0, Op, Compiled, qt_QMatrix4x4_operatorMinus_EQ__QMatrix4x4_QMatrix4x4_QMatrix4x4, Return, "qt.QMatrix4x4", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "other", "qt.QMatrix4x4"), End),
    // MISSING: /= (QMatrix4x4; QMatrix4x4 this, "float" divisor)
    new Function(c, "==", _n_operatorEQ_EQ_0, Op, Compiled, qt_QMatrix4x4_operatorEQ_EQ__bool_QMatrix4x4_QMatrix4x4, Return, "bool", Parameters, new Param(c, "this", "qt.QMatrix4x4"), new Param(c, "other", "qt.QMatrix4x4"), End),
    EndArguments);
scope()->addSymbols(
    EndArguments);

}

} // Mu
