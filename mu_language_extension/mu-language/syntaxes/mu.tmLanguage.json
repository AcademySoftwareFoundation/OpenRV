{
  "scopeName": "source.mu",
  "name": "Mu",
  "fileTypes": ["mu"],
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#classes"
    },
    {
      "include": "#punctuation"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.mu",
          "begin": "//",
          "end": "$",
          "patterns": [
            {
              "name": "keyword.other.region.mu",
              "match": "\\b(region|endregion)\\b"
            }
          ]
        },
        {
          "name": "comment.block.mu",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.mu",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.mu",
              "match": "\\\\."
            },
            {
              "name": "constant.other.placeholder.mu",
              "match": "%[sdif]"
            }
          ]
        },
        {
          "name": "string.quoted.single.mu",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.mu",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.mu",
          "match": "\\b(0|[1-9][0-9]*)\\b"
        },
        {
          "name": "constant.numeric.float.mu",
          "match": "\\b(0|[1-9][0-9]*)\\.[0-9]+\\b"
        },
        {
          "name": "constant.numeric.hex.mu",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.mu",
          "match": "\\b(if|else|for|while|do|break|continue|return|try|catch|throw|finally|switch|case|default|assert|let|var|global|local|static|const|final|abstract|virtual|override|public|private|protected|internal|extern|volatile|transient|synchronized|native|strictfp|enum|interface|package|import|using|namespace|module|require|use)\\b"
        },
        {
          "name": "keyword.operator.mu",
          "match": "\\b(and|or|not|in|is|as|new|delete|sizeof|typeof|instanceof|this|super|self|nil|true|false|void|null|undefined)\\b"
        },
        {
          "name": "keyword.other.mu",
          "match": "\\b(class|method|function|union|struct|enum|interface|type|alias|typedef|namespace|module|require|use|global|local|static|const|final|abstract|virtual|override|public|private|protected|internal|extern|volatile|transient|synchronized|native|strictfp)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.mu",
          "match": "\\b(bool|int|float|double|char|byte|short|long|string|void|Color|Vec2|Vec3|Vec4|Matrix4|Rect|Point|Size|Event|Exception|MenuState|MenuItem|Configuration|QWidget|QAction|QToolButton|QDockWidget|QProcess|QIOProcess|QTimer|QObject|QEvent|QKeyEvent|QMouseEvent|QWheelEvent|QResizeEvent|QCloseEvent|QShowEvent|QHideEvent|QFocusEvent|QEnterEvent|QLeaveEvent|QMoveEvent|QPaintEvent|QTimerEvent|QChildEvent|QCustomEvent|QDragEnterEvent|QDragLeaveEvent|QDragMoveEvent|QDropEvent|QHoverEvent|QInputMethodEvent|QInputMethodQueryEvent|QKeySequence|QShortcut|QShortcutEvent|QStatusTipEvent|QWhatsThisClickedEvent|QWhatsThisEvent|QWindowStateChangeEvent)\\b"
        },
        {
          "name": "storage.type.complex.mu",
          "match": "\\b[A-Z][a-zA-Z0-9_]*\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.mu",
          "match": "="
        },
        {
          "name": "keyword.operator.arithmetic.mu",
          "match": "\\+|-|\\*|/|%|\\+\\+|--"
        },
        {
          "name": "keyword.operator.comparison.mu",
          "match": "==|!=|<|>|<=|>="
        },
        {
          "name": "keyword.operator.logical.mu",
          "match": "&&|\\|\\||!"
        },
        {
          "name": "keyword.operator.bitwise.mu",
          "match": "&|\\||\\^|~|<<|>>"
        },
        {
          "name": "keyword.operator.other.mu",
          "match": "\\?|:|::|\\.|->|\\[|\\]|\\(|\\)|\\{|\\}|,|;"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.mu",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()"
        },
        {
          "name": "entity.name.function.lambda.mu",
          "match": "\\\\\\s*[a-zA-Z_][a-zA-Z0-9_]*"
        }
      ]
    },
    "classes": {
      "patterns": [
        {
          "name": "entity.name.type.class.mu",
          "match": "\\bclass\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.class.mu"
            }
          }
        },
        {
          "name": "entity.name.type.union.mu",
          "match": "\\bunion\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.union.mu"
            }
          }
        },
        {
          "name": "entity.name.type.enum.mu",
          "match": "\\benum\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.enum.mu"
            }
          }
        },
        {
          "name": "entity.name.type.interface.mu",
          "match": "\\binterface\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "entity.name.type.interface.mu"
            }
          }
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.mu",
          "match": ";"
        },
        {
          "name": "punctuation.separator.parameter.mu",
          "match": ","
        },
        {
          "name": "punctuation.section.block.mu",
          "match": "\\{|\\}"
        },
        {
          "name": "punctuation.section.brackets.mu",
          "match": "\\[|\\]"
        },
        {
          "name": "punctuation.section.parens.mu",
          "match": "\\(|\\)"
        }
      ]
    }
  }
}
