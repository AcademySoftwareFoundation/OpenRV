FROM rockylinux/rockylinux:9

LABEL maintainer="Open RV maintainer - https://github.com/AcademySoftwareFoundation/OpenRV"

USER root


# static versions:
ENV CMAKE_VERSION="3.31.6" \
    NINJA_VERSION="1.12.1"

# ─────────────────────────────────────────────
# CY2023 Configuration
# ─────────────────────────────────────────────
ENV VFX_PLATFORM="CY2023" \
    PYTHON_VERSION="3.10.13" \
    QT_VERSION="5.15.2" \
    QT_MODULES="debug_info qtcharts qtdatavis3d qtlottie qtnetworkauth qtquick3d qtquicktimeline qtscript qtwebengine qtwebglplugin" \
    QT_ARCHIVES="icu qt3d qtbase qtconnectivity qtdeclarative qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtsvg qttools qttranslations qtwayland qtwebchannel qtwebsockets qtwebview qtx11extras qtxmlpatterns"

# Install tools and build dependencies
RUN dnf upgrade -y \
    && dnf install -y epel-release \
    && dnf config-manager --set-enabled crb devel \
    && dnf install -y perl-CPAN

RUN cpan FindBin
    
RUN dnf groupinstall "Development Tools" -y \
    && dnf install -y \
    # RV requirements
    alsa-lib-devel \
    autoconf \
    automake \
    avahi-compat-libdns_sd-devel \
    bison \
    bzip2-devel \
    cmake-gui \
    curl-devel \
    flex \
    gcc \
    gcc-c++ \
    git \
    libX11-devel \
    libXcomposite \
    libXcomposite-devel \
    libXcursor \
    libXcursor-devel \
    libXdamage \
    libXext-devel \
    libXi-devel \
    libXi-devel \
    libXrandr \
    libXrandr-devel \
    libXrender-devel \
    libXtst \
    libXxf86vm-devel \
    libaio-devel \
    libffi-devel \
    libtool \
    libxkbcommon \
    libxkbcommon-devel \
    libxkbfile \
    mesa-libGLU \
    mesa-libGLU-devel \
    mesa-libOSMesa \
    mesa-libOSMesa-devel \
    meson \
    nasm \
    ncurses-devel \
    nss \
    ocl-icd \
    ocl-icd-devel \
    opencl-headers \
    openssl-devel \
    patch \
    patchelf \
    pcsc-lite \
    perl-FindBin \
    perl-IPC-Cmd \
    pulseaudio-libs \
    pulseaudio-libs-glib2 \
    qt5-qtbase-devel \
    readline-devel \
    sqlite-devel \
    systemd-devel \
    tcl-devel \
    tcsh \
    tk-devel \
    wget \
    xz-devel \
    yasm \
    zip \
    zlib-devel \
    && dnf clean all

# Disable the devel repo afterwards since dnf will warn about it
RUN dnf config-manager --set-disabled devel

# Install CMake
RUN curl -L https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh -o cmake.sh && \
    sh cmake.sh --prefix=/usr/local/ --skip-license && \
    rm -rf cmake.sh

# Create and run as user rv
RUN useradd -u 1001 -ms /bin/bash rv
WORKDIR /home/rv
USER rv

ENV PATH=/home/rv/.local/bin:/usr/local/bin:$PATH \
    QT_QPA_PLATFORM=offscreen 

# Install Ninja
RUN wget https://github.com/ninja-build/ninja/releases/download/v${NINJA_VERSION}/ninja-linux.zip && \
    unzip ninja-linux.zip -d ./ninja && \
    echo 'export PATH=/home/rv/ninja:$PATH' >> /home/rv/.bash_profile
ENV PATH /home/rv/ninja:$PATH

# Install pyenv
RUN git clone http://github.com/pyenv/pyenv.git /home/rv/.pyenv
ENV PYENV_ROOT /home/rv/.pyenv
ENV PATH $PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH
RUN echo 'export PYENV_ROOT="/home/rv/.pyenv"' >> ~/.bashrc && \
    echo 'export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc && \
    echo 'eval "$(pyenv init -)"' >> ~/.bashrc

# Python environment
RUN pyenv install ${PYTHON_VERSION}
RUN pyenv global ${PYTHON_VERSION}

RUN python -m pip install aqtinstall

# Install Qt
RUN python -m aqt install-qt linux desktop ${QT_VERSION} gcc_64 -O ~/Qt \
-m ${QT_MODULES} \
--archives ${QT_ARCHIVES}

CMD ["/bin/bash"]